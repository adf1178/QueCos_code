{"query_id":"17721263","repo_name":"freakynit/java-design-patterns","zip_link":"/freakynit/java-design-patterns/archive/master.zip","code":"public class App {  /**   * Program entry point.   *   * @param args command line args   */  public static void main(String[] args) {    // eagerly initialized singleton    IvoryTower ivoryTower1 = IvoryTower.getInstance();    IvoryTower ivoryTower2 = IvoryTower.getInstance();    System.out.println(\"ivoryTower1=\" + ivoryTower1);    System.out.println(\"ivoryTower2=\" + ivoryTower2);    // lazily initialized singleton    ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 = ThreadSafeLazyLoadedIvoryTower            .getInstance();    ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 = ThreadSafeLazyLoadedIvoryTower            .getInstance();    System.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);    System.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);    // enum singleton    EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;    EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;    System.out.println(\"enumIvoryTower1=\" + enumIvoryTower1);    System.out.println(\"enumIvoryTower2=\" + enumIvoryTower2);    InitializingOnDemandHolderIdiom demandHolderIdiom =            InitializingOnDemandHolderIdiom.getInstance();    System.out.println(demandHolderIdiom);    InitializingOnDemandHolderIdiom demandHolderIdiom2 =            InitializingOnDemandHolderIdiom.getInstance();    System.out.println(demandHolderIdiom2);    ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();    System.out.println(dcl1);    ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();    System.out.println(dcl2);  }}","code_tokens":["public","class","app","{","public","static","void","main","(","string","[","]","args",")","{","/","/","eagerly","initialized","singleton","ivory","tower","ivory","tower1","=","ivory","tower",".","get","instance","(",")",";","ivory","tower","ivory","tower2","=","ivory","tower",".","get","instance","(",")",";","system",".","out",".","println","(","\"","ivory","tower1","=","\"","+","ivory","tower1",")",";","system",".","out",".","println","(","\"","ivory","tower2","=","\"","+","ivory","tower2",")",";","/","/","lazily","initialized","singleton","thread","safe","lazy","loaded","ivory","tower","thread","safe","ivory","tower1","=","thread","safe","lazy","loaded","ivory","tower",".","get","instance","(",")",";","thread","safe","lazy","loaded","ivory","tower","thread","safe","ivory","tower2","=","thread","safe","lazy","loaded","ivory","tower",".","get","instance","(",")",";","system",".","out",".","println","(","\"","thread","safe","ivory","tower1","=","\"","+","thread","safe","ivory","tower1",")",";","system",".","out",".","println","(","\"","thread","safe","ivory","tower2","=","\"","+","thread","safe","ivory","tower2",")",";","/","/","enum","singleton","enum","ivory","tower","enum","ivory","tower1","=","enum","ivory","tower",".","instance",";","enum","ivory","tower","enum","ivory","tower2","=","enum","ivory","tower",".","instance",";","system",".","out",".","println","(","\"","enum","ivory","tower1","=","\"","+","enum","ivory","tower1",")",";","system",".","out",".","println","(","\"","enum","ivory","tower2","=","\"","+","enum","ivory","tower2",")",";","initializing","on","demand","holder","idiom","demand","holder","idiom","=","initializing","on","demand","holder","idiom",".","get","instance","(",")",";","system",".","out",".","println","(","demand","holder","idiom",")",";","initializing","on","demand","holder","idiom","demand","holder","idiom2","=","initializing","on","demand","holder","idiom",".","get","instance","(",")",";","system",".","out",".","println","(","demand","holder","idiom2",")",";","thread","safe","double","check","locking","dcl1","=","thread","safe","double","check","locking",".","get","instance","(",")",";","system",".","out",".","println","(","dcl1",")",";","thread","safe","double","check","locking","dcl2","=","thread","safe","double","check","locking",".","get","instance","(",")",";","system",".","out",".","println","(","dcl2",")",";","}","}"],"func_name":"App","func_name_tokens":["app"],"docstring":"  Singleton pattern ensures that the class ({@link IvoryTower}) can have only one  existing instance per Java classloader instance and provides global access to it.  <p/>  http://stackoverflow.com/questions/70689/what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java  <p/>  The risk of this pattern is that bugs resulting from setting a singleton up in  a distributed environment can be tricky to debug, since it will work fine if you  debug with a single classloader. Additionally, these problems can crop up a while  after the implementation of a singleton, since they may start out synchronous and  only become async with time, so you it may not be clear why you are seeing certain  changes in behaviour.  <p/>","docstring_tokens":["singleton","pattern","ensures","that","the","class","(","{","ivory","tower","}",")","can","have","only","one","existing","instance","per","java","classloader","instance","and","provides","global","access","to","it",".","<","p","/",">","<","p","/",">","the","risk","of","this","pattern","is","that","bugs","resulting","from","setting","a","singleton","up","in","a","distributed","environment","can","be","tricky","to","debug",",","since","it","will","work","fine","if","you","debug","with","a","single","classloader",".","additionally",",","these","problems","can","crop","up","a","while","after","the","implementation","of","a","singleton",",","since","they","may","start","out","synchronous","and","only","become","async","with","time",",","so","you","it","may","not","be","clear","why","you","are","seeing","certain","changes","in","behaviour",".","<","p","/",">"],"query":"Singleton across JVM or Application instance or Tomcat instance","query_tokens":["singleton","across","jvm","or","application","instance","or","tomcat","instance"]}
{"query_id":"8644960","repo_name":"kayabendroth/imagecompare","zip_link":"/kayabendroth/imagecompare/archive/master.zip","code":"public class SimpleImageComparisonProcessor implements ImageComparisonProcessor {    /**     * Overrides {@link ImageComparisonProcessor.DEFAULT_DEFINITION_OF_EQUAL}, if user hands-over     * her or his own equality percentage value.     */    private double myDefinitionOfEqual = -1;    /**     * This is the main value setting the overall quality of the comparison as it determines the     * number of reference pixels per image. The smaller the distance, the higher the quality.     */    private static final short DISTANCE_BETWEEN_REFERENCE_PIXELS = 28;    /**     * This is our target sample size. It will be used to initialize {@link sampleSize}.     */    private static final short TARGET_SAMPLE_SIZE = 12;    /**     * The size of the sampling area used in the averageAround() method.     */    private static int sampleSize = TARGET_SAMPLE_SIZE;    /**     * The scaling method to be used for scaling the test image.     *     * @see org.imgscalr.Scalr.Method.BALANCED     */    private static final Method SCALING_METHOD = Method.BALANCED;    /**     * The size of a pixel vector is three.     */    private static final int PIXEL_VECTOR_SIZE = 3;    /**     * One hundred.     */    private static final int ONE_HUNDRED = 100;    /**     * The maximum value for RGB is 255.     */    private static final int MAX_RGB_VALUE = 255;    /**     * To calculate the maximum possible distance between two images, we need a multiplier, which     * is based on the vector size and the maximum RGB value.     */    private static final double MAX_DISTANCE_MULTIPLIER =            (Math.sqrt((MAX_RGB_VALUE - 0) * (MAX_RGB_VALUE - 0)                     + (MAX_RGB_VALUE - 0) * (MAX_RGB_VALUE - 0)                     + (MAX_RGB_VALUE - 0) * (MAX_RGB_VALUE - 0)));    @Override    public final boolean compare(            final BufferedImage testImage,            final BufferedImage referenceImage,            final double definitionOfEqual) throws InvalidArgumentException {        /**         * Set all the values we need for the processing, starting with the definition of equal.         *         * Definition of equal is not allowed to be lower than zero or higher than one hundred.         */        if (definitionOfEqual < 0 || definitionOfEqual > ONE_HUNDRED) {            throw new InvalidArgumentException(\"Minmum percentage for equality is not allowed to \"                    + \"be lower than zero or higher than one hundred.\");        }        myDefinitionOfEqual = definitionOfEqual;        /**         * The width of the reference image. This value also determines the to-be-scaled-to-width         * of the test image.         */        final int referenceWidth = referenceImage.getWidth();        System.err.println(\"Reference width is: \" + referenceWidth);        System.err.println(\"Reference heigth is: \" + referenceImage.getHeight());        /**         * This number determines the total amount of reference pixels, which is         * numberOfReferencePixels * numberOfReferencePixels. The higher this value, the higher         * the overall quality of the comparison. It's determined only by         * DISTANCE_BETWEEN_REFERENCE_PIXELS.         *         * @see DISTANCE_BETWEEN_REFERENCE_PIXELS         */        final int refRegionsInOneDimension = referenceWidth / DISTANCE_BETWEEN_REFERENCE_PIXELS;        System.err.println(\"No. of reference regions in one dimension is: \"                + refRegionsInOneDimension);        /**         * The maximum possible distance between reference image and test image.         */        final double maxDistance =                calculateMaxDistance(refRegionsInOneDimension * refRegionsInOneDimension);        System.err.println(\"Max. distance is: \" + maxDistance);        /**         * The reference image \"signature\" (numberOfReferencePixels * numberOfReferencePixels         * representative pixels, each in R,G,B). We use instances of Color to make things simpler.         *         * Calculate the signature vector for the reference.         */        final Color[][] refSignature = calcSignature(referenceImage, refRegionsInOneDimension);        /**         * Re-scale the test image to match the width of our reference image. The library         * {@literal imgscalr} will be used with following options:         * <ul>         *   <li>the scaling method is determined by the class variable {@link SCALING_METHOD} and         *   </li>         *   <li>we re-scale in {@literal FIT_TO_WIDTH} mode always</li>         * </ul>         *         * @see http://www.thebuzzmedia.com/software/imgscalr-java-image-scaling-library         * @see SCALING_METHOD         * @see org.imgscalr.Scalr.Mode.FIT_TO_WIDTH         */        final BufferedImage testImageRescaled = Scalr.resize(testImage, SCALING_METHOD,                Mode.FIT_TO_WIDTH, referenceWidth, 1);        /**         * \"This operation leaves the original src image unmodified. If the caller is done with the         * src image after getting the result of this operation, remember to call Image.flush() on         * the src to free up native resources and make it easier for the GC to collect the unused         * image.\"         *         * @see org.imgscalr.Scalr.resize()         */        testImage.flush();        // Calculate the signature vector for the test image.        final Color[][] testSignature = calcSignature(testImageRescaled, refRegionsInOneDimension);        // Calculate the distance to the other image.        double distanceToReference = -1;        distanceToReference = calcDistance(testSignature, refSignature, refRegionsInOneDimension);        // How much of the test image is identical to the reference image?        final double percentageOfEquality =                ONE_HUNDRED - ((distanceToReference / maxDistance) * ONE_HUNDRED);        System.err.println(\"Calculated percentage of equality is: \" + percentageOfEquality);        /**         * The two images are considered to be equal, if the test image is identical to the         * reference image for at least the amount of {{@link DEFAULT_DEFINITION_OF_EQUAL}}.         *         * @see DEFAULT_DEFINITION_OF_EQUAL         */        return (percentageOfEquality >= myDefinitionOfEqual);    }    @Override    public final boolean compare(final BufferedImage testImage, final BufferedImage referenceImage)    {        boolean areEqual = false;        try {            areEqual = compare(testImage, referenceImage, DEFAULT_DEFINITION_OF_EQUAL);        } catch (final InvalidArgumentException iae) {            System.err.println(iae.getMessage());        }        return areEqual;    }    /**     * This method calculates and returns signature vectors for the input image.     *     * @param image The image to calculate the signature for.     * @param refRegionsInOneDimension The number of reference areas to be used.     * @return A two-dimensional {@link Color} array of the size {@link numberOfReferencePixels} *     * {@link numberOfReferencePixels}.     */    protected static final Color[][] calcSignature(            final BufferedImage image,            final int refRegionsInOneDimension) {        // Get memory for the signature.        final Color[][] sig = new Color[refRegionsInOneDimension][refRegionsInOneDimension];        /**         * For each of the XXX signature values average the pixels around it. Note that the         * coordinate of the central pixel is in proportions.         */        final float[] prop = new float[refRegionsInOneDimension];        /**         * No we need to fill this array.         * <p>         * This is an example of the original implementation, which had hard-coded values for a         * fixed region-per-axis-amount of five: {1f / 10f, 3f / 10f, 5f / 10f, 7f / 10f, 9f / 10f}.         * <p>         * But we want to be more dynamic. We calculate a {@literal propValueDistance} first.         */        final float propValueDistance =                (ONE_HUNDRED * 1f / (refRegionsInOneDimension + 1)) / ONE_HUNDRED * 1f;        System.err.println(\"propValueDistance is: \" + propValueDistance);        for (int i = 0; i < refRegionsInOneDimension; i++) {            prop[i] = (i + 1) * propValueDistance;        }        /**         * The following calculation is very important, as we may get IndexOutOfBounce errors         * otherwise. Depending on the @link NUMBER_OF_REFERENCE_PIXELS and the         * {@link DISTANCE_BETWEEN_REFERENCE_PIXELS} the {@link SAMPLE_SIZE} may be too high.         * <p>         * In order to prevent that, we then need to adjust the sample size.         */        final int imageWidth = image.getWidth();        final int imageHeight = image.getHeight();        // Upper boundaries for X- and Y-axis.        while (prop[refRegionsInOneDimension - 1] * imageWidth + sampleSize                >= imageWidth) {            sampleSize = sampleSize - 1;        }        while (prop[refRegionsInOneDimension - 1] * imageHeight + sampleSize >= imageHeight) {            sampleSize = sampleSize - 1;        }        // Lower boundaries for X- and Y-axis.        while (prop[0] * imageWidth - sampleSize <= 0) {            sampleSize = sampleSize - 1;        }        while (prop[0] * imageHeight - sampleSize <= 0) {            sampleSize = sampleSize - 1;        }        System.err.println(\"(New) SAMPLE_SIZE is: \" + sampleSize);        /**         * Then we calculate the average RGB value for every region.         */        for (int x = 0; x < refRegionsInOneDimension; x++) {            for (int y = 0; y < refRegionsInOneDimension; y++) {                sig[x][y] = averageAround(image, prop[x], prop[y]);            }        }        return sig;    }    /**     * This method averages the pixel values around a central point and return the average as an     * instance of Color. The point coordinates are proportional to the image.     *     * @param image The image to operate on.     * @param px The x-coordinate of the center of the area to inspect.     * @param py The y-coordinate of the center of the area to inspect.     * @return An averaged color value for the area of interest.     */    protected static Color averageAround(            final BufferedImage image,            final double px,            final double py) {        // Get memory for raw pixel, pixel and for the accumulator.        int rawPixel = -1;        final double[] accum = new double[] {0, 0, 0};        int numPixels = 0;        final int imageWidth = image.getWidth();        final int imageHeight = image.getHeight();        // Sample the pixels.        // Traverse along the x-axis of the image.        for (double x = px * imageWidth - sampleSize; x < px * imageWidth + sampleSize; x++)        {            // Travers along the y-axis of the image.            for (double y = py * imageHeight - sampleSize; y < py * imageHeight + sampleSize; y++) {                // Get the raw pixel value for the current pixel first.                rawPixel = image.getRGB((int) x, (int) y);                // Convert this to a double array.                final double[] pixel = getRgbArrayFromPixel(rawPixel);                accum[0] += pixel[0];                accum[1] += pixel[1];                accum[2] += pixel[2];                numPixels++;            }        }        // Average the accumulated values.        accum[0] /= numPixels;        accum[1] /= numPixels;        accum[2] /= numPixels;        return new Color((int) accum[0], (int) accum[1], (int) accum[2]);    }    /**     * This method calculates the distance between the signatures of an image and the reference one.     * The signatures for the image passed as the parameter are calculated inside the method.     *     * @param source The source signature array.     * @param target The target signature array.     * @param refRegionsInOneDimension The number of reference regions in one dimension.     * @return The calculated distance to the other image.     * @throws InvalidArgumentException If the source or target array length doesn't match     * refRegionsInOneDimension or if refRegionsInOneDimension is smaller than zero.     */    protected static final double calcDistance(            final Color[][] source,            final Color[][] target,            final int refRegionsInOneDimension) throws InvalidArgumentException {        // We can return zero immediately, if the number of reference regions is zero.        if (refRegionsInOneDimension == 0) { return 0; }        // Number of reference regions must be higher or equal than zero.        if (refRegionsInOneDimension < 0) {            throw new InvalidArgumentException(                    \"Number of reference regions must be zero or higher.\");        }        // Length of source and target array has to match number of regions.        if (source.length != refRegionsInOneDimension) {            throw new InvalidArgumentException(                    \"Source array length doesn't match number of regions.\");        }        if (target.length != refRegionsInOneDimension) {            throw new InvalidArgumentException(                    \"Target array length doesn't match number of regions.\");        }        /**         * There are several ways to calculate distances between two vectors, we will calculate the         * sum of the distances between the RGB values of pixels in the same positions.         */        double dist = 0;        for (int x = 0; x < refRegionsInOneDimension; x++) {            for (int y = 0; y < refRegionsInOneDimension; y++) {                final int r1 = source[x][y].getRed();                final int g1 = target[x][y].getGreen();                final int b1 = source[x][y].getBlue();                final int r2 = target[x][y].getRed();                final int g2 = source[x][y].getGreen();                final int b2 = target[x][y].getBlue();                final double tempDist = Math.sqrt((r1 - r2) * (r1 - r2) + (g1 - g2)                        * (g1 - g2) + (b1 - b2) * (b1 - b2));                dist += tempDist;            }        }        return dist;    }    /**     * Calculate the maximum distance between two images depending on the number of regions used.     *     * @param totalNumberOfRefRegions The number of regions used to compute the differences between     * two     * images.     * @return The maximum distance possible as a double value or -1, if the number of regions is     * below zero.     */    protected static final double calculateMaxDistance(final int totalNumberOfRefRegions) {        if (totalNumberOfRefRegions < 0) { return -1; }        return totalNumberOfRefRegions * MAX_DISTANCE_MULTIPLIER;    }    /**     * Image pixels are arrays of integers [32 bits/4Bytes]. Consider a 32 pixel as     * 11111111-00110011-00111110-00011110.     * <p>     * First Byte From Left [11111111]= Alpha     * Second Byte From Left[00110011]= Red     * Third Byte From Left [00111110]= Green     * Fourth Byte From Left[00011110]= Blue     *     * The following method will do a proper bit shift and logical AND operation to extract the     * correct values of different color/alpha components.     *     * @param pixel The raw pixel value from your image.     * @return A double array containing the RGB values.     * @see http://sanjaal.com/java/tag/java-image-get-pixel-information/     */    protected static final double[] getRgbArrayFromPixel(final int pixel) {        final double[] rgbArray = new double[PIXEL_VECTOR_SIZE];        final int redPosition = 16;        final int greenPosition = 8;        final int bitmask = 0x000000FF;        final int red = (pixel >> redPosition) & bitmask;        final int green = (pixel >> greenPosition) & bitmask;        final int blue = (pixel) & bitmask;        rgbArray[0] = red;        rgbArray[1] = green;        rgbArray[2] = blue;        return rgbArray;    }}","code_tokens":["public","class","simple","image","comparison","processor","implements","image","comparison","processor","{","private","double","my","definition","of","equal","=","-","1",";","private","static","final","short","distance","between","reference","pixels","=","28",";","private","static","final","short","target","sample","size","=","12",";","private","static","int","sample","size","=","target","sample","size",";","private","static","final","method","scaling","method","=","method",".","balanced",";","private","static","final","int","pixel","vector","size","=","3",";","private","static","final","int","one","hundred","=","100",";","private","static","final","int","max","rgb","value","=","255",";","private","static","final","double","max","distance","multiplier","=","(","math",".","sqrt","(","(","max","rgb","value","-","0",")","*","(","max","rgb","value","-","0",")","+","(","max","rgb","value","-","0",")","*","(","max","rgb","value","-","0",")","+","(","max","rgb","value","-","0",")","*","(","max","rgb","value","-","0",")",")",")",";","@","override","public","final","boolean","compare","(","final","buffered","image","test","image",",","final","buffered","image","reference","image",",","final","double","definition","of","equal",")","throws","invalid","argument","exception","{","if","(","definition","of","equal","<","0","|","|","definition","of","equal",">","one","hundred",")","{","throw","new","invalid","argument","exception","(","\"","minmum","percentage","for","equality","is","not","allowed","to","\"","+","\"","be","lower","than","zero","or","higher","than","one","hundred",".","\"",")",";","}","my","definition","of","equal","=","definition","of","equal",";","final","int","reference","width","=","reference","image",".","get","width","(",")",";","system",".","err",".","println","(","\"","reference","width","is",":","\"","+","reference","width",")",";","system",".","err",".","println","(","\"","reference","heigth","is",":","\"","+","reference","image",".","get","height","(",")",")",";","final","int","ref","regions","in","one","dimension","=","reference","width","/","distance","between","reference","pixels",";","system",".","err",".","println","(","\"","no",".","of","reference","regions","in","one","dimension","is",":","\"","+","ref","regions","in","one","dimension",")",";","final","double","max","distance","=","calculate","max","distance","(","ref","regions","in","one","dimension","*","ref","regions","in","one","dimension",")",";","system",".","err",".","println","(","\"","max",".","distance","is",":","\"","+","max","distance",")",";","final","color","[","]","[","]","ref","signature","=","calc","signature","(","reference","image",",","ref","regions","in","one","dimension",")",";","final","buffered","image","test","image","rescaled","=","scalr",".","resize","(","test","image",",","scaling","method",",","mode",".","fit","to","width",",","reference","width",",","1",")",";","test","image",".","flush","(",")",";","/","/","calculate","the","signature","vector","for","the","test","image",".","final","color","[","]","[","]","test","signature","=","calc","signature","(","test","image","rescaled",",","ref","regions","in","one","dimension",")",";","/","/","calculate","the","distance","to","the","other","image",".","double","distance","to","reference","=","-","1",";","distance","to","reference","=","calc","distance","(","test","signature",",","ref","signature",",","ref","regions","in","one","dimension",")",";","/","/","how","much","of","the","test","image","is","identical","to","the","reference","image","?","final","double","percentage","of","equality","=","one","hundred","-","(","(","distance","to","reference","/","max","distance",")","*","one","hundred",")",";","system",".","err",".","println","(","\"","calculated","percentage","of","equality","is",":","\"","+","percentage","of","equality",")",";","return","(","percentage","of","equality",">","=","my","definition","of","equal",")",";","}","@","override","public","final","boolean","compare","(","final","buffered","image","test","image",",","final","buffered","image","reference","image",")","{","boolean","are","equal","=","false",";","try","{","are","equal","=","compare","(","test","image",",","reference","image",",","default","definition","of","equal",")",";","}","catch","(","final","invalid","argument","exception","iae",")","{","system",".","err",".","println","(","iae",".","get","message","(",")",")",";","}","return","are","equal",";","}","protected","static","final","color","[","]","[","]","calc","signature","(","final","buffered","image","image",",","final","int","ref","regions","in","one","dimension",")","{","/","/","get","memory","for","the","signature",".","final","color","[","]","[","]","sig","=","new","color","[","ref","regions","in","one","dimension","]","[","ref","regions","in","one","dimension","]",";","final","float","[","]","prop","=","new","float","[","ref","regions","in","one","dimension","]",";","final","float","prop","value","distance","=","(","one","hundred","*","1f","/","(","ref","regions","in","one","dimension","+","1",")",")","/","one","hundred","*","1f",";","system",".","err",".","println","(","\"","prop","value","distance","is",":","\"","+","prop","value","distance",")",";","for","(","int","i","=","0",";","i","<","ref","regions","in","one","dimension",";","i","+","+",")","{","prop","[","i","]","=","(","i","+","1",")","*","prop","value","distance",";","}","final","int","image","width","=","image",".","get","width","(",")",";","final","int","image","height","=","image",".","get","height","(",")",";","/","/","upper","boundaries","for","x","-","and","y","-","axis",".","while","(","prop","[","ref","regions","in","one","dimension","-","1","]","*","image","width","+","sample","size",">","=","image","width",")","{","sample","size","=","sample","size","-","1",";","}","while","(","prop","[","ref","regions","in","one","dimension","-","1","]","*","image","height","+","sample","size",">","=","image","height",")","{","sample","size","=","sample","size","-","1",";","}","/","/","lower","boundaries","for","x","-","and","y","-","axis",".","while","(","prop","[","0","]","*","image","width","-","sample","size","<","=","0",")","{","sample","size","=","sample","size","-","1",";","}","while","(","prop","[","0","]","*","image","height","-","sample","size","<","=","0",")","{","sample","size","=","sample","size","-","1",";","}","system",".","err",".","println","(","\"","(","new",")","sample","size","is",":","\"","+","sample","size",")",";","for","(","int","x","=","0",";","x","<","ref","regions","in","one","dimension",";","x","+","+",")","{","for","(","int","y","=","0",";","y","<","ref","regions","in","one","dimension",";","y","+","+",")","{","sig","[","x","]","[","y","]","=","average","around","(","image",",","prop","[","x","]",",","prop","[","y","]",")",";","}","}","return","sig",";","}","protected","static","color","average","around","(","final","buffered","image","image",",","final","double","px",",","final","double","py",")","{","/","/","get","memory","for","raw","pixel",",","pixel","and","for","the","accumulator",".","int","raw","pixel","=","-","1",";","final","double","[","]","accum","=","new","double","[","]","{","0",",","0",",","0","}",";","int","num","pixels","=","0",";","final","int","image","width","=","image",".","get","width","(",")",";","final","int","image","height","=","image",".","get","height","(",")",";","/","/","sample","the","pixels",".","/","/","traverse","along","the","x","-","axis","of","the","image",".","for","(","double","x","=","px","*","image","width","-","sample","size",";","x","<","px","*","image","width","+","sample","size",";","x","+","+",")","{","/","/","travers","along","the","y","-","axis","of","the","image",".","for","(","double","y","=","py","*","image","height","-","sample","size",";","y","<","py","*","image","height","+","sample","size",";","y","+","+",")","{","/","/","get","the","raw","pixel","value","for","the","current","pixel","first",".","raw","pixel","=","image",".","get","rgb","(","(","int",")","x",",","(","int",")","y",")",";","/","/","convert","this","to","a","double","array",".","final","double","[","]","pixel","=","get","rgb","array","from","pixel","(","raw","pixel",")",";","accum","[","0","]","+","=","pixel","[","0","]",";","accum","[","1","]","+","=","pixel","[","1","]",";","accum","[","2","]","+","=","pixel","[","2","]",";","num","pixels","+","+",";","}","}","/","/","average","the","accumulated","values",".","accum","[","0","]","/","=","num","pixels",";","accum","[","1","]","/","=","num","pixels",";","accum","[","2","]","/","=","num","pixels",";","return","new","color","(","(","int",")","accum","[","0","]",",","(","int",")","accum","[","1","]",",","(","int",")","accum","[","2","]",")",";","}","protected","static","final","double","calc","distance","(","final","color","[","]","[","]","source",",","final","color","[","]","[","]","target",",","final","int","ref","regions","in","one","dimension",")","throws","invalid","argument","exception","{","/","/","we","can","return","zero","immediately",",","if","the","number","of","reference","regions","is","zero",".","if","(","ref","regions","in","one","dimension","=","=","0",")","{","return","0",";","}","/","/","number","of","reference","regions","must","be","higher","or","equal","than","zero",".","if","(","ref","regions","in","one","dimension","<","0",")","{","throw","new","invalid","argument","exception","(","\"","number","of","reference","regions","must","be","zero","or","higher",".","\"",")",";","}","/","/","length","of","source","and","target","array","has","to","match","number","of","regions",".","if","(","source",".","length","!","=","ref","regions","in","one","dimension",")","{","throw","new","invalid","argument","exception","(","\"","source","array","length","doesn","'","t","match","number","of","regions",".","\"",")",";","}","if","(","target",".","length","!","=","ref","regions","in","one","dimension",")","{","throw","new","invalid","argument","exception","(","\"","target","array","length","doesn","'","t","match","number","of","regions",".","\"",")",";","}","double","dist","=","0",";","for","(","int","x","=","0",";","x","<","ref","regions","in","one","dimension",";","x","+","+",")","{","for","(","int","y","=","0",";","y","<","ref","regions","in","one","dimension",";","y","+","+",")","{","final","int","r1","=","source","[","x","]","[","y","]",".","get","red","(",")",";","final","int","g1","=","target","[","x","]","[","y","]",".","get","green","(",")",";","final","int","b1","=","source","[","x","]","[","y","]",".","get","blue","(",")",";","final","int","r2","=","target","[","x","]","[","y","]",".","get","red","(",")",";","final","int","g2","=","source","[","x","]","[","y","]",".","get","green","(",")",";","final","int","b2","=","target","[","x","]","[","y","]",".","get","blue","(",")",";","final","double","temp","dist","=","math",".","sqrt","(","(","r1","-","r2",")","*","(","r1","-","r2",")","+","(","g1","-","g2",")","*","(","g1","-","g2",")","+","(","b1","-","b2",")","*","(","b1","-","b2",")",")",";","dist","+","=","temp","dist",";","}","}","return","dist",";","}","protected","static","final","double","calculate","max","distance","(","final","int","total","number","of","ref","regions",")","{","if","(","total","number","of","ref","regions","<","0",")","{","return","-","1",";","}","return","total","number","of","ref","regions","*","max","distance","multiplier",";","}","protected","static","final","double","[","]","get","rgb","array","from","pixel","(","final","int","pixel",")","{","final","double","[","]","rgb","array","=","new","double","[","pixel","vector","size","]",";","final","int","red","position","=","16",";","final","int","green","position","=","8",";","final","int","bitmask","=","0x000000ff",";","final","int","red","=","(","pixel",">",">","red","position",")","&","bitmask",";","final","int","green","=","(","pixel",">",">","green","position",")","&","bitmask",";","final","int","blue","=","(","pixel",")","&","bitmask",";","rgb","array","[","0","]","=","red",";","rgb","array","[","1","]","=","green",";","rgb","array","[","2","]","=","blue",";","return","rgb","array",";","}","}"],"func_name":"SimpleImageComparisonProcessor","func_name_tokens":["simple","image","comparison","processor"],"docstring":"  This is a simple image comparison processor. It only computes differences in the RGB values,  without trying to match key parts of the two images first.  <p>  Based on the article \"How do I compare two images to see if they are equal?\" by Rafael Santos.   @author kay.abendroth@raxion.net (Kay Abendroth), Rafael Santos  @since 1.0.0  @see http://www.lac.inpe.br/JIPCookbook/6050-howto-compareimages.jsp","docstring_tokens":["this","is","a","simple","image","comparison","processor",".","it","only","computes","differences","in","the","rgb","values",",","without","trying","to","match","key","parts","of","the","two","images","first",".","<","p",">","based","on","the","article","\"","how","do","i","compare","two","images","to","see","if","they","are","equal","?","\"","by","rafael","santos","."],"query":"Java library to compare image similarity [closed]","query_tokens":["java","library","to","compare","image","similarity","[","closed","]"]}
{"query_id":"13663604","repo_name":"twystd/tweetnacl-android","zip_link":"/twystd/tweetnacl-android/archive/master.zip","code":"public class TweetNaClZ {    // CONSTANTS    /**     * crypto_box_PUBLICKEYBYTES. The number of bytes in a crypto_box public     * key.     */    public static final int BOX_PUBLICKEYBYTES = 32;    /**     * crypto_box_SECRETKEYBYTES. The number of bytes in a crypto_box secret     * key.     */    public static final int BOX_SECRETKEYBYTES = 32;    /**     * crypto_box_BEFORENMBYTES. The number of bytes in an initialised     * crypto_box_beforenm byte array.     */    public static final int BOX_BEFORENMBYTES = 32;    /**      * crypto_box_NONCEBYTES. The number of bytes for a crypto_box nonce.      */    public static final int BOX_NONCEBYTES = 24;    /**     * crypto_box_ZEROBYTES. The number of zero padding bytes for a crypto_box     * message.     */    public static final int BOX_ZEROBYTES = 32;    /**     * crypto_box_BOXZEROBYTES. The number of zero padding bytes for a crypto_box     * ciphertext.     */    public static final int BOX_BOXZEROBYTES = 16;    /**     * crypto_core_hsalsa20_OUTPUTBYTES. The number of bytes in the calculated     * intermediate key.     */    public static final int HSALSA20_OUTPUTBYTES = 32;    /**     * crypto_core_hsalsa20_INPUTBYTES. The number of bytes in the shared secret     * for crypto_core_hsalsa20.     */    public static final int HSALSA20_INPUTBYTES = 16;    /**     * crypto_core_hsalsa20_KEYBYTES. The number of bytes in the secret key     * for crypto_core_hsalsa20.     */    public static final int HSALSA20_KEYBYTES = 32;    /**     * crypto_core_hsalsa20_INPUTBYTES. The number of bytes in the constant     * for crypto_core_hsalsa20.     */    public static final int HSALSA20_CONSTBYTES = 16;    /**     * crypto_core_salsa20_OUTPUTBYTES. The number of bytes in the calculated     * intermediate key.     */    public static final int SALSA20_OUTPUTBYTES = 64;    /**     * crypto_core_salsa20_INPUTBYTES. The number of bytes in the shared secret     * for crypto_core_salsa20.     */    public static final int SALSA20_INPUTBYTES = 16;    /**     * crypto_core_salsa20_KEYBYTES. The number of bytes in the secret key     * for crypto_core_salsa20.     */    public static final int SALSA20_KEYBYTES = 32;    /**     * crypto_core_salsa20_INPUTBYTES. The number of bytes in the constant     * for crypto_core_salsa20.     */    public static final int SALSA20_CONSTBYTES = 16;    /**     * crypto_hash_BYTES. The number of bytes returned by crypto_hash.     */    public static final int HASH_BYTES = 64;        /**     * crypto_hashblocks_STATEBYTES. The size of the 'state' byte array     * for crypto_hashblocks.     */    public static final int HASHBLOCKS_STATEBYTES = 64;        /**     * crypto_hashblocks_BLOCKBYTES. The block size for the message     * for crypto_hashblocks.     */    public static final int HASHBLOCKS_BLOCKBYTES = 128;        /**     * crypto_onetimeauth_BYTES. The number of bytes in the authenticator.     */    public static final int ONETIMEAUTH_BYTES = 16;    /**     * crypto_onetimeauth_KEYBYTES. The number of bytes in the secret key used to     * generate the authenticator.     */    public static final int ONETIMEAUTH_KEYBYTES = 32;    /**     * crypto_scalarmult_BYTES. The number of bytes in the group element component     * of scalar multiplication.     */    public static final int SCALARMULT_BYTES = 32;    /**     * crypto_scalarmult_SCALARBYTES. The number of bytes in the integer component of      * scalar multiplication.     */    public static final int SCALARMULT_SCALARBYTES = 32;    /**     * crypto_secretbox_KEYBYTES. The number of bytes in the secret key used with crypto_secretbox     * and crypto_secretbox_open.     */    public static final int SECRETBOX_KEYBYTES = 32;    /**     * crypto_secretbox_NONCEBYTES. The number of bytes in the nonce used with crypto_secretbox     * and crypto_secretbox_open.     */    public static final int SECRETBOX_NONCEBYTES = 24;    /**     * crypto_secretbox_ZEROBYTES. The number of zero padding bytes in the message for      * crypto_secretbox.     */    public static final int SECRETBOX_ZEROBYTES = 32;    /**     * crypto_secretbox_BOXZEROBYTES. The number of zero padding bytes in the ciphertext for      * crypto_secretbox_open.     */    public static final int SECRETBOX_BOXZEROBYTES = 16;    /**     * crypto_stream_KEYBYTES. The number of bytes in the secret key for crypto_stream.     */    public static final int STREAM_KEYBYTES = 32;    /**     * crypto_stream_NONCEBYTES. The number of bytes in the nonce for crypto_stream.     */    public static final int STREAM_NONCEBYTES = 24;    /**     * crypto_stream_salsa20_KEYBYTES. The number of bytes in the secret key for crypto_stream_salsa20.     */    public static final int STREAM_SALSA20_KEYBYTES = 32;    /**     * crypto_stream_salsa20_NONCEBYTES. The number of bytes in the nonce for crypto_stream_salsa20.     */    public static final int STREAM_SALSA20_NONCEBYTES = 8;    /**     * crypto_sign_BYTES. The number of bytes added to a message for a signature.     */    public static final int SIGN_BYTES = 64;    /**     * crypto_sign_PUBLICKEYBYTES. The number of bytes in a signing key pair public key.     */    public static final int SIGN_PUBLICKEYBYTES = 32;    /**     * crypto_sign_SECRETKEYBYTES. The number of bytes in a signing key pair secret key.     */    public static final int SIGN_SECRETKEYBYTES = 64;    /**     * crypto_verify_16_BYTES. The number of bytes in a 'secret' for the crypto_verify_16     * function.     */    public static final int VERIFY16_BYTES = 16;    /**     * crypto_verify_32_BYTES. The number of bytes in a 'secret' for the crypto_verify_32     * function.     */    public static final int VERIFY32_BYTES = 32;    // NATIVE METHODS     private native int jniCryptoBoxKeyPair       (byte[] publicKey,  byte[] secretKey);    private native int jniCryptoBox              (byte[] ciphertext, byte[] message,    byte[] nonce,byte[] publicKey,byte[] secretKey);    private native int jniCryptoBoxOpen          (byte[] message,    byte[] ciphertext, byte[] nonce,byte[] publicKey,byte[] secretKey);    private native int jniCryptoBoxBeforeNM      (byte[] key,        byte[] publicKey,  byte[] secretKey);    private native int jniCryptoBoxAfterNM       (byte[] ciphertext, byte[] message,    byte[] nonce, byte[] key);    private native int jniCryptoBoxOpenAfterNM   (byte[] ciphertext, byte[] message,    byte[] nonce, byte[] key);    private native int jniCryptoCoreHSalsa20     (byte[] out,        byte[] in,         byte[] key,   byte[] constant);    private native int jniCryptoCoreSalsa20      (byte[] out,        byte[] in,         byte[] key,   byte[] constant);    private native int jniCryptoHash             (byte[] hash,       byte[] message);    private native int jniCryptoHashBlocks       (byte[] state,      byte[] message);    private native int jniCryptoOneTimeAuth      (byte[] auth,       byte[] message,    byte[] key);    private native int jniCryptoOneTimeAuthVerify(byte[] signature,  byte[] message,    byte[] key);    private native int jniCryptoScalarMultBase   (byte[] q,          byte[] n);    private native int jniCryptoScalarMult       (byte[] q,          byte[] n,          byte[] p);    private native int jniCryptoSecretBox        (byte[] ciphertext, byte[] message,    byte[] nonce, byte[] key);    private native int jniCryptoSecretBoxOpen    (byte[] plaintext,  byte[] ciphertext, byte[] nonce, byte[] key);    private native int jniCryptoStream           (byte[] ciphertext, byte[] nonce,      byte[] key);    private native int jniCryptoStreamXor        (byte[] ciphertext, byte[] plaintext,  byte[] nonce, byte[] key);    private native int jniCryptoStreamSalsa20    (byte[] ciphertext, byte[] nonce,      byte[] key);    private native int jniCryptoStreamSalsa20Xor (byte[] ciphertext, byte[] plaintext,  byte[] nonce, byte[] key);    private native int jniCryptoSignKeyPair      (byte[] publicKey,  byte[] secretKey);    private native int jniCryptoSign             (byte[] signed,     byte[] message,    byte[] key);    private native int jniCryptoSignOpen         (byte[] message,    byte[] signed,     byte[] key);    private native int jniCryptoVerify16         (byte[] x,          byte[] y);    private native int jniCryptoVerify32         (byte[] x,          byte[] y);    // CLASS METHODS    /**     * Loads the TweetNaCl JNI library.     *      */    static {        System.loadLibrary(\"tweetnaclz\");    }    /** Validates a byte array, throwing an IllegalArgumentException if it is <code>null</code>     *      */    private static void validate(byte[] array,String name) {        if (array == null)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - may not be null\",name));    }        /** Validates a zero padded byte array, throwing an IllegalArgumentException if it is <code>null</code>     *  or does not have the correct number of zeroes.     */    private static void validatez(byte[] array,String name,int zeroes) {        if (array == null)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - may not be null\",name));                if (array.length < zeroes)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - must be at least %d bytes\",name,zeroes));                for (int i=0; i<zeroes; i++) {            if (array[i] != 0)                throw new IllegalArgumentException(String.format(\"Invalid '%s' - must be padded with %d zero bytes\",name,zeroes));        }    }    /** Validates a byte array, throwing an IllegalArgumentException if it is <code>null</code> or     *  not the correct length     *      */    private static void validate(byte[] array,String name,int length) {        if (array == null)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - may not be null\",name));                if (array.length != length)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - must be %d bytes\",name,length));    }        /** Validates a byte array, throwing an IllegalArgumentException if it is <code>null</code> or     *  not a multiple of length     *      */    private static void validatem(byte[] array,String name,int length) {        if (array == null)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - may not be null\",name));                if ((array.length % length) != 0)            throw new IllegalArgumentException(String.format(\"Invalid '%s' - must be a multiple of %d bytes\",name,length));    }    // PUBLIC API    /**     * Releases any resources acquired by the native library.     * <p>     * The current implementation does not acquire 'permanent' resources so     * invoking release when finished with the library is optional, but     * recommended.     *      */    public void release() {    }    /**     * Wrapper function for crypto_box_keypair.     * <p>     * Randomly generates a secret key and a corresponding public key. It     * guarantees that the secret key has BOX_PUBLICKEYBYTES bytes and that the     * public key has BOX_SECRETKEYBYTES bytes     *      * @return KeyPair initialised with a crypto_box public/private key pair.     *      * @throws KeyPairException     *             Thrown if the wrapped <code>crypto_box_keypair</code> function returns anything      *             other than 0.     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public KeyPair cryptoBoxKeyPair() throws KeyPairException {        byte[] publicKey = new byte[BOX_PUBLICKEYBYTES];        byte[] secretKey = new byte[BOX_SECRETKEYBYTES];        int    rc;        if ((rc = jniCryptoBoxKeyPair(publicKey, secretKey)) != 0) {            throw new KeyPairException(\"Error generating key pair [\" + Integer.toString(rc) + \"]\");        }        return new KeyPair(publicKey, secretKey);    }    /**     * Wrapper function for <code>crypto_box</code>.     * <p>     * Encrypts and authenticates the <code>message</code> using the <code>secretKey</code>,      * <code>publicKey</code> and <code>nonce</code>. The zero padding required by      * <code>crypto_box</code> is added internally.     *       * @param message     *            byte array containing the message to be encrypted. May not be     *            <code>null</code>.     * @param nonce     *            BOX_NONCEBYTES byte array containing the unique nonce to use     *            when encrypting the message.     * @param publicKey     *            BOX_PUBLICKEYBYTES byte array containing the public key of the     *            recipient.     * @param secretKey     *            BOX_SECRETKEYBYTES byte array containing the secret key of the     *            sender.     *      * @return Byte array with the encrypted message.     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_box</code> function returns anything other than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>     *             <li><code>nonce</code> is <code>null</code> or not exactly BOX_NONCEBYTES bytes     *             <li><code>publicKey</code> is <code>null</code> or not exactly BOX_PUBLICKEYBYTES bytes     *             <li><code>secretKey</code> is <code>null</code> or not exactly BOX_SECRETKEYBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public byte[] cryptoBox(final byte[] message, final byte[] nonce, byte[] publicKey, byte[] secretKey) throws EncryptException {        // ... validate        validate(nonce,    \"nonce\",    BOX_NONCEBYTES);        validate(publicKey,\"publicKey\",BOX_PUBLICKEYBYTES);        validate(secretKey,\"secretKey\",BOX_SECRETKEYBYTES);        // ... encrypt        byte[] c          = new byte[message.length];        byte[] ciphertext = new byte[message.length - BOX_BOXZEROBYTES];        int    rc;                if ((rc = jniCryptoBox(c, message, nonce, publicKey, secretKey)) != 0) {            throw new EncryptException(\"Error encrypting message [\" + Integer.toString(rc) + \"]\");        }        System.arraycopy(c,BOX_BOXZEROBYTES,ciphertext,0,ciphertext.length);        return ciphertext;    }        /**     * Wrapper function for <code>crypto_box_open</code>.     * <p>     * Verifies and decrypts the <code>ciphertext</code> using the <code>secretKey</code>,     * <code>publicKey</code>, and <code>nonce</code>. The zero padding required by      * <code>crypto_box_open</code> is added internally.     *      * @param ciphertext     *            byte array containing the ciphertext to be decrypted     * @param nonce     *            BOX_NONCEBYTES byte array containing the unique nonce to use     *            when encrypting the message.     * @param publicKey     *            BOX_PUBLICKEYBYTES byte array containing the public key of the     *            recipient.     * @param secretKey     *            BOX_SECRETKEYBYTES byte array containing the secret key of the     *            sender.     *      * @return Byte array with the plaintext.     *      * @throws DecryptException     *             Thrown if the wrapped <code>crypto_box_open</code> function returns anything      *             other than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>ciphertext</code> is <code>null</code>     *             <li><code>nonce</code> is <code>null</code> or not exactly BOX_NONCEBYTES bytes     *             <li><code>publicKey</code> is <code>null</code> or not exactly BOX_PUBLICKEYBYTES bytes     *             <li><code>secretKey</code> is <code>null</code> or not exactly BOX_SECRETKEYBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public byte[] cryptoBoxOpen(final byte[] ciphertext, final byte[] nonce, byte[] publicKey, byte[] secretKey) throws DecryptException {        // ... validate        validate(ciphertext,\"ciphertext\");        validate(nonce,     \"nonce\",    BOX_NONCEBYTES);        validate(publicKey, \"publicKey\",BOX_PUBLICKEYBYTES);        validate(secretKey, \"secretKey\",BOX_SECRETKEYBYTES);        // ... decrypt        byte[] message = new byte[ciphertext.length - BOX_BOXZEROBYTES];        int    rc;                if ((rc = jniCryptoBoxOpen(message, ciphertext, nonce, publicKey, secretKey)) != 0) {            throw new DecryptException(\"Error decrypting message [\" + Integer.toString(rc) + \"]\");        }        return message;    }        /**     * Wrapper function for <code>crypto_box_beforenm</code>.     * <p>     * Calculates a 32 byte shared key for the  hashed key-exchange described for curve 25519.     * <p>     * Applications that send several messages to the same receiver can gain speed by splitting      * <code>crypto_box</code> into two steps, <code>crypto_box_beforenm</code> and     * <code>crypto_box_afternm</code>.     * <p>     * Similarly, applications that receive several messages from the same sender can gain speed by      * splitting <code>crypto_box_open</code> into two steps, <code>crypto_box_beforenm</code> and     * <code>crypto_box_afternm_open</code>.     *       * @param publicKey     *            BOX_PUBLICKEYBYTES byte array containing the public key of the     *            recipient.     * @param secretKey     *            BOX_SECRETKEYBYTES byte array containing the secret key of the     *            sender.     *      * @return BOX_BEFORENMBYTES byte array initialised for use with     *         crypto_box_afternm and crypto_box_afternmopen     *      * @throws Exception     *             Thrown if crypto_box_beforenm returns anything other than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>publicKey</code> is <code>null</code> or not exactly BOX_PUBLICKEYBYTES bytes     *             <li><code>secretKey</code> is <code>null</code> or not exactly BOX_SECRETKEYBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public byte[] cryptoBoxBeforeNM(byte[] publicKey, byte[] secretKey) throws Exception {        // ... validate        validate(publicKey,\"publicKey\",BOX_PUBLICKEYBYTES);        validate(secretKey,\"secretKey\",BOX_SECRETKEYBYTES);        // ... encrypt        byte[] key = new byte[BOX_BEFORENMBYTES];        int    rc;        if ((rc = jniCryptoBoxBeforeNM(key, publicKey, secretKey)) != 0) {            throw new Exception(\"Error generating message key [\" + Integer.toString(rc) + \"]\");        }        return key;    }    /**     * Wrapper function for <code>crypto_box_afternm</code>.     * <p>     * <code>crypto_box_afternm</code> is identical to crypto_secret_box - it takes a      * BOX_NONCEBYTES byte nonce and a BOX_BEFORENMBYTES byte key and generates an     * authenticated stream cipher. The first 32 bytes of the output are used for the MAC,      * the rest are XOR'd with the plaintext to encrypt it.     * </p><p>     * The zero padding required by <code>crypto_box_afternm</code> is added internally.     * </p>     *      * @param message     *            byte array containing the message to be encrypted. May not be     *            <code>null</code>.     * @param nonce     *            BOX_NONCEBYTES byte array containing the unique nonce to use     *            when encrypting the message.     * @param key     *            BOX_BEFORENMBYTES byte array containing the byte array     *            initialised by crypto_box_beforenm.     *      * @return Byte array with the encrypted message.     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_box_afternm</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>     *             <li><code>nonce</code> is <code>null</code> or not exactly BOX_NONCEBYTES bytes     *             <li><code>key</code> is <code>null</code> or not exactly BOX_BEFORENMBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public byte[] cryptoBoxAfterNM(final byte[] message, final byte[] nonce, byte[] key) throws EncryptException {        // ... validate        validate(message,\"message\");        validate(nonce,  \"nonce\",BOX_NONCEBYTES);        validate(key,    \"key\",  BOX_BEFORENMBYTES);        // ... encrypt        byte[] ciphertext = new byte[message.length + BOX_ZEROBYTES - BOX_BOXZEROBYTES];        int    rc;        if ((rc = jniCryptoBoxAfterNM(ciphertext, message, nonce, key)) != 0) {            throw new EncryptException(\"Error encrypting message [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }    /**     * Wrapper function for <code>crypto_box_open_afternm</code>.     * <p>     * <code>crypto_box_open_afternm</code> is identical to crypto_secret_box_open - it      * takes a BOX_NONCEBYTES byte nonce and a BOX_BEFORENMBYTES byte key and generates an     * authenticated stream cipher. The first 32 bytes of the output are used for the MAC,      * the rest are XOR'd with the ciphertext to decrypt it.     * <p>     * The zero padding required by <code>crypto_box_open_afternm</code> is added internally.     *      * @param ciphertext     *            byte array containing the encrypted message to be encrypted.     * @param nonce     *            BOX_NONCEBYTES byte array containing the unique nonce to use     *            when encrypting the message.     * @param key     *            BOX_BEFORENMBYTES byte array containing the byte array     *            initialised by crypto_box_beforenm.     *      * @return Byte array with the encrypted message.     *      * @throws DecryptException     *             Thrown if the wrapped <code>crypto_box_open_afternm</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>ciphertext</code> is <code>null</code>     *             <li><code>nonce</code> is <code>null</code> or not exactly BOX_NONCEBYTES bytes     *             <li><code>key</code> is <code>null</code> or not exactly BOX_BEFORENMBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/box.html\">http://nacl.cr.yp.to/box.html</a>     */    public byte[] cryptoBoxOpenAfterNM(final byte[] ciphertext, final byte[] nonce, byte[] key) throws DecryptException {        // ... validate        validate(ciphertext,\"ciphertext\");        validate(nonce,     \"nonce\",BOX_NONCEBYTES);        validate(key,       \"key\",  BOX_BEFORENMBYTES);        // ... decrypt        byte[] message = new byte[ciphertext.length - BOX_BOXZEROBYTES];        int    rc;        if ((rc = jniCryptoBoxOpenAfterNM(message, ciphertext, nonce, key)) != 0) {            throw new DecryptException(\"Error decrypting message [\" + Integer.toString(rc) + \"]\");        }        return message;    }    /**     * Wrapper function for <code>crypto_core_hsalsa20</code>.     * <p>     * From the available documentation <code>crypto_core_hsalsa20</code> seemingly calculates an      * intermediate key for encrypting and authenticating packets. The intermediate key is calculated     * from a secret key and shared secret.      *      * @param in     *          HSALSA20_INPUTBYTES byte array containing the shared secret.     *               * @param key     *          HSALSA20_KEYBYTES byte array containing the secret key.     *      * @param constant     *          HSALSA20_CONSTBYTES byte array containing an apparently arbitrary 'constant' (IV ?) to be used     *          for the intermediate key calculation.     *               * @return HSALSA20_OUTPUTBYTES bytes with the intermediate key.     *      * @throws Exception     *             Thrown if the wrapped <code>crypto_box_hsalsa20</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>in</code> is <code>null</code>     *             <li><code>key</code> is <code>null</code> or not exactly HSALSA20_INPUTBYTES bytes     *             <li><code>constant</code> is <code>null</code> or not exactly HSALSA20_CONSTBYTES bytes     *             </ul>     */    public byte[] cryptoCoreHSalsa20(final byte[] in, final byte[] key, byte[] constant) throws Exception {        // ... validate        validate(in,      \"in\",      HSALSA20_INPUTBYTES);        validate(key,     \"key\",     HSALSA20_KEYBYTES);        validate(constant,\"constant\",HSALSA20_CONSTBYTES);        // ... invoke        byte[] out = new byte[HSALSA20_OUTPUTBYTES];        int    rc;        if ((rc = jniCryptoCoreHSalsa20(out, in, key, constant)) != 0) {            throw new Exception(\"Error calculating hsalsa20 [\" + Integer.toString(rc) + \"]\");        }        return out;    }    /**     * Wrapper function for <code>crypto_core_salsa20</code>.     * <p>     * From the available documentation <code>crypto_core_salsa20</code> seemingly calculates an      * intermediate key for encrypting and authenticating packets. The intermediate key is      * calculated from a secret key and shared secret.      *      * @param in     *          SALSA20_INPUTBYTES byte array containing the shared secret.     *               * @param key     *          SALSA20_KEYBYTES byte array containing the secret key.     *      * @param constant     *          SALSA20_CONSTBYTES byte array containing an apparently arbitrary 'constant' (IV ?) to be used     *          for the intermediate key calculation.     *               * @return SALSA20_OUTPUTBYTES bytes with the intermediate key.     *      * @throws Exception     *             Thrown if the wrapped <code>crypto_box_hsalsa20</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>in</code> is <code>null</code>     *             <li><code>key</code> is <code>null</code> or not exactly SALSA20_INPUTBYTES bytes     *             <li><code>constant</code> is <code>null</code> or not exactly SALSA20_CONSTBYTES bytes     *             </ul>     */    public byte[] cryptoCoreSalsa20(final byte[] in, final byte[] key, byte[] constant) throws Exception {        // ... validate        validate(in,      \"in\",      SALSA20_INPUTBYTES);        validate(key,     \"key\",     SALSA20_KEYBYTES);        validate(constant,\"constant\",SALSA20_CONSTBYTES);        // ... invoke        byte[] out = new byte[SALSA20_OUTPUTBYTES];        int    rc;        if ((rc = jniCryptoCoreSalsa20(out, in, key, constant)) != 0) {            throw new Exception(\"Error calculating salsa20 [\" + Integer.toString(rc) + \"]\");        }        return out;    }    /**     * Wrapper function for crypto_hash.     * <p>     * Calculates a SHA-512 hash of the message.      *      * @param message     *          message to be hashed.     *      * @return HASH_BYTES byte array with the message hash.     *      * @throws HashException     *             Thrown if the wrapped <code>crypto_hash</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/hash.html\">http://nacl.cr.yp.to/hash.html</a>     */    public byte[] cryptoHash(final byte[] message) throws HashException {        // ... validate        validate(message,\"message\");        // ... invoke        byte[] hash = new byte[HASH_BYTES];        int    rc;        if ((rc = jniCryptoHash(hash, message)) != 0) {            throw new HashException(\"Error calculating message hash [\" + Integer.toString(rc) + \"]\");        }        return hash;    }    /**     * Wrapper function for <code>crypto_hashblocks</code>.     * <p>     * Undocumented anywhere, but seems to be a designed to calculate the SHA-512 hash of a stream of     * blocks.     *      * @param state     *          current hash 'state'. Seemingly initialised to the initialisation vector for the first     *          block in a stream and thereafter the 'state' returned from a previous call to crypto_hash_blocks.     *      * @param blocks     *          byte array with length a multiple of HASHBLOCKS_BLOCKBYTES to add to the hash.     *      * @return HASHBLOCKS_STATEBYTES byte array with the message hash.     *      * @throws HashException     *             Thrown if the wrapped <code>crypto_hash_blocks</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>state</code> is <code>null</code> or not exactly HASHBLOCKS_STATEBYTES bytes     *             <li><code>blocks</code> is <code>null</code> or not a multiple of exactly HASHBLOCKS_BLOCKBYTES bytes     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/hash.html\">http://nacl.cr.yp.to/hash.html</a>     */    public byte[] cryptoHashBlocks(final byte[] state, final byte[] blocks) throws HashException {        // ... validate        validate (state,\"state\",  HASHBLOCKS_STATEBYTES);        validatem(blocks,\"blocks\",HASHBLOCKS_BLOCKBYTES);        // ... invoke        byte[] hash = state.clone();        int    rc;        if ((rc = jniCryptoHashBlocks(hash,blocks)) != 0) {            throw new HashException(\"Error calculating message hash [\" + Integer.toString(rc) + \"]\");        }        return hash;    }    /**     * Wrapper function for <code>crypto_onetimeauth</code>.     * <p>     * Uses the supplied secret key to calculate an authenticator for the message.       *      * @param message     *          message requiring an authenticator.     *      * @param key     *          secret key to be used to generate an authenticator.     *      * @return ONETIMEAUTH_BYTES bytes array containing the authenticator for the message.     *      * @throws AuthException     *             Thrown if the wrapped <code>crypto_onetimeauth</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>     *             <li><code>key</code> is <code>null</code> or not exactly ONETIMEAUTH_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/onetimeauth.html</a>     */    public byte[] cryptoOneTimeAuth(final byte[] message, final byte[] key) throws AuthException {        // ... validate        validate(message,\"message\");        validate(key,    \"key\",ONETIMEAUTH_KEYBYTES);        // ... invoke        byte[] authorisation = new byte[ONETIMEAUTH_BYTES];        int    rc;        if ((rc = jniCryptoOneTimeAuth(authorisation, message, key)) != 0) {            throw new AuthException(\"Error calculating one time auth [\" + Integer.toString(rc) + \"]\");        }        return authorisation;    }    /**     * Wrapper function for <code>crypto_onetimeauth_verify</code>.     * <p>     * Uses the supplied secret key to verify the authenticator for the message.       *      * @param authenticator     *          authenticator to verify against message and secret key.     *               * @param message     *          message requiring an authenticator.     *               * @param key     *          secret key to be used to verify an authenticator.     *               * @return <code>true</code> if the authenticator is valid,<code>false</code> otherwise.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>     *             <li><code>authenticator</code> is <code>null</code> or not exactly ONETIMEAUTH_BYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly ONETIMEAUTH_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/onetimeauth.html</a>     */    public boolean cryptoOneTimeAuthVerify(final byte[] authenticator, final byte[] message, final byte[] key) {        // ... validate        validate(message,      \"message\");        validate(authenticator,\"authenticator\",ONETIMEAUTH_BYTES);        validate(key,          \"key\",          ONETIMEAUTH_KEYBYTES);        // ... invoke                if (jniCryptoOneTimeAuthVerify(authenticator,message, key) == 0) {            return true;        }                return false;    }    /**     * Wrapper function for <code>crypto_scalarmult_base</code>.     * <p>     * Computes the scalar product of a standard group element and an integer <code>n</code>.     *      * @param n     *          integer with which to multiply the standard group element     *               * @return Group element calculated from the scalar multiplication of <code>n</code> and a     *         standard group element.     *      * @throws Exception     *             Thrown if the wrapped <code>crypto_scalarmult_base</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>n</code> is <code>null</code> or not exactly SCALARMULT_SCALARBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/scalarmult.html</a>     */    public byte[] cryptoScalarMultBase(final byte[] n) throws Exception {        // ... validate        validate(n,\"n\",SCALARMULT_SCALARBYTES);        // ... invoke        byte[] q = new byte[SCALARMULT_BYTES];        int    rc;        if ((rc = jniCryptoScalarMultBase(q, n)) != 0) {            throw new Exception(\"Error calculating scalarmult_base [\" + Integer.toString(rc) + \"]\");        }        return q;    }    /**     * Wrapper function for <code>crypto_scalarmult</code>.     * <p>     * Computes the scalar product of a group element <code>p</code> and an integer <code>n</code>.     *      * @param n     *          scalar with which to multiply the group element     *      * @param p     *          group element with which to multiply the scalar     *               * @return Group element calculated from the scalar multiplication of <code>n</code> and     *         <code>p</code>.     *      * @throws Exception     *             Thrown if the wrapped <code>crypto_scalarmult</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>n</code> is <code>null</code> or not exactly SCALARMULT_SCALARBYTES bytes.     *             <li><code>p</code> is <code>null</code> or not exactly SCALARMULT_BYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/scalarmult.html</a>     */    public byte[] cryptoScalarMult(final byte[] n, final byte[] p) throws Exception {        // ... validate        validate(n,\"n\",SCALARMULT_SCALARBYTES);        validate(p,\"p\",SCALARMULT_BYTES);        // ... invoke        byte[] q = new byte[SCALARMULT_BYTES];        int    rc;        if ((rc = jniCryptoScalarMult(q, n, p)) != 0) {            throw new Exception(\"Error calculating scalarmult [\" + Integer.toString(rc) + \"]\");        }        return q;    }    /**     * Wrapper function for <code>crypto_secretbox</code>.     * <p>     * Encrypts and authenticates a message using the supplied secret key and nonce. The      * zero padding required by <code>crypto_secretbox</code> is added internally.     *      * @param message     *          message to be encrypted and authenticated     *               * @param nonce     *          unique nonce to use for encryption and authentication     *               * @param key     *          secret key to use for encryption and authentication     *               * @return ciphertext with prepended message authenticator     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_secretbox</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>.     *             <li><code>nonce</code> is <code>null</code> or not exactly SECRETBOX_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly SECRETBOX_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/secretbox.html</a>     */    public byte[] cryptoSecretBox(final byte[] message, final byte[] nonce, final byte[] key) throws EncryptException {        // ... validate        validate(message,\"message\");        validate(nonce,  \"nonce\",SECRETBOX_NONCEBYTES);        validate(key,    \"key\",  SECRETBOX_KEYBYTES);        // ... invoke                byte[] ciphertext = new byte[message.length + SECRETBOX_BOXZEROBYTES];        int rc;        if ((rc = jniCryptoSecretBox(ciphertext, message, nonce, key)) != 0) {            throw new EncryptException(\"Error encrypting message [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }        /**     * Wrapper function for <code>crypto_secretbox_open</code>.     * <p>     * Verifies and decrypts the ciphertext using the supplied secret key and nonce. The      * zero padding required by <code>crypto_secretbox</code> is added internally.     *      * @param ciphertext     *          encrypted message to be verified and decrypted     *               * @param nonce     *          unique nonce to use for verification and decryption     *               * @param key     *          secret key to use for verification and decryption     *               * @return decrypted message     *      * @throws DecryptException     *             Thrown if the wrapped <code>crypto_secretbox_open</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>ciphertext</code> is <code>null</code>.     *             <li><code>nonce</code> is <code>null</code> or not exactly SECRETBOX_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly SECRETBOX_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/secretbox.html</a>     */    public byte[] cryptoSecretBoxOpen(final byte[] ciphertext, final byte[] nonce, final byte[] key) throws DecryptException {        // ... validate        validate(ciphertext,\"ciphertext\");        validate(nonce,     \"nonce\",SECRETBOX_NONCEBYTES);        validate(key,       \"key\",  SECRETBOX_KEYBYTES);        // ... invoke        byte[] message = new byte[ciphertext.length - SECRETBOX_BOXZEROBYTES];        int    rc;        if ((rc = jniCryptoSecretBoxOpen(message, ciphertext, nonce, key)) != 0) {            throw new DecryptException(\"Error decrypting message [\" + Integer.toString(rc) + \"]\");        }        return message;    }    /**     * Wrapper function for <code>crypto_stream</code>.     * <p>     * Produces a <code>length</code> stream as a function of the <code>key</code> and      * <code>nonce</code>.     *      * @param length     *          number of stream bytes to generate     *               * @param nonce     *          unique nonce to use to generate stream     *               * @param key     *          secret key to use to generate stream     *               * @return 'stream' byte array     *      * @throws Exception     *             Thrown if the wrapped <code>crypto_stream</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>length</code> is less than 0.     *             <li><code>nonce</code> is <code>null</code> or not exactly STREAM_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly STREAM_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/stream.html</a>     */    public byte[] cryptoStream(final int length, final byte[] nonce, final byte[] key) throws Exception {        // ... validate        if (length < 0) {            throw new IllegalArgumentException(\"Invalid 'length' - may not be negative\");        }                validate(nonce,\"nonce\",STREAM_NONCEBYTES);        validate(key,  \"key\",  STREAM_KEYBYTES);        // ... invoke        byte[] ciphertext = new byte[length];        int rc;        if ((rc = jniCryptoStream(ciphertext, nonce, key)) != 0) {            throw new Exception(\"Error generating stream [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }    /**     * Wrapper function for <code>crypto_stream_xor</code>.     * <p>     * Encrypts a message using a secret key and a nonce. The returned ciphertext is the      * plaintext XOR with the output of the stream generated by <code>crypto_stream</code>     * with the secret key and nonce.       *      * @param message     *          message to encrypt     *               * @param nonce     *          unique nonce to use to generate stream     *               * @param key     *          secret key to use to generate stream     *               * @return ciphertext     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_stream_xor</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>.     *             <li><code>nonce</code> is <code>null</code> or not exactly STREAM_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly STREAM_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/stream.html</a>     */    public byte[] cryptoStreamXor(final byte[] message, final byte[] nonce, final byte[] key) throws EncryptException {        // ... validate        validate(message,\"message\");        validate(nonce,  \"nonce\",STREAM_NONCEBYTES);        validate(key,    \"key\",  STREAM_KEYBYTES);        // ... invoke        byte[] ciphertext = new byte[message.length];        int rc;        if ((rc = jniCryptoStreamXor(ciphertext, message, nonce, key)) != 0) {            throw new EncryptException(\"Error encrypting plaintext [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }    /**     * Wrapper function for <code>crypto_stream_salsa20</code>.     * <p>     * Uses Salsa20 as the underlying cipher to produces a <code>length</code> stream      * as a function of the <code>key</code> and <code>nonce</code>.     *      * @param length     *          number of stream bytes to generate     *               * @param nonce     *          unique nonce to use to generate stream     *               * @param key     *          secret key to use to generate stream     *               * @return 'stream' byte array     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_stream_salsa20</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>length</code> is less than 0.     *             <li><code>nonce</code> is <code>null</code> or not exactly STREAM_SALSA20_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly STREAM_SALSA20_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/stream.html</a>     */    public byte[] cryptoStreamSalsa20(final int length, final byte[] nonce, final byte[] key) throws EncryptException {        // ... validate        if (length < 0) {            throw new IllegalArgumentException(\"Invalid 'length' - may not be negative\");        }        validate(nonce,\"nonce\",STREAM_SALSA20_NONCEBYTES);        validate(key,  \"key\",  STREAM_SALSA20_KEYBYTES);        // ... invoke        byte[] ciphertext = new byte[length];        int rc;        if ((rc = jniCryptoStreamSalsa20(ciphertext, nonce, key)) != 0) {            throw new EncryptException(\"Error encrypting plaintext [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }    /**     * Wrapper function for <code>crypto_stream_salsa20_xor</code>.     * <p>     * Encrypts a message using salsa20 as the underlying cipher. The returned ciphertext is     * the plaintext XOR with the output of the stream generated by <code>crypto_stream_salsa20</code>      * with the supplied secret key and nonce.       *      * @param message     *          message to encrypt     *               * @param nonce     *          unique nonce to use to generate stream     *               * @param key     *          secret key to use to generate stream     *               * @return ciphertext     *      * @throws EncryptException     *             Thrown if the wrapped <code>crypto_stream_salsa20_xor</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>.     *             <li><code>nonce</code> is <code>null</code> or not exactly STREAM_SALSA20_NONCEBYTES bytes.     *             <li><code>key</code> is <code>null</code> or not exactly STREAM_SALSA20_KEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/stream.html</a>     */    public byte[] cryptoStreamSalsa20Xor(final byte[] message, final byte[] nonce, final byte[] key) throws EncryptException {        // ... validate        validate(message,\"message\");        validate(nonce,  \"nonce\",STREAM_SALSA20_NONCEBYTES);        validate(key,    \"key\",  STREAM_SALSA20_KEYBYTES);        // ... invoke        byte[] ciphertext = new byte[message.length];        int rc;        if ((rc = jniCryptoStreamSalsa20Xor(ciphertext, message, nonce, key)) != 0) {            throw new EncryptException(\"Error encrypting plaintext [\" + Integer.toString(rc) + \"]\");        }        return ciphertext;    }    /**     * Wrapper function for <code>crypto_sign_keypair</code>.     * <p>     * Randomly generates a secret key and corresponding public key.     *      * @return Signing key pair     *      * @throws KeyPairException     *             Thrown if the wrapped <code>crypto_sign_keypair</code> returns anything other      *             than 0.     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/sign.html</a>     */    public KeyPair cryptoSignKeyPair() throws Exception {        byte[] publicKey = new byte[SIGN_PUBLICKEYBYTES];        byte[] secretKey = new byte[SIGN_SECRETKEYBYTES];        int rc;        if ((rc = jniCryptoSignKeyPair(publicKey, secretKey)) != 0) {            throw new KeyPairException(\"Error generating signing keypair [\" + Integer.toString(rc) + \"]\");        }        return new KeyPair(publicKey, secretKey);    }    /**     * Wrapper function for <code>crypto_sign</code>.     * <p>     * Signs a message using a secret key and returns the signed message.     *      * @param message     *          message to encrypt     *               * @param key     *          secret key for signing     *               * @return signed message     *      * @throws SignException     *             Thrown if the wrapped <code>crypto_sign</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>.     *             <li><code>key</code> is <code>null</code> or not exactly SIGN_SECRETKEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/sign.html</a>     */    public byte[] cryptoSign(final byte[] message, byte[] key) throws SignException {        // ... validate        validate(message,\"message\");        validate(key,    \"key\",SIGN_SECRETKEYBYTES);        // ... sign        byte[] signed = new byte[message.length + SIGN_BYTES];        int rc;        if ((rc = jniCryptoSign(signed, message, key)) != 0) {            throw new SignException(\"Error signing message [\" + Integer.toString(rc) + \"]\");        }        return signed;    }    /**     * Wrapper function for <code>crypto_sign_open</code>.     * <p>     * Verifies a signed message against a public key. Be aware that internally this method     * allocates an additional byte array the same length as the <code>message</code> for     * working space for crypto_sign_open.     * <p>     * The only way to really avoid the extra memory allocation is to return the allocated      * byte array which is SIGN_BYTES too long.      *      * @param signed     *          signed message to verify     *               * @param key     *          public key for message verification     *               * @return message     *      * @throws VerifyException     *             Thrown if the wrapped <code>crypto_sign_open</code> returns anything other      *             than 0.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>message</code> is <code>null</code>.     *             <li><code>key</code> is <code>null</code> or not exactly SIGN_PUBLICKEYBYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/sign.html</a>     */    public byte[] cryptoSignOpen(final byte[] signed, byte[] key) throws VerifyException {        // ... validate        validate(signed,\"signed\");        validate(key,   \"key\",SIGN_PUBLICKEYBYTES);        // ... sign        byte[] message = new byte[signed.length - SIGN_BYTES];        int rc;        if ((rc = jniCryptoSignOpen(message,signed, key)) != 0) {            throw new VerifyException(\"Error verifying message signature[\" + Integer.toString(rc) + \"]\");        }        return message;    }    /**     * Wrapper function for <code>crypto_verify_16</code>.     * <p>     * Compares two 'secrets' encoded as 16 byte arrays with a time independent of the content     * of the arrays.     *      * @param x     *          'secret' x     *               * @param y     *          'secret' y     *               * @return <code>true</code> if the two bytes arrays are identical, <code>false</code>     *         otherwise.     *      * @throws VerifyException     *             Thrown if the wrapped <code>crypto_verify_16</code> returns anything other      *             than 0 or -1.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>x</code> is <code>null</code> or not exactly VERIFY16_BYTES bytes.     *             <li><code>y</code> is <code>null</code> or not exactly VERIFY16_BYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/sign.html</a>     */    public boolean cryptoVerify16(final byte[] x, byte[] y) throws VerifyException {        // ... validate        if ((x == null) || (x.length != VERIFY16_BYTES)) {            throw new IllegalArgumentException(\"Invalid 'x' - must be \" + VERIFY16_BYTES + \" bytes\");        }        if ((y == null) || (y.length != VERIFY16_BYTES)) {            throw new IllegalArgumentException(\"Invalid 'y' - must be \" + VERIFY16_BYTES + \" bytes\");        }        // ... verify        switch (jniCryptoVerify16(x, y)) {        case 0:            return true;        case -1:            return false;        default:            throw new VerifyException(\"Invalid result from crypto_verify_16\");        }    }    /**     * Wrapper function for <code>crypto_verify_32</code>.     * <p>     * Compares two 'secrets' encoded as 32 byte arrays with a time independent of the content     * of the arrays.     *      * @param x     *          'secret' x     *               * @param y     *          'secret' y     *               * @return <code>true</code> if the two bytes arrays are identical, <code>false</code>     *         otherwise.     *      * @throws VerifyException     *             Thrown if the wrapped <code>crypto_verify_16</code> returns anything other      *             than 0 or -1.     *      * @throws IllegalArgumentException     *             Thrown if:     *             <ul>     *             <li><code>x</code> is <code>null</code> or not exactly VERIFY32_BYTES bytes.     *             <li><code>y</code> is <code>null</code> or not exactly VERIFY23_BYTES bytes.     *             </ul>     *      * @see <a href=\"http://nacl.cr.yp.to/onetimeauth.html\">http://nacl.cr.yp.to/sign.html</a>     */    public boolean cryptoVerify32(final byte[] x, byte[] y) throws VerifyException {        // ... validate        if ((x == null) || (x.length != VERIFY32_BYTES)) {            throw new IllegalArgumentException(\"Invalid 'x' - must be \" + VERIFY32_BYTES + \" bytes\");        }        if ((y == null) || (y.length != VERIFY32_BYTES)) {            throw new IllegalArgumentException(\"Invalid 'y' - must be \" + VERIFY32_BYTES + \" bytes\");        }        // ... verify        switch (jniCryptoVerify32(x, y)) {        case 0:            return true;        case -1:            return false;        default:            throw new VerifyException(\"Invalid result from crypto_verify_32\");        }    }    // INNER CLASSES    public static final class KeyPair {        public final byte[] publicKey;        public final byte[] secretKey;        private KeyPair(byte[] publicKey, byte[] secretKey) {            this.publicKey = publicKey.clone();            this.secretKey = secretKey.clone();        }    }}","code_tokens":["public","class","tweet","na","cl","z","{","/","/","constants","public","static","final","int","box","publickeybytes","=","32",";","public","static","final","int","box","secretkeybytes","=","32",";","public","static","final","int","box","beforenmbytes","=","32",";","public","static","final","int","box","noncebytes","=","24",";","public","static","final","int","box","zerobytes","=","32",";","public","static","final","int","box","boxzerobytes","=","16",";","public","static","final","int","hsalsa20","outputbytes","=","32",";","public","static","final","int","hsalsa20","inputbytes","=","16",";","public","static","final","int","hsalsa20","keybytes","=","32",";","public","static","final","int","hsalsa20","constbytes","=","16",";","public","static","final","int","salsa20","outputbytes","=","64",";","public","static","final","int","salsa20","inputbytes","=","16",";","public","static","final","int","salsa20","keybytes","=","32",";","public","static","final","int","salsa20","constbytes","=","16",";","public","static","final","int","hash","bytes","=","64",";","public","static","final","int","hashblocks","statebytes","=","64",";","public","static","final","int","hashblocks","blockbytes","=","128",";","public","static","final","int","onetimeauth","bytes","=","16",";","public","static","final","int","onetimeauth","keybytes","=","32",";","public","static","final","int","scalarmult","bytes","=","32",";","public","static","final","int","scalarmult","scalarbytes","=","32",";","public","static","final","int","secretbox","keybytes","=","32",";","public","static","final","int","secretbox","noncebytes","=","24",";","public","static","final","int","secretbox","zerobytes","=","32",";","public","static","final","int","secretbox","boxzerobytes","=","16",";","public","static","final","int","stream","keybytes","=","32",";","public","static","final","int","stream","noncebytes","=","24",";","public","static","final","int","stream","salsa20","keybytes","=","32",";","public","static","final","int","stream","salsa20","noncebytes","=","8",";","public","static","final","int","sign","bytes","=","64",";","public","static","final","int","sign","publickeybytes","=","32",";","public","static","final","int","sign","secretkeybytes","=","64",";","public","static","final","int","verify16","bytes","=","16",";","public","static","final","int","verify32","bytes","=","32",";","/","/","native","methods","private","native","int","jni","crypto","box","key","pair","(","byte","[","]","public","key",",","byte","[","]","secret","key",")",";","private","native","int","jni","crypto","box","(","byte","[","]","ciphertext",",","byte","[","]","message",",","byte","[","]","nonce",",","byte","[","]","public","key",",","byte","[","]","secret","key",")",";","private","native","int","jni","crypto","box","open","(","byte","[","]","message",",","byte","[","]","ciphertext",",","byte","[","]","nonce",",","byte","[","]","public","key",",","byte","[","]","secret","key",")",";","private","native","int","jni","crypto","box","before","nm","(","byte","[","]","key",",","byte","[","]","public","key",",","byte","[","]","secret","key",")",";","private","native","int","jni","crypto","box","after","nm","(","byte","[","]","ciphertext",",","byte","[","]","message",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","box","open","after","nm","(","byte","[","]","ciphertext",",","byte","[","]","message",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","core","h","salsa20","(","byte","[","]","out",",","byte","[","]","in",",","byte","[","]","key",",","byte","[","]","constant",")",";","private","native","int","jni","crypto","core","salsa20","(","byte","[","]","out",",","byte","[","]","in",",","byte","[","]","key",",","byte","[","]","constant",")",";","private","native","int","jni","crypto","hash","(","byte","[","]","hash",",","byte","[","]","message",")",";","private","native","int","jni","crypto","hash","blocks","(","byte","[","]","state",",","byte","[","]","message",")",";","private","native","int","jni","crypto","one","time","auth","(","byte","[","]","auth",",","byte","[","]","message",",","byte","[","]","key",")",";","private","native","int","jni","crypto","one","time","auth","verify","(","byte","[","]","signature",",","byte","[","]","message",",","byte","[","]","key",")",";","private","native","int","jni","crypto","scalar","mult","base","(","byte","[","]","q",",","byte","[","]","n",")",";","private","native","int","jni","crypto","scalar","mult","(","byte","[","]","q",",","byte","[","]","n",",","byte","[","]","p",")",";","private","native","int","jni","crypto","secret","box","(","byte","[","]","ciphertext",",","byte","[","]","message",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","secret","box","open","(","byte","[","]","plaintext",",","byte","[","]","ciphertext",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","stream","(","byte","[","]","ciphertext",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","stream","xor","(","byte","[","]","ciphertext",",","byte","[","]","plaintext",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","stream","salsa20","(","byte","[","]","ciphertext",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","stream","salsa20xor","(","byte","[","]","ciphertext",",","byte","[","]","plaintext",",","byte","[","]","nonce",",","byte","[","]","key",")",";","private","native","int","jni","crypto","sign","key","pair","(","byte","[","]","public","key",",","byte","[","]","secret","key",")",";","private","native","int","jni","crypto","sign","(","byte","[","]","signed",",","byte","[","]","message",",","byte","[","]","key",")",";","private","native","int","jni","crypto","sign","open","(","byte","[","]","message",",","byte","[","]","signed",",","byte","[","]","key",")",";","private","native","int","jni","crypto","verify16","(","byte","[","]","x",",","byte","[","]","y",")",";","private","native","int","jni","crypto","verify32","(","byte","[","]","x",",","byte","[","]","y",")",";","/","/","class","methods","static","{","system",".","load","library","(","\"","tweetnaclz","\"",")",";","}","private","static","void","validate","(","byte","[","]","array",",","string","name",")","{","if","(","array","=","=","null",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","may","not","be","null","\"",",","name",")",")",";","}","private","static","void","validatez","(","byte","[","]","array",",","string","name",",","int","zeroes",")","{","if","(","array","=","=","null",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","may","not","be","null","\"",",","name",")",")",";","if","(","array",".","length","<","zeroes",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","must","be","at","least","%","d","bytes","\"",",","name",",","zeroes",")",")",";","for","(","int","i","=","0",";","i","<","zeroes",";","i","+","+",")","{","if","(","array","[","i","]","!","=","0",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","must","be","padded","with","%","d","zero","bytes","\"",",","name",",","zeroes",")",")",";","}","}","private","static","void","validate","(","byte","[","]","array",",","string","name",",","int","length",")","{","if","(","array","=","=","null",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","may","not","be","null","\"",",","name",")",")",";","if","(","array",".","length","!","=","length",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","must","be","%","d","bytes","\"",",","name",",","length",")",")",";","}","private","static","void","validatem","(","byte","[","]","array",",","string","name",",","int","length",")","{","if","(","array","=","=","null",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","may","not","be","null","\"",",","name",")",")",";","if","(","(","array",".","length","%","length",")","!","=","0",")","throw","new","illegal","argument","exception","(","string",".","format","(","\"","invalid","'","%","s","'","-","must","be","a","multiple","of","%","d","bytes","\"",",","name",",","length",")",")",";","}","/","/","public","api","public","void","release","(",")","{","}","public","key","pair","crypto","box","key","pair","(",")","throws","key","pair","exception","{","byte","[","]","public","key","=","new","byte","[","box","publickeybytes","]",";","byte","[","]","secret","key","=","new","byte","[","box","secretkeybytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","key","pair","(","public","key",",","secret","key",")",")","!","=","0",")","{","throw","new","key","pair","exception","(","\"","error","generating","key","pair","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","new","key","pair","(","public","key",",","secret","key",")",";","}","public","byte","[","]","crypto","box","(","final","byte","[","]","message",",","final","byte","[","]","nonce",",","byte","[","]","public","key",",","byte","[","]","secret","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","validate","(","nonce",",","\"","nonce","\"",",","box","noncebytes",")",";","validate","(","public","key",",","\"","public","key","\"",",","box","publickeybytes",")",";","validate","(","secret","key",",","\"","secret","key","\"",",","box","secretkeybytes",")",";","/","/",".",".",".","encrypt","byte","[","]","c","=","new","byte","[","message",".","length","]",";","byte","[","]","ciphertext","=","new","byte","[","message",".","length","-","box","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","(","c",",","message",",","nonce",",","public","key",",","secret","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","system",".","arraycopy","(","c",",","box","boxzerobytes",",","ciphertext",",","0",",","ciphertext",".","length",")",";","return","ciphertext",";","}","public","byte","[","]","crypto","box","open","(","final","byte","[","]","ciphertext",",","final","byte","[","]","nonce",",","byte","[","]","public","key",",","byte","[","]","secret","key",")","throws","decrypt","exception","{","/","/",".",".",".","validate","validate","(","ciphertext",",","\"","ciphertext","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","box","noncebytes",")",";","validate","(","public","key",",","\"","public","key","\"",",","box","publickeybytes",")",";","validate","(","secret","key",",","\"","secret","key","\"",",","box","secretkeybytes",")",";","/","/",".",".",".","decrypt","byte","[","]","message","=","new","byte","[","ciphertext",".","length","-","box","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","open","(","message",",","ciphertext",",","nonce",",","public","key",",","secret","key",")",")","!","=","0",")","{","throw","new","decrypt","exception","(","\"","error","decrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","message",";","}","public","byte","[","]","crypto","box","before","nm","(","byte","[","]","public","key",",","byte","[","]","secret","key",")","throws","exception","{","/","/",".",".",".","validate","validate","(","public","key",",","\"","public","key","\"",",","box","publickeybytes",")",";","validate","(","secret","key",",","\"","secret","key","\"",",","box","secretkeybytes",")",";","/","/",".",".",".","encrypt","byte","[","]","key","=","new","byte","[","box","beforenmbytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","before","nm","(","key",",","public","key",",","secret","key",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","generating","message","key","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","key",";","}","public","byte","[","]","crypto","box","after","nm","(","final","byte","[","]","message",",","final","byte","[","]","nonce",",","byte","[","]","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","box","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","box","beforenmbytes",")",";","/","/",".",".",".","encrypt","byte","[","]","ciphertext","=","new","byte","[","message",".","length","+","box","zerobytes","-","box","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","after","nm","(","ciphertext",",","message",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","byte","[","]","crypto","box","open","after","nm","(","final","byte","[","]","ciphertext",",","final","byte","[","]","nonce",",","byte","[","]","key",")","throws","decrypt","exception","{","/","/",".",".",".","validate","validate","(","ciphertext",",","\"","ciphertext","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","box","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","box","beforenmbytes",")",";","/","/",".",".",".","decrypt","byte","[","]","message","=","new","byte","[","ciphertext",".","length","-","box","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","box","open","after","nm","(","message",",","ciphertext",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","decrypt","exception","(","\"","error","decrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","message",";","}","public","byte","[","]","crypto","core","h","salsa20","(","final","byte","[","]","in",",","final","byte","[","]","key",",","byte","[","]","constant",")","throws","exception","{","/","/",".",".",".","validate","validate","(","in",",","\"","in","\"",",","hsalsa20","inputbytes",")",";","validate","(","key",",","\"","key","\"",",","hsalsa20","keybytes",")",";","validate","(","constant",",","\"","constant","\"",",","hsalsa20","constbytes",")",";","/","/",".",".",".","invoke","byte","[","]","out","=","new","byte","[","hsalsa20","outputbytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","core","h","salsa20","(","out",",","in",",","key",",","constant",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","calculating","hsalsa20","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","out",";","}","public","byte","[","]","crypto","core","salsa20","(","final","byte","[","]","in",",","final","byte","[","]","key",",","byte","[","]","constant",")","throws","exception","{","/","/",".",".",".","validate","validate","(","in",",","\"","in","\"",",","salsa20","inputbytes",")",";","validate","(","key",",","\"","key","\"",",","salsa20","keybytes",")",";","validate","(","constant",",","\"","constant","\"",",","salsa20","constbytes",")",";","/","/",".",".",".","invoke","byte","[","]","out","=","new","byte","[","salsa20","outputbytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","core","salsa20","(","out",",","in",",","key",",","constant",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","calculating","salsa20","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","out",";","}","public","byte","[","]","crypto","hash","(","final","byte","[","]","message",")","throws","hash","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","/","/",".",".",".","invoke","byte","[","]","hash","=","new","byte","[","hash","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","hash","(","hash",",","message",")",")","!","=","0",")","{","throw","new","hash","exception","(","\"","error","calculating","message","hash","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","hash",";","}","public","byte","[","]","crypto","hash","blocks","(","final","byte","[","]","state",",","final","byte","[","]","blocks",")","throws","hash","exception","{","/","/",".",".",".","validate","validate","(","state",",","\"","state","\"",",","hashblocks","statebytes",")",";","validatem","(","blocks",",","\"","blocks","\"",",","hashblocks","blockbytes",")",";","/","/",".",".",".","invoke","byte","[","]","hash","=","state",".","clone","(",")",";","int","rc",";","if","(","(","rc","=","jni","crypto","hash","blocks","(","hash",",","blocks",")",")","!","=","0",")","{","throw","new","hash","exception","(","\"","error","calculating","message","hash","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","hash",";","}","public","byte","[","]","crypto","one","time","auth","(","final","byte","[","]","message",",","final","byte","[","]","key",")","throws","auth","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","key",",","\"","key","\"",",","onetimeauth","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","authorisation","=","new","byte","[","onetimeauth","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","one","time","auth","(","authorisation",",","message",",","key",")",")","!","=","0",")","{","throw","new","auth","exception","(","\"","error","calculating","one","time","auth","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","authorisation",";","}","public","boolean","crypto","one","time","auth","verify","(","final","byte","[","]","authenticator",",","final","byte","[","]","message",",","final","byte","[","]","key",")","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","authenticator",",","\"","authenticator","\"",",","onetimeauth","bytes",")",";","validate","(","key",",","\"","key","\"",",","onetimeauth","keybytes",")",";","/","/",".",".",".","invoke","if","(","jni","crypto","one","time","auth","verify","(","authenticator",",","message",",","key",")","=","=","0",")","{","return","true",";","}","return","false",";","}","public","byte","[","]","crypto","scalar","mult","base","(","final","byte","[","]","n",")","throws","exception","{","/","/",".",".",".","validate","validate","(","n",",","\"","n","\"",",","scalarmult","scalarbytes",")",";","/","/",".",".",".","invoke","byte","[","]","q","=","new","byte","[","scalarmult","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","scalar","mult","base","(","q",",","n",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","calculating","scalarmult","base","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","q",";","}","public","byte","[","]","crypto","scalar","mult","(","final","byte","[","]","n",",","final","byte","[","]","p",")","throws","exception","{","/","/",".",".",".","validate","validate","(","n",",","\"","n","\"",",","scalarmult","scalarbytes",")",";","validate","(","p",",","\"","p","\"",",","scalarmult","bytes",")",";","/","/",".",".",".","invoke","byte","[","]","q","=","new","byte","[","scalarmult","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","scalar","mult","(","q",",","n",",","p",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","calculating","scalarmult","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","q",";","}","public","byte","[","]","crypto","secret","box","(","final","byte","[","]","message",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","secretbox","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","secretbox","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","ciphertext","=","new","byte","[","message",".","length","+","secretbox","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","secret","box","(","ciphertext",",","message",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","byte","[","]","crypto","secret","box","open","(","final","byte","[","]","ciphertext",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","decrypt","exception","{","/","/",".",".",".","validate","validate","(","ciphertext",",","\"","ciphertext","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","secretbox","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","secretbox","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","message","=","new","byte","[","ciphertext",".","length","-","secretbox","boxzerobytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","secret","box","open","(","message",",","ciphertext",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","decrypt","exception","(","\"","error","decrypting","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","message",";","}","public","byte","[","]","crypto","stream","(","final","int","length",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","exception","{","/","/",".",".",".","validate","if","(","length","<","0",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","length","'","-","may","not","be","negative","\"",")",";","}","validate","(","nonce",",","\"","nonce","\"",",","stream","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","stream","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","ciphertext","=","new","byte","[","length","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","stream","(","ciphertext",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","exception","(","\"","error","generating","stream","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","byte","[","]","crypto","stream","xor","(","final","byte","[","]","message",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","stream","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","stream","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","ciphertext","=","new","byte","[","message",".","length","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","stream","xor","(","ciphertext",",","message",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","plaintext","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","byte","[","]","crypto","stream","salsa20","(","final","int","length",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","if","(","length","<","0",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","length","'","-","may","not","be","negative","\"",")",";","}","validate","(","nonce",",","\"","nonce","\"",",","stream","salsa20","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","stream","salsa20","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","ciphertext","=","new","byte","[","length","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","stream","salsa20","(","ciphertext",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","plaintext","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","byte","[","]","crypto","stream","salsa20xor","(","final","byte","[","]","message",",","final","byte","[","]","nonce",",","final","byte","[","]","key",")","throws","encrypt","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","nonce",",","\"","nonce","\"",",","stream","salsa20","noncebytes",")",";","validate","(","key",",","\"","key","\"",",","stream","salsa20","keybytes",")",";","/","/",".",".",".","invoke","byte","[","]","ciphertext","=","new","byte","[","message",".","length","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","stream","salsa20xor","(","ciphertext",",","message",",","nonce",",","key",")",")","!","=","0",")","{","throw","new","encrypt","exception","(","\"","error","encrypting","plaintext","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","ciphertext",";","}","public","key","pair","crypto","sign","key","pair","(",")","throws","exception","{","byte","[","]","public","key","=","new","byte","[","sign","publickeybytes","]",";","byte","[","]","secret","key","=","new","byte","[","sign","secretkeybytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","sign","key","pair","(","public","key",",","secret","key",")",")","!","=","0",")","{","throw","new","key","pair","exception","(","\"","error","generating","signing","keypair","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","new","key","pair","(","public","key",",","secret","key",")",";","}","public","byte","[","]","crypto","sign","(","final","byte","[","]","message",",","byte","[","]","key",")","throws","sign","exception","{","/","/",".",".",".","validate","validate","(","message",",","\"","message","\"",")",";","validate","(","key",",","\"","key","\"",",","sign","secretkeybytes",")",";","/","/",".",".",".","sign","byte","[","]","signed","=","new","byte","[","message",".","length","+","sign","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","sign","(","signed",",","message",",","key",")",")","!","=","0",")","{","throw","new","sign","exception","(","\"","error","signing","message","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","signed",";","}","public","byte","[","]","crypto","sign","open","(","final","byte","[","]","signed",",","byte","[","]","key",")","throws","verify","exception","{","/","/",".",".",".","validate","validate","(","signed",",","\"","signed","\"",")",";","validate","(","key",",","\"","key","\"",",","sign","publickeybytes",")",";","/","/",".",".",".","sign","byte","[","]","message","=","new","byte","[","signed",".","length","-","sign","bytes","]",";","int","rc",";","if","(","(","rc","=","jni","crypto","sign","open","(","message",",","signed",",","key",")",")","!","=","0",")","{","throw","new","verify","exception","(","\"","error","verifying","message","signature","[","\"","+","integer",".","to","string","(","rc",")","+","\"","]","\"",")",";","}","return","message",";","}","public","boolean","crypto","verify16","(","final","byte","[","]","x",",","byte","[","]","y",")","throws","verify","exception","{","/","/",".",".",".","validate","if","(","(","x","=","=","null",")","|","|","(","x",".","length","!","=","verify16","bytes",")",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","x","'","-","must","be","\"","+","verify16","bytes","+","\"","bytes","\"",")",";","}","if","(","(","y","=","=","null",")","|","|","(","y",".","length","!","=","verify16","bytes",")",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","y","'","-","must","be","\"","+","verify16","bytes","+","\"","bytes","\"",")",";","}","/","/",".",".",".","verify","switch","(","jni","crypto","verify16","(","x",",","y",")",")","{","case","0",":","return","true",";","case","-","1",":","return","false",";","default",":","throw","new","verify","exception","(","\"","invalid","result","from","crypto","verify","16","\"",")",";","}","}","public","boolean","crypto","verify32","(","final","byte","[","]","x",",","byte","[","]","y",")","throws","verify","exception","{","/","/",".",".",".","validate","if","(","(","x","=","=","null",")","|","|","(","x",".","length","!","=","verify32","bytes",")",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","x","'","-","must","be","\"","+","verify32","bytes","+","\"","bytes","\"",")",";","}","if","(","(","y","=","=","null",")","|","|","(","y",".","length","!","=","verify32","bytes",")",")","{","throw","new","illegal","argument","exception","(","\"","invalid","'","y","'","-","must","be","\"","+","verify32","bytes","+","\"","bytes","\"",")",";","}","/","/",".",".",".","verify","switch","(","jni","crypto","verify32","(","x",",","y",")",")","{","case","0",":","return","true",";","case","-","1",":","return","false",";","default",":","throw","new","verify","exception","(","\"","invalid","result","from","crypto","verify","32","\"",")",";","}","}","/","/","inner","classes","public","static","final","class","key","pair","{","public","final","byte","[","]","public","key",";","public","final","byte","[","]","secret","key",";","private","key","pair","(","byte","[","]","public","key",",","byte","[","]","secret","key",")","{","this",".","public","key","=","public","key",".","clone","(",")",";","this",".","secret","key","=","secret","key",".","clone","(",")",";","}","}","}"],"func_name":"TweetNaClZ","func_name_tokens":["tweet","na","cl","z"],"docstring":"  Wrapper class for the JNI library functions that wrap the bare TweetNaCl  implementation.   <p>  The TweetNaClZ is an experimental 'higher performance' implementation   that differs from the standard implementation:  <ul>  <li> the invoking method is expected to manage and byte array allocation and        initialisation  <li> does no validation of input  <li> does no memory zero'ing and other cleanup  </ul>    @author Tony Seebregts    @see <ul>       <li><a href=\"http://tweetnacl.cr.yp.to\">TweetNaCl</a></li>        <li><a href=\"http://nacl.cr.yp.to\">NaCl</a></li>       </ul>    ","docstring_tokens":["wrapper","class","for","the","jni","library","functions","that","wrap","the","bare","tweet","na","cl","implementation",".","<","p",">","the","tweet","na","cl","z","is","an","experimental","'","higher","performance","'","implementation","that","differs","from","the","standard","implementation",":","<","ul",">","<","li",">","the","invoking","method","is","expected","to","manage","and","byte","array","allocation","and","initialisation","<","li",">","does","no","validation","of","input","<","li",">","does","no","memory","zero","'","ing","and","other","cleanup","<","/","ul",">"],"query":"Questions about the NaCL crypto library","query_tokens":["questions","about","the","na","cl","crypto","library"]}
{"query_id":"29353049","repo_name":"gitskarios/Gitskarios","zip_link":"/gitskarios/Gitskarios/archive/develop.zip","code":"public class CopyWebView extends WebView {  // setting custom action bar  private ActionMode mActionMode;  private ActionMode.Callback mSelectActionModeCallback;  private GestureDetector mDetector;  private WebViewListener mWebViewListener;  // override all other constructor to avoid crash  public CopyWebView(Context context) {    this(context, null);  }  public CopyWebView(Context context, AttributeSet attrs) {    this(context, attrs, -1);  }  public CopyWebView(Context context, AttributeSet attrs, int defStyleAttr) {    super(context, attrs, defStyleAttr);    WebSettings webviewSettings = getSettings();    webviewSettings.setJavaScriptEnabled(true);    addJavascriptInterface(new WebAppInterface(), \"JSInterface\");    mDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {      @Override      public void onLongPress(MotionEvent e) {        startActionMode(mSelectActionModeCallback);      }            /*            @Override            public boolean onSingleTapUp(MotionEvent e) {                if (mActionMode != null) {                    mActionMode.finish();                    return true;                }                return false;            }            */    });  }  // this will over ride the default action bar on long press  @Override  public ActionMode startActionMode(android.view.ActionMode.Callback callback) {    ViewParent parent = getParent();    if (parent == null) {      return null;    }    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      String name = callback.getClass().toString();      if (name.contains(\"SelectActionModeCallback\")) {        mSelectActionModeCallback = callback;      }    }    CustomActionModeCallback mActionModeCallback = new CustomActionModeCallback();    return parent.startActionModeForChild(this, mActionModeCallback);  }  /**   * a small helper javascrip function to copy the selected text   */  private void getSelectedData() {    String js = \"(function getSelectedText() {\" +        \"var txt;\" +        \"if (window.getSelection) {\" +        \"txt = window.getSelection().toString();\" +        \"} else if (window.document.getSelection) {\" +        \"txt = window.document.getSelection().toString();\" +        \"} else if (window.document.selection) {\" +        \"txt = window.document.selection.createRange().text;\" +        \"}\" +        \"JSInterface.getText(txt);\" +        \"})()\";    // calling the js function    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      evaluateJavascript(\"javascript:\" + js, null);    } else {      loadUrl(\"javascript:\" + js);    }  }  @Override  public boolean onTouchEvent(MotionEvent event) {    // Send the event to our gesture detector    // If it is implemented, there will be a return value    if (mDetector != null) {      mDetector.onTouchEvent(event);    }    // If the detected gesture is unimplemented, send it to the superclass    return super.onTouchEvent(event);  }  public void setWebViewListener(WebViewListener webViewListener) {    mWebViewListener = webViewListener;  }  /**   * listener interface   */  public interface WebViewListener {    void onTextCopy(String text);  }  /**   * A ActionModeCallback   */  private class CustomActionModeCallback implements ActionMode.Callback {    @Override    public boolean onCreateActionMode(ActionMode mode, Menu menu) {      mActionMode = mode;      MenuInflater inflater = mode.getMenuInflater();      inflater.inflate(R.menu.menu_web_view_copy, menu);      menu.findItem(R.id.copy)          .setIcon(new IconicsDrawable(CopyWebView.this.getContext(), GoogleMaterial.Icon.gmd_content_copy).color(Color.WHITE).actionBar());      menu.findItem(R.id.share)          .setIcon(new IconicsDrawable(CopyWebView.this.getContext(), GoogleMaterial.Icon.gmd_share).color(Color.WHITE).actionBar());      return true;    }    @Override    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {      return false;    }    @Override    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {      switch (item.getItemId()) {        case R.id.copy:          getSelectedData();          mode.finish();          return true;        case R.id.share:          mode.finish();          return true;        default:          mode.finish();          return false;      }    }    @Override    public void onDestroyActionMode(ActionMode mode) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {        clearFocus();      } else {        if (mSelectActionModeCallback != null) {          mSelectActionModeCallback.onDestroyActionMode(mode);        }        mActionMode = null;      }    }  }  /**   * a helper interface class to call the WebViewListener.onTextCopy   */  public class WebAppInterface {    @JavascriptInterface    public void getText(String text) {      if (mWebViewListener != null) {        mWebViewListener.onTextCopy(text);      }    }  }}","code_tokens":["public","class","copy","web","view","extends","web","view","{","/","/","setting","custom","action","bar","private","action","mode","m","action","mode",";","private","action","mode",".","callback","m","select","action","mode","callback",";","private","gesture","detector","m","detector",";","private","web","view","listener","m","web","view","listener",";","/","/","override","all","other","constructor","to","avoid","crash","public","copy","web","view","(","context","context",")","{","this","(","context",",","null",")",";","}","public","copy","web","view","(","context","context",",","attribute","set","attrs",")","{","this","(","context",",","attrs",",","-","1",")",";","}","public","copy","web","view","(","context","context",",","attribute","set","attrs",",","int","def","style","attr",")","{","super","(","context",",","attrs",",","def","style","attr",")",";","web","settings","webview","settings","=","get","settings","(",")",";","webview","settings",".","set","java","script","enabled","(","true",")",";","add","javascript","interface","(","new","web","app","interface","(",")",",","\"","js","interface","\"",")",";","m","detector","=","new","gesture","detector","(","context",",","new","gesture","detector",".","simple","on","gesture","listener","(",")","{","@","override","public","void","on","long","press","(","motion","event","e",")","{","start","action","mode","(","m","select","action","mode","callback",")",";","}","}",")",";","}","/","/","this","will","over","ride","the","default","action","bar","on","long","press","@","override","public","action","mode","start","action","mode","(","android",".","view",".","action","mode",".","callback","callback",")","{","view","parent","parent","=","get","parent","(",")",";","if","(","parent","=","=","null",")","{","return","null",";","}","if","(","build",".","version",".","sdk","int","<","build",".","version","codes",".","kitkat",")","{","string","name","=","callback",".","get","class","(",")",".","to","string","(",")",";","if","(","name",".","contains","(","\"","select","action","mode","callback","\"",")",")","{","m","select","action","mode","callback","=","callback",";","}","}","custom","action","mode","callback","m","action","mode","callback","=","new","custom","action","mode","callback","(",")",";","return","parent",".","start","action","mode","for","child","(","this",",","m","action","mode","callback",")",";","}","private","void","get","selected","data","(",")","{","string","js","=","\"","(","function","get","selected","text","(",")","{","\"","+","\"","var","txt",";","\"","+","\"","if","(","window",".","get","selection",")","{","\"","+","\"","txt","=","window",".","get","selection","(",")",".","to","string","(",")",";","\"","+","\"","}","else","if","(","window",".","document",".","get","selection",")","{","\"","+","\"","txt","=","window",".","document",".","get","selection","(",")",".","to","string","(",")",";","\"","+","\"","}","else","if","(","window",".","document",".","selection",")","{","\"","+","\"","txt","=","window",".","document",".","selection",".","create","range","(",")",".","text",";","\"","+","\"","}","\"","+","\"","js","interface",".","get","text","(","txt",")",";","\"","+","\"","}",")","(",")","\"",";","/","/","calling","the","js","function","if","(","build",".","version",".","sdk","int",">","=","build",".","version","codes",".","kitkat",")","{","evaluate","javascript","(","\"","javascript",":","\"","+","js",",","null",")",";","}","else","{","load","url","(","\"","javascript",":","\"","+","js",")",";","}","}","@","override","public","boolean","on","touch","event","(","motion","event","event",")","{","/","/","send","the","event","to","our","gesture","detector","/","/","if","it","is","implemented",",","there","will","be","a","return","value","if","(","m","detector","!","=","null",")","{","m","detector",".","on","touch","event","(","event",")",";","}","/","/","if","the","detected","gesture","is","unimplemented",",","send","it","to","the","superclass","return","super",".","on","touch","event","(","event",")",";","}","public","void","set","web","view","listener","(","web","view","listener","web","view","listener",")","{","m","web","view","listener","=","web","view","listener",";","}","public","interface","web","view","listener","{","void","on","text","copy","(","string","text",")",";","}","private","class","custom","action","mode","callback","implements","action","mode",".","callback","{","@","override","public","boolean","on","create","action","mode","(","action","mode","mode",",","menu","menu",")","{","m","action","mode","=","mode",";","menu","inflater","inflater","=","mode",".","get","menu","inflater","(",")",";","inflater",".","inflate","(","r",".","menu",".","menu","web","view","copy",",","menu",")",";","menu",".","find","item","(","r",".","id",".","copy",")",".","set","icon","(","new","iconics","drawable","(","copy","web","view",".","this",".","get","context","(",")",",","google","material",".","icon",".","gmd","content","copy",")",".","color","(","color",".","white",")",".","action","bar","(",")",")",";","menu",".","find","item","(","r",".","id",".","share",")",".","set","icon","(","new","iconics","drawable","(","copy","web","view",".","this",".","get","context","(",")",",","google","material",".","icon",".","gmd","share",")",".","color","(","color",".","white",")",".","action","bar","(",")",")",";","return","true",";","}","@","override","public","boolean","on","prepare","action","mode","(","action","mode","mode",",","menu","menu",")","{","return","false",";","}","@","override","public","boolean","on","action","item","clicked","(","action","mode","mode",",","menu","item","item",")","{","switch","(","item",".","get","item","id","(",")",")","{","case","r",".","id",".","copy",":","get","selected","data","(",")",";","mode",".","finish","(",")",";","return","true",";","case","r",".","id",".","share",":","mode",".","finish","(",")",";","return","true",";","default",":","mode",".","finish","(",")",";","return","false",";","}","}","@","override","public","void","on","destroy","action","mode","(","action","mode","mode",")","{","if","(","build",".","version",".","sdk","int",">","=","build",".","version","codes",".","kitkat",")","{","clear","focus","(",")",";","}","else","{","if","(","m","select","action","mode","callback","!","=","null",")","{","m","select","action","mode","callback",".","on","destroy","action","mode","(","mode",")",";","}","m","action","mode","=","null",";","}","}","}","public","class","web","app","interface","{","@","javascript","interface","public","void","get","text","(","string","text",")","{","if","(","m","web","view","listener","!","=","null",")","{","m","web","view","listener",".","on","text","copy","(","text",")",";","}","}","}","}"],"func_name":"CopyWebView","func_name_tokens":["copy","web","view"],"docstring":"  Created by mikepenz on 20.06.15.","docstring_tokens":["created","by","mikepenz","on","20",".","06",".","15","."],"query":"Android: how to select texts from webview","query_tokens":["android",":","how","to","select","texts","from","webview"]}
{"query_id":"837872","repo_name":"qx/FullRobolectricTestSample","zip_link":"/qx/FullRobolectricTestSample/archive/master.zip","code":"  private static float distanceBetween(Location location1, Location location2) {    double earthRadius = 3958.75;    double latDifference = Math.toRadians(location2.getLatitude() - location1.getLatitude());    double lonDifference = Math.toRadians(location2.getLongitude() - location2.getLongitude());    double a = Math.sin(latDifference/2) * Math.sin(latDifference/2) +        Math.cos(Math.toRadians(location1.getLatitude())) * Math.cos(Math.toRadians(location2.getLatitude())) *            Math.sin(lonDifference/2) * Math.sin(lonDifference/2);    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));    double dist = Math.abs(earthRadius * c);    int meterConversion = 1609;    return new Float(dist * meterConversion);  }","code_tokens":["private","static","float","distance","between","(","location","location1",",","location","location2",")","{","double","earth","radius","=","3958",".","75",";","double","lat","difference","=","math",".","to","radians","(","location2",".","get","latitude","(",")","-","location1",".","get","latitude","(",")",")",";","double","lon","difference","=","math",".","to","radians","(","location2",".","get","longitude","(",")","-","location2",".","get","longitude","(",")",")",";","double","a","=","math",".","sin","(","lat","difference","/","2",")","*","math",".","sin","(","lat","difference","/","2",")","+","math",".","cos","(","math",".","to","radians","(","location1",".","get","latitude","(",")",")",")","*","math",".","cos","(","math",".","to","radians","(","location2",".","get","latitude","(",")",")",")","*","math",".","sin","(","lon","difference","/","2",")","*","math",".","sin","(","lon","difference","/","2",")",";","double","c","=","2","*","math",".","atan2","(","math",".","sqrt","(","a",")",",","math",".","sqrt","(","1","-","a",")",")",";","double","dist","=","math",".","abs","(","earth","radius","*","c",")",";","int","meter","conversion","=","1609",";","return","new","float","(","dist","*","meter","conversion",")",";","}"],"func_name":"distanceBetween","func_name_tokens":["distance","between"],"docstring":"      Returns the distance between the two locations in meters.","docstring_tokens":["returns","the","distance","between","the","two","locations","in","meters","."],"query":"Calculate distance in meters when you know longitude and latitude in java [duplicate]","query_tokens":["calculate","distance","in","meters","when","you","know","longitude","and","latitude","in","java","[","duplicate","]"]}
{"query_id":"5940188","repo_name":"rossonet/RAM","zip_link":"/rossonet/RAM/archive/master.zip","code":"public class Filter_DitherFloydSteinbergColor extends ImageFilter {  public ColorPalette palette;  public Filter_DitherFloydSteinbergColor() {    palette = new ColorPalette();    palette.addColor(new ColorRGB(255, 0, 0));    palette.addColor(new ColorRGB(0, 255, 0));    palette.addColor(new ColorRGB(0, 0, 255));  }  private void ditherDirection(TransformedImage img, int y, ColorRGB[] error, ColorRGB[] nexterror, int direction) {    int w = img.getSourceImage().getWidth();    ColorRGB oldPixel = new ColorRGB(0, 0, 0);    ColorRGB newPixel = new ColorRGB(0, 0, 0);    ColorRGB quant_error = new ColorRGB(0, 0, 0);    int start, end, x;    for (x = 0; x < w; ++x) nexterror[x].set(0, 0, 0);    if (direction > 0) {      start = 0;      end = w;    } else {      start = w - 1;      end = -1;    }    // for each x from left to right    for (x = start; x != end; x += direction) {      // oldpixel := pixel[x][y]      oldPixel.set(new ColorRGB(img.getSourceImage().getRGB(x, y)).add(error[x]));      // newpixel := find_closest_palette_color(oldpixel)      newPixel = palette.quantize(oldPixel);      // pixel[x][y] := newpixel      img.getSourceImage().setRGB(x, y, newPixel.toInt());      // quant_error := oldpixel - newpixel      quant_error.set(oldPixel.sub(newPixel));      // pixel[x+1][y  ] += 7/16 * quant_error      // pixel[x-1][y+1] += 3/16 * quant_error      // pixel[x  ][y+1] += 5/16 * quant_error      // pixel[x+1][y+1] += 1/16 * quant_error      nexterror[x].add(quant_error.mul(5.0 / 16.0));      if (x + direction >= 0 && x + direction < w) {        error[x + direction].add(quant_error.mul(7.0 / 16.0));        nexterror[x + direction].add(quant_error.mul(1.0 / 16.0));      }      if (x - direction >= 0 && x - direction < w) {        nexterror[x - direction].add(quant_error.mul(3.0 / 16.0));      }    }  }    public TransformedImage filter(TransformedImage img) {    int y;    int h = img.getSourceImage().getHeight();    int w = img.getSourceImage().getWidth();    int direction = 1;    ColorRGB[] error = new ColorRGB[w];    ColorRGB[] nexterror = new ColorRGB[w];    for (y = 0; y < w; ++y) {      error[y] = new ColorRGB(0, 0, 0);      nexterror[y] = new ColorRGB(0, 0, 0);    }    // for each y from top to bottom    for (y = 0; y < h; ++y) {      ditherDirection(img, y, error, nexterror, direction);      direction = -direction;      ColorRGB[] tmp = error;      error = nexterror;      nexterror = tmp;    }    return img;  }}","code_tokens":["public","class","filter","dither","floyd","steinberg","color","extends","image","filter","{","public","color","palette","palette",";","public","filter","dither","floyd","steinberg","color","(",")","{","palette","=","new","color","palette","(",")",";","palette",".","add","color","(","new","color","rgb","(","255",",","0",",","0",")",")",";","palette",".","add","color","(","new","color","rgb","(","0",",","255",",","0",")",")",";","palette",".","add","color","(","new","color","rgb","(","0",",","0",",","255",")",")",";","}","private","void","dither","direction","(","transformed","image","img",",","int","y",",","color","rgb","[","]","error",",","color","rgb","[","]","nexterror",",","int","direction",")","{","int","w","=","img",".","get","source","image","(",")",".","get","width","(",")",";","color","rgb","old","pixel","=","new","color","rgb","(","0",",","0",",","0",")",";","color","rgb","new","pixel","=","new","color","rgb","(","0",",","0",",","0",")",";","color","rgb","quant","error","=","new","color","rgb","(","0",",","0",",","0",")",";","int","start",",","end",",","x",";","for","(","x","=","0",";","x","<","w",";","+","+","x",")","nexterror","[","x","]",".","set","(","0",",","0",",","0",")",";","if","(","direction",">","0",")","{","start","=","0",";","end","=","w",";","}","else","{","start","=","w","-","1",";","end","=","-","1",";","}","/","/","for","each","x","from","left","to","right","for","(","x","=","start",";","x","!","=","end",";","x","+","=","direction",")","{","/","/","oldpixel",":","=","pixel","[","x","]","[","y","]","old","pixel",".","set","(","new","color","rgb","(","img",".","get","source","image","(",")",".","get","rgb","(","x",",","y",")",")",".","add","(","error","[","x","]",")",")",";","/","/","newpixel",":","=","find","closest","palette","color","(","oldpixel",")","new","pixel","=","palette",".","quantize","(","old","pixel",")",";","/","/","pixel","[","x","]","[","y","]",":","=","newpixel","img",".","get","source","image","(",")",".","set","rgb","(","x",",","y",",","new","pixel",".","to","int","(",")",")",";","/","/","quant","error",":","=","oldpixel","-","newpixel","quant","error",".","set","(","old","pixel",".","sub","(","new","pixel",")",")",";","/","/","pixel","[","x","+","1","]","[","y","]","+","=","7","/","16","*","quant","error","/","/","pixel","[","x","-","1","]","[","y","+","1","]","+","=","3","/","16","*","quant","error","/","/","pixel","[","x","]","[","y","+","1","]","+","=","5","/","16","*","quant","error","/","/","pixel","[","x","+","1","]","[","y","+","1","]","+","=","1","/","16","*","quant","error","nexterror","[","x","]",".","add","(","quant","error",".","mul","(","5",".","0","/","16",".","0",")",")",";","if","(","x","+","direction",">","=","0","&","&","x","+","direction","<","w",")","{","error","[","x","+","direction","]",".","add","(","quant","error",".","mul","(","7",".","0","/","16",".","0",")",")",";","nexterror","[","x","+","direction","]",".","add","(","quant","error",".","mul","(","1",".","0","/","16",".","0",")",")",";","}","if","(","x","-","direction",">","=","0","&","&","x","-","direction","<","w",")","{","nexterror","[","x","-","direction","]",".","add","(","quant","error",".","mul","(","3",".","0","/","16",".","0",")",")",";","}","}","}","public","transformed","image","filter","(","transformed","image","img",")","{","int","y",";","int","h","=","img",".","get","source","image","(",")",".","get","height","(",")",";","int","w","=","img",".","get","source","image","(",")",".","get","width","(",")",";","int","direction","=","1",";","color","rgb","[","]","error","=","new","color","rgb","[","w","]",";","color","rgb","[","]","nexterror","=","new","color","rgb","[","w","]",";","for","(","y","=","0",";","y","<","w",";","+","+","y",")","{","error","[","y","]","=","new","color","rgb","(","0",",","0",",","0",")",";","nexterror","[","y","]","=","new","color","rgb","(","0",",","0",",","0",")",";","}","/","/","for","each","y","from","top","to","bottom","for","(","y","=","0",";","y","<","h",";","+","+","y",")","{","dither","direction","(","img",",","y",",","error",",","nexterror",",","direction",")",";","direction","=","-","direction",";","color","rgb","[","]","tmp","=","error",";","error","=","nexterror",";","nexterror","=","tmp",";","}","return","img",";","}","}"],"func_name":"Filter_DitherFloydSteinbergColor","func_name_tokens":["filter","dither","floyd","steinberg","color"],"docstring":"  Floyd/Steinberg dithering   @author Dan","docstring_tokens":["floyd","/","steinberg","dithering"],"query":"How to convert a 24 Bit PNG to 3 Bit PNG using Floyd–Steinberg dithering?","query_tokens":["how","to","convert","a","24","bit","png","to","3","bit","png","using","floyd","–","steinberg","dithering","?"]}
{"query_id":"18317927","repo_name":"luca-vercelli/java-web-template","zip_link":"/luca-vercelli/java-web-template/archive/master.zip","code":"public class JacksonFeatureBugfix implements Feature {\t@Override\tpublic boolean configure(final FeatureContext context) {\t\t// disable MOXY. Is this needed?\t\tString postfix = \"\";\t\tpostfix = '.' + context.getConfiguration().getRuntimeType().name().toLowerCase();\t\tcontext.property(CommonProperties.MOXY_JSON_FEATURE_DISABLE + postfix, true);\t\tcontext.register(JsonParseExceptionMapper.class);\t\tcontext.register(JsonMappingExceptionMapper.class);\t\t// context.register(JacksonJaxbJsonProvider.class, MessageBodyReader.class,\t\t// MessageBodyWriter.class);\t\t\t\t// default provider ignores JAXB annotations!        ObjectMapper mapper = new ObjectMapper();        AnnotationIntrospector introspector = new JaxbAnnotationIntrospector();        mapper.setAnnotationIntrospector(introspector);        JacksonJsonProvider provider = new JacksonJsonProvider(mapper);        \t\tcontext.register(provider, MessageBodyReader.class, MessageBodyWriter.class);\t\treturn true;\t}}","code_tokens":["public","class","jackson","feature","bugfix","implements","feature","{","@","override","public","boolean","configure","(","final","feature","context","context",")","{","/","/","disable","moxy",".","is","this","needed","?","string","postfix","=","\"","\"",";","postfix","=","'",".","'","+","context",".","get","configuration","(",")",".","get","runtime","type","(",")",".","name","(",")",".","to","lower","case","(",")",";","context",".","property","(","common","properties",".","moxy","json","feature","disable","+","postfix",",","true",")",";","context",".","register","(","json","parse","exception","mapper",".","class",")",";","context",".","register","(","json","mapping","exception","mapper",".","class",")",";","/","/","context",".","register","(","jackson","jaxb","json","provider",".","class",",","message","body","reader",".","class",",","/","/","message","body","writer",".","class",")",";","/","/","default","provider","ignores","jaxb","annotations","!","object","mapper","mapper","=","new","object","mapper","(",")",";","annotation","introspector","introspector","=","new","jaxb","annotation","introspector","(",")",";","mapper",".","set","annotation","introspector","(","introspector",")",";","jackson","json","provider","provider","=","new","jackson","json","provider","(","mapper",")",";","context",".","register","(","provider",",","message","body","reader",".","class",",","message","body","writer",".","class",")",";","return","true",";","}","}"],"func_name":"JacksonFeatureBugfix","func_name_tokens":["jackson","feature","bugfix"],"docstring":"  This Feature should enable Jackson and disable MOXY.    AFAIK, Jackson JSON serializer is in the library  com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider while the library  org.glassfish.jersey.media:jersey-media-json-jackson is just a wrapper, its  main class is the Feature org.glassfish.jersey.jackson.JacksonFeature .    Unluckily, such Feature registers the JacksonJaxbJsonProvider.class instead of  JacksonJsonProvider.class, I don't know why. That gives a bad exception the  first time you invoke the webservice:    org.glassfish.jersey.server.ContainerException:  java.lang.NoClassDefFoundError:  com/fasterxml/jackson/module/jaxb/JaxbAnnotationIntrospector    There is a number of <b>wrong</b> answers in the web,    @see https://blog.mikeski.net/blog_post/449 ","docstring_tokens":["this","feature","should","enable","jackson","and","disable","moxy",".","afaik",",","jackson","json","serializer","is","in","the","library","com",".","fasterxml",".","jackson",".","jaxrs",":","jackson","-","jaxrs","-","json","-","provider","while","the","library","org",".","glassfish",".","jersey",".","media",":","jersey","-","media","-","json","-","jackson","is","just","a","wrapper",",","its","main","class","is","the","feature","org",".","glassfish",".","jersey",".","jackson",".","jackson","feature",".","unluckily",",","such","feature","registers","the","jackson","jaxb","json","provider",".","class","instead","of","jackson","json","provider",".","class",",","i","don","'","t","know","why",".","that","gives","a","bad","exception","the","first","time","you","invoke","the","webservice",":","org",".","glassfish",".","jersey",".","server",".","container","exception",":","java",".","lang",".","no","class","def","found","error",":","com","/","fasterxml","/","jackson","/","module","/","jaxb","/","jaxb","annotation","introspector","there","is","a","number","of","<","b",">","wrong","<","/","b",">","answers","in","the","web",",","@","see"],"query":"Force Glassfish4 to use Jackson instead of Moxy","query_tokens":["force","glassfish4","to","use","jackson","instead","of","moxy"]}
{"query_id":"5599842","repo_name":"FAIMS/faims-android","zip_link":"/FAIMS/faims-android/archive/master.zip","code":"    public static String sizeToStr(double size) {        if (size <= 0)            return \"0 B\";        final String[] _units = new String[] { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };        final Short _blockSize = 1024;        int digitGroups = (int) (Math.log10(size) / Math.log10(_blockSize));        if (digitGroups >= _units.length)            digitGroups = _units.length - 1;        size = size / Math.pow(_blockSize, digitGroups);        return String.format(String.format(\"%s %%s\", digitGroups == 0 ? \"%,.0f\" : \"%,.2f\"), size, _units[digitGroups]);    }// sizeToStr()","code_tokens":["public","static","string","size","to","str","(","double","size",")","{","if","(","size","<","=","0",")","return","\"","0","b","\"",";","final","string","[","]","units","=","new","string","[","]","{","\"","b","\"",",","\"","kb","\"",",","\"","mb","\"",",","\"","gb","\"",",","\"","tb","\"","}",";","final","short","block","size","=","1024",";","int","digit","groups","=","(","int",")","(","math",".","log10","(","size",")","/","math",".","log10","(","block","size",")",")",";","if","(","digit","groups",">","=","units",".","length",")","digit","groups","=","units",".","length","-","1",";","size","=","size","/","math",".","pow","(","block","size",",","digit","groups",")",";","return","string",".","format","(","string",".","format","(","\"","%","s","%","%","s","\"",",","digit","groups","=","=","0","?","\"","%",",",".","0f","\"",":","\"","%",",",".","2f","\"",")",",","size",",","units","[","digit","groups","]",")",";","}","/","/","size","to","str","(",")"],"func_name":"sizeToStr","func_name_tokens":["size","to","str"],"docstring":"          Converts {@code size} (in bytes) to string. This tip is from:            @param size                 the size in bytes.      @return e.g.:<br>              - 128 B<br>              - 1.5 KB<br>              - 10 MB<br>              - ...","docstring_tokens":["converts","{","@","code","size","}","(","in","bytes",")","to","string",".","this","tip","is","from",":"],"query":"Format file size as MB, GB etc [duplicate]","query_tokens":["format","file","size","as","mb",",","gb","etc","[","duplicate","]"]}
{"query_id":"26944013","repo_name":"greyhillman/Anki-Android","zip_link":"/greyhillman/Anki-Android/archive/develop.zip","code":"        public void notifyChangeInPosition(int n) {            // shift the ID returned by getItemId outside the range of all previous fragments            baseId += getCount() + n;        }","code_tokens":["public","void","notify","change","in","position","(","int","n",")","{","/","/","shift","the","id","returned","by","get","item","id","outside","the","range","of","all","previous","fragments","base","id","+","=","get","count","(",")","+","n",";","}"],"func_name":"notifyChangeInPosition","func_name_tokens":["notify","change","in","position"],"docstring":"                  Notify that the position of a fragment has been changed.          Create a new ID for each position to force recreation of the fragment          @param n number of items which have been changed","docstring_tokens":["notify","that","the","position","of","a","fragment","has","been","changed",".","create","a","new","id","for","each","position","to","force","recreation","of","the","fragment"],"query":"Remove Fragment Page from ViewPager in Android","query_tokens":["remove","fragment","page","from","view","pager","in","android"]}
{"query_id":"2220547","repo_name":"eyal-lezmy/Android-DataLib","zip_link":"/eyal-lezmy/Android-DataLib/archive/master.zip","code":"public class ConsoleRequestLogger implements RequestLogger {    /*     * (non-Javadoc)     * @see com.turbomanage.httpclient.RequestLogger#isLoggingEnabled()     */    @Override    public boolean isLoggingEnabled() {        return true;    }    /* (non-Javadoc)     * @see com.turbomanage.httpclient.RequestLogger#log(java.lang.String)     */    @Override    public void log(final String msg) {        Out.d(\"RestLog\", msg);    }    /*     * (non-Javadoc)     * @see com.turbomanage.httpclient.RequestLogger#logRequest(java.net.     * HttpURLConnection, java.lang.Object)     */    @Override    public void logRequest(final HttpURLConnection uc, final Object content) throws IOException {        log(\"=== HTTP Request ===\");        log(uc.getRequestMethod() + \" \" + uc.getURL().toString());        if (content instanceof String) {            log(\"Content: \" + (String) content);        }        logHeaders(uc.getRequestProperties());    }    /*     * (non-Javadoc)     * @see com.turbomanage.httpclient.RequestLogger#logResponse(java.net.     * HttpURLConnection)     */    @Override    public void logResponse(final HttpResponse res) {        if (res != null) {            log(\"=== HTTP Response ===\");            log(\"Receive url: \" + res.getUrl());            log(\"Status: \" + res.getStatus());            logHeaders(res.getHeaders());            log(\"Content:\\n\" + res.getBodyAsString());        }    }    /**     * Iterate over request or response headers and log them.     *      * @param map     */    private void logHeaders(final Map<String, List<String>> map) {        if (map != null) {            for (String field : map.keySet()) {                List<String> headers = map.get(field);                for (String header : headers) {                    log(field + \":\" + header);                }            }        }    }}","code_tokens":["public","class","console","request","logger","implements","request","logger","{","@","override","public","boolean","is","logging","enabled","(",")","{","return","true",";","}","@","override","public","void","log","(","final","string","msg",")","{","out",".","d","(","\"","rest","log","\"",",","msg",")",";","}","@","override","public","void","log","request","(","final","http","url","connection","uc",",","final","object","content",")","throws","io","exception","{","log","(","\"","=","=","=","http","request","=","=","=","\"",")",";","log","(","uc",".","get","request","method","(",")","+","\"","\"","+","uc",".","get","url","(",")",".","to","string","(",")",")",";","if","(","content","instanceof","string",")","{","log","(","\"","content",":","\"","+","(","string",")","content",")",";","}","log","headers","(","uc",".","get","request","properties","(",")",")",";","}","@","override","public","void","log","response","(","final","http","response","res",")","{","if","(","res","!","=","null",")","{","log","(","\"","=","=","=","http","response","=","=","=","\"",")",";","log","(","\"","receive","url",":","\"","+","res",".","get","url","(",")",")",";","log","(","\"","status",":","\"","+","res",".","get","status","(",")",")",";","log","headers","(","res",".","get","headers","(",")",")",";","log","(","\"","content",":","\\n","\"","+","res",".","get","body","as","string","(",")",")",";","}","}","private","void","log","headers","(","final","map","<","string",",","list","<","string",">",">","map",")","{","if","(","map","!","=","null",")","{","for","(","string","field",":","map",".","key","set","(",")",")","{","list","<","string",">","headers","=","map",".","get","(","field",")",";","for","(","string","header",":","headers",")","{","log","(","field","+","\"",":","\"","+","header",")",";","}","}","}","}","}"],"func_name":"ConsoleRequestLogger","func_name_tokens":["console","request","logger"],"docstring":"  Default {@link RequestLogger} used by {@link BasicHttpClient}. In recent  versions of Android, log() gets directed to LogCat so this can  work for Android, too.  -out-println-work-in-android    @author David M. Chandler","docstring_tokens":["default","{","request","logger","}","used","by","{","basic","http","client","}",".","in","recent","versions","of","android",",","log","(",")","gets","directed","to","log","cat","so","this","can","work","for","android",",","too",".","-","out","-","println","-","work","-","in","-","android"],"query":"Why doesn't “System.out.println” work in Android?","query_tokens":["why","doesn","'","t","“","system",".","out",".","println","”","work","in","android","?"]}
{"query_id":"7942732","repo_name":"antonio081014/HackerRank-SourceBase","zip_link":"/antonio081014/HackerRank-SourceBase/archive/master.zip","code":"    public static long solve(int a, int b) {        if (a >= 0) {            long ret = counter(b);            if (a > 0)                ret -= counter(a - 1);            return ret;        }        long ret = ((long) 32 * (-(long) a)) - counter(-a - 1);        if (b > 0)            ret += counter(b);        else if (b < -1) {            b++;            ret -= ((long) 32 * (-(long) b)) - counter(-b - 1);        }        return ret;    }","code_tokens":["public","static","long","solve","(","int","a",",","int","b",")","{","if","(","a",">","=","0",")","{","long","ret","=","counter","(","b",")",";","if","(","a",">","0",")","ret","-","=","counter","(","a","-","1",")",";","return","ret",";","}","long","ret","=","(","(","long",")","32","*","(","-","(","long",")","a",")",")","-","counter","(","-","a","-","1",")",";","if","(","b",">","0",")","ret","+","=","counter","(","b",")",";","else","if","(","b","<","-","1",")","{","b","+","+",";","ret","-","=","(","(","long",")","32","*","(","-","(","long",")","b",")",")","-","counter","(","-","b","-","1",")",";","}","return","ret",";","}"],"func_name":"solve","func_name_tokens":["solve"],"docstring":"          complement-binary-representations-of-integers-in-a-ran            The explanation greatly explans everything.      ","docstring_tokens":["complement","-","binary","-","representations","-","of","-","integers","-","in","-","a","-","ran","the","explanation","greatly","explans","everything","."],"query":"Number of 1s in the two's complement binary representations of integers in a range","query_tokens":["number","of","1s","in","the","two","'","s","complement","binary","representations","of","integers","in","a","range"]}
{"query_id":"3017162","repo_name":"leonhsl/crosswalk","zip_link":"/leonhsl/crosswalk/archive/master.zip","code":"    private boolean getCPULoad() {        try {            RandomAccessFile file = new RandomAccessFile(SYSTEM_INFO_STAT_FILE, \"r\");            String line = file.readLine();            String[] arrs = line.split(\"\\\\s+\");            long total1 = 0;            for (int i = 1; i < arrs.length; ++i) {                total1 += Long.parseLong(arrs[i]);            }            // arrs[4] is the time spent in idle tasks.            long used1 = total1 - Long.parseLong(arrs[4]);            try {                Thread.sleep(1000);            } catch (Exception e) {                mCPULoad = 0.0;                return false;            }            file.seek(0);            line = file.readLine();            file.close();            arrs = line.split(\"\\\\s+\");            long total2 = 0;            for (int i = 1; i < arrs.length; ++i) {                total2 += Long.parseLong(arrs[i]);            }            // arrs[4] is the time spent in idle tasks.            long used2 = total2 - Long.parseLong(arrs[4]);            if (total2 == total1) {                mCPULoad = 0.0;            } else {                mCPULoad = (double) (used2 - used1) / (total2 - total1);            }        } catch (IOException e) {            mCPULoad = 0.0;            return false;        }        return true;    }","code_tokens":["private","boolean","get","cpu","load","(",")","{","try","{","random","access","file","file","=","new","random","access","file","(","system","info","stat","file",",","\"","r","\"",")",";","string","line","=","file",".","read","line","(",")",";","string","[","]","arrs","=","line",".","split","(","\"","\\","\\s","+","\"",")",";","long","total1","=","0",";","for","(","int","i","=","1",";","i","<","arrs",".","length",";","+","+","i",")","{","total1","+","=","long",".","parse","long","(","arrs","[","i","]",")",";","}","/","/","arrs","[","4","]","is","the","time","spent","in","idle","tasks",".","long","used1","=","total1","-","long",".","parse","long","(","arrs","[","4","]",")",";","try","{","thread",".","sleep","(","1000",")",";","}","catch","(","exception","e",")","{","m","cpu","load","=","0",".","0",";","return","false",";","}","file",".","seek","(","0",")",";","line","=","file",".","read","line","(",")",";","file",".","close","(",")",";","arrs","=","line",".","split","(","\"","\\","\\s","+","\"",")",";","long","total2","=","0",";","for","(","int","i","=","1",";","i","<","arrs",".","length",";","+","+","i",")","{","total2","+","=","long",".","parse","long","(","arrs","[","i","]",")",";","}","/","/","arrs","[","4","]","is","the","time","spent","in","idle","tasks",".","long","used2","=","total2","-","long",".","parse","long","(","arrs","[","4","]",")",";","if","(","total2","=","=","total1",")","{","m","cpu","load","=","0",".","0",";","}","else","{","m","cpu","load","=","(","double",")","(","used2","-","used1",")","/","(","total2","-","total1",")",";","}","}","catch","(","io","exception","e",")","{","m","cpu","load","=","0",".","0",";","return","false",";","}","return","true",";","}"],"func_name":"getCPULoad","func_name_tokens":["get","cpu","load"],"docstring":"          The algorithm here can be found at:","docstring_tokens":["the","algorithm","here","can","be","found","at",":"],"query":"How to get total cpu usage in Linux using C++","query_tokens":["how","to","get","total","cpu","usage","in","linux","using","c","+","+"]}
{"query_id":"16000517","repo_name":"DiscourseDB/discoursedb-core","zip_link":"/DiscourseDB/discoursedb-core/archive/master.zip","code":"    private  String[] getBasicAuthentication(HttpServletRequest req) {    \tString authorization = req.getHeader(\"Authorization\");        if (authorization != null && authorization.startsWith(\"Basic\")) {            // Authorization: Basic base64credentials            String base64Credentials = authorization.substring(\"Basic\".length()).trim();            String credentials = new String(Base64.getDecoder().decode(base64Credentials),                    Charset.forName(\"UTF-8\"));            // credentials = username:password        \tlogger.info(\"Got basic authentication: \" + credentials);            return credentials.split(\":\",2);        } else {        \tlogger.info(\"No basic authentication\");        }        return null;    }","code_tokens":["private","string","[","]","get","basic","authentication","(","http","servlet","request","req",")","{","string","authorization","=","req",".","get","header","(","\"","authorization","\"",")",";","if","(","authorization","!","=","null","&","&","authorization",".","starts","with","(","\"","basic","\"",")",")","{","/","/","authorization",":","basic","base64credentials","string","base64credentials","=","authorization",".","substring","(","\"","basic","\"",".","length","(",")",")",".","trim","(",")",";","string","credentials","=","new","string","(","base64",".","get","decoder","(",")",".","decode","(","base64credentials",")",",","charset",".","for","name","(","\"","utf","-","8","\"",")",")",";","/","/","credentials","=","username",":","password","logger",".","info","(","\"","got","basic","authentication",":","\"","+","credentials",")",";","return","credentials",".","split","(","\"",":","\"",",","2",")",";","}","else","{","logger",".","info","(","\"","no","basic","authentication","\"",")",";","}","return","null",";","}"],"func_name":"getBasicAuthentication","func_name_tokens":["get","basic","authentication"],"docstring":"    / Kyped from Stackoverflow user Akhilesh Singh","docstring_tokens":["/","kyped","from","stackoverflow","user","akhilesh","singh"],"query":"How to get password from HTTP basic authentication","query_tokens":["how","to","get","password","from","http","basic","authentication"]}
{"query_id":"13202805","repo_name":"jotajr/iosched","zip_link":"/jotajr/iosched/archive/master.zip","code":"    public static void enableDisableActivitiesByFormFactor(Context context) {        final PackageManager pm = context.getPackageManager();        boolean isTablet = isTablet(context);        try {            PackageInfo pi = pm.getPackageInfo(context.getPackageName(),                    PackageManager.GET_ACTIVITIES | PackageManager.GET_META_DATA);            if (pi == null) {                LOGE(TAG, \"No package info found for our own package.\");                return;            }            final ActivityInfo[] activityInfos = pi.activities;            for (ActivityInfo info : activityInfos) {                String targetDevice = null;                if (info.metaData != null) {                    targetDevice = info.metaData.getString(TARGET_FORM_FACTOR_ACTIVITY_METADATA);                }                boolean tabletActivity = TARGET_FORM_FACTOR_TABLET.equals(targetDevice);                boolean handsetActivity = TARGET_FORM_FACTOR_HANDSET.equals(targetDevice);                boolean enable = !(handsetActivity && isTablet)                        && !(tabletActivity && !isTablet);                String className = info.name;                pm.setComponentEnabledSetting(                        new ComponentName(context, Class.forName(className)),                        enable                                ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED                                : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,                        PackageManager.DONT_KILL_APP);            }        } catch (PackageManager.NameNotFoundException e) {            LOGE(TAG, \"No package info found for our own package.\", e);        } catch (ClassNotFoundException e) {            LOGE(TAG, \"Activity not found within package.\", e);        }    }","code_tokens":["public","static","void","enable","disable","activities","by","form","factor","(","context","context",")","{","final","package","manager","pm","=","context",".","get","package","manager","(",")",";","boolean","is","tablet","=","is","tablet","(","context",")",";","try","{","package","info","pi","=","pm",".","get","package","info","(","context",".","get","package","name","(",")",",","package","manager",".","get","activities","|","package","manager",".","get","meta","data",")",";","if","(","pi","=","=","null",")","{","loge","(","tag",",","\"","no","package","info","found","for","our","own","package",".","\"",")",";","return",";","}","final","activity","info","[","]","activity","infos","=","pi",".","activities",";","for","(","activity","info","info",":","activity","infos",")","{","string","target","device","=","null",";","if","(","info",".","meta","data","!","=","null",")","{","target","device","=","info",".","meta","data",".","get","string","(","target","form","factor","activity","metadata",")",";","}","boolean","tablet","activity","=","target","form","factor","tablet",".","equals","(","target","device",")",";","boolean","handset","activity","=","target","form","factor","handset",".","equals","(","target","device",")",";","boolean","enable","=","!","(","handset","activity","&","&","is","tablet",")","&","&","!","(","tablet","activity","&","&","!","is","tablet",")",";","string","class","name","=","info",".","name",";","pm",".","set","component","enabled","setting","(","new","component","name","(","context",",","class",".","for","name","(","class","name",")",")",",","enable","?","package","manager",".","component","enabled","state","enabled",":","package","manager",".","component","enabled","state","disabled",",","package","manager",".","dont","kill","app",")",";","}","}","catch","(","package","manager",".","name","not","found","exception","e",")","{","loge","(","tag",",","\"","no","package","info","found","for","our","own","package",".","\"",",","e",")",";","}","catch","(","class","not","found","exception","e",")","{","loge","(","tag",",","\"","activity","not","found","within","package",".","\"",",","e",")",";","}","}"],"func_name":"enableDisableActivitiesByFormFactor","func_name_tokens":["enable","disable","activities","by","form","factor"],"docstring":"          Enables and disables {@linkplain android.app.Activity activities} based on their      {@link #TARGET_FORM_FACTOR_ACTIVITY_METADATA}\" meta-data and the current device.      Values should be either \"handset\", \"tablet\", or not present (meaning universal).      <p>      @param context the current context of the device      @see #isHoneycombTablet(android.content.Context)","docstring_tokens":["enables","and","disables","{","plain","android",".","app",".","activity","activities","}","based","on","their","{","#","target","form","factor","activity","metadata","}","\"","meta","-","data","and","the","current","device",".","values","should","be","either","\"","handset","\"",",","\"","tablet","\"",",","or","not","present","(","meaning","universal",")",".","<","p",">"],"query":"How to specify Activities that are only for phones or tablets on Android","query_tokens":["how","to","specify","activities","that","are","only","for","phones","or","tablets","on","android"]}
{"query_id":"3758606","repo_name":"phac-nml/irida","zip_link":"/phac-nml/irida/archive/development.zip","code":"\tpublic static String humanReadableByteCount(long bytes, boolean si) {\t\tint unit = si ? 1000 : 1024;\t\tif (bytes < unit)\t\t\treturn bytes + \" B\";\t\tint exp = (int) (Math.log(bytes) / Math.log(unit));\t\tString pre = (si ? \"kMGTPE\" : \"KMGTPE\").charAt(exp - 1) + (si ? \"\" : \"i\");\t\treturn String.format(\"%.1f %sB\", bytes / Math.pow(unit, exp), pre);\t}","code_tokens":["public","static","string","human","readable","byte","count","(","long","bytes",",","boolean","si",")","{","int","unit","=","si","?","1000",":","1024",";","if","(","bytes","<","unit",")","return","bytes","+","\"","b","\"",";","int","exp","=","(","int",")","(","math",".","log","(","bytes",")","/","math",".","log","(","unit",")",")",";","string","pre","=","(","si","?","\"","k","mgtpe","\"",":","\"","kmgtpe","\"",")",".","char","at","(","exp","-","1",")","+","(","si","?","\"","\"",":","\"","i","\"",")",";","return","string",".","format","(","\"","%",".","1f","%","s","b","\"",",","bytes","/","math",".","pow","(","unit",",","exp",")",",","pre",")",";","}"],"func_name":"humanReadableByteCount","func_name_tokens":["human","readable","byte","count"],"docstring":"\t\t  From\t  into-human-readable-format-in-java)\t \t  @param bytes\t             The {@link Long} size of the file in bytes.\t  @param si\t             {@link Boolean} true to use si units\t \t  @return A human readable {@link String} representation of the file size.","docstring_tokens":["from","into","-","human","-","readable","-","format","-","in","-","java",")"],"query":"How to convert byte size into human readable format in Java?","query_tokens":["how","to","convert","byte","size","into","human","readable","format","in","java","?"]}
{"query_id":"11068356","repo_name":"Bigpet/opsu","zip_link":"/Bigpet/opsu/archive/master.zip","code":"public class ReadableByteChannelWrapper implements ReadableByteChannel {\t/** The wrapped ReadableByteChannel. */\tprivate ReadableByteChannel rbc;\t/** The number of bytes read. */\tprivate long bytesRead;\t/**\t * Constructor.\t * @param rbc the ReadableByteChannel to wrap\t */\tpublic ReadableByteChannelWrapper(ReadableByteChannel rbc) {\t\tthis.rbc = rbc;\t}\t@Override\tpublic void close() throws IOException { rbc.close(); }\t@Override\tpublic boolean isOpen() { return rbc.isOpen(); }\t@Override\tpublic int read(ByteBuffer bb) throws IOException {\t\tint bytes;\t\tif ((bytes = rbc.read(bb)) > 0)\t\t\tbytesRead += bytes;\t\treturn bytes;\t}\t/**\t * Returns the number of bytes read so far.\t */\tpublic long getReadSoFar() { return bytesRead; }}","code_tokens":["public","class","readable","byte","channel","wrapper","implements","readable","byte","channel","{","private","readable","byte","channel","rbc",";","private","long","bytes","read",";","public","readable","byte","channel","wrapper","(","readable","byte","channel","rbc",")","{","this",".","rbc","=","rbc",";","}","@","override","public","void","close","(",")","throws","io","exception","{","rbc",".","close","(",")",";","}","@","override","public","boolean","is","open","(",")","{","return","rbc",".","is","open","(",")",";","}","@","override","public","int","read","(","byte","buffer","bb",")","throws","io","exception","{","int","bytes",";","if","(","(","bytes","=","rbc",".","read","(","bb",")",")",">","0",")","bytes","read","+","=","bytes",";","return","bytes",";","}","public","long","get","read","so","far","(",")","{","return","bytes","read",";","}","}"],"func_name":"ReadableByteChannelWrapper","func_name_tokens":["readable","byte","channel","wrapper"],"docstring":"  Wrapper for a ReadableByteChannel that stores the number of bytes read.","docstring_tokens":["wrapper","for","a","readable","byte","channel","that","stores","the","number","of","bytes","read","."],"query":"How to monitor progress (JProgressBar) with FileChannels transferFrom() method?","query_tokens":["how","to","monitor","progress","(","j","progress","bar",")","with","file","channels","transfer","from","(",")","method","?"]}
{"query_id":"21791059","repo_name":"xlui/KinectProject","zip_link":"/xlui/KinectProject/archive/master.zip","code":"    private static Iterable<Integer> codePointIterator(final String string) {        return new Iterable<Integer>() {            @Override            public Iterator<Integer> iterator() {                return new Iterator<Integer>() {                    private int nextIndex = 0;                    private int length = string.length();                    @Override                    public boolean hasNext() {                        return this.nextIndex < this.length;                    }                    @Override                    public Integer next() {                        int result = string.codePointAt(this.nextIndex);                        this.nextIndex += Character.charCount(result);                        return result;                    }                    @Override                    public void remove() {                        throw new UnsupportedOperationException();                    }                };            }        };    }","code_tokens":["private","static","iterable","<","integer",">","code","point","iterator","(","final","string","string",")","{","return","new","iterable","<","integer",">","(",")","{","@","override","public","iterator","<","integer",">","iterator","(",")","{","return","new","iterator","<","integer",">","(",")","{","private","int","next","index","=","0",";","private","int","length","=","string",".","length","(",")",";","@","override","public","boolean","has","next","(",")","{","return","this",".","next","index","<","this",".","length",";","}","@","override","public","integer","next","(",")","{","int","result","=","string",".","code","point","at","(","this",".","next","index",")",";","this",".","next","index","+","=","character",".","char","count","(","result",")",";","return","result",";","}","@","override","public","void","remove","(",")","{","throw","new","unsupported","operation","exception","(",")",";","}","}",";","}","}",";","}"],"func_name":"codePointIterator","func_name_tokens":["code","point","iterator"],"docstring":"          Creates an iterator for navigating Code Points in a string instead of      characters. Once Java7 support is dropped, this can be replaced with      <code>      string.codePoints()      </code>      which is available in Java8 and above.            @see <a href=","docstring_tokens":["creates","an","iterator","for","navigating","code","points","in","a","string","instead","of","characters",".","once","java7","support","is","dropped",",","this","can","be","replaced","with","<","code",">","string",".","code","points","(",")","<","/","code",">","which","is","available","in","java8","and","above",".","@","see","<","a","href","="],"query":"How can I iterate through the unicode codepoints of a Java String?","query_tokens":["how","can","i","iterate","through","the","unicode","codepoints","of","a","java","string","?"]}
{"query_id":"29499847","repo_name":"michal-lipski/assertj-core","zip_link":"/michal-lipski/assertj-core/archive/master.zip","code":"public class AssertionsForClassTypes {  /**   * Create assertion for {@link java.util.concurrent.CompletableFuture}.   *   * @param future the actual value.   * @param <T> the type of the value contained in the {@link java.util.concurrent.CompletableFuture}.   *   * @return the created assertion object.   */  public static <T> CompletableFutureAssert<T> assertThat(CompletableFuture<T> actual) {    return new CompletableFutureAssert<>(actual);  }  /**   * Create assertion for {@link java.util.Optional}.   *   * @param optional the actual value.   * @param <T> the type of the value contained in the {@link java.util.Optional}.   *   * @return the created assertion object.   */  public static <T> OptionalAssert<T> assertThat(Optional<T> actual) {    return new OptionalAssert<>(actual);  }  /**   * Create assertion for {@link java.util.OptionalDouble}.   *   * @param optionalDouble the actual value.   *   * @return the created assertion object.   */  public static OptionalDoubleAssert assertThat(OptionalDouble actual) {    return new OptionalDoubleAssert(actual);  }  /**   * Create assertion for {@link java.util.OptionalInt}.   *   * @param optionalInt the actual value.   *   * @return the created assertion object.   */  public static OptionalIntAssert assertThat(OptionalInt actual) {    return new OptionalIntAssert(actual);  }  /**   * Create assertion for {@link java.util.OptionalInt}.   *   * @param optionalLong the actual value.   *   * @return the created assertion object.   */  public static OptionalLongAssert assertThat(OptionalLong actual) {    return new OptionalLongAssert(actual);  }  /**   * Creates a new instance of <code>{@link BigDecimalAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractBigDecimalAssert<?> assertThat(BigDecimal actual) {    return new BigDecimalAssert(actual);  }  /**   * Creates a new instance of <code>{@link UriAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractUriAssert<?> assertThat(URI actual) {    return new UriAssert(actual);  }  /**   * Creates a new instance of <code>{@link UrlAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractUrlAssert<?> assertThat(URL actual) {    return new UrlAssert(actual);  }  /**   * Creates a new instance of <code>{@link BooleanAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractBooleanAssert<?> assertThat(boolean actual) {    return new BooleanAssert(actual);  }  /**   * Creates a new instance of <code>{@link BooleanAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractBooleanAssert<?> assertThat(Boolean actual) {    return new BooleanAssert(actual);  }  /**   * Creates a new instance of <code>{@link BooleanArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractBooleanArrayAssert<?> assertThat(boolean[] actual) {    return new BooleanArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link ByteAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractByteAssert<?> assertThat(byte actual) {    return new ByteAssert(actual);  }  /**   * Creates a new instance of <code>{@link ByteAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractByteAssert<?> assertThat(Byte actual) {    return new ByteAssert(actual);  }  /**   * Creates a new instance of <code>{@link ByteArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractByteArrayAssert<?> assertThat(byte[] actual) {    return new ByteArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link CharacterAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractCharacterAssert<?> assertThat(char actual) {    return new CharacterAssert(actual);  }  /**   * Creates a new instance of <code>{@link CharArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractCharArrayAssert<?> assertThat(char[] actual) {    return new CharArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link CharacterAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractCharacterAssert<?> assertThat(Character actual) {    return new CharacterAssert(actual);  }  /**   * Creates a new instance of <code>{@link ClassAssert}</code>   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractClassAssert<?> assertThat(Class<?> actual) {    return new ClassAssert(actual);  }  /**   * Creates a new instance of <code>{@link DoubleAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractDoubleAssert<?> assertThat(double actual) {    return new DoubleAssert(actual);  }  /**   * Creates a new instance of <code>{@link DoubleAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractDoubleAssert<?> assertThat(Double actual) {    return new DoubleAssert(actual);  }  /**   * Creates a new instance of <code>{@link DoubleArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractDoubleArrayAssert<?> assertThat(double[] actual) {    return new DoubleArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link FileAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractFileAssert<?> assertThat(File actual) {    return new FileAssert(actual);  }  /**   * Creates a new instance of <code>{@link InputStreamAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractInputStreamAssert<?, ? extends InputStream> assertThat(InputStream actual) {    return new InputStreamAssert(actual);  }  /**   * Creates a new instance of <code>{@link FloatAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractFloatAssert<?> assertThat(float actual) {    return new FloatAssert(actual);  }  /**   * Creates a new instance of <code>{@link FloatAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractFloatAssert<?> assertThat(Float actual) {    return new FloatAssert(actual);  }  /**   * Creates a new instance of <code>{@link FloatArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractFloatArrayAssert<?> assertThat(float[] actual) {    return new FloatArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link IntegerAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractIntegerAssert<?> assertThat(int actual) {    return new IntegerAssert(actual);  }  /**   * Creates a new instance of <code>{@link IntArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractIntArrayAssert<?> assertThat(int[] actual) {    return new IntArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link IntegerAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractIntegerAssert<?> assertThat(Integer actual) {    return new IntegerAssert(actual);  }  /**   * Creates a new instance of <code>{@link LongAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractLongAssert<?> assertThat(long actual) {    return new LongAssert(actual);  }  /**   * Creates a new instance of <code>{@link LongAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractLongAssert<?> assertThat(Long actual) {    return new LongAssert(actual);  }  /**   * Creates a new instance of <code>{@link LongArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractLongArrayAssert<?> assertThat(long[] actual) {    return new LongArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link ObjectAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static <T> AbstractObjectAssert<?, T> assertThat(T actual) {    return new ObjectAssert<>(actual);  }  /**   * Creates a new instance of <code>{@link ObjectArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static <T> AbstractObjectArrayAssert<?, T> assertThat(T[] actual) {    return new ObjectArrayAssert<>(actual);  }  /**   * Creates a new instance of <code>{@link ShortAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractShortAssert<?> assertThat(short actual) {    return new ShortAssert(actual);  }  /**   * Creates a new instance of <code>{@link ShortAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractShortAssert<?> assertThat(Short actual) {    return new ShortAssert(actual);  }  /**   * Creates a new instance of <code>{@link ShortArrayAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractShortArrayAssert<?> assertThat(short[] actual) {    return new ShortArrayAssert(actual);  }  /**   * Creates a new instance of <code>{@link StringAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractCharSequenceAssert<?, String> assertThat(String actual) {    return new StringAssert(actual);  }  /**   * Creates a new instance of <code>{@link DateAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractDateAssert<?> assertThat(Date actual) {    return new DateAssert(actual);  }  /**   * Creates a new instance of <code>{@link ZonedDateTimeAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractZonedDateTimeAssert<?> assertThat(ZonedDateTime date) {    return new ZonedDateTimeAssert(date);  }  /**   * Creates a new instance of <code>{@link LocalDateTimeAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractLocalDateTimeAssert<?> assertThat(LocalDateTime localDateTime) {    return new LocalDateTimeAssert(localDateTime);  }  /**   * Creates a new instance of <code>{@link java.time.OffsetDateTime}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual) {    return new OffsetDateTimeAssert(actual);  }  /**   * Create assertion for {@link java.time.OffsetTime}.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractOffsetTimeAssert<?> assertThat(OffsetTime offsetTime) {    return new OffsetTimeAssert(offsetTime);  }  /**   * Creates a new instance of <code>{@link LocalTimeAssert}</code>.   *   * @param actual the actual value.   * @return the created assertion object.   */  public static AbstractLocalTimeAssert<?> assertThat(LocalTime actual) {    return new LocalTimeAssert(actual);  }  /**   * Creates a new instance of <code>{@link LocalDateAssert}</code>.   *   * @param localDate the actual value.   * @return the created assertion object.   */  public static AbstractLocalDateAssert<?> assertThat(LocalDate localDate) {    return new LocalDateAssert(localDate);  }  /**   * Creates a new instance of <code>{@link ThrowableAssert}</code>.   *   * @param actual the actual value.   * @return the created {@link ThrowableAssert}.   */  public static AbstractThrowableAssert<?, ? extends Throwable> assertThat(Throwable actual) {    return new ThrowableAssert(actual);  }  /**   * Allows to capture and then assert on a {@link Throwable}.   *    * <p>   * Example :   * </p>   *    * <pre><code class='java'>{@literal @}Test   * public void testException() {   *   assertThatThrownBy(() -> { throw new Exception(\"boom!\"); }).isInstanceOf(Exception.class)   *                                                              .hasMessageContaining(\"boom\");   * }</code></pre>   *    * Another (probably more natural) way of checking that sonme code throws an exception is {@link #assertThatExceptionOfType(Class)}.   *    * @param shouldRaiseThrowable The {@link ThrowingCallable} or lambda with the code that should raise the throwable.   * @return The captured exception or <code>null</code> if none was raised by the callable.   */  public static AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(ThrowingCallable shouldRaiseThrowable) {    return new ThrowableAssert(catchThrowable(shouldRaiseThrowable)).hasBeenThrown();  }  /**   * Entry point to check that an exception of type T is thrown by a given {@code throwingCallable}     * which allows to chain assertions on the thrown exception.   * <p>   * Example:   * <pre><code class='java'> assertThatExceptionOfType(IOException.class)   *              .isThrownBy(() -> { throw new IOException(\"boom!\"); })   *              .withMessage(\"boom!\"); </code></pre>   *   * This method is more or less the same of {@link #assertThatThrownBy(ThrowingCallable)} but in a more natural way.   *    * @param actual the actual value.   * @return the created {@link ThrowableTypeAssert}.   */  public static <T extends Throwable> ThrowableTypeAssert<T> assertThatExceptionOfType(final Class<? extends T> exceptionType) {    return new ThrowableTypeAssert<>(exceptionType);  }    /**   * Allows to catch an {@link Throwable} more easily when used with Java 8 lambdas.   *   * <p>   * This caught {@link Throwable} can then be asserted.   * </p>   *    * <p>   * Example:   * </p>   *    * <pre><code class='java'>{@literal @}Test   * public void testException() {   *   // when   *   Throwable thrown = catchThrowable(() -> { throw new Exception(\"boom!\"); });   *   *   // then   *   assertThat(thrown).isInstanceOf(Exception.class)   *                     .hasMessageContaining(\"boom\");   * } </code></pre>   *   * @param shouldRaiseThrowable The lambda with the code that should raise the exception.   * @return The captured exception or <code>null</code> if none was raised by the callable.   */  public static Throwable catchThrowable(ThrowingCallable shouldRaiseThrowable) {    return ThrowableAssert.catchThrowable(shouldRaiseThrowable);  }  // -------------------------------------------------------------------------------------------------  // fail methods : not assertions but here to have a single entry point to all AssertJ features.  // -------------------------------------------------------------------------------------------------  /**   * Only delegate to {@link Fail#setRemoveAssertJRelatedElementsFromStackTrace(boolean)} so that Assertions offers a   * full feature entry point to all AssertJ Assert features (but you can use {@link Fail} if you prefer).   */  public static void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace) {    Fail.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);  }  /**   * Only delegate to {@link Fail#fail(String)} so that Assertions offers a full feature entry point to all Assertj   * Assert features (but you can use Fail if you prefer).   */  public static void fail(String failureMessage) {    Fail.fail(failureMessage);  }  /**   * Only delegate to {@link Fail#fail(String, Throwable)} so that Assertions offers a full feature entry point to all   * AssertJ features (but you can use Fail if you prefer).   */  public static void fail(String failureMessage, Throwable realCause) {    Fail.fail(failureMessage, realCause);  }  /**   * Only delegate to {@link Fail#failBecauseExceptionWasNotThrown(Class)} so that Assertions offers a full feature   * entry point to all AssertJ features (but you can use Fail if you prefer).   *   * {@link Assertions#shouldHaveThrown(Class)} can be used as a replacement.   */  public static void failBecauseExceptionWasNotThrown(Class<? extends Throwable> exceptionClass) {    Fail.shouldHaveThrown(exceptionClass);  }  /**   * Only delegate to {@link Fail#shouldHaveThrown(Class)} so that Assertions offers a full feature   * entry point to all AssertJ features (but you can use Fail if you prefer).   */  public static void shouldHaveThrown(Class<? extends Throwable> exceptionClass) {    Fail.shouldHaveThrown(exceptionClass);  }  /**   * In error messages, sets the threshold when iterable/array formatting will on one line (if their String description   * is less than this parameter) or it will be formatted with one element per line.   * <p>   * The following array will be formatted on one line as its length < 80   *    * <pre><code class='java'> String[] greatBooks = array(\"A Game of Thrones\", \"The Lord of the Rings\", \"Assassin's Apprentice\");   *    * // formatted as:   *    * [\"A Game of Thrones\", \"The Lord of the Rings\", \"Assassin's Apprentice\"]</code></pre>   * whereas this array is formatted on multiple lines (one element per line)   *    * <pre><code class='java'> String[] greatBooks = array(\"A Game of Thrones\", \"The Lord of the Rings\", \"Assassin's Apprentice\", \"Guards! Guards! (Discworld)\");   *    * // formatted as:   *    * [\"A Game of Thrones\",   *  \"The Lord of the Rings\",   *  \"Assassin's Apprentice\",   *  \"Guards! Guards! (Discworld)\"]</code></pre>   *    * @param maxLengthForSingleLineDescription the maximum lenght for an iterable/array to be displayed on one line   */  public static void setMaxLengthForSingleLineDescription(int maxLengthForSingleLineDescription) {    GroupFormatUtil.setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription);  }  // ------------------------------------------------------------------------------------------------------  // properties methods : not assertions but here to have a single entry point to all AssertJ features.  // ------------------------------------------------------------------------------------------------------  /**   * Only delegate to {@link Properties#extractProperty(String)} so that Assertions offers a full feature entry point   * to   * all AssertJ features (but you can use {@link Properties} if you prefer).   * <p/>   * Typical usage is to chain <code>extractProperty</code> with <code>from</code> method, see examples below :   * <p/>   *    * <pre><code class='java'> // extract simple property values having a java standard type (here String)   * assertThat(extractProperty(&quot;name&quot;, String.class).from(fellowshipOfTheRing))   *           .contains(&quot;Boromir&quot;, &quot;Gandalf&quot;, &quot;Frodo&quot;, &quot;Legolas&quot;)   *           .doesNotContain(&quot;Sauron&quot;, &quot;Elrond&quot;);   *   * // extracting property works also with user's types (here Race)   * assertThat(extractProperty(&quot;race&quot;, String.class).from(fellowshipOfTheRing))   *           .contains(HOBBIT, ELF).doesNotContain(ORC);   *   * // extract nested property on Race   * assertThat(extractProperty(&quot;race.name&quot;, String.class).from(fellowshipOfTheRing))   *           .contains(&quot;Hobbit&quot;, &quot;Elf&quot;)   *           .doesNotContain(&quot;Orc&quot;);</code></pre>   */  public static <T> Properties<T> extractProperty(String propertyName, Class<T> propertyType) {    return Properties.extractProperty(propertyName, propertyType);  }  /**   * Only delegate to {@link Properties#extractProperty(String)} so that Assertions offers a full feature entry point   * to   * all AssertJ features (but you can use {@link Properties} if you prefer).   * <p/>   * Typical usage is to chain <code>extractProperty</code> with <code>from</code> method, see examples below :   * <p/>   *    * <pre><code class='java'> // extract simple property values, as no type has been defined the extracted property will be considered as Object   * // to define the real property type (here String) use extractProperty(&quot;name&quot;, String.class) instead.   * assertThat(extractProperty(&quot;name&quot;).from(fellowshipOfTheRing))   *           .contains(&quot;Boromir&quot;, &quot;Gandalf&quot;, &quot;Frodo&quot;, &quot;Legolas&quot;)   *           .doesNotContain(&quot;Sauron&quot;, &quot;Elrond&quot;);   *   * // extracting property works also with user's types (here Race), even though it will be considered as Object   * // to define the real property type (here String) use extractProperty(&quot;name&quot;, Race.class) instead.   * assertThat(extractProperty(&quot;race&quot;).from(fellowshipOfTheRing)).contains(HOBBIT, ELF).doesNotContain(ORC);   *   * // extract nested property on Race   * assertThat(extractProperty(&quot;race.name&quot;).from(fellowshipOfTheRing)).contains(&quot;Hobbit&quot;, &quot;Elf&quot;).doesNotContain(&quot;Orc&quot;); </code></pre>   */  public static Properties<Object> extractProperty(String propertyName) {    return Properties.extractProperty(propertyName);  }  /**   * Utility method to build nicely a {@link Tuple} when working with {@link IterableAssert#extracting(String...)} or   * {@link ObjectArrayAssert#extracting(String...)}   *   * @param values the values stored in the {@link Tuple}   * @return the built {@link Tuple}   */  public static Tuple tuple(Object... values) {    return Tuple.tuple(values);  }  /**   * Globally sets whether   * <code>{@link org.assertj.core.api.AbstractIterableAssert#extracting(String) IterableAssert#extracting(String)}</code>   * and   * <code>{@link org.assertj.core.api.AbstractObjectArrayAssert#extracting(String) ObjectArrayAssert#extracting(String)}</code>   * should be allowed to extract private fields, if not and they try it fails with exception.   *   * @param allowExtractingPrivateFields allow private fields extraction. Default {@code true}.   */  public static void setAllowExtractingPrivateFields(boolean allowExtractingPrivateFields) {    FieldSupport.extraction().setAllowUsingPrivateFields(allowExtractingPrivateFields);  }  /**   * Globally sets whether the use of private fields is allowed for comparison.   * The following (incomplete) list of methods will be impacted by this change :   * <ul>   * <li>   * <code><code>{@link org.assertj.core.api.AbstractIterableAssert#usingElementComparatorOnFields(java.lang.String...)}</code>   * </li>   * <li><code>{@link org.assertj.core.api.AbstractObjectAssert#isEqualToComparingFieldByField(A)}</code></li>   * </ul>   *   * If the value is <code>false</code> and these methods try to compare private fields, it will fail with an exception.   *   * @param allowComparingPrivateFields allow private fields comparison. Default {@code true}.   */  public static void setAllowComparingPrivateFields(boolean allowComparingPrivateFields) {    FieldSupport.comparison().setAllowUsingPrivateFields(allowComparingPrivateFields);  }  // ------------------------------------------------------------------------------------------------------  // Data utility methods : not assertions but here to have a single entry point to all AssertJ features.  // ------------------------------------------------------------------------------------------------------  /**   * Only delegate to {@link MapEntry#entry(K key, V value)} so that Assertions offers a full feature entry point to   * all   * AssertJ features (but you can use {@link MapEntry} if you prefer).   * <p/>   * Typical usage is to call <code>entry</code> in MapAssert <code>contains</code> assertion, see examples below :   * <p/>   *    * <pre><code class='java'> Map<Ring, TolkienCharacter> ringBearers = ... // init omitted   *    * assertThat(ringBearers).contains(entry(oneRing, frodo), entry(nenya, galadriel));</code></pre>   */  public static <K, V> MapEntry<K, V> entry(K key, V value) {    return MapEntry.entry(key, value);  }  /**   * Only delegate to {@link Index#atIndex(int)} so that Assertions offers a full feature entry point to all AssertJ   * features (but you can use {@link Index} if you prefer).   * <p/>   * Typical usage :   *   * <pre><code class='java'> List&lt;Ring&gt; elvesRings = newArrayList(vilya, nenya, narya);   * assertThat(elvesRings).contains(vilya, atIndex(0)).contains(nenya, atIndex(1)).contains(narya, atIndex(2));</code></pre>   */  public static Index atIndex(int index) {    return Index.atIndex(index);  }  /**   * Assertions entry point for double {@link Offset}.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(8.1).isEqualTo(8.0, offset(0.1));</code></pre>   */  public static Offset<Double> offset(Double value) {    return Offset.offset(value);  }  /**   * Assertions entry point for float {@link Offset}.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(8.2f).isCloseTo(8.0f, offset(0.2f));</code></pre>   */  public static Offset<Float> offset(Float value) {    return Offset.offset(value);  }  /**   * Alias for {@link #offset(Double)} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(8.1).isCloseTo(8.0, within(0.1));</code></pre>   */  public static Offset<Double> within(Double value) {    return Offset.offset(value);  }  /**   * Alias for {@link #offset(Float)} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(8.2f).isCloseTo(8.0f, within(0.2f));</code></pre>   */  public static Offset<Float> within(Float value) {    return Offset.offset(value);  }  /**   * Assertions entry point for BigDecimal {@link Offset} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(BigDecimal.TEN).isCloseTo(new BigDecimal(\"10.5\"), within(BigDecimal.ONE));</code></pre>   */  public static Offset<BigDecimal> within(BigDecimal value) {    return Offset.offset(value);  }  /**   * Assertions entry point for Byte {@link Offset} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat((byte)10).isCloseTo((byte)11, within((byte)1));</code></pre>   */  public static Offset<Byte> within(Byte value) {    return Offset.offset(value);  }  /**   * Assertions entry point for Integer {@link Offset} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(10).isCloseTo(11, within(1));</code></pre>   */  public static Offset<Integer> within(Integer value) {    return Offset.offset(value);  }  /**   * Assertions entry point for Short {@link Offset} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(10).isCloseTo(11, within(1));</code></pre>   */  public static Offset<Short> within(Short value) {    return Offset.offset(value);  }  /**   * Assertions entry point for Long {@link Offset} to use with isCloseTo assertions.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(5l).isCloseTo(7l, within(2l));</code></pre>   */  public static Offset<Long> within(Long value) {    return Offset.offset(value);  }  /**   * Assertions entry point for Double {@link org.assertj.core.data.Percentage} to use with isCloseTo assertions for   * percentages.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(11.0).isCloseTo(10.0, withinPercentage(10.0));</code></pre>   */  public static Percentage withinPercentage(Double value) {    return withPercentage(value);  }  /**   * Assertions entry point for Integer {@link org.assertj.core.data.Percentage} to use with isCloseTo assertions for   * percentages.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(11).isCloseTo(10, withinPercentage(10));</code></pre>   */  public static Percentage withinPercentage(Integer value) {    return withPercentage(value);  }  /**   * Assertions entry point for Long {@link org.assertj.core.data.Percentage} to use with isCloseTo assertions for   * percentages.   * <p/>   * Typical usage :   *   * <pre><code class='java'> assertThat(11L).isCloseTo(10L, withinPercentage(10L));</code></pre>   */  public static Percentage withinPercentage(Long value) {    return withPercentage(value);  }  // ------------------------------------------------------------------------------------------------------  // Condition methods : not assertions but here to have a single entry point to all AssertJ features.  // ------------------------------------------------------------------------------------------------------  /**   * Creates a new <code>{@link AllOf}</code>   *   * @param <T> the type of object the given condition accept.   * @param conditions the conditions to evaluate.   * @return the created {@code AnyOf}.   * @throws NullPointerException if the given array is {@code null}.   * @throws NullPointerException if any of the elements in the given array is {@code null}.   */  @SafeVarargs  public static <T> Condition<T> allOf(Condition<? super T>... conditions) {    return AllOf.allOf(conditions);  }  /**   * Creates a new <code>{@link AllOf}</code>   *   * @param <T> the type of object the given condition accept.   * @param conditions the conditions to evaluate.   * @return the created {@code AnyOf}.   * @throws NullPointerException if the given iterable is {@code null}.   * @throws NullPointerException if any of the elements in the given iterable is {@code null}.   */  public static <T> Condition<T> allOf(Iterable<? extends Condition<? super T>> conditions) {    return AllOf.allOf(conditions);  }  /**   * Only delegate to {@link AnyOf#anyOf(Condition...)} so that Assertions offers a full feature entry point to all   * AssertJ features (but you can use {@link AnyOf} if you prefer).   * <p/>   * Typical usage (<code>jedi</code> and <code>sith</code> are {@link Condition}) :   * <p/>   *    * <pre><code class='java'> assertThat(&quot;Vader&quot;).is(anyOf(jedi, sith));</code></pre>   */  @SafeVarargs  public static <T> Condition<T> anyOf(Condition<? super T>... conditions) {    return AnyOf.anyOf(conditions);  }  /**   * Creates a new <code>{@link AnyOf}</code>   *   * @param <T> the type of object the given condition accept.   * @param conditions the conditions to evaluate.   * @return the created {@code AnyOf}.   * @throws NullPointerException if the given iterable is {@code null}.   * @throws NullPointerException if any of the elements in the given iterable is {@code null}.   */  public static <T> Condition<T> anyOf(Iterable<? extends Condition<? super T>> conditions) {    return AnyOf.anyOf(conditions);  }  /**   * Creates a new </code>{@link DoesNotHave}</code>.   *   * @param condition the condition to inverse.   * @return The Not condition created.   */  public static <T> DoesNotHave<T> doesNotHave(Condition<? super T> condition) {    return DoesNotHave.doesNotHave(condition);  }  /**   * Creates a new </code>{@link Not}</code>.   *   * @param condition the condition to inverse.   * @return The Not condition created.   */  public static <T> Not<T> not(Condition<? super T> condition) {    return Not.not(condition);  }  // --------------------------------------------------------------------------------------------------  // Filter methods : not assertions but here to have a single entry point to all AssertJ features.  // --------------------------------------------------------------------------------------------------  /**   * Only delegate to {@link Filters#filter(Object[])} so that Assertions offers a full feature entry point to all   * AssertJ features (but you can use {@link Filters} if you prefer).   * <p/>   * Note that the given array is not modified, the filters are performed on an {@link Iterable} copy of the array.   * <p/>   * Typical usage with {@link Condition} :   * <p/>   *    * <pre><code class='java'> assertThat(filter(players).being(potentialMVP).get()).containsOnly(james, rose);</code></pre>   * <p/>   * and with filter language based on java bean property :   * <p/>   *    * <pre><code class='java'> assertThat(filter(players).with(&quot;pointsPerGame&quot;).greaterThan(20).and(&quot;assistsPerGame&quot;).greaterThan(7).get())   *           .containsOnly(james, rose);</code></pre>   */  public static <E> Filters<E> filter(E[] array) {    return Filters.filter(array);  }  /**   * Only delegate to {@link Filters#filter(Object[])} so that Assertions offers a full feature entry point to all   * AssertJ features (but you can use {@link Filters} if you prefer).   * <p/>   * Note that the given {@link Iterable} is not modified, the filters are performed on a copy.   * <p/>   * Typical usage with {@link Condition} :   * <p/>   *    * <pre><code class='java'> assertThat(filter(players).being(potentialMVP).get()).containsOnly(james, rose);</code></pre>   * <p/>   * and with filter language based on java bean property :   * <p/>   *    * <pre><code class='java'> assertThat(filter(players).with(&quot;pointsPerGame&quot;).greaterThan(20).and(&quot;assistsPerGame&quot;).greaterThan(7).get())   *            .containsOnly(james, rose);</code></pre>   */  public static <E> Filters<E> filter(Iterable<E> iterableToFilter) {    return Filters.filter(iterableToFilter);  }  /**   * Create a {@link FilterOperator} to use in {@link AbstractIterableAssert#filteredOn(String, FilterOperator)   * filteredOn(String, FilterOperation)} to express a filter keeping all Iterable elements whose property/field","code_tokens":["public","class","assertions","for","class","types","{","public","static","<","t",">","completable","future","assert","<","t",">","assert","that","(","completable","future","<","t",">","actual",")","{","return","new","completable","future","assert","<",">","(","actual",")",";","}","public","static","<","t",">","optional","assert","<","t",">","assert","that","(","optional","<","t",">","actual",")","{","return","new","optional","assert","<",">","(","actual",")",";","}","public","static","optional","double","assert","assert","that","(","optional","double","actual",")","{","return","new","optional","double","assert","(","actual",")",";","}","public","static","optional","int","assert","assert","that","(","optional","int","actual",")","{","return","new","optional","int","assert","(","actual",")",";","}","public","static","optional","long","assert","assert","that","(","optional","long","actual",")","{","return","new","optional","long","assert","(","actual",")",";","}","public","static","abstract","big","decimal","assert","<","?",">","assert","that","(","big","decimal","actual",")","{","return","new","big","decimal","assert","(","actual",")",";","}","public","static","abstract","uri","assert","<","?",">","assert","that","(","uri","actual",")","{","return","new","uri","assert","(","actual",")",";","}","public","static","abstract","url","assert","<","?",">","assert","that","(","url","actual",")","{","return","new","url","assert","(","actual",")",";","}","public","static","abstract","boolean","assert","<","?",">","assert","that","(","boolean","actual",")","{","return","new","boolean","assert","(","actual",")",";","}","public","static","abstract","boolean","assert","<","?",">","assert","that","(","boolean","actual",")","{","return","new","boolean","assert","(","actual",")",";","}","public","static","abstract","boolean","array","assert","<","?",">","assert","that","(","boolean","[","]","actual",")","{","return","new","boolean","array","assert","(","actual",")",";","}","public","static","abstract","byte","assert","<","?",">","assert","that","(","byte","actual",")","{","return","new","byte","assert","(","actual",")",";","}","public","static","abstract","byte","assert","<","?",">","assert","that","(","byte","actual",")","{","return","new","byte","assert","(","actual",")",";","}","public","static","abstract","byte","array","assert","<","?",">","assert","that","(","byte","[","]","actual",")","{","return","new","byte","array","assert","(","actual",")",";","}","public","static","abstract","character","assert","<","?",">","assert","that","(","char","actual",")","{","return","new","character","assert","(","actual",")",";","}","public","static","abstract","char","array","assert","<","?",">","assert","that","(","char","[","]","actual",")","{","return","new","char","array","assert","(","actual",")",";","}","public","static","abstract","character","assert","<","?",">","assert","that","(","character","actual",")","{","return","new","character","assert","(","actual",")",";","}","public","static","abstract","class","assert","<","?",">","assert","that","(","class","<","?",">","actual",")","{","return","new","class","assert","(","actual",")",";","}","public","static","abstract","double","assert","<","?",">","assert","that","(","double","actual",")","{","return","new","double","assert","(","actual",")",";","}","public","static","abstract","double","assert","<","?",">","assert","that","(","double","actual",")","{","return","new","double","assert","(","actual",")",";","}","public","static","abstract","double","array","assert","<","?",">","assert","that","(","double","[","]","actual",")","{","return","new","double","array","assert","(","actual",")",";","}","public","static","abstract","file","assert","<","?",">","assert","that","(","file","actual",")","{","return","new","file","assert","(","actual",")",";","}","public","static","abstract","input","stream","assert","<","?",",","?","extends","input","stream",">","assert","that","(","input","stream","actual",")","{","return","new","input","stream","assert","(","actual",")",";","}","public","static","abstract","float","assert","<","?",">","assert","that","(","float","actual",")","{","return","new","float","assert","(","actual",")",";","}","public","static","abstract","float","assert","<","?",">","assert","that","(","float","actual",")","{","return","new","float","assert","(","actual",")",";","}","public","static","abstract","float","array","assert","<","?",">","assert","that","(","float","[","]","actual",")","{","return","new","float","array","assert","(","actual",")",";","}","public","static","abstract","integer","assert","<","?",">","assert","that","(","int","actual",")","{","return","new","integer","assert","(","actual",")",";","}","public","static","abstract","int","array","assert","<","?",">","assert","that","(","int","[","]","actual",")","{","return","new","int","array","assert","(","actual",")",";","}","public","static","abstract","integer","assert","<","?",">","assert","that","(","integer","actual",")","{","return","new","integer","assert","(","actual",")",";","}","public","static","abstract","long","assert","<","?",">","assert","that","(","long","actual",")","{","return","new","long","assert","(","actual",")",";","}","public","static","abstract","long","assert","<","?",">","assert","that","(","long","actual",")","{","return","new","long","assert","(","actual",")",";","}","public","static","abstract","long","array","assert","<","?",">","assert","that","(","long","[","]","actual",")","{","return","new","long","array","assert","(","actual",")",";","}","public","static","<","t",">","abstract","object","assert","<","?",",","t",">","assert","that","(","t","actual",")","{","return","new","object","assert","<",">","(","actual",")",";","}","public","static","<","t",">","abstract","object","array","assert","<","?",",","t",">","assert","that","(","t","[","]","actual",")","{","return","new","object","array","assert","<",">","(","actual",")",";","}","public","static","abstract","short","assert","<","?",">","assert","that","(","short","actual",")","{","return","new","short","assert","(","actual",")",";","}","public","static","abstract","short","assert","<","?",">","assert","that","(","short","actual",")","{","return","new","short","assert","(","actual",")",";","}","public","static","abstract","short","array","assert","<","?",">","assert","that","(","short","[","]","actual",")","{","return","new","short","array","assert","(","actual",")",";","}","public","static","abstract","char","sequence","assert","<","?",",","string",">","assert","that","(","string","actual",")","{","return","new","string","assert","(","actual",")",";","}","public","static","abstract","date","assert","<","?",">","assert","that","(","date","actual",")","{","return","new","date","assert","(","actual",")",";","}","public","static","abstract","zoned","date","time","assert","<","?",">","assert","that","(","zoned","date","time","date",")","{","return","new","zoned","date","time","assert","(","date",")",";","}","public","static","abstract","local","date","time","assert","<","?",">","assert","that","(","local","date","time","local","date","time",")","{","return","new","local","date","time","assert","(","local","date","time",")",";","}","public","static","abstract","offset","date","time","assert","<","?",">","assert","that","(","offset","date","time","actual",")","{","return","new","offset","date","time","assert","(","actual",")",";","}","public","static","abstract","offset","time","assert","<","?",">","assert","that","(","offset","time","offset","time",")","{","return","new","offset","time","assert","(","offset","time",")",";","}","public","static","abstract","local","time","assert","<","?",">","assert","that","(","local","time","actual",")","{","return","new","local","time","assert","(","actual",")",";","}","public","static","abstract","local","date","assert","<","?",">","assert","that","(","local","date","local","date",")","{","return","new","local","date","assert","(","local","date",")",";","}","public","static","abstract","throwable","assert","<","?",",","?","extends","throwable",">","assert","that","(","throwable","actual",")","{","return","new","throwable","assert","(","actual",")",";","}","public","static","abstract","throwable","assert","<","?",",","?","extends","throwable",">","assert","that","thrown","by","(","throwing","callable","should","raise","throwable",")","{","return","new","throwable","assert","(","catch","throwable","(","should","raise","throwable",")",")",".","has","been","thrown","(",")",";","}","public","static","<","t","extends","throwable",">","throwable","type","assert","<","t",">","assert","that","exception","of","type","(","final","class","<","?","extends","t",">","exception","type",")","{","return","new","throwable","type","assert","<",">","(","exception","type",")",";","}","public","static","throwable","catch","throwable","(","throwing","callable","should","raise","throwable",")","{","return","throwable","assert",".","catch","throwable","(","should","raise","throwable",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","fail","methods",":","not","assertions","but","here","to","have","a","single","entry","point","to","all","assert","j","features",".","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","void","set","remove","assert","j","related","elements","from","stack","trace","(","boolean","remove","assert","j","related","elements","from","stack","trace",")","{","fail",".","set","remove","assert","j","related","elements","from","stack","trace","(","remove","assert","j","related","elements","from","stack","trace",")",";","}","public","static","void","fail","(","string","failure","message",")","{","fail",".","fail","(","failure","message",")",";","}","public","static","void","fail","(","string","failure","message",",","throwable","real","cause",")","{","fail",".","fail","(","failure","message",",","real","cause",")",";","}","public","static","void","fail","because","exception","was","not","thrown","(","class","<","?","extends","throwable",">","exception","class",")","{","fail",".","should","have","thrown","(","exception","class",")",";","}","public","static","void","should","have","thrown","(","class","<","?","extends","throwable",">","exception","class",")","{","fail",".","should","have","thrown","(","exception","class",")",";","}","public","static","void","set","max","length","for","single","line","description","(","int","max","length","for","single","line","description",")","{","group","format","util",".","set","max","length","for","single","line","description","(","max","length","for","single","line","description",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","properties","methods",":","not","assertions","but","here","to","have","a","single","entry","point","to","all","assert","j","features",".","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","<","t",">","properties","<","t",">","extract","property","(","string","property","name",",","class","<","t",">","property","type",")","{","return","properties",".","extract","property","(","property","name",",","property","type",")",";","}","public","static","properties","<","object",">","extract","property","(","string","property","name",")","{","return","properties",".","extract","property","(","property","name",")",";","}","public","static","tuple","tuple","(","object",".",".",".","values",")","{","return","tuple",".","tuple","(","values",")",";","}","public","static","void","set","allow","extracting","private","fields","(","boolean","allow","extracting","private","fields",")","{","field","support",".","extraction","(",")",".","set","allow","using","private","fields","(","allow","extracting","private","fields",")",";","}","public","static","void","set","allow","comparing","private","fields","(","boolean","allow","comparing","private","fields",")","{","field","support",".","comparison","(",")",".","set","allow","using","private","fields","(","allow","comparing","private","fields",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","data","utility","methods",":","not","assertions","but","here","to","have","a","single","entry","point","to","all","assert","j","features",".","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","<","k",",","v",">","map","entry","<","k",",","v",">","entry","(","k","key",",","v","value",")","{","return","map","entry",".","entry","(","key",",","value",")",";","}","public","static","index","at","index","(","int","index",")","{","return","index",".","at","index","(","index",")",";","}","public","static","offset","<","double",">","offset","(","double","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","float",">","offset","(","float","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","double",">","within","(","double","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","float",">","within","(","float","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","big","decimal",">","within","(","big","decimal","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","byte",">","within","(","byte","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","integer",">","within","(","integer","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","short",">","within","(","short","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","offset","<","long",">","within","(","long","value",")","{","return","offset",".","offset","(","value",")",";","}","public","static","percentage","within","percentage","(","double","value",")","{","return","with","percentage","(","value",")",";","}","public","static","percentage","within","percentage","(","integer","value",")","{","return","with","percentage","(","value",")",";","}","public","static","percentage","within","percentage","(","long","value",")","{","return","with","percentage","(","value",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","condition","methods",":","not","assertions","but","here","to","have","a","single","entry","point","to","all","assert","j","features",".","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","@","safe","varargs","public","static","<","t",">","condition","<","t",">","all","of","(","condition","<","?","super","t",">",".",".",".","conditions",")","{","return","all","of",".","all","of","(","conditions",")",";","}","public","static","<","t",">","condition","<","t",">","all","of","(","iterable","<","?","extends","condition","<","?","super","t",">",">","conditions",")","{","return","all","of",".","all","of","(","conditions",")",";","}","@","safe","varargs","public","static","<","t",">","condition","<","t",">","any","of","(","condition","<","?","super","t",">",".",".",".","conditions",")","{","return","any","of",".","any","of","(","conditions",")",";","}","public","static","<","t",">","condition","<","t",">","any","of","(","iterable","<","?","extends","condition","<","?","super","t",">",">","conditions",")","{","return","any","of",".","any","of","(","conditions",")",";","}","public","static","<","t",">","does","not","have","<","t",">","does","not","have","(","condition","<","?","super","t",">","condition",")","{","return","does","not","have",".","does","not","have","(","condition",")",";","}","public","static","<","t",">","not","<","t",">","not","(","condition","<","?","super","t",">","condition",")","{","return","not",".","not","(","condition",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","filter","methods",":","not","assertions","but","here","to","have","a","single","entry","point","to","all","assert","j","features",".","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","<","e",">","filters","<","e",">","filter","(","e","[","]","array",")","{","return","filters",".","filter","(","array",")",";","}","public","static","<","e",">","filters","<","e",">","filter","(","iterable","<","e",">","iterable","to","filter",")","{","return","filters",".","filter","(","iterable","to","filter",")",";","}","/","*","*","*","create","a","{","@","link","filter","operator","}","to","use","in","{","@","link","abstract","iterable","assert","#","filtered","on","(","string",",","filter","operator",")","*","filtered","on","(","string",",","filter","operation",")","}","to","express","a","filter","keeping","all","iterable","elements","whose","property","/","field"],"func_name":"AssertionsForClassTypes","func_name_tokens":["assertions","for","class","types"],"docstring":"  Java 8 is picky when choosing the right <code>assertThat</code> method if the object under test is generic and bounded,   for example if foo is instance of T that extends Exception, java 8  will complain that it can't resolve   the proper <code>assertThat</code> method (normally <code>assertThat(Throwable)</code> as foo might implement an interface like List,  if that occured <code>assertThat(List)</code> would also be a possible choice - thus confusing java 8.  <p>  This why {@link Assertions} have been split in {@link AssertionsForClassTypes} and {@link AssertionsForInterfaceTypes}","docstring_tokens":["java","8","is","picky","when","choosing","the","right","<","code",">","assert","that","<","/","code",">","method","if","the","object","under","test","is","generic","and","bounded",",","for","example","if","foo","is","instance","of","t","that","extends","exception",",","java","8","will","complain","that","it","can","'","t","resolve","the","proper","<","code",">","assert","that","<","/","code",">","method","(","normally","<","code",">","assert","that","(","throwable",")","<","/","code",">","as","foo","might","implement","an","interface","like","list",",","if","that","occured","<","code",">","assert","that","(","list",")","<","/","code",">","would","also","be","a","possible","choice","-","thus","confusing","java","8",".","<","p",">","this","why","{","assertions","}","have","been","split","in","{","assertions","for","class","types","}","and","{","assertions","for","interface","types","}"],"query":"Ambiguous method in Java 8, why? [duplicate]","query_tokens":["ambiguous","method","in","java","8",",","why","?","[","duplicate","]"]}
{"query_id":"4730463","repo_name":"mdpiper/GWT-YAML-example","zip_link":"/mdpiper/GWT-YAML-example/archive/master.zip","code":"  private static native JavaScriptObject copyImpl(JavaScriptObject obj) /*-{\t\tif (obj == null)\t\t\treturn obj;\t\tvar copy;\t\tif (obj instanceof Date) {\t\t\tcopy = new Date();\t\t\tcopy.setTime(obj.getTime());\t\t} else if (obj instanceof Array) {\t\t\tcopy = [];\t\t\tfor (var i = 0, len = obj.length; i < len; i++) {\t\t\t\tif (obj[i] == null || typeof obj[i] != \"object\")\t\t\t\t\tcopy[i] = obj[i];\t\t\t\telse\t\t\t\t\tcopy[i] = @edu.colorado.mpiper.client.control.DataTransfer::copyImpl(Lcom/google/gwt/core/client/JavaScriptObject;)(obj[i]);\t\t\t}\t\t} else {\t\t\tcopy = {};\t\t\tfor ( var attr in obj) {\t\t\t\tif (obj.hasOwnProperty(attr)) {\t\t\t\t\tif (obj[attr] == null || typeof obj[attr] != \"object\")\t\t\t\t\t\tcopy[attr] = obj[attr];\t\t\t\t\telse\t\t\t\t\t\tcopy[attr] = @edu.colorado.mpiper.client.control.DataTransfer::copyImpl(Lcom/google/gwt/core/client/JavaScriptObject;)(obj[attr]);\t\t\t\t}\t\t\t}\t\t}\t\treturn copy;  }-*/;","code_tokens":["private","static","native","java","script","object","copy","impl","(","java","script","object","obj",")",";"],"func_name":"copyImpl","func_name_tokens":["copy","impl"],"docstring":"      A recursive JSNI method for making a deep copy of an input    JavaScriptObject. This is the private implementation of    {@link #copy(JavaScriptObject)}.    <p>    See <a    >This</a> example code was very helpful (thanks to the author, <a    href=\"http://stackoverflow.com/users/247462/javier-ferrero\">Javier    Ferrero</a>!)        @param obj","docstring_tokens":["a","recursive","jsni","method","for","making","a","deep","copy","of","an","input","java","script","object",".","this","is","the","private","implementation","of","{","#","copy","(","java","script","object",")","}",".","<","p",">","see","<","a",">","this","<","/","a",">","example","code","was","very","helpful","(","thanks","to","the","author",",","<","a","href","=","\"","\"",">","javier","ferrero","<","/","a",">","!",")"],"query":"GWT Overlay deep copy","query_tokens":["gwt","overlay","deep","copy"]}
{"query_id":"5930532","repo_name":"hackugyo/wishlist_hackugyo","zip_link":"/hackugyo/wishlist_hackugyo/archive/master.zip","code":"    public static boolean isValidUrl(String potentialUrl) {        return Patterns.WEB_URL.matcher(potentialUrl).matches();    }","code_tokens":["public","static","boolean","is","valid","url","(","string","potential","url",")","{","return","patterns",".","web","url",".","matcher","(","potential","url",")",".","matches","(",")",";","}"],"func_name":"isValidUrl","func_name_tokens":["is","valid","url"],"docstring":"          URLが適切かどうかを返します．{@link URLUtil#isValidUrl(String)}にはバグがあるので使わないでください．            @param potentialUrl      @return valid or not valid","docstring_tokens":["url","．","{","url","util","#","is","valid","url","(","string",")","}","．"],"query":"how to validate a URL / website name in EditText in Android?","query_tokens":["how","to","validate","a","url","/","website","name","in","edit","text","in","android","?"]}
{"query_id":"4265472","repo_name":"CyanogenMod/android_external_nanohttpd","zip_link":"/CyanogenMod/android_external_nanohttpd/archive/staging/cm-12.0-caf.zip","code":"    private static String encodeBase64(byte[] buf) {        int size = buf.length;        char[] ar = new char[((size + 2) / 3) * 4];        int a = 0;        int i = 0;        while (i < size) {            byte b0 = buf[i++];            byte b1 = (i < size) ? buf[i++] : 0;            byte b2 = (i < size) ? buf[i++] : 0;            int mask = 0x3F;            ar[a++] = ALPHABET[(b0 >> 2) & mask];            ar[a++] = ALPHABET[((b0 << 4) | ((b1 & 0xFF) >> 4)) & mask];            ar[a++] = ALPHABET[((b1 << 2) | ((b2 & 0xFF) >> 6)) & mask];            ar[a++] = ALPHABET[b2 & mask];        }        switch (size % 3) {            case 1:                ar[--a] = '=';            case 2:                ar[--a] = '=';        }        return new String(ar);    }","code_tokens":["private","static","string","encode","base64","(","byte","[","]","buf",")","{","int","size","=","buf",".","length",";","char","[","]","ar","=","new","char","[","(","(","size","+","2",")","/","3",")","*","4","]",";","int","a","=","0",";","int","i","=","0",";","while","(","i","<","size",")","{","byte","b0","=","buf","[","i","+","+","]",";","byte","b1","=","(","i","<","size",")","?","buf","[","i","+","+","]",":","0",";","byte","b2","=","(","i","<","size",")","?","buf","[","i","+","+","]",":","0",";","int","mask","=","0x3f",";","ar","[","a","+","+","]","=","alphabet","[","(","b0",">",">","2",")","&","mask","]",";","ar","[","a","+","+","]","=","alphabet","[","(","(","b0","<","<","4",")","|","(","(","b1","&","0x","ff",")",">",">","4",")",")","&","mask","]",";","ar","[","a","+","+","]","=","alphabet","[","(","(","b1","<","<","2",")","|","(","(","b2","&","0x","ff",")",">",">","6",")",")","&","mask","]",";","ar","[","a","+","+","]","=","alphabet","[","b2","&","mask","]",";","}","switch","(","size","%","3",")","{","case","1",":","ar","[","-","-","a","]","=","'","=","'",";","case","2",":","ar","[","-","-","a","]","=","'","=","'",";","}","return","new","string","(","ar",")",";","}"],"func_name":"encodeBase64","func_name_tokens":["encode","base64"],"docstring":"          Translates the specified byte array into Base64 string.      <p>      Android has android.util.Base64, sun has sun.misc.Base64Encoder, Java 8 hast java.util.Base64,      </p>           @param buf the byte array (not null)      @return the translated Base64 string (not null)","docstring_tokens":["translates","the","specified","byte","array","into","base64","string",".","<","p",">","android","has","android",".","util",".","base64",",","sun","has","sun",".","misc",".","base64encoder",",","java","8","hast","java",".","util",".","base64",",","<","/","p",">"],"query":"Decode Base64 data in Java","query_tokens":["decode","base64","data","in","java"]}
{"query_id":"31064750","repo_name":"opencb/opencga","zip_link":"/opencb/opencga/archive/develop.zip","code":"public class MongoLock {    private static final String LOCK_FIELD = \"lock\";    private static final String WRITE_FIELD = \"write\";    private final String lockWriteField;    private final MongoDBCollection collection;    public MongoLock(MongoDBCollection collection) {        this(collection, LOCK_FIELD);    }    public MongoLock(MongoDBCollection collection, String lockField) {        this.collection = collection;        this.collection.withReadPreference(ReadPreference.primary())                .withWriteConcern(WriteConcern.ACKNOWLEDGED);        lockWriteField = lockField + '.' + WRITE_FIELD;    }    /**     * Apply for the lock.     *     * @param id            _id the document to lock     * @param lockDuration  Duration un milliseconds of the token. After this time the token is expired.     * @param timeout       Max time in milliseconds to wait for the lock     *     * @return              Lock token     *     * @throws InterruptedException if any thread has interrupted the current thread.     * @throws TimeoutException if the operations takes more than the timeout value.     */    public long lock(Object id, long lockDuration, long timeout)            throws InterruptedException, TimeoutException {        try {            // Ensure document exists            collection.update(new Document(\"_id\", id), set(\"_id\", id), new QueryOptions(MongoDBCollection.UPSERT, true));        } catch (MongoWriteException e) {            // Duplicated key exception            if (e.getError().getCode() != 11000) {                throw e;            }        } catch (DuplicateKeyException ignore) {            // Ignore this exception.            // With UPSERT=true, this command should never throw DuplicatedKeyException.            // See https://jira.mongodb.org/browse/SERVER-14322        }        StopWatch watch = new StopWatch();        watch.start();        long modifiedCount;        Date date;        do {            date = new Date(Calendar.getInstance().getTimeInMillis() + lockDuration);            Date now = Calendar.getInstance().getTime();            Bson query = and(eq(\"_id\", id), or(eq(lockWriteField, null), lt(lockWriteField, now)));            Bson update = combine(set(lockWriteField, date));            modifiedCount = collection.update(query, update, null).getNumUpdated();            if (modifiedCount != 1) {                Thread.sleep(100);                //Check if the lock is still valid                if (watch.getTime() > timeout) {                    throw new TimeoutException(\"Unable to get the lock\");                }            }        } while (modifiedCount == 0);        return date.getTime();    }    /**     * Releases the lock.     *     * @param id            _id the document to lock     * @param lockToken     Lock token     * @throws IllegalStateException  if the lockToken does not match with the current lockToken     */    public void unlock(Object id, long lockToken) {        Date date = new Date(lockToken);        Bson query = and(eq(\"_id\", id), eq(lockWriteField, date));        Bson update = set(lockWriteField, null);        long matchedCount = collection.update(query, update, null).getNumMatches();        if (matchedCount == 0) {            throw new IllegalStateException(\"Lock token \" + lockToken + \" not found!\");        }    }}","code_tokens":["public","class","mongo","lock","{","private","static","final","string","lock","field","=","\"","lock","\"",";","private","static","final","string","write","field","=","\"","write","\"",";","private","final","string","lock","write","field",";","private","final","mongo","db","collection","collection",";","public","mongo","lock","(","mongo","db","collection","collection",")","{","this","(","collection",",","lock","field",")",";","}","public","mongo","lock","(","mongo","db","collection","collection",",","string","lock","field",")","{","this",".","collection","=","collection",";","this",".","collection",".","with","read","preference","(","read","preference",".","primary","(",")",")",".","with","write","concern","(","write","concern",".","acknowledged",")",";","lock","write","field","=","lock","field","+","'",".","'","+","write","field",";","}","public","long","lock","(","object","id",",","long","lock","duration",",","long","timeout",")","throws","interrupted","exception",",","timeout","exception","{","try","{","/","/","ensure","document","exists","collection",".","update","(","new","document","(","\"","id","\"",",","id",")",",","set","(","\"","id","\"",",","id",")",",","new","query","options","(","mongo","db","collection",".","upsert",",","true",")",")",";","}","catch","(","mongo","write","exception","e",")","{","/","/","duplicated","key","exception","if","(","e",".","get","error","(",")",".","get","code","(",")","!","=","11000",")","{","throw","e",";","}","}","catch","(","duplicate","key","exception","ignore",")","{","/","/","ignore","this","exception",".","/","/","with","upsert","=","true",",","this","command","should","never","throw","duplicated","key","exception",".","/","/","see","}","stop","watch","watch","=","new","stop","watch","(",")",";","watch",".","start","(",")",";","long","modified","count",";","date","date",";","do","{","date","=","new","date","(","calendar",".","get","instance","(",")",".","get","time","in","millis","(",")","+","lock","duration",")",";","date","now","=","calendar",".","get","instance","(",")",".","get","time","(",")",";","bson","query","=","and","(","eq","(","\"","id","\"",",","id",")",",","or","(","eq","(","lock","write","field",",","null",")",",","lt","(","lock","write","field",",","now",")",")",")",";","bson","update","=","combine","(","set","(","lock","write","field",",","date",")",")",";","modified","count","=","collection",".","update","(","query",",","update",",","null",")",".","get","num","updated","(",")",";","if","(","modified","count","!","=","1",")","{","thread",".","sleep","(","100",")",";","/","/","check","if","the","lock","is","still","valid","if","(","watch",".","get","time","(",")",">","timeout",")","{","throw","new","timeout","exception","(","\"","unable","to","get","the","lock","\"",")",";","}","}","}","while","(","modified","count","=","=","0",")",";","return","date",".","get","time","(",")",";","}","public","void","unlock","(","object","id",",","long","lock","token",")","{","date","date","=","new","date","(","lock","token",")",";","bson","query","=","and","(","eq","(","\"","id","\"",",","id",")",",","eq","(","lock","write","field",",","date",")",")",";","bson","update","=","set","(","lock","write","field",",","null",")",";","long","matched","count","=","collection",".","update","(","query",",","update",",","null",")",".","get","num","matches","(",")",";","if","(","matched","count","=","=","0",")","{","throw","new","illegal","state","exception","(","\"","lock","token","\"","+","lock","token","+","\"","not","found","!","\"",")",";","}","}","}"],"func_name":"MongoLock","func_name_tokens":["mongo","lock"],"docstring":"  Concurrent lock using a MongoDB document.   Created on 13/06/16    @author Jacobo Coll &lt;jacobo167@gmail.com&gt;","docstring_tokens":["concurrent","lock","using","a","mongo","db","document",".","created","on","13","/","06","/","16"],"query":"MongoDB: Implement a read / write lock (mutex)","query_tokens":["mongo","db",":","implement","a","read","/","write","lock","(","mutex",")"]}
{"query_id":"22596951","repo_name":"peterchauyw/Joey","zip_link":"/peterchauyw/Joey/archive/master.zip","code":"    public boolean refreshDeviceCache(){        try {            BluetoothGatt localBluetoothGatt = mGatt;            Method localMethod = localBluetoothGatt.getClass().getMethod(\"refresh\", new Class[0]);            if (localMethod != null) {                boolean result = ((Boolean) localMethod.invoke(localBluetoothGatt, new Object[0])).booleanValue();                if (result) {                    Log.d(TAG, \"Bluetooth refresh cache\");                }                return result;            }        }        catch (Exception localException) {            Log.e(TAG, \"An exception occurred while refreshing device\");        }        return false;    }","code_tokens":["public","boolean","refresh","device","cache","(",")","{","try","{","bluetooth","gatt","local","bluetooth","gatt","=","m","gatt",";","method","local","method","=","local","bluetooth","gatt",".","get","class","(",")",".","get","method","(","\"","refresh","\"",",","new","class","[","0","]",")",";","if","(","local","method","!","=","null",")","{","boolean","result","=","(","(","boolean",")","local","method",".","invoke","(","local","bluetooth","gatt",",","new","object","[","0","]",")",")",".","boolean","value","(",")",";","if","(","result",")","{","log",".","d","(","tag",",","\"","bluetooth","refresh","cache","\"",")",";","}","return","result",";","}","}","catch","(","exception","local","exception",")","{","log",".","e","(","tag",",","\"","an","exception","occurred","while","refreshing","device","\"",")",";","}","return","false",";","}"],"func_name":"refreshDeviceCache","func_name_tokens":["refresh","device","cache"],"docstring":"         Call to private Android method 'refresh'     This method does actually clear the cache from a bluetooth device. But the problem is that we don't have access to it. But in java we have reflection, so we can access this method.","docstring_tokens":["call","to","private","android","method","'","refresh","'","this","method","does","actually","clear","the","cache","from","a","bluetooth","device",".","but","the","problem","is","that","we","don","'","t","have","access","to","it",".","but","in","java","we","have","reflection",",","so","we","can","access","this","method","."],"query":"How to programmatically force bluetooth low energy service discovery on Android without using cache","query_tokens":["how","to","programmatically","force","bluetooth","low","energy","service","discovery","on","android","without","using","cache"]}
{"query_id":"3775694","repo_name":"lanchun/myrobotlab","zip_link":"/lanchun/myrobotlab/archive/master.zip","code":"    public static boolean deleteDir(File dir) {        if (dir.isDirectory()) {            String[] children = dir.list();            for (int i = 0; i < children.length; i++) {                boolean success = deleteDir(new File(dir, children[i]));                if (!success) {                    return false;                }            }        }        // The directory is now empty so delete it        return dir.delete();    }","code_tokens":["public","static","boolean","delete","dir","(","file","dir",")","{","if","(","dir",".","is","directory","(",")",")","{","string","[","]","children","=","dir",".","list","(",")",";","for","(","int","i","=","0",";","i","<","children",".","length",";","i","+","+",")","{","boolean","success","=","delete","dir","(","new","file","(","dir",",","children","[","i","]",")",")",";","if","(","!","success",")","{","return","false",";","}","}","}","/","/","the","directory","is","now","empty","so","delete","it","return","dir",".","delete","(",")",";","}"],"func_name":"deleteDir","func_name_tokens":["delete","dir"],"docstring":"    /      Delete the previous project from the temp folder if one exists.","docstring_tokens":["/","delete","the","previous","project","from","the","temp","folder","if","one","exists","."],"query":"deleting folder from java [duplicate]","query_tokens":["deleting","folder","from","java","[","duplicate","]"]}
{"query_id":"1247772","repo_name":"ahmadshahwan/cohorte-herald","zip_link":"/ahmadshahwan/cohorte-herald/archive/master.zip","code":"    private Pattern compile(final String aFnMatch) {        final StringBuilder out = new StringBuilder(\"^\");        boolean escaped = false;        for (final char currentChar : aFnMatch.toCharArray()) {            switch (currentChar) {            case '*':                if (escaped) {                    out.append(\"\\\\*\");                    escaped = false;                } else {                    out.append(\".*\");                }                break;            case '?':                if (escaped) {                    out.append(\"\\\\?\");                    escaped = false;                } else {                    out.append(\".\");                }                break;            case '.':                out.append(\"\\\\.\");                break;            case '\\\\':                if (escaped) {                    out.append(\"\\\\\\\\\");                } else {                    escaped = true;                }                break;            default:                out.append(currentChar);            }        }        out.append('$');        return Pattern.compile(out.toString());    }","code_tokens":["private","pattern","compile","(","final","string","a","fn","match",")","{","final","string","builder","out","=","new","string","builder","(","\"","^","\"",")",";","boolean","escaped","=","false",";","for","(","final","char","current","char",":","a","fn","match",".","to","char","array","(",")",")","{","switch","(","current","char",")","{","case","'","*","'",":","if","(","escaped",")","{","out",".","append","(","\"","\\","\\","*","\"",")",";","escaped","=","false",";","}","else","{","out",".","append","(","\"",".","*","\"",")",";","}","break",";","case","'","?","'",":","if","(","escaped",")","{","out",".","append","(","\"","\\","\\","?","\"",")",";","escaped","=","false",";","}","else","{","out",".","append","(","\"",".","\"",")",";","}","break",";","case","'",".","'",":","out",".","append","(","\"","\\","\\",".","\"",")",";","break",";","case","'","\\","\\","'",":","if","(","escaped",")","{","out",".","append","(","\"","\\","\\","\\","\\","\"",")",";","}","else","{","escaped","=","true",";","}","break",";","default",":","out",".","append","(","current","char",")",";","}","}","out",".","append","(","'","$","'",")",";","return","pattern",".","compile","(","out",".","to","string","(",")",")",";","}"],"func_name":"compile","func_name_tokens":["compile"],"docstring":"          Compiles a wild card filename filter into a Regex pattern           Inspired from <a href=      >this post on StackOverflow</a>           @param aFnMatch                 A file name match string      @return A compiled Regex pattern","docstring_tokens":["compiles","a","wild","card","filename","filter","into","a","regex","pattern","inspired","from","<","a","href","=",">","this","post","on","stack","overflow","<","/","a",">"],"query":"Is there an equivalent of java.util.regex for “glob” type patterns?","query_tokens":["is","there","an","equivalent","of","java",".","util",".","regex","for","“","glob","”","type","patterns","?"]}
{"query_id":"5099622","repo_name":"tklee1975/lavagna","zip_link":"/tklee1975/lavagna/archive/master.zip","code":"public class GsonHttpMessageConverter extends AbstractHttpMessageConverter<Object> {\tprivate final Gson gson = new GsonBuilder().serializeNulls().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\t\t\t.generateNonExecutableJson().create();\tpublic GsonHttpMessageConverter() {\t\tsuper(new MediaType(\"application\", \"json\", StandardCharsets.UTF_8));\t}\t@Override\tprotected boolean supports(Class<?> clazz) {\t\treturn true;\t}\t@Override\tprotected Object readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage) throws IOException {\t\ttry (Reader reader = new InputStreamReader(inputMessage.getBody(), StandardCharsets.UTF_8)) {\t\t\treturn gson.fromJson(reader, clazz);\t\t} catch (JsonSyntaxException e) {\t\t\tthrow new HttpMessageNotReadableException(\"Could not read JSON: \" + e.getMessage(), e);\t\t}\t}\t@Override\tprotected void writeInternal(Object t, HttpOutputMessage outputMessage) throws IOException {\t\ttry (Writer writer = new OutputStreamWriter(outputMessage.getBody(), StandardCharsets.UTF_8)) {\t\t\tgson.toJson(t, writer);\t\t}\t}}","code_tokens":["public","class","gson","http","message","converter","extends","abstract","http","message","converter","<","object",">","{","private","final","gson","gson","=","new","gson","builder","(",")",".","serialize","nulls","(",")",".","set","date","format","(","\"","yyyy","-","mm","-","dd","'","t","'","hh",":","mm",":","ss",".","sssz","\"",")",".","generate","non","executable","json","(",")",".","create","(",")",";","public","gson","http","message","converter","(",")","{","super","(","new","media","type","(","\"","application","\"",",","\"","json","\"",",","standard","charsets",".","utf","8",")",")",";","}","@","override","protected","boolean","supports","(","class","<","?",">","clazz",")","{","return","true",";","}","@","override","protected","object","read","internal","(","class","<","?","extends","object",">","clazz",",","http","input","message","input","message",")","throws","io","exception","{","try","(","reader","reader","=","new","input","stream","reader","(","input","message",".","get","body","(",")",",","standard","charsets",".","utf","8",")",")","{","return","gson",".","from","json","(","reader",",","clazz",")",";","}","catch","(","json","syntax","exception","e",")","{","throw","new","http","message","not","readable","exception","(","\"","could","not","read","json",":","\"","+","e",".","get","message","(",")",",","e",")",";","}","}","@","override","protected","void","write","internal","(","object","t",",","http","output","message","output","message",")","throws","io","exception","{","try","(","writer","writer","=","new","output","stream","writer","(","output","message",".","get","body","(",")",",","standard","charsets",".","utf","8",")",")","{","gson",".","to","json","(","t",",","writer",")",";","}","}","}"],"func_name":"GsonHttpMessageConverter","func_name_tokens":["gson","http","message","converter"],"docstring":"    Read/write json, derived from :  <ul>  <li>http://stackoverflow.com/a/8728500  </ul>    Used as a lightweight alternative to jackson.","docstring_tokens":["read","/","write","json",",","derived","from",":","<","ul",">","<","li",">","<","/","ul",">","used","as","a","lightweight","alternative","to","jackson","."],"query":"Custom HttpMessageConverter with @ResponseBody to do Json things","query_tokens":["custom","http","message","converter","with","@","response","body","to","do","json","things"]}
{"query_id":"16966629","repo_name":"datametica/calcite","zip_link":"/datametica/calcite/archive/master.zip","code":"  @Override public RelDataType createStructType(Class type) {    final List<RelDataTypeField> list = new ArrayList<>();    for (Field field : type.getDeclaredFields()) {      if (!Modifier.isStatic(field.getModifiers())) {        // FIXME: watch out for recursion        final Type fieldType = field.getType();        list.add(            new RelDataTypeFieldImpl(                field.getName(),                list.size(),                createType(fieldType)));      }    }    return canonize(new JavaRecordType(list, type));  }","code_tokens":["@","override","public","rel","data","type","create","struct","type","(","class","type",")","{","final","list","<","rel","data","type","field",">","list","=","new","array","list","<",">","(",")",";","for","(","field","field",":","type",".","get","declared","fields","(",")",")","{","if","(","!","modifier",".","is","static","(","field",".","get","modifiers","(",")",")",")","{","/","/","fixme",":","watch","out","for","recursion","final","type","field","type","=","field",".","get","type","(",")",";","list",".","add","(","new","rel","data","type","field","impl","(","field",".","get","name","(",")",",","list",".","size","(",")",",","create","type","(","field","type",")",")",")",";","}","}","return","canonize","(","new","java","record","type","(","list",",","type",")",")",";","}"],"func_name":"createStructType","func_name_tokens":["create","struct","type"],"docstring":"        the difference between fields and declared fields</a>.","docstring_tokens":["the","difference","between","fields","and","declared","fields","<","/","a",">","."],"query":"What is the difference between getFields and getDeclaredFields in Java reflection","query_tokens":["what","is","the","difference","between","get","fields","and","get","declared","fields","in","java","reflection"]}
{"query_id":"1102916","repo_name":"rsanchez-wsu/RaiderPlanner","zip_link":"/rsanchez-wsu/RaiderPlanner/archive/master.zip","code":"\tpublic static boolean isNumeric(String str) {\t\ttry {\t\t\t// No need to assign the result; the exception or lack of is what matters\t\t\tDouble.parseDouble(str);\t\t} catch (NumberFormatException nfe) {\t\t\treturn false;\t\t}\t\treturn true;\t}","code_tokens":["public","static","boolean","is","numeric","(","string","str",")","{","try","{","/","/","no","need","to","assign","the","result",";","the","exception","or","lack","of","is","what","matters","double",".","parse","double","(","str",")",";","}","catch","(","number","format","exception","nfe",")","{","return","false",";","}","return","true",";","}"],"func_name":"isNumeric","func_name_tokens":["is","numeric"],"docstring":"\t\t  Apparently (according to Stackoverflow) the Java Standard library doesn't have a\t  standard check for testing if a string value is a number or not?!)\t \t  <p>Therefore, we are using this proposed isNumeric method from:\t \t \t  @param str String to be tested\t  @return true the given String is numeric (i.e., can be parsed into a\t  \t\t\t\tDouble), false otherwise.","docstring_tokens":["apparently","(","according","to","stackoverflow",")","the","java","standard","library","doesn","'","t","have","a","standard","check","for","testing","if","a","string","value","is","a","number","or","not","?","!",")","<","p",">","therefore",",","we","are","using","this","proposed","is","numeric","method","from",":"],"query":"How to check if a String is numeric in Java","query_tokens":["how","to","check","if","a","string","is","numeric","in","java"]}
{"query_id":"13345640","repo_name":"jmflorezff/cs-6301","zip_link":"/jmflorezff/cs-6301/archive/master.zip","code":"\tprivate final class FreeMindComboBox extends JComboBox {\t\tprivate FreeMindComboBox(Vector pItems) {\t\t\tsuper(pItems);\t\t}\t\tpublic FreeMindComboBox(String[] pItems) {\t\t\tsuper(pItems);\t\t}\t\tpublic java.awt.Dimension getMaximumSize() {\t\t\treturn getPreferredSize();\t\t}\t}","code_tokens":["private","final","class","free","mind","combo","box","extends","j","combo","box","{","private","free","mind","combo","box","(","vector","p","items",")","{","super","(","p","items",")",";","}","public","free","mind","combo","box","(","string","[","]","p","items",")","{","super","(","p","items",")",";","}","public","java",".","awt",".","dimension","get","maximum","size","(",")","{","return","get","preferred","size","(",")",";","}","}"],"func_name":"FreeMindComboBox","func_name_tokens":["free","mind","combo","box"],"docstring":"\t\t  A combo box that doesn't fill the complete screen.","docstring_tokens":["a","combo","box","that","doesn","'","t","fill","the","complete","screen","."],"query":"Does anyone know how to layout a JToolBar that doesn't move or re-size any components placed in it?","query_tokens":["does","anyone","know","how","to","layout","a","j","tool","bar","that","doesn","'","t","move","or","re","-","size","any","components","placed","in","it","?"]}
{"query_id":"7930591","repo_name":"Ana06/medical-data-android","zip_link":"/Ana06/medical-data-android/archive/master.zip","code":"    public static boolean isToday(String timestamp) {        Calendar cal = Calendar.getInstance();        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return dateWithTimezone(timestamp) >= cal.getTimeInMillis();    }","code_tokens":["public","static","boolean","is","today","(","string","timestamp",")","{","calendar","cal","=","calendar",".","get","instance","(",")",";","cal",".","set","(","calendar",".","hour","of","day",",","0",")",";","cal",".","set","(","calendar",".","minute",",","0",")",";","cal",".","set","(","calendar",".","second",",","0",")",";","cal",".","set","(","calendar",".","millisecond",",","0",")",";","return","date","with","timezone","(","timestamp",")",">","=","cal",".","get","time","in","millis","(",")",";","}"],"func_name":"isToday","func_name_tokens":["is","today"],"docstring":"          Given a {@link Timestamp} returns a boolean indicating if its belongs to today or not.           @param timestamp A {@link Timestamp}      @return <code>true</code>if the timestamp belongs to today; <code>false</code>      otherwise      @see Calendar","docstring_tokens":["given","a","{","timestamp","}","returns","a","boolean","indicating","if","its","belongs","to","today","or","not","."],"query":"Java calendar get the current date, without hours, minutes, seconds and milliseconds, in milliseconds","query_tokens":["java","calendar","get","the","current","date",",","without","hours",",","minutes",",","seconds","and","milliseconds",",","in","milliseconds"]}
{"query_id":"2938482","repo_name":"graben1437/titan0.5.4-hbase1.1.1-custom","zip_link":"/graben1437/titan0.5.4-hbase1.1.1-custom/archive/master.zip","code":"public class LongEncoding {    private static final String BASE_SYMBOLS = \"0123456789abcdefghijklmnopqrstuvwxyz\";    public static long decode(String s) {        return decode(s,BASE_SYMBOLS);    }    public static String encode(long num) {        return encode(num,BASE_SYMBOLS);    }    public static long decode(String s, String symbols) {        final int B = symbols.length();        long num = 0;        for (char ch : s.toCharArray()) {            num *= B;            int pos = symbols.indexOf(ch);            if (pos<0) throw new NumberFormatException(\"Symbol set does not match string\");            num += pos;        }        return num;    }    public static String encode(long num, String symbols) {        Preconditions.checkArgument(num>=0,\"Expected non-negative number: \" + num);        final int B = symbols.length();        StringBuilder sb = new StringBuilder();        while (num != 0) {            sb.append(symbols.charAt((int) (num % B)));            num /= B;        }        return sb.reverse().toString();    }}","code_tokens":["public","class","long","encoding","{","private","static","final","string","base","symbols","=","\"","0123456789abcdefghijklmnopqrstuvwxyz","\"",";","public","static","long","decode","(","string","s",")","{","return","decode","(","s",",","base","symbols",")",";","}","public","static","string","encode","(","long","num",")","{","return","encode","(","num",",","base","symbols",")",";","}","public","static","long","decode","(","string","s",",","string","symbols",")","{","final","int","b","=","symbols",".","length","(",")",";","long","num","=","0",";","for","(","char","ch",":","s",".","to","char","array","(",")",")","{","num","*","=","b",";","int","pos","=","symbols",".","index","of","(","ch",")",";","if","(","pos","<","0",")","throw","new","number","format","exception","(","\"","symbol","set","does","not","match","string","\"",")",";","num","+","=","pos",";","}","return","num",";","}","public","static","string","encode","(","long","num",",","string","symbols",")","{","preconditions",".","check","argument","(","num",">","=","0",",","\"","expected","non","-","negative","number",":","\"","+","num",")",";","final","int","b","=","symbols",".","length","(",")",";","string","builder","sb","=","new","string","builder","(",")",";","while","(","num","!","=","0",")","{","sb",".","append","(","symbols",".","char","at","(","(","int",")","(","num","%","b",")",")",")",";","num","/","=","b",";","}","return","sb",".","reverse","(",")",".","to","string","(",")",";","}","}"],"func_name":"LongEncoding","func_name_tokens":["long","encoding"],"docstring":"  Utility class for encoding longs in strings based on:   @author http://stackoverflow.com/users/276101/polygenelubricants  @author Matthias Broecheler (me@matthiasb.com)","docstring_tokens":["utility","class","for","encoding","longs","in","strings","based","on",":"],"query":"Encode/decode a long to a string using a fixed set of letters in Java","query_tokens":["encode","/","decode","a","long","to","a","string","using","a","fixed","set","of","letters","in","java"]}
{"query_id":"1399574","repo_name":"bitblender/drill","zip_link":"/bitblender/drill/archive/master.zip","code":"public class JdbcApiSqlException extends SQLNonTransientException {  private static final long serialVersionUID = 2014_12_12L;  /**   * See {@link SQLException#SQLException(String, String, int)}.   */  public JdbcApiSqlException( String reason, String SQLState, int vendorCode ) {    super( reason, SQLState, vendorCode );  }  /**   * See {@link SQLException#SQLException(String, String)}.   */  public JdbcApiSqlException( String reason, String SQLState ) {    super( reason, SQLState );  }  /**   * See {@link SQLException#SQLException(String)}.   */  public JdbcApiSqlException( String reason ) {    super( reason );  }  /**   * See {@link SQLException#SQLException()}.   * */  public JdbcApiSqlException() {    super();  }  /**   * See {@link SQLException#SQLException(Throwable cause)}.   */  public JdbcApiSqlException( Throwable cause ) {    super( cause );  }  /**   * See {@link SQLException#SQLException(String, Throwable)}.   */  public JdbcApiSqlException( String reason, Throwable cause ) {    super( reason, cause );  }  /**   * See {@link SQLException#SQLException(String, String, Throwable)}.   */  public JdbcApiSqlException( String reason, String sqlState, Throwable cause ) {    super( reason, sqlState, cause );  }  /**   * See {@link SQLException#SQLException(String, String, int, Throwable)}.   */  public JdbcApiSqlException( String reason,                              String sqlState,                              int vendorCode,                              Throwable cause ) {    super( reason, sqlState, vendorCode, cause );  }}","code_tokens":["public","class","jdbc","api","sql","exception","extends","sql","non","transient","exception","{","private","static","final","long","serial","version","uid","=","2014","12","12l",";","public","jdbc","api","sql","exception","(","string","reason",",","string","sql","state",",","int","vendor","code",")","{","super","(","reason",",","sql","state",",","vendor","code",")",";","}","public","jdbc","api","sql","exception","(","string","reason",",","string","sql","state",")","{","super","(","reason",",","sql","state",")",";","}","public","jdbc","api","sql","exception","(","string","reason",")","{","super","(","reason",")",";","}","public","jdbc","api","sql","exception","(",")","{","super","(",")",";","}","public","jdbc","api","sql","exception","(","throwable","cause",")","{","super","(","cause",")",";","}","public","jdbc","api","sql","exception","(","string","reason",",","throwable","cause",")","{","super","(","reason",",","cause",")",";","}","public","jdbc","api","sql","exception","(","string","reason",",","string","sql","state",",","throwable","cause",")","{","super","(","reason",",","sql","state",",","cause",")",";","}","public","jdbc","api","sql","exception","(","string","reason",",","string","sql","state",",","int","vendor","code",",","throwable","cause",")","{","super","(","reason",",","sql","state",",","vendor","code",",","cause",")",";","}","}"],"func_name":"JdbcApiSqlException","func_name_tokens":["jdbc","api","sql","exception"],"docstring":"  SQLException for JDBC API calling-sequence/state problems.   <p>    {@code JdbcApiSqlException} is intended for errors in using the JDBC API,    such as calling {@link ResultSet#getString} before calling    {@link ResultSet#next}.  </p>  <p>    ({@code JdbcApiSqlException} is not for errors that are not under direct    control of the programmer writing JDBC API calls, for example, invalid SQL    syntax errors (which should use {@link SQLSyntaxErrorException}), errors    from SQL-vs.-data mismatches (which likely should use {@link SQLDataException}),    data file format errors, resource availability errors (which might use    {@link SQLTransientException}), or internal Drill errors.)  </p>  <p>   TODO:  Consider using ANSI-/XOPEN-standard SQL State values.  (See:  </p>  <ul>    <li>      <a href=\"        \">       http://stackoverflow.com/questions/1399574/what-are-all-the-possible-values-for-sqlexception-getsqlstate      </a>    </li>    <li>      <a href=\"        https://github.com/olamedia/kanon/blob/master/src/mvc-model/storageDrivers/SQLSTATE.txt      \">        https://github.com/olamedia/kanon/blob/master/src/mvc-model/storageDrivers/SQLSTATE.txt      </a>    </li>    <li>      <a href=\"        http://kanon-framework.googlecode.com/svn/trunk/src/mvc-model/storageDrivers/SQLSTATE.txt      \">        http://kanon-framework.googlecode.com/svn/trunk/src/mvc-model/storageDrivers/SQLSTATE.txt      </a>    </li>    <li>      <a href=\"        http://www-01.ibm.com/support/knowledgecenter/api/content/nl/en-us/SSVHEW_6.2.0/com.ibm.rcp.tools.doc.db2e/adg/sql11.html      \">        http://www-01.ibm.com/support/knowledgecenter/api/content/nl/en-us/SSVHEW_6.2.0/com.ibm.rcp.tools.doc.db2e/adg/sql11.html      </a>    </li>    <li>      <a href=\"        ftp://ftp.software.ibm.com/ps/products/db2/info/vr6/htm/db2m0/db2state.htm      \">        ftp://ftp.software.ibm.com/ps/products/db2/info/vr6/htm/db2m0/db2state.htm      </a>    </li>    <li>      <a href=\"        https://docs.oracle.com/cd/E15817_01/appdev.111/b31230/ch2.htm      \">        https://docs.oracle.com/cd/E15817_01/appdev.111/b31230/ch2.htm      </a>    </li>  </ul>  <p>    etc.)  </p>","docstring_tokens":["sql","exception","for","jdbc","api","calling","-","sequence","/","state","problems",".","<","p",">","{","@","code","jdbc","api","sql","exception","}","is","intended","for","errors","in","using","the","jdbc","api",",","such","as","calling","{","result","set","#","get","string","}","before","calling","{","result","set","#","next","}",".","<","/","p",">","<","p",">","(","{","@","code","jdbc","api","sql","exception","}","is","not","for","errors","that","are","not","under","direct","control","of","the","programmer","writing","jdbc","api","calls",",","for","example",",","invalid","sql","syntax","errors","(","which","should","use","{","sql","syntax","error","exception","}",")",",","errors","from","sql","-","vs",".","-","data","mismatches","(","which","likely","should","use","{","sql","data","exception","}",")",",","data","file","format","errors",",","resource","availability","errors","(","which","might","use","{","sql","transient","exception","}",")",",","or","internal","drill","errors",".",")","<","/","p",">","<","p",">","todo",":","consider","using","ansi","-","/","xopen","-","standard","sql","state","values",".","(","see",":","<","/","p",">","<","ul",">","<","li",">","<","a","href","=","\"","\"",">","<","/","a",">","<","/","li",">","<","li",">","<","a","href","=","\"","\"",">","<","/","a",">","<","/","li",">","<","li",">","<","a","href","=","\"","\"",">","<","/","a",">","<","/","li",">","<","li",">","<","a","href","=","\"","\"",">","<","/","a",">","<","/","li",">","<","li",">","<","a","href","=","\"","ftp",":","/","/","ftp",".","software",".","ibm",".","com","/","ps","/","products","/","db2","/","info","/","vr6","/","htm","/","db2m0","/","db2state",".","htm","\"",">","ftp",":","/","/","ftp",".","software",".","ibm",".","com","/","ps","/","products","/","db2","/","info","/","vr6","/","htm","/","db2m0","/","db2state",".","htm","<","/","a",">","<","/","li",">","<","li",">","<","a","href","=","\"","\"",">","<","/","a",">","<","/","li",">","<","/","ul",">","<","p",">","etc",".",")","<","/","p",">"],"query":"What are all the possible values for SQLException.getSQLState?","query_tokens":["what","are","all","the","possible","values","for","sql","exception",".","get","sql","state","?"]}
{"query_id":"2637023","repo_name":"bocekm/SkyControl","zip_link":"/bocekm/SkyControl/archive/master.zip","code":"    public static LatLng getDestination(LatLng initialPosition, double brng, double dist) {\r        // WGS-84 ellipsoid\r        double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563;\r        double s = dist;\r        double alpha1 = SkyControlUtils.degToRad(brng);\r        double sinAlpha1 = Math.sin(alpha1);\r        double cosAlpha1 = Math.cos(alpha1);\r        double lat1 = initialPosition.latitude;\r        double lon1 = initialPosition.longitude;\r\r        double tanU1 = (1 - f) * Math.tan(SkyControlUtils.degToRad(lat1));\r        double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;\r        double sigma1 = Math.atan2(tanU1, cosAlpha1);\r        double sinAlpha = cosU1 * sinAlpha1;\r        double cosSqAlpha = 1 - sinAlpha * sinAlpha;\r        double uSq = cosSqAlpha * (a * a - b * b) / (b * b);\r        double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\r        double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\r        double sinSigma = 0, cosSigma = 0, deltaSigma = 0, cos2SigmaM = 0;\r        double sigma = s / (b * A), sigmaP = 2 * Math.PI;\r\r        while (Math.abs(sigma - sigmaP) > 1e-12) {\r            cos2SigmaM = Math.cos(2 * sigma1 + sigma);\r            sinSigma = Math.sin(sigma);\r            cosSigma = Math.cos(sigma);\r            deltaSigma =\r                    B\r                            * sinSigma\r                            * (cos2SigmaM + B\r                                    / 4\r                                    * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6\r                                            * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma)\r                                            * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\r            sigmaP = sigma;\r            sigma = s / (b * A) + deltaSigma;\r        }\r\r        double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;\r        double lat2 =\r                Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1,\r                        (1 - f) * Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));\r        double lambda =\r                Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);\r        double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\r        double L =\r                lambda\r                        - (1 - C)\r                        * f\r                        * sinAlpha\r                        * (sigma + C * sinSigma\r                                * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\r        // Normalize to -180...+180\r        double lon2 = (SkyControlUtils.degToRad(lon1) + L + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\r        // final bearing, if required\r        // double revAz = Math.atan2(sinAlpha, -tmp);\r\r        LatLng newPosition =\r                new LatLng(SkyControlUtils.radToDeg(lat2), SkyControlUtils.radToDeg(lon2));\r        return newPosition;\r    }\r","code_tokens":["public","static","lat","lng","get","destination","(","lat","lng","initial","position",",","double","brng",",","double","dist",")","{","/","/","wgs","-","84","ellipsoid","double","a","=","6378137",",","b","=","6356752",".","3142",",","f","=","1","/","298",".","257223563",";","double","s","=","dist",";","double","alpha1","=","sky","control","utils",".","deg","to","rad","(","brng",")",";","double","sin","alpha1","=","math",".","sin","(","alpha1",")",";","double","cos","alpha1","=","math",".","cos","(","alpha1",")",";","double","lat1","=","initial","position",".","latitude",";","double","lon1","=","initial","position",".","longitude",";","double","tan","u1","=","(","1","-","f",")","*","math",".","tan","(","sky","control","utils",".","deg","to","rad","(","lat1",")",")",";","double","cos","u1","=","1","/","math",".","sqrt","(","(","1","+","tan","u1","*","tan","u1",")",")",",","sin","u1","=","tan","u1","*","cos","u1",";","double","sigma1","=","math",".","atan2","(","tan","u1",",","cos","alpha1",")",";","double","sin","alpha","=","cos","u1","*","sin","alpha1",";","double","cos","sq","alpha","=","1","-","sin","alpha","*","sin","alpha",";","double","u","sq","=","cos","sq","alpha","*","(","a","*","a","-","b","*","b",")","/","(","b","*","b",")",";","double","a","=","1","+","u","sq","/","16384","*","(","4096","+","u","sq","*","(","-","768","+","u","sq","*","(","320","-","175","*","u","sq",")",")",")",";","double","b","=","u","sq","/","1024","*","(","256","+","u","sq","*","(","-","128","+","u","sq","*","(","74","-","47","*","u","sq",")",")",")",";","double","sin","sigma","=","0",",","cos","sigma","=","0",",","delta","sigma","=","0",",","cos2sigma","m","=","0",";","double","sigma","=","s","/","(","b","*","a",")",",","sigma","p","=","2","*","math",".","pi",";","while","(","math",".","abs","(","sigma","-","sigma","p",")",">","1e","-","12",")","{","cos2sigma","m","=","math",".","cos","(","2","*","sigma1","+","sigma",")",";","sin","sigma","=","math",".","sin","(","sigma",")",";","cos","sigma","=","math",".","cos","(","sigma",")",";","delta","sigma","=","b","*","sin","sigma","*","(","cos2sigma","m","+","b","/","4","*","(","cos","sigma","*","(","-","1","+","2","*","cos2sigma","m","*","cos2sigma","m",")","-","b","/","6","*","cos2sigma","m","*","(","-","3","+","4","*","sin","sigma","*","sin","sigma",")","*","(","-","3","+","4","*","cos2sigma","m","*","cos2sigma","m",")",")",")",";","sigma","p","=","sigma",";","sigma","=","s","/","(","b","*","a",")","+","delta","sigma",";","}","double","tmp","=","sin","u1","*","sin","sigma","-","cos","u1","*","cos","sigma","*","cos","alpha1",";","double","lat2","=","math",".","atan2","(","sin","u1","*","cos","sigma","+","cos","u1","*","sin","sigma","*","cos","alpha1",",","(","1","-","f",")","*","math",".","sqrt","(","sin","alpha","*","sin","alpha","+","tmp","*","tmp",")",")",";","double","lambda","=","math",".","atan2","(","sin","sigma","*","sin","alpha1",",","cos","u1","*","cos","sigma","-","sin","u1","*","sin","sigma","*","cos","alpha1",")",";","double","c","=","f","/","16","*","cos","sq","alpha","*","(","4","+","f","*","(","4","-","3","*","cos","sq","alpha",")",")",";","double","l","=","lambda","-","(","1","-","c",")","*","f","*","sin","alpha","*","(","sigma","+","c","*","sin","sigma","*","(","cos2sigma","m","+","c","*","cos","sigma","*","(","-","1","+","2","*","cos2sigma","m","*","cos2sigma","m",")",")",")",";","/","/","normalize","to","-","180",".",".",".","+","180","double","lon2","=","(","sky","control","utils",".","deg","to","rad","(","lon1",")","+","l","+","3","*","math",".","pi",")","%","(","2","*","math",".","pi",")","-","math",".","pi",";","/","/","final","bearing",",","if","required","/","/","double","rev","az","=","math",".","atan2","(","sin","alpha",",","-","tmp",")",";","lat","lng","new","position","=","new","lat","lng","(","sky","control","utils",".","rad","to","deg","(","lat2",")",",","sky","control","utils",".","rad","to","deg","(","lon2",")",")",";","return","new","position",";","}"],"func_name":"getDestination","func_name_tokens":["get","destination"],"docstring":"    \r      Calculates destination point given start point, bearing & distance, using Vincenty inverse\r      formula for ellipsoids.\r      \r      <a href=\r      >Java implementation source</a>\r      \r      Vincenty Direct Solution of Geodesics on the Ellipsoid (c) Chris Veness 2005-2012\r      \r      from: Vincenty direct formula - T Vincenty, \"Direct and Inverse Solutions of Geodesics on the\r      Ellipsoid with application of nested equations\", Survey Review, vol XXII no 176, 1975 <a\r      href=\r      \"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\r      </a>\r      \r      @param initialPosition start point position\r      @param brng initial bearing in decimal degrees\r      @param dist distance to computed destination along bearing in meters\r      @return destination point coordinates with 5.10<sup>-4</sup> m precision\r","docstring_tokens":["calculates","destination","point","given","start","point",",","bearing","&","distance",",","using","vincenty","inverse","formula","for","ellipsoids",".","<","a","href","=",">","java","implementation","source","<","/","a",">","vincenty","direct","solution","of","geodesics","on","the","ellipsoid","(","c",")","chris","veness","2005","-","2012","from",":","vincenty","direct","formula","-","t","vincenty",",","\"","direct","and","inverse","solutions","of","geodesics","on","the","ellipsoid","with","application","of","nested","equations","\"",",","survey","review",",","vol","xxii","no","176",",","1975","<","a","href","=","\"","\"",">","<","/","a",">"],"query":"How to calculate the latlng of a point a certain distance away from another?","query_tokens":["how","to","calculate","the","latlng","of","a","point","a","certain","distance","away","from","another","?"]}
{"query_id":"39004323","repo_name":"jenkinsci/saml-plugin","zip_link":"/jenkinsci/saml-plugin/archive/master.zip","code":"public abstract class OpenSAMLWrapper<T> {    private static final Logger LOG = Logger.getLogger(OpenSAMLWrapper.class.getName());    private static final BundleKeyStore KS = new BundleKeyStore();    protected SamlPluginConfig samlPluginConfig;    protected StaplerRequest request;    protected StaplerResponse response;    /**     * Initialize the OpenSaml services and run the process defined on the abstract method process().     *     * @return process return object     */    public T get() {        T ret = null;        try {            LOG.finest(\"adapt TCCL\");            Thread thread = Thread.currentThread();            ClassLoader loader = thread.getContextClassLoader();            thread.setContextClassLoader(InitializationService.class.getClassLoader());            try {                InitializationService.initialize();                ret = process();            } finally {                LOG.finest(\"reset TCCL\");                thread.setContextClassLoader(loader);            }        } catch (InitializationException e) {            LOG.log(SEVERE, \"Could not initialize opensaml service.\", e);            throw new IllegalStateException(e);        }        return ret;    }    /**     * Process to run using the OpenSaml services.     *     * @return process return type     */    abstract protected T process();    /**     * @return J2E Context from the current HTTP request and response.     */    protected WebContext createWebContext() {        return new J2EContext(request, response);    }    /**     * @return a SAML2Client object to interact with the IdP service.     */    protected SAML2Client createSAML2Client() {        final SAML2ClientConfigurationCustom config = new SAML2ClientConfigurationCustom();        config.setIdentityProviderMetadataResource(new SamlFileResource(SamlSecurityRealm.getIDPMetadataFilePath()));        config.setDestinationBindingType(samlPluginConfig.getBinding());        config.setWantsAssertionsSigned(true);        SamlEncryptionData encryptionData = samlPluginConfig.getEncryptionData();        if (encryptionData != null) {            config.setAuthnRequestSigned(encryptionData.isForceSignRedirectBindingAuthnRequest());        } else {            config.setAuthnRequestSigned(false);        }        if(encryptionData != null && StringUtils.isNotBlank(encryptionData.getKeystorePath())){            config.setKeystorePath(encryptionData.getKeystorePath());            config.setKeystorePassword(encryptionData.getKeystorePasswordPlainText());            config.setPrivateKeyPassword(encryptionData.getPrivateKeyPasswordPlainText());            config.setKeystoreAlias(encryptionData.getPrivateKeyAlias());        } else {            if (!KS.isValid()) {                KS.init();            }            if (KS.isUsingDemoKeyStore()) {                LOG.warning(\"Using bundled keystore : \" + KS.getKeystorePath());            }            config.setKeystorePath(KS.getKeystorePath());            config.setKeystorePassword(KS.getKsPassword());            config.setPrivateKeyPassword(KS.getKsPkPassword());            config.setKeystoreAlias(KS.getKsPkAlias());        }        config.setMaximumAuthenticationLifetime(samlPluginConfig.getMaximumAuthenticationLifetime());        if (samlPluginConfig.getAdvancedConfiguration() != null) {            // request forced authentication at the IdP, if selected            config.setForceAuth(samlPluginConfig.getForceAuthn());            // override the default EntityId for this SP, if one is set            if (samlPluginConfig.getSpEntityId() != null) {                config.setServiceProviderEntityId(samlPluginConfig.getSpEntityId());            }            // if a specific authentication type (authentication context class            // reference) is set, include it in the request to the IdP, and request            // that the IdP uses exact matching for authentication types            if (samlPluginConfig.getAuthnContextClassRef() != null) {                config.setAuthnContextClassRef(samlPluginConfig.getAuthnContextClassRef());                config.setComparisonType(\"exact\");            }            if(samlPluginConfig.getNameIdPolicyFormat() != null) {                config.setNameIdPolicyFormat(samlPluginConfig.getNameIdPolicyFormat());            }        }        config.setForceServiceProviderMetadataGeneration(true);        config.setServiceProviderMetadataResource(new SamlFileResource(SamlSecurityRealm.getSPMetadataFilePath()));        final SAML2Client saml2Client = new SAML2Client(config);        saml2Client.setCallbackUrl(samlPluginConfig.getConsumerServiceUrl());        saml2Client.init(createWebContext());        if (LOG.isLoggable(FINE)) {            LOG.fine(saml2Client.getServiceProviderMetadataResolver().getMetadata());        }        return saml2Client;    }}","code_tokens":["public","abstract","class","open","saml","wrapper","<","t",">","{","private","static","final","logger","log","=","logger",".","get","logger","(","open","saml","wrapper",".","class",".","get","name","(",")",")",";","private","static","final","bundle","key","store","ks","=","new","bundle","key","store","(",")",";","protected","saml","plugin","config","saml","plugin","config",";","protected","stapler","request","request",";","protected","stapler","response","response",";","public","t","get","(",")","{","t","ret","=","null",";","try","{","log",".","finest","(","\"","adapt","tccl","\"",")",";","thread","thread","=","thread",".","current","thread","(",")",";","class","loader","loader","=","thread",".","get","context","class","loader","(",")",";","thread",".","set","context","class","loader","(","initialization","service",".","class",".","get","class","loader","(",")",")",";","try","{","initialization","service",".","initialize","(",")",";","ret","=","process","(",")",";","}","finally","{","log",".","finest","(","\"","reset","tccl","\"",")",";","thread",".","set","context","class","loader","(","loader",")",";","}","}","catch","(","initialization","exception","e",")","{","log",".","log","(","severe",",","\"","could","not","initialize","opensaml","service",".","\"",",","e",")",";","throw","new","illegal","state","exception","(","e",")",";","}","return","ret",";","}","abstract","protected","t","process","(",")",";","protected","web","context","create","web","context","(",")","{","return","new","j2e","context","(","request",",","response",")",";","}","protected","saml2client","create","saml2client","(",")","{","final","saml2client","configuration","custom","config","=","new","saml2client","configuration","custom","(",")",";","config",".","set","identity","provider","metadata","resource","(","new","saml","file","resource","(","saml","security","realm",".","get","idp","metadata","file","path","(",")",")",")",";","config",".","set","destination","binding","type","(","saml","plugin","config",".","get","binding","(",")",")",";","config",".","set","wants","assertions","signed","(","true",")",";","saml","encryption","data","encryption","data","=","saml","plugin","config",".","get","encryption","data","(",")",";","if","(","encryption","data","!","=","null",")","{","config",".","set","authn","request","signed","(","encryption","data",".","is","force","sign","redirect","binding","authn","request","(",")",")",";","}","else","{","config",".","set","authn","request","signed","(","false",")",";","}","if","(","encryption","data","!","=","null","&","&","string","utils",".","is","not","blank","(","encryption","data",".","get","keystore","path","(",")",")",")","{","config",".","set","keystore","path","(","encryption","data",".","get","keystore","path","(",")",")",";","config",".","set","keystore","password","(","encryption","data",".","get","keystore","password","plain","text","(",")",")",";","config",".","set","private","key","password","(","encryption","data",".","get","private","key","password","plain","text","(",")",")",";","config",".","set","keystore","alias","(","encryption","data",".","get","private","key","alias","(",")",")",";","}","else","{","if","(","!","ks",".","is","valid","(",")",")","{","ks",".","init","(",")",";","}","if","(","ks",".","is","using","demo","key","store","(",")",")","{","log",".","warning","(","\"","using","bundled","keystore",":","\"","+","ks",".","get","keystore","path","(",")",")",";","}","config",".","set","keystore","path","(","ks",".","get","keystore","path","(",")",")",";","config",".","set","keystore","password","(","ks",".","get","ks","password","(",")",")",";","config",".","set","private","key","password","(","ks",".","get","ks","pk","password","(",")",")",";","config",".","set","keystore","alias","(","ks",".","get","ks","pk","alias","(",")",")",";","}","config",".","set","maximum","authentication","lifetime","(","saml","plugin","config",".","get","maximum","authentication","lifetime","(",")",")",";","if","(","saml","plugin","config",".","get","advanced","configuration","(",")","!","=","null",")","{","/","/","request","forced","authentication","at","the","id","p",",","if","selected","config",".","set","force","auth","(","saml","plugin","config",".","get","force","authn","(",")",")",";","/","/","override","the","default","entity","id","for","this","sp",",","if","one","is","set","if","(","saml","plugin","config",".","get","sp","entity","id","(",")","!","=","null",")","{","config",".","set","service","provider","entity","id","(","saml","plugin","config",".","get","sp","entity","id","(",")",")",";","}","/","/","if","a","specific","authentication","type","(","authentication","context","class","/","/","reference",")","is","set",",","include","it","in","the","request","to","the","id","p",",","and","request","/","/","that","the","id","p","uses","exact","matching","for","authentication","types","if","(","saml","plugin","config",".","get","authn","context","class","ref","(",")","!","=","null",")","{","config",".","set","authn","context","class","ref","(","saml","plugin","config",".","get","authn","context","class","ref","(",")",")",";","config",".","set","comparison","type","(","\"","exact","\"",")",";","}","if","(","saml","plugin","config",".","get","name","id","policy","format","(",")","!","=","null",")","{","config",".","set","name","id","policy","format","(","saml","plugin","config",".","get","name","id","policy","format","(",")",")",";","}","}","config",".","set","force","service","provider","metadata","generation","(","true",")",";","config",".","set","service","provider","metadata","resource","(","new","saml","file","resource","(","saml","security","realm",".","get","sp","metadata","file","path","(",")",")",")",";","final","saml2client","saml2client","=","new","saml2client","(","config",")",";","saml2client",".","set","callback","url","(","saml","plugin","config",".","get","consumer","service","url","(",")",")",";","saml2client",".","init","(","create","web","context","(",")",")",";","if","(","log",".","is","loggable","(","fine",")",")","{","log",".","fine","(","saml2client",".","get","service","provider","metadata","resolver","(",")",".","get","metadata","(",")",")",";","}","return","saml2client",";","}","}"],"func_name":"OpenSAMLWrapper","func_name_tokens":["open","saml","wrapper"],"docstring":"  Overall wrapper to all operation using OpenSAML library, this allow to load the Service Loaders properly  <p>  https://wiki.shibboleth.net/confluence/display/OS30/Initialization+and+Configuration  http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html   @param <T> process return type","docstring_tokens":["overall","wrapper","to","all","operation","using","open","saml","library",",","this","allow","to","load","the","service","loaders","properly","<","p",">"],"query":"OpenSAML3 resource not found 'default-config.xml' in OSGi container","query_tokens":["open","saml3","resource","not","found","'","default","-","config",".","xml","'","in","os","gi","container"]}
{"query_id":"2345063","repo_name":"GJL/flink","zip_link":"/GJL/flink/archive/master.zip","code":"\tprivate static URL validateHostPortString(String hostPort) {\t\ttry {\t\t\tURL u = new URL(\"http://\" + hostPort);\t\t\tif (u.getHost() == null) {\t\t\t\tthrow new IllegalArgumentException(\"The given host:port ('\" + hostPort + \"') doesn't contain a valid host\");\t\t\t}\t\t\tif (u.getPort() == -1) {\t\t\t\tthrow new IllegalArgumentException(\"The given host:port ('\" + hostPort + \"') doesn't contain a valid port\");\t\t\t}\t\t\treturn u;\t\t} catch (MalformedURLException e) {\t\t\tthrow new IllegalArgumentException(\"The given host:port ('\" + hostPort + \"') is invalid\", e);\t\t}\t}","code_tokens":["private","static","url","validate","host","port","string","(","string","host","port",")","{","try","{","url","u","=","new","url","(","\"","http",":","/","/","\"","+","host","port",")",";","if","(","u",".","get","host","(",")","=","=","null",")","{","throw","new","illegal","argument","exception","(","\"","the","given","host",":","port","(","'","\"","+","host","port","+","\"","'",")","doesn","'","t","contain","a","valid","host","\"",")",";","}","if","(","u",".","get","port","(",")","=","=","-","1",")","{","throw","new","illegal","argument","exception","(","\"","the","given","host",":","port","(","'","\"","+","host","port","+","\"","'",")","doesn","'","t","contain","a","valid","port","\"",")",";","}","return","u",";","}","catch","(","malformed","url","exception","e",")","{","throw","new","illegal","argument","exception","(","\"","the","given","host",":","port","(","'","\"","+","host","port","+","\"","'",")","is","invalid","\"",",","e",")",";","}","}"],"func_name":"validateHostPortString","func_name_tokens":["validate","host","port","string"],"docstring":"\t\t  Validates if the given String represents a hostname:port.\t \t  <p>Works also for ipv6.\t \t \t  @return URL object for accessing host and port","docstring_tokens":["validates","if","the","given","string","represents","a","hostname",":","port",".","<","p",">","works","also","for","ipv6","."],"query":"Java: Common way to validate and convert “host:port” to InetSocketAddress?","query_tokens":["java",":","common","way","to","validate","and","convert","“","host",":","port","”","to","inet","socket","address","?"]}
{"query_id":"1479881","repo_name":"Halcom/zanata-server","zip_link":"/Halcom/zanata-server/archive/master.zip","code":"public class StreamSerializer extends Serializer {    public StreamSerializer(OutputStream out) {        super(out);    }    public void writeNewLine() throws IOException {        super.breakLine();    }    @Override    public void write(Element element) throws IOException {        super.write(element);    }    @Override    public void write(Comment c) throws IOException {        super.write(c);    }    @Override    public void write(DocType dt) throws IOException {        super.write(dt);    }    @Override    public void write(ProcessingInstruction pi) throws IOException {        super.write(pi);    }    @Override    public void write(Text t) throws IOException {        super.write(t);    }    @Override    public void writeXMLDeclaration() throws IOException {        super.writeXMLDeclaration();    }    @Override    public void writeEndTag(Element element) throws IOException {        super.writeEndTag(element);    }    @Override    public void writeStartTag(Element element) throws IOException {        super.writeStartTag(element);    }}","code_tokens":["public","class","stream","serializer","extends","serializer","{","public","stream","serializer","(","output","stream","out",")","{","super","(","out",")",";","}","public","void","write","new","line","(",")","throws","io","exception","{","super",".","break","line","(",")",";","}","@","override","public","void","write","(","element","element",")","throws","io","exception","{","super",".","write","(","element",")",";","}","@","override","public","void","write","(","comment","c",")","throws","io","exception","{","super",".","write","(","c",")",";","}","@","override","public","void","write","(","doc","type","dt",")","throws","io","exception","{","super",".","write","(","dt",")",";","}","@","override","public","void","write","(","processing","instruction","pi",")","throws","io","exception","{","super",".","write","(","pi",")",";","}","@","override","public","void","write","(","text","t",")","throws","io","exception","{","super",".","write","(","t",")",";","}","@","override","public","void","write","xml","declaration","(",")","throws","io","exception","{","super",".","write","xml","declaration","(",")",";","}","@","override","public","void","write","end","tag","(","element","element",")","throws","io","exception","{","super",".","write","end","tag","(","element",")",";","}","@","override","public","void","write","start","tag","(","element","element",")","throws","io","exception","{","super",".","write","start","tag","(","element",")",";","}","}"],"func_name":"StreamSerializer","func_name_tokens":["stream","serializer"],"docstring":"  This class can build an XML stream from a series of XOM Elements. Requires  XOM 1.2 or later.  <p>  Sample usage:   <pre>  Element rootElement = new Element(&quot;root&quot;);  StreamSerializer serializer = new StreamSerializer(out);  serializer.setIndent(4);  serializer.writeXMLDeclaration();  serializer.writeStartTag(rootElement);  while (hasNextElement()) {      serializer.write(nextElement());  }  serializer.writeEndTag(rootElement);  serializer.flush();  </pre>   {@link nux.xom.io.StreamingSerializer}   @author Sean Flanigan <a          href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a> ","docstring_tokens":["this","class","can","build","an","xml","stream","from","a","series","of","xom","elements",".","requires","xom","1",".","2","or","later",".","<","p",">","sample","usage",":","<","pre",">","element","root","element","=","new","element","(","&","quot",";","root","&","quot",";",")",";","stream","serializer","serializer","=","new","stream","serializer","(","out",")",";","serializer",".","set","indent","(","4",")",";","serializer",".","write","xml","declaration","(",")",";","serializer",".","write","start","tag","(","root","element",")",";","while","(","has","next","element","(",")",")","{","serializer",".","write","(","next","element","(",")",")",";","}","serializer",".","write","end","tag","(","root","element",")",";","serializer",".","flush","(",")",";","<","/","pre",">","{","nux",".","xom",".","io",".","streaming","serializer","}"],"query":"How to stream XML data using XOM?","query_tokens":["how","to","stream","xml","data","using","xom","?"]}
{"query_id":"1464291","repo_name":"Yegor-Budnikov/cort","zip_link":"/Yegor-Budnikov/cort/archive/master.zip","code":"\tpublic static BufferedReader getResourceReader(String resourceName) throws IOException {\t\tassert resourceName.startsWith(\"/\") : \"Absolute path needed for resource\";\t\t\t\tInputStream stream = BasicFileIO.class.getResourceAsStream(resourceName);\t\tif (stream == null) throw new IOException(\"failed to find resource \" + resourceName);\t\t//read in paths file\t\tBufferedReader bReader = new BufferedReader(new InputStreamReader(\t\t\tstream, Charset.forName(\"UTF-8\")));\t\treturn bReader;\t}","code_tokens":["public","static","buffered","reader","get","resource","reader","(","string","resource","name",")","throws","io","exception","{","assert","resource","name",".","starts","with","(","\"","/","\"",")",":","\"","absolute","path","needed","for","resource","\"",";","input","stream","stream","=","basic","file","io",".","class",".","get","resource","as","stream","(","resource","name",")",";","if","(","stream","=","=","null",")","throw","new","io","exception","(","\"","failed","to","find","resource","\"","+","resource","name",")",";","/","/","read","in","paths","file","buffered","reader","b","reader","=","new","buffered","reader","(","new","input","stream","reader","(","stream",",","charset",".","for","name","(","\"","utf","-","8","\"",")",")",")",";","return","b","reader",";","}"],"func_name":"getResourceReader","func_name_tokens":["get","resource","reader"],"docstring":"\t\t  Please only use absolute paths, e.g. /cmu/arktweetnlp/6mpaths\t  \t  \t  (added by Brendan 2012-08-14)\t  @throws IOException ","docstring_tokens":["please","only","use","absolute","paths",",","e",".","g",".","/","cmu","/","arktweetnlp","/","6mpaths","(","added","by","brendan","2012","-","08","-","14",")","@","throws","io","exception"],"query":"How to really read text file from classpath in Java","query_tokens":["how","to","really","read","text","file","from","classpath","in","java"]}
{"query_id":"8799290","repo_name":"ericmok/AndroidGame","zip_link":"/ericmok/AndroidGame/archive/master.zip","code":"\tpublic Bitmap generateTextBitmap(StringBuilder text) {\t\t\r\t\tPaint paint = new Paint();\r\t\tpaint.setTextSize(144);\r\t\tpaint.setAntiAlias(true);\r\t\tpaint.setColor(Color.rgb(240, 240, 240));\r\t\tpaint.setAlpha(170);\r\t\t//center version\r\t\t//paint.setTextAlign(Paint.Align.CENTER);\r\t\tpaint.setTextAlign(Paint.Align.LEFT);\r\t\t \r\t\tint width = (int) (paint.measureText((CharSequence)text, 0 , text.length()) + 0.5f);\r\t\tfloat baseline = (int) (-paint.ascent() + 0.5f);\r\t\tint height = (int) (baseline + paint.descent() + 0.5f );\r\t\t\r\t\tBitmap image = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\r\t\tCanvas canvas = new Canvas(image);\r\t\t//canvas.drawText((CharSequence)text, 0, text.length(), width/2, baseline, paint);\r\t\t\r\t\t// At height 0, the text is drawn with the baseline on the top border\r\t\t//center version\r\t\t//canvas.drawText((CharSequence)text, 0, text.length(), width/2, height - paint.descent(), paint);\r\t\t\r\t\t// explicit version\r\t\t//canvas.drawText((CharSequence)text, 0, text.length(), 0, height - paint.descent(), paint);\r\t\tcanvas.drawText((CharSequence)text, 0, text.length(), 0, baseline, paint);\r\r\t\treturn image;\r\t}\r","code_tokens":["public","bitmap","generate","text","bitmap","(","string","builder","text",")","{","paint","paint","=","new","paint","(",")",";","paint",".","set","text","size","(","144",")",";","paint",".","set","anti","alias","(","true",")",";","paint",".","set","color","(","color",".","rgb","(","240",",","240",",","240",")",")",";","paint",".","set","alpha","(","170",")",";","/","/","center","version","/","/","paint",".","set","text","align","(","paint",".","align",".","center",")",";","paint",".","set","text","align","(","paint",".","align",".","left",")",";","int","width","=","(","int",")","(","paint",".","measure","text","(","(","char","sequence",")","text",",","0",",","text",".","length","(",")",")","+","0",".","5f",")",";","float","baseline","=","(","int",")","(","-","paint",".","ascent","(",")","+","0",".","5f",")",";","int","height","=","(","int",")","(","baseline","+","paint",".","descent","(",")","+","0",".","5f",")",";","bitmap","image","=","bitmap",".","create","bitmap","(","width",",","height",",","bitmap",".","config",".","argb","8888",")",";","canvas","canvas","=","new","canvas","(","image",")",";","/","/","canvas",".","draw","text","(","(","char","sequence",")","text",",","0",",","text",".","length","(",")",",","width","/","2",",","baseline",",","paint",")",";","/","/","at","height","0",",","the","text","is","drawn","with","the","baseline","on","the","top","border","/","/","center","version","/","/","canvas",".","draw","text","(","(","char","sequence",")","text",",","0",",","text",".","length","(",")",",","width","/","2",",","height","-","paint",".","descent","(",")",",","paint",")",";","/","/","explicit","version","/","/","canvas",".","draw","text","(","(","char","sequence",")","text",",","0",",","text",".","length","(",")",",","0",",","height","-","paint",".","descent","(",")",",","paint",")",";","canvas",".","draw","text","(","(","char","sequence",")","text",",","0",",","text",".","length","(",")",",","0",",","baseline",",","paint",")",";","return","image",";","}"],"func_name":"generateTextBitmap","func_name_tokens":["generate","text","bitmap"],"docstring":"\t\r\t  TODO: Figure out how to save aspect ratio of text\r\t  @param text\r\t  @return\r","docstring_tokens":["todo",":","figure","out","how","to","save","aspect","ratio","of","text"],"query":"Convert String text to Bitmap","query_tokens":["convert","string","text","to","bitmap"]}
{"query_id":"583562","repo_name":"bertrama/resin","zip_link":"/bertrama/resin/archive/master.zip","code":"public class JSONEncoder implements Encoder<String, Object> {        /* Not sure of the speed of this. */    //private final static CharsetEncoder asciiEncoder =     //    Charset.forName(\"US-ASCII\").newEncoder(); // or \"ISO-8859-1\" for ISO Latin 1    \tprivate String encodeString(String str) {\t\tStringBuilder builder = new StringBuilder(str.length() + (int)(str.length() * 0.2f));\t\tbuilder.append(\"\\\"\");\t\tchar[] charArray = str.toCharArray();\t\t\t\t\t\tfor (int index=0; index < charArray.length; index++) {\t\t\tchar c = charArray[index];\t\t\t\t\t\t//see http://www.json.org/ to understand this case statement better under string train tracks\t\t\tswitch (c) {            case '\\\"':                builder.append('\\\\').append('\\\"');                break;                            case '\\\\':                builder.append('\\\\').append('\\\\');                break;            case '/':                builder.append('\\\\').append('/');                break;                           case '\\b':                builder.append('\\\\').append('b');                break;            case '\\f':\t\t\t\tbuilder.append('\\\\').append('f');\t\t\t    break;            case '\\n':                builder.append('\\\\').append('n');                break;            case '\\r':                builder.append('\\\\').append('r');                break;            case '\\t':                builder.append('\\\\').append('t');                break;\t\t\tdefault:\t\t         /* Encode unicode character. */\t            //if (!asciiEncoder.canEncode(c)){ //This works to but worried it might be too slow http://en.wikipedia.org/wiki/ASCII\t\t\t    if (c>0x7F) { //See if it is out of range of ASCII\t                //I don't like this for performance, I am going to roll my own.\t               //builder.append(String.format(\"\\\\u%4H\", c).replace(' ', '0'));\t                \t                String hexString = Integer.toHexString(c).toUpperCase();\t                builder.append('\\\\').append('u');\t                if (hexString.length() >= 4) {\t                    builder.append(hexString);\t                } else {\t                    int howMany0 = 4 - hexString.length();\t                    for (int i = 0; i < howMany0; i++) {\t                       builder.append('0'); \t                    }\t                    builder.append(hexString);\t                }\t            } else {\t                builder.append(c);\t            }\t\t\t}\t\t}\t\tbuilder.append(\"\\\"\");\t\treturn builder.toString();\t}\t\tpublic String encodeObject(Object obj) throws Exception {\t\tif (obj==null) {\t\t\treturn \"null\";\t\t}\t\tif (obj instanceof Number || obj instanceof Boolean) {\t\t\treturn obj.toString();\t\t} else if (obj instanceof String) {\t\t\treturn encodeString((String)obj);\t\t} else if (obj instanceof Collection) {\t\t\tCollection<?> collection = (Collection<?>) obj;\t\t\tObject[] array = collection.toArray(new Object[collection.size()]);\t\t\treturn encodeArray(array);\t\t\t\t\t} else if (obj.getClass().isArray()){\t\t\treturn encodeArray((Object[]) obj);\t\t\t\t\t}\t\t\t\telse {\t\t\tStringBuilder builder = new StringBuilder();\t\t\tbuilder.append(\"{\"); \t\t\tbuilder.append(\"\\\"java_type\\\":\\\"\");\t\t\tbuilder.append(obj.getClass().getName());\t\t\tbuilder.append('\"');\t\t\tMethod [] methods = obj.getClass().getMethods();\t\t\t\t\t\t\t\t\tList<Method> methodList = new ArrayList<Method>(methods.length);\t\t\t\t\t\tfor (int index = 0; index<methods.length; index++){\t\t\t\tMethod method = methods[index];\t\t\t\tString name = method.getName();\t\t\t\t\t\t\t\tif (method.getParameterTypes().length>0 ||\t\t\t\t\t\tmethod.getReturnType() == Void.class ||\t\t\t\t\t\t!(name.startsWith(\"get\") || name.startsWith(\"is\")) ||\t\t\t\t\t\tname.equals(\"getClass\")\t\t\t\t\t){\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\tmethodList.add(method);\t\t\t}\t\t\t\t\t\tif (methodList.size()>0) {\t\t\t\tbuilder.append(',');\t\t\t}\t\t\tfor (int index=0; index < methodList.size(); index++) {\t\t\t\tMethod method = methodList.get(index);\t\t\t\tString name = method.getName();\t\t\t\tif(name.charAt(0)=='g') {\t\t\t\t\tname = name.substring(3);\t\t\t\t} else {\t\t\t\t\tname = name.substring(2);\t\t\t\t\t\t\t\t\t}\t\t\t\tname = \"\" + Character.toLowerCase(name.charAt(0)) + name.substring(1);\t\t\t\tbuilder.append('\\\"'); \t\t\t\tbuilder.append(name);\t\t\t\tbuilder.append(\"\\\":\");\t\t\t\tObject object = method.invoke(obj);\t\t\t\tbuilder.append(encodeObject(object));\t\t\t\t\t\t\tif (index+1!=methodList.size()) {\t\t\t\t\tbuilder.append(',');\t\t\t\t}\t\t\t}\t\t\tbuilder.append(\"}\");\t\t\treturn builder.toString();\t\t}\t}\tprivate String encodeArray(Object[] array) throws Exception {\t\tStringBuilder builder = new StringBuilder();\t\tbuilder.append(\"[\");\t\tfor (int index = 0; index < array.length; index++) {\t\t\tbuilder.append(encodeObject(array[index]));\t\t\tif (index != array.length-1) {\t\t\t\tbuilder.append(',');\t\t\t}\t\t}\t\tbuilder.append(\"]\");\t\treturn builder.toString();\t}}","code_tokens":["public","class","json","encoder","implements","encoder","<","string",",","object",">","{","/","/","private","final","static","charset","encoder","ascii","encoder","=","/","/","charset",".","for","name","(","\"","us","-","ascii","\"",")",".","new","encoder","(",")",";","/","/","or","\"","iso","-","8859","-","1","\"","for","iso","latin","1","private","string","encode","string","(","string","str",")","{","string","builder","builder","=","new","string","builder","(","str",".","length","(",")","+","(","int",")","(","str",".","length","(",")","*","0",".","2f",")",")",";","builder",".","append","(","\"","\\","\"","\"",")",";","char","[","]","char","array","=","str",".","to","char","array","(",")",";","for","(","int","index","=","0",";","index","<","char","array",".","length",";","index","+","+",")","{","char","c","=","char","array","[","index","]",";","/","/","see","to","understand","this","case","statement","better","under","string","train","tracks","switch","(","c",")","{","case","'","\\","\"","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","\\","\"","'",")",";","break",";","case","'","\\","\\","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","\\","\\","'",")",";","break",";","case","'","/","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","/","'",")",";","break",";","case","'","\\b","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","b","'",")",";","break",";","case","'","\\f","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","f","'",")",";","break",";","case","'","\\n","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","n","'",")",";","break",";","case","'","\\r","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","r","'",")",";","break",";","case","'","\\t","'",":","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","t","'",")",";","break",";","default",":","/","/","if","(","!","ascii","encoder",".","can","encode","(","c",")",")","{","/","/","this","works","to","but","worried","it","might","be","too","slow","if","(","c",">","0x7f",")","{","/","/","see","if","it","is","out","of","range","of","ascii","/","/","i","don","'","t","like","this","for","performance",",","i","am","going","to","roll","my","own",".","/","/","builder",".","append","(","string",".","format","(","\"","\\","\\u","%","4h","\"",",","c",")",".","replace","(","'","'",",","'","0","'",")",")",";","string","hex","string","=","integer",".","to","hex","string","(","c",")",".","to","upper","case","(",")",";","builder",".","append","(","'","\\","\\","'",")",".","append","(","'","u","'",")",";","if","(","hex","string",".","length","(",")",">","=","4",")","{","builder",".","append","(","hex","string",")",";","}","else","{","int","how","many0","=","4","-","hex","string",".","length","(",")",";","for","(","int","i","=","0",";","i","<","how","many0",";","i","+","+",")","{","builder",".","append","(","'","0","'",")",";","}","builder",".","append","(","hex","string",")",";","}","}","else","{","builder",".","append","(","c",")",";","}","}","}","builder",".","append","(","\"","\\","\"","\"",")",";","return","builder",".","to","string","(",")",";","}","public","string","encode","object","(","object","obj",")","throws","exception","{","if","(","obj","=","=","null",")","{","return","\"","null","\"",";","}","if","(","obj","instanceof","number","|","|","obj","instanceof","boolean",")","{","return","obj",".","to","string","(",")",";","}","else","if","(","obj","instanceof","string",")","{","return","encode","string","(","(","string",")","obj",")",";","}","else","if","(","obj","instanceof","collection",")","{","collection","<","?",">","collection","=","(","collection","<","?",">",")","obj",";","object","[","]","array","=","collection",".","to","array","(","new","object","[","collection",".","size","(",")","]",")",";","return","encode","array","(","array",")",";","}","else","if","(","obj",".","get","class","(",")",".","is","array","(",")",")","{","return","encode","array","(","(","object","[","]",")","obj",")",";","}","else","{","string","builder","builder","=","new","string","builder","(",")",";","builder",".","append","(","\"","{","\"",")",";","builder",".","append","(","\"","\\","\"","java","type","\\","\"",":","\\","\"","\"",")",";","builder",".","append","(","obj",".","get","class","(",")",".","get","name","(",")",")",";","builder",".","append","(","'","\"","'",")",";","method","[","]","methods","=","obj",".","get","class","(",")",".","get","methods","(",")",";","list","<","method",">","method","list","=","new","array","list","<","method",">","(","methods",".","length",")",";","for","(","int","index","=","0",";","index","<","methods",".","length",";","index","+","+",")","{","method","method","=","methods","[","index","]",";","string","name","=","method",".","get","name","(",")",";","if","(","method",".","get","parameter","types","(",")",".","length",">","0","|","|","method",".","get","return","type","(",")","=","=","void",".","class","|","|","!","(","name",".","starts","with","(","\"","get","\"",")","|","|","name",".","starts","with","(","\"","is","\"",")",")","|","|","name",".","equals","(","\"","get","class","\"",")",")","{","continue",";","}","method","list",".","add","(","method",")",";","}","if","(","method","list",".","size","(",")",">","0",")","{","builder",".","append","(","'",",","'",")",";","}","for","(","int","index","=","0",";","index","<","method","list",".","size","(",")",";","index","+","+",")","{","method","method","=","method","list",".","get","(","index",")",";","string","name","=","method",".","get","name","(",")",";","if","(","name",".","char","at","(","0",")","=","=","'","g","'",")","{","name","=","name",".","substring","(","3",")",";","}","else","{","name","=","name",".","substring","(","2",")",";","}","name","=","\"","\"","+","character",".","to","lower","case","(","name",".","char","at","(","0",")",")","+","name",".","substring","(","1",")",";","builder",".","append","(","'","\\","\"","'",")",";","builder",".","append","(","name",")",";","builder",".","append","(","\"","\\","\"",":","\"",")",";","object","object","=","method",".","invoke","(","obj",")",";","builder",".","append","(","encode","object","(","object",")",")",";","if","(","index","+","1","!","=","method","list",".","size","(",")",")","{","builder",".","append","(","'",",","'",")",";","}","}","builder",".","append","(","\"","}","\"",")",";","return","builder",".","to","string","(",")",";","}","}","private","string","encode","array","(","object","[","]","array",")","throws","exception","{","string","builder","builder","=","new","string","builder","(",")",";","builder",".","append","(","\"","[","\"",")",";","for","(","int","index","=","0",";","index","<","array",".","length",";","index","+","+",")","{","builder",".","append","(","encode","object","(","array","[","index","]",")",")",";","if","(","index","!","=","array",".","length","-","1",")","{","builder",".","append","(","'",",","'",")",";","}","}","builder",".","append","(","\"","]","\"",")",";","return","builder",".","to","string","(",")",";","}","}"],"func_name":"JSONEncoder","func_name_tokens":["json","encoder"],"docstring":" Converts a Java object into a JSON string. ","docstring_tokens":["converts","a","java","object","into","a","json","string","."],"query":"JSON character encoding - is UTF-8 well-supported by browsers or should I use numeric escape sequences?","query_tokens":["json","character","encoding","-","is","utf","-","8","well","-","supported","by","browsers","or","should","i","use","numeric","escape","sequences","?"]}
{"query_id":"1322335","repo_name":"turtlemonvh/dns-zero-ttl","zip_link":"/turtlemonvh/dns-zero-ttl/archive/master.zip","code":"public class TestDNS {    public final static void main(String[] args) throws Exception {        CloseableHttpClient httpclient = HttpClients.createDefault();        try {            for(int x = 0; x < 100; x = x + 1) {              HttpGet httpget = new HttpGet(\"http://web.service.consul:8080/\");              //System.out.println(\"Executing request \" + httpget.getRequestLine());              // Create a custom response handler              ResponseHandler<String> responseHandler = new ResponseHandler<String>() {                  @Override                  public String handleResponse(                          final HttpResponse response) throws ClientProtocolException, IOException {                      int status = response.getStatusLine().getStatusCode();                      if (status >= 200 && status < 300) {                          HttpEntity entity = response.getEntity();                          return entity != null ? EntityUtils.toString(entity) : null;                      } else {                          throw new ClientProtocolException(\"Unexpected response status: \" + status);                      }                  }              };              String responseBody = httpclient.execute(httpget, responseHandler);              //System.out.println(\"----------------------------------------\");              //System.out.println(responseBody);          }        } finally {            httpclient.close();        }    }}","code_tokens":["public","class","test","dns","{","public","final","static","void","main","(","string","[","]","args",")","throws","exception","{","closeable","http","client","httpclient","=","http","clients",".","create","default","(",")",";","try","{","for","(","int","x","=","0",";","x","<","100",";","x","=","x","+","1",")","{","http","get","httpget","=","new","http","get","(","\"","\"",")",";","/","/","system",".","out",".","println","(","\"","executing","request","\"","+","httpget",".","get","request","line","(",")",")",";","/","/","create","a","custom","response","handler","response","handler","<","string",">","response","handler","=","new","response","handler","<","string",">","(",")","{","@","override","public","string","handle","response","(","final","http","response","response",")","throws","client","protocol","exception",",","io","exception","{","int","status","=","response",".","get","status","line","(",")",".","get","status","code","(",")",";","if","(","status",">","=","200","&","&","status","<","300",")","{","http","entity","entity","=","response",".","get","entity","(",")",";","return","entity","!","=","null","?","entity","utils",".","to","string","(","entity",")",":","null",";","}","else","{","throw","new","client","protocol","exception","(","\"","unexpected","response","status",":","\"","+","status",")",";","}","}","}",";","string","response","body","=","httpclient",".","execute","(","httpget",",","response","handler",")",";","/","/","system",".","out",".","println","(","\"","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","\"",")",";","/","/","system",".","out",".","println","(","response","body",")",";","}","}","finally","{","httpclient",".","close","(",")",";","}","}","}"],"func_name":"TestDNS","func_name_tokens":["test","dns"],"docstring":"java -cp '.:/home/vagrant/javaclass/httpcomponents-client-4.5.2/lib/:' TestDNS## LinksHTTP Clients http://unirest.io/java.html http://hc.apache.org/httpcomponents-client-4.5.x/index.htmlExample this was taken from: http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/examples/org/apache/http/examples/client/ClientWithResponseHandler.javaWorking with java http://stackoverflow.com/questions/16137713/how-to-run-a-java-program-from-the-command-line http://stackoverflow.com/questions/10056895/how-to-add-multiple-jar-files-in-the-javac-java-class-path-for-debian-linuxJava and DNS http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-jvm-ttl.html http://stackoverflow.com/questions/1256556/any-way-to-make-java-honor-the-dns-caching-timeout-ttl","docstring_tokens":["java","-","cp","'",".",":","/","home","/","vagrant","/","javaclass","/","httpcomponents","-","client","-","4",".","5",".","2","/","lib","/",":","'","test","dns","#","#","links","http","clients","this","was","taken","from",":","with","java","and","dns"],"query":"What is the best Java library to use for HTTP POST, GET etc.? [closed]","query_tokens":["what","is","the","best","java","library","to","use","for","http","post",",","get","etc",".","?","[","closed","]"]}
{"query_id":"12528836","repo_name":"synacks/TeamTalk","zip_link":"/synacks/TeamTalk/archive/master.zip","code":"    public void setSessionTop(String sessionKey, boolean isTop) {        if (TextUtils.isEmpty(sessionKey)) {            return;        }        Set<String> topList = sharedPreferences.getStringSet(CfgDimension.SESSIONTOP.name(), null);        Set<String> newList = new HashSet<>();        if (topList != null && topList.size() > 0) {            newList.addAll(topList);        }        if (isTop) {            newList.add(sessionKey);        } else {            if (newList.contains(sessionKey)) {                newList.remove(sessionKey);            }        }        SharedPreferences.Editor editor = sharedPreferences.edit();        editor.putStringSet(CfgDimension.SESSIONTOP.name(), newList);        //提交当前数据        editor.apply();        EventBus.getDefault().post(SessionEvent.SET_SESSION_TOP);    }","code_tokens":["public","void","set","session","top","(","string","session","key",",","boolean","is","top",")","{","if","(","text","utils",".","is","empty","(","session","key",")",")","{","return",";","}","set","<","string",">","top","list","=","shared","preferences",".","get","string","set","(","cfg","dimension",".","sessiontop",".","name","(",")",",","null",")",";","set","<","string",">","new","list","=","new","hash","set","<",">","(",")",";","if","(","top","list","!","=","null","&","&","top","list",".","size","(",")",">","0",")","{","new","list",".","add","all","(","top","list",")",";","}","if","(","is","top",")","{","new","list",".","add","(","session","key",")",";","}","else","{","if","(","new","list",".","contains","(","session","key",")",")","{","new","list",".","remove","(","session","key",")",";","}","}","shared","preferences",".","editor","editor","=","shared","preferences",".","edit","(",")",";","editor",".","put","string","set","(","cfg","dimension",".","sessiontop",".","name","(",")",",","new","list",")",";","/","/","editor",".","apply","(",")",";","event","bus",".","get","default","(",")",".","post","(","session","event",".","set","session","top",")",";","}"],"func_name":"setSessionTop","func_name_tokens":["set","session","top"],"docstring":"          shareF 在设定set的时候有个蛋疼的点           @param sessionKey      @param isTop","docstring_tokens":["share","f","set"],"query":"Shared preferences only saved first time","query_tokens":["shared","preferences","only","saved","first","time"]}
{"query_id":"70689","repo_name":"Erobober/java-design-patterns","zip_link":"/ak4n/java-design-patterns/archive/master.zip","code":"public class App {\t/**\t * Program entry point\t * @param args command line args\t */\tpublic static void main(String[] args) {\t\t// eagerly initialized singleton\t\tIvoryTower ivoryTower1 = IvoryTower.getInstance();\t\tIvoryTower ivoryTower2 = IvoryTower.getInstance();\t\tSystem.out.println(\"ivoryTower1=\" + ivoryTower1);\t\tSystem.out.println(\"ivoryTower2=\" + ivoryTower2);\t\t// lazily initialized singleton\t\tThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 = ThreadSafeLazyLoadedIvoryTower\t\t\t\t.getInstance();\t\tThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 = ThreadSafeLazyLoadedIvoryTower\t\t\t\t.getInstance();\t\tSystem.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);\t\tSystem.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);\t\t// enum singleton\t\tEnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;\t\tEnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;\t\tSystem.out.println(\"enumIvoryTower1=\" + enumIvoryTower1);\t\tSystem.out.println(\"enumIvoryTower2=\" + enumIvoryTower2);\t\t\t\tInitializingOnDemandHolderIdiom demandHolderIdiom = InitializingOnDemandHolderIdiom.getInstance();\t\tSystem.out.println(demandHolderIdiom);\t\tInitializingOnDemandHolderIdiom demandHolderIdiom2 = InitializingOnDemandHolderIdiom.getInstance();\t\tSystem.out.println(demandHolderIdiom2);\t\t\t\tThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();\t\tSystem.out.println(dcl1);\t\tThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();\t\tSystem.out.println(dcl2);\t}}","code_tokens":["public","class","app","{","public","static","void","main","(","string","[","]","args",")","{","/","/","eagerly","initialized","singleton","ivory","tower","ivory","tower1","=","ivory","tower",".","get","instance","(",")",";","ivory","tower","ivory","tower2","=","ivory","tower",".","get","instance","(",")",";","system",".","out",".","println","(","\"","ivory","tower1","=","\"","+","ivory","tower1",")",";","system",".","out",".","println","(","\"","ivory","tower2","=","\"","+","ivory","tower2",")",";","/","/","lazily","initialized","singleton","thread","safe","lazy","loaded","ivory","tower","thread","safe","ivory","tower1","=","thread","safe","lazy","loaded","ivory","tower",".","get","instance","(",")",";","thread","safe","lazy","loaded","ivory","tower","thread","safe","ivory","tower2","=","thread","safe","lazy","loaded","ivory","tower",".","get","instance","(",")",";","system",".","out",".","println","(","\"","thread","safe","ivory","tower1","=","\"","+","thread","safe","ivory","tower1",")",";","system",".","out",".","println","(","\"","thread","safe","ivory","tower2","=","\"","+","thread","safe","ivory","tower2",")",";","/","/","enum","singleton","enum","ivory","tower","enum","ivory","tower1","=","enum","ivory","tower",".","instance",";","enum","ivory","tower","enum","ivory","tower2","=","enum","ivory","tower",".","instance",";","system",".","out",".","println","(","\"","enum","ivory","tower1","=","\"","+","enum","ivory","tower1",")",";","system",".","out",".","println","(","\"","enum","ivory","tower2","=","\"","+","enum","ivory","tower2",")",";","initializing","on","demand","holder","idiom","demand","holder","idiom","=","initializing","on","demand","holder","idiom",".","get","instance","(",")",";","system",".","out",".","println","(","demand","holder","idiom",")",";","initializing","on","demand","holder","idiom","demand","holder","idiom2","=","initializing","on","demand","holder","idiom",".","get","instance","(",")",";","system",".","out",".","println","(","demand","holder","idiom2",")",";","thread","safe","double","check","locking","dcl1","=","thread","safe","double","check","locking",".","get","instance","(",")",";","system",".","out",".","println","(","dcl1",")",";","thread","safe","double","check","locking","dcl2","=","thread","safe","double","check","locking",".","get","instance","(",")",";","system",".","out",".","println","(","dcl2",")",";","}","}"],"func_name":"App","func_name_tokens":["app"],"docstring":"   Singleton pattern ensures that the class ({@link IvoryTower}) can have only one  existing instance per Java classloader instance and provides global access to it.   <p> <p>  The risk of this pattern is that bugs resulting from setting a singleton up in a distributed environment can   be tricky to debug, since it will work fine if you debug with a single classloader. Additionally, these  problems can crop up a while after the implementation of a singleton, since they may start out synchronous and  only become async with time, so you it may not be clear why you are seeing certain changes in behaviour.  <p>  http://stackoverflow.com/questions/17721263/singleton-across-jvm-or-application-instance-or-tomcat-instance","docstring_tokens":["singleton","pattern","ensures","that","the","class","(","{","ivory","tower","}",")","can","have","only","one","existing","instance","per","java","classloader","instance","and","provides","global","access","to","it",".","<","p",">","<","p",">","the","risk","of","this","pattern","is","that","bugs","resulting","from","setting","a","singleton","up","in","a","distributed","environment","can","be","tricky","to","debug",",","since","it","will","work","fine","if","you","debug","with","a","single","classloader",".","additionally",",","these","problems","can","crop","up","a","while","after","the","implementation","of","a","singleton",",","since","they","may","start","out","synchronous","and","only","become","async","with","time",",","so","you","it","may","not","be","clear","why","you","are","seeing","certain","changes","in","behaviour",".","<","p",">"],"query":"What is an efficient way to implement a singleton pattern in Java? [closed]","query_tokens":["what","is","an","efficient","way","to","implement","a","singleton","pattern","in","java","?","[","closed","]"]}
{"query_id":"34111150","repo_name":"bartsch-dev/jabref","zip_link":"/chriba/jabref/archive/master.zip","code":"    public static void bypassSSLVerification() {        LOGGER.warn(\"Fix SSL exceptions by accepting ALL certificates\");        // Create a trust manager that does not validate certificate chains        TrustManager[] trustAllCerts = { new X509TrustManager() {            @Override            public void checkClientTrusted(X509Certificate[] chain, String authType) {            }            @Override            public void checkServerTrusted(X509Certificate[] chain, String authType) {            }            @Override            public X509Certificate[] getAcceptedIssuers() {                return new X509Certificate[0];            }        }};        // Install the all-trusting trust manager        try {            SSLContext context = SSLContext.getInstance(\"TLS\");            context.init(null, trustAllCerts, new SecureRandom());            HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());        } catch (Exception e) {            LOGGER.error(\"A problem occurred when bypassing SSL verification\", e);        }    }","code_tokens":["public","static","void","bypass","ssl","verification","(",")","{","logger",".","warn","(","\"","fix","ssl","exceptions","by","accepting","all","certificates","\"",")",";","/","/","create","a","trust","manager","that","does","not","validate","certificate","chains","trust","manager","[","]","trust","all","certs","=","{","new","x509trust","manager","(",")","{","@","override","public","void","check","client","trusted","(","x509certificate","[","]","chain",",","string","auth","type",")","{","}","@","override","public","void","check","server","trusted","(","x509certificate","[","]","chain",",","string","auth","type",")","{","}","@","override","public","x509certificate","[","]","get","accepted","issuers","(",")","{","return","new","x509certificate","[","0","]",";","}","}","}",";","/","/","install","the","all","-","trusting","trust","manager","try","{","ssl","context","context","=","ssl","context",".","get","instance","(","\"","tls","\"",")",";","context",".","init","(","null",",","trust","all","certs",",","new","secure","random","(",")",")",";","https","url","connection",".","set","default","ssl","socket","factory","(","context",".","get","socket","factory","(",")",")",";","}","catch","(","exception","e",")","{","logger",".","error","(","\"","a","problem","occurred","when","bypassing","ssl","verification","\"",",","e",")",";","}","}"],"func_name":"bypassSSLVerification","func_name_tokens":["bypass","ssl","verification"],"docstring":"          Older java VMs does not automatically trust the zbMATH certificate. In this case the following exception is thrown:       sun.security.validator.ValidatorException: PKIX path building failed:       sun.security.provider.certpath.SunCertPathBuilderException: unable to find       valid certification path to requested target           We will fix this issue by accepting all (!) certificates. This is ugly; but as JabRef does not rely on      security-relevant information this is kind of OK (no, actually it is not...).           Taken from http://stackoverflow.com/a/6055903/873661","docstring_tokens":["older","java","v","ms","does","not","automatically","trust","the","zb","math","certificate",".","in","this","case","the","following","exception","is","thrown",":","sun",".","security",".","validator",".","validator","exception",":","pkix","path","building","failed",":","sun",".","security",".","provider",".","certpath",".","sun","cert","path","builder","exception",":","unable","to","find","valid","certification","path","to","requested","target","we","will","fix","this","issue","by","accepting","all","(","!",")","certificates",".","this","is","ugly",";","but","as","jab","ref","does","not","rely","on","security","-","relevant","information","this","is","kind","of","ok","(","no",",","actually","it","is","not",".",".",".",")",".","taken","from"],"query":"Does Java support Let's Encrypt certificates?","query_tokens":["does","java","support","let","'","s","encrypt","certificates","?"]}
{"query_id":"824110","repo_name":"markcoble/droolsjbpm-integration","zip_link":"/markcoble/droolsjbpm-integration/archive/master.zip","code":"public class TimerUtils {    private static final long SLEEP_PRECISION = Long.valueOf(System.getProperty(\"TIMER_SLEEP_PRECISION\", \"50000\"));    private static final long SPIN_YIELD_PRECISION = Long.valueOf(System.getProperty(\"TIMER_YIELD_PRECISION\", \"30000\"));    private TimerUtils() {    }    /**     * Sleeps for specified amount of time in milliseconds.     *     * @param duration the amount of milliseconds to wait     * @throws InterruptedException if the current thread gets interrupted     */    public static void sleepMillis(final long duration) throws InterruptedException {        sleepNanos(TimeUnit.MILLISECONDS.toNanos(duration));    }    /**     * Sleeps for specified amount of time in nanoseconds.     *     * @param nanoDuration the amount of nanoseconds to wait     * @throws InterruptedException if the current thread gets interrupted     */    public static void sleepNanos(final long nanoDuration) throws InterruptedException {        final long end = System.nanoTime() + nanoDuration;        long timeLeft = nanoDuration;        do {            if (timeLeft > SLEEP_PRECISION) {                Thread.sleep(1);            } else if (timeLeft > SPIN_YIELD_PRECISION) {                Thread.yield();            }            timeLeft = end - System.nanoTime();        } while (timeLeft > 0);    }}","code_tokens":["public","class","timer","utils","{","private","static","final","long","sleep","precision","=","long",".","value","of","(","system",".","get","property","(","\"","timer","sleep","precision","\"",",","\"","50000","\"",")",")",";","private","static","final","long","spin","yield","precision","=","long",".","value","of","(","system",".","get","property","(","\"","timer","yield","precision","\"",",","\"","30000","\"",")",")",";","private","timer","utils","(",")","{","}","public","static","void","sleep","millis","(","final","long","duration",")","throws","interrupted","exception","{","sleep","nanos","(","time","unit",".","milliseconds",".","to","nanos","(","duration",")",")",";","}","public","static","void","sleep","nanos","(","final","long","nano","duration",")","throws","interrupted","exception","{","final","long","end","=","system",".","nano","time","(",")","+","nano","duration",";","long","time","left","=","nano","duration",";","do","{","if","(","time","left",">","sleep","precision",")","{","thread",".","sleep","(","1",")",";","}","else","if","(","time","left",">","spin","yield","precision",")","{","thread",".","yield","(",")",";","}","time","left","=","end","-","system",".","nano","time","(",")",";","}","while","(","time","left",">","0",")",";","}","}"],"func_name":"TimerUtils","func_name_tokens":["timer","utils"],"docstring":"  Utility class providing methods for coping with timing issues, such as  {@link Thread#sleep(long, int)} inaccuracy, on certain OS.  <p/>  and http://andy-malakov.blogspot.cz/2010/06/alternative-to-threadsleep.html.","docstring_tokens":["utility","class","providing","methods","for","coping","with","timing","issues",",","such","as","{","thread","#","sleep","(","long",",","int",")","}","inaccuracy",",","on","certain","os",".","<","p","/",">","and"],"query":"Accurate Sleep for Java on Windows","query_tokens":["accurate","sleep","for","java","on","windows"]}
{"query_id":"11889997","repo_name":"actframework/actframework","zip_link":"/actframework/actframework/archive/master.zip","code":"public enum ParamEncoding {    /**     * Encode for JSON body post     */    JSON() {        @Override        public List<$.T2<String, Object>> encode(String paramName, List<?> elements) {            return C.list($.T2(paramName, (Object)elements));        }        @Override        public List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements) {            return C.list($.T2(paramName, (Object)elements));        }    },    /**     * The first style:     * List: `name=Actor1&name=Actor2&name=Actor3`     * Map: not supported     */    ONE() {        @Override        public List<$.T2<String, Object>> encode(final String paramName, final List<?> elements) {            return C.list(elements).map(new $.Transformer<Object, $.T2<String, Object>>() {                @Override                public $.T2<String, Object> transform(Object o) {                    return $.T2(paramName, o);                }            });        }        @Override        public List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements) {            throw E.unsupport();        }    },    /**     * The second style:     * List: `name[0]=Actor1&name[1]=Actor2&name[2]=Actor3`     * Map: `name[k1]=v1&name[k2]=v2`     */    TWO() {        @Override        public List<$.T2<String, Object>> encode(String paramName, List<?> elements) {            List<$.T2<String, Object>> retList = C.newSizedList(elements.size());            for (int i = 0; i < elements.size(); ++i) {                retList.add($.T2(S.fmt(\"%s[%d]\", paramName, i), elements.get(i)));            }            return retList;        }        @Override        public List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements) {            List<$.T2<String, Object>> retList = C.newList();            if (null != elements) {                for (Map.Entry<?, ?> entry : elements.entrySet()) {                    retList.add($.T2(S.fmt(\"%s[%s]\", paramName, entry.getKey().toString()), entry.getValue()));                }            }            return retList;        }    },    /**     * The third style:     * List: `name[]=Actor&name[]=Actor2&name[]=Actor3`     * Map: not supported     */    THREE() {        @Override        public List<$.T2<String, Object>> encode(String paramName, List<?> elements) {            List<$.T2<String, Object>> retList = C.newSizedList(elements.size());            for (int i = 0; i < elements.size(); ++i) {                retList.add($.T2(S.fmt(\"%s[]\", paramName, i), elements.get(i)));            }            return retList;        }        @Override        public List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements) {            throw E.unsupport();        }    },    /**     * The fourth style:     *     * List: `name.1=Actor&name.2=Actor2&name.3=Actor3`     * Map: `name.k1=v1&name.k2=v2`     */    FOUR() {        @Override        public List<$.T2<String, Object>> encode(String paramName, List<?> elements) {            E.illegalStateIf(paramName.contains(\".\"), \"Param encoding four does not support param name with \\\".\\\" inside\");            List<$.T2<String, Object>> retList = C.newList();            for (int i = 0; i < elements.size(); ++i) {                retList.add($.T2(S.fmt(\"%s.%d\", paramName, i), elements.get(i)));            }            return retList;        }        @Override        public List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements) {            E.illegalStateIf(paramName.contains(\".\"), \"Param encoding four does not support param name with \\\".\\\" inside\");            List<$.T2<String, Object>> retList = C.newList();            if (null != elements) {                for (Map.Entry<?, ?> entry : elements.entrySet()) {                    retList.add($.T2(S.fmt(\"%s.%s\", paramName, entry.getKey().toString()), entry.getValue()));                }            }            return retList;        }    }    ;    /**     * Returns the list of (k,v) pairs to be fed into GET/POST request     *     * @param paramName the name of the parameter     * @param elements  the list of values     * @return A list of (key,val) pairs to be feed into GET/POST request     */    public abstract List<$.T2<String, Object>> encode(String paramName, List<?> elements);    public abstract List<$.T2<String, Object>> encode(String paramName, Map<?, ?> elements);}","code_tokens":["public","enum","param","encoding","{","json","(",")","{","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","list","<","?",">","elements",")","{","return","c",".","list","(","$",".","t2","(","param","name",",","(","object",")","elements",")",")",";","}","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")","{","return","c",".","list","(","$",".","t2","(","param","name",",","(","object",")","elements",")",")",";","}","}",",","one","(",")","{","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","final","string","param","name",",","final","list","<","?",">","elements",")","{","return","c",".","list","(","elements",")",".","map","(","new","$",".","transformer","<","object",",","$",".","t2","<","string",",","object",">",">","(",")","{","@","override","public","$",".","t2","<","string",",","object",">","transform","(","object","o",")","{","return","$",".","t2","(","param","name",",","o",")",";","}","}",")",";","}","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")","{","throw","e",".","unsupport","(",")",";","}","}",",","two","(",")","{","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","list","<","?",">","elements",")","{","list","<","$",".","t2","<","string",",","object",">",">","ret","list","=","c",".","new","sized","list","(","elements",".","size","(",")",")",";","for","(","int","i","=","0",";","i","<","elements",".","size","(",")",";","+","+","i",")","{","ret","list",".","add","(","$",".","t2","(","s",".","fmt","(","\"","%","s","[","%","d","]","\"",",","param","name",",","i",")",",","elements",".","get","(","i",")",")",")",";","}","return","ret","list",";","}","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")","{","list","<","$",".","t2","<","string",",","object",">",">","ret","list","=","c",".","new","list","(",")",";","if","(","null","!","=","elements",")","{","for","(","map",".","entry","<","?",",","?",">","entry",":","elements",".","entry","set","(",")",")","{","ret","list",".","add","(","$",".","t2","(","s",".","fmt","(","\"","%","s","[","%","s","]","\"",",","param","name",",","entry",".","get","key","(",")",".","to","string","(",")",")",",","entry",".","get","value","(",")",")",")",";","}","}","return","ret","list",";","}","}",",","three","(",")","{","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","list","<","?",">","elements",")","{","list","<","$",".","t2","<","string",",","object",">",">","ret","list","=","c",".","new","sized","list","(","elements",".","size","(",")",")",";","for","(","int","i","=","0",";","i","<","elements",".","size","(",")",";","+","+","i",")","{","ret","list",".","add","(","$",".","t2","(","s",".","fmt","(","\"","%","s","[","]","\"",",","param","name",",","i",")",",","elements",".","get","(","i",")",")",")",";","}","return","ret","list",";","}","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")","{","throw","e",".","unsupport","(",")",";","}","}",",","four","(",")","{","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","list","<","?",">","elements",")","{","e",".","illegal","state","if","(","param","name",".","contains","(","\"",".","\"",")",",","\"","param","encoding","four","does","not","support","param","name","with","\\","\"",".","\\","\"","inside","\"",")",";","list","<","$",".","t2","<","string",",","object",">",">","ret","list","=","c",".","new","list","(",")",";","for","(","int","i","=","0",";","i","<","elements",".","size","(",")",";","+","+","i",")","{","ret","list",".","add","(","$",".","t2","(","s",".","fmt","(","\"","%","s",".","%","d","\"",",","param","name",",","i",")",",","elements",".","get","(","i",")",")",")",";","}","return","ret","list",";","}","@","override","public","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")","{","e",".","illegal","state","if","(","param","name",".","contains","(","\"",".","\"",")",",","\"","param","encoding","four","does","not","support","param","name","with","\\","\"",".","\\","\"","inside","\"",")",";","list","<","$",".","t2","<","string",",","object",">",">","ret","list","=","c",".","new","list","(",")",";","if","(","null","!","=","elements",")","{","for","(","map",".","entry","<","?",",","?",">","entry",":","elements",".","entry","set","(",")",")","{","ret","list",".","add","(","$",".","t2","(","s",".","fmt","(","\"","%","s",".","%","s","\"",",","param","name",",","entry",".","get","key","(",")",".","to","string","(",")",")",",","entry",".","get","value","(",")",")",")",";","}","}","return","ret","list",";","}","}",";","public","abstract","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","list","<","?",">","elements",")",";","public","abstract","list","<","$",".","t2","<","string",",","object",">",">","encode","(","string","param","name",",","map","<","?",",","?",">","elements",")",";","}"],"func_name":"ParamEncoding","func_name_tokens":["param","encoding"],"docstring":"  There are two ways to pass array/list element in GET request. For detail refers to   Note the comma separated style (first style in the accepted answer post) cannot  be supported correctly","docstring_tokens":["there","are","two","ways","to","pass","array","/","list","element","in","get","request",".","for","detail","refers","to","note","the","comma","separated","style","(","first","style","in","the","accepted","answer","post",")","cannot","be","supported","correctly"],"query":"how to send an array in url request","query_tokens":["how","to","send","an","array","in","url","request"]}
{"query_id":"1456930","repo_name":"foolchan2556/openmrs-core","zip_link":"/foolchan2556/openmrs-core/archive/master.zip","code":"\tprivate List<String> findDWRServiceClassesWhichContainDeprecatedAnnotation() throws IOException, ClassNotFoundException {\t\tResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\t\tMetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(resourcePatternResolver);\t\t\t\t//Search only for Service Classes in DWR package.\t\tString packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\t\t        + resolveBasePackage(OPENMRS_DWR_PACKAGE_NAME) + \"/**/*Service.class\";\t\t\t\tList<String> candidateClasses = new ArrayList<String>();\t\tResource[] resources = resourcePatternResolver.getResources(packageSearchPath);\t\tfor (Resource resource : resources) {\t\t\tif (resource.isReadable()) {\t\t\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\t\t\t\tif (doesClassContainDeprecatedAnnotation(metadataReader)) {\t\t\t\t\tcandidateClasses.add(metadataReader.getClassMetadata().getClassName());\t\t\t\t}\t\t\t}\t\t}\t\t\t\treturn candidateClasses;\t}","code_tokens":["private","list","<","string",">","find","dwr","service","classes","which","contain","deprecated","annotation","(",")","throws","io","exception",",","class","not","found","exception","{","resource","pattern","resolver","resource","pattern","resolver","=","new","path","matching","resource","pattern","resolver","(",")",";","metadata","reader","factory","metadata","reader","factory","=","new","caching","metadata","reader","factory","(","resource","pattern","resolver",")",";","/","/","search","only","for","service","classes","in","dwr","package",".","string","package","search","path","=","resource","pattern","resolver",".","classpath","all","url","prefix","+","resolve","base","package","(","openmrs","dwr","package","name",")","+","\"","*","service",".","class","\"",";","list","<","string",">","candidate","classes","=","new","array","list","<","string",">","(",")",";","resource","[","]","resources","=","resource","pattern","resolver",".","get","resources","(","package","search","path",")",";","for","(","resource","resource",":","resources",")","{","if","(","resource",".","is","readable","(",")",")","{","metadata","reader","metadata","reader","=","metadata","reader","factory",".","get","metadata","reader","(","resource",")",";","if","(","does","class","contain","deprecated","annotation","(","metadata","reader",")",")","{","candidate","classes",".","add","(","metadata","reader",".","get","class","metadata","(",")",".","get","class","name","(",")",")",";","}","}","}","return","candidate","classes",";","}"],"func_name":"findDWRServiceClassesWhichContainDeprecatedAnnotation","func_name_tokens":["find","dwr","service","classes","which","contain","deprecated","annotation"],"docstring":"\t\t  Returns a list of class names which contain the {@literal @}Deprecated annotation. Does this search ONLY for\t  DWRService classes.\t \t  Found the basic code here:\t \t  @return List of classes which contain the Deprecated annotation ({@literal @}Deprecated)\t  @throws IOException\t  @throws ClassNotFoundException","docstring_tokens":["returns","a","list","of","class","names","which","contain","the","{","@","literal","@","}","deprecated","annotation",".","does","this","search","only","for","dwr","service","classes",".","found","the","basic","code","here",":"],"query":"How do I read all classes from a Java package in the classpath?","query_tokens":["how","do","i","read","all","classes","from","a","java","package","in","the","classpath","?"]}
{"query_id":"4915891","repo_name":"Schwabensebi92/GameEngine","zip_link":"/Schwabensebi92/SkyEngine/archive/master.zip","code":"\tpublic static boolean floatNearlyEquals(final float value1, final float value2, final float tolerance) {\t\tfloat absValue1 = Math.abs(value1);\t\tfloat absValue2 = Math.abs(value2);\t\tfloat diff = Math.abs(value1 - value2);\t\t\t\tif (value1 == value2)\t\t\treturn true;\t\telse if (value1 == 0 || value2 == 0 || diff < Float.MIN_NORMAL)\t\t\treturn diff < (tolerance * Float.MIN_NORMAL);\t\telse\t\t\treturn diff / (absValue1 + absValue2) < tolerance;\t}","code_tokens":["public","static","boolean","float","nearly","equals","(","final","float","value1",",","final","float","value2",",","final","float","tolerance",")","{","float","abs","value1","=","math",".","abs","(","value1",")",";","float","abs","value2","=","math",".","abs","(","value2",")",";","float","diff","=","math",".","abs","(","value1","-","value2",")",";","if","(","value1","=","=","value2",")","return","true",";","else","if","(","value1","=","=","0","|","|","value2","=","=","0","|","|","diff","<","float",".","min","normal",")","return","diff","<","(","tolerance","*","float",".","min","normal",")",";","else","return","diff","/","(","abs","value1","+","abs","value2",")","<","tolerance",";","}"],"func_name":"floatNearlyEquals","func_name_tokens":["float","nearly","equals"],"docstring":"\t\t  Compares if two float values are equal with a tolerance.\t  \t  @param value1\t             The first float value.\t  @param value2\t             The second float value.\t  @param tolerance\t             The tolerance, with which the two float values are compared.\t  @return Returns <code>true</code> if the difference of <code>value1</code> and <code>value2</code> is less than\t          <code>tolerance</code>.\t  \t\t","docstring_tokens":["compares","if","two","float","values","are","equal","with","a","tolerance","."],"query":"How should I do floating point comparison?","query_tokens":["how","should","i","do","floating","point","comparison","?"]}
{"query_id":"48483465","repo_name":"codenameone/CodenameOne","zip_link":"/codenameone/CodenameOne/archive/master.zip","code":"public class Validator {        private static final String VALID_MARKER = \"cn1$$VALID_MARKER\";        private InteractionDialog message = new InteractionDialog();        /**     * Error message UIID defaults to DialogBody. Allows customizing the look of the message     */    private String errorMessageUIID = \"DialogBody\";        /**     * Indicates the default mode in which validation failures are expressed     * @return the defaultValidationFailureHighlightMode     */    public static HighlightMode getDefaultValidationFailureHighlightMode() {        return defaultValidationFailureHighlightMode;    }    /**     * Indicates the default mode in which validation failures are expressed     * @param aDefaultValidationFailureHighlightMode the defaultValidationFailureHighlightMode to set     */    public static void setDefaultValidationFailureHighlightMode(HighlightMode aDefaultValidationFailureHighlightMode) {        defaultValidationFailureHighlightMode = aDefaultValidationFailureHighlightMode;    }    /**     * The emblem that will be drawn on top of the component to indicate the validation failure     * @return the defaultValidationFailedEmblem     */    public static Image getDefaultValidationFailedEmblem() {        return defaultValidationFailedEmblem;    }    /**     * The emblem that will be drawn on top of the component to indicate the validation failure     * @param aDefaultValidationFailedEmblem the defaultValidationFailedEmblem to set     */    public static void setDefaultValidationFailedEmblem(Image aDefaultValidationFailedEmblem) {        defaultValidationFailedEmblem = aDefaultValidationFailedEmblem;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @return the defaultValidationEmblemPositionX     */    public static float getDefaultValidationEmblemPositionX() {        return defaultValidationEmblemPositionX;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @param aDefaultValidationEmblemPositionX the defaultValidationEmblemPositionX to set     */    public static void setDefaultValidationEmblemPositionX(float aDefaultValidationEmblemPositionX) {        defaultValidationEmblemPositionX = aDefaultValidationEmblemPositionX;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @return the defaultValidationEmblemPositionY     */    public static float getDefaultValidationEmblemPositionY() {        return defaultValidationEmblemPositionY;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @param aDefaultValidationEmblemPositionY the defaultValidationEmblemPositionY to set     */    public static void setDefaultValidationEmblemPositionY(float aDefaultValidationEmblemPositionY) {        defaultValidationEmblemPositionY = aDefaultValidationEmblemPositionY;    }    /**     * Indicates whether validation should occur on every key press (data change listener) or     * action performed (editing completion)     * @return the validateOnEveryKey     */    public static boolean isValidateOnEveryKey() {        return validateOnEveryKey;    }    /**     * Indicates whether validation should occur on every key press (data change listener) or     * action performed (editing completion)     * @param aValidateOnEveryKey the validateOnEveryKey to set     */    public static void setValidateOnEveryKey(boolean aValidateOnEveryKey) {        validateOnEveryKey = aValidateOnEveryKey;    }    /**     * Indicates the default mode in which validation failures are expressed     * @return the validationFailureHighlightMode     */    public HighlightMode getValidationFailureHighlightMode() {        return validationFailureHighlightMode;    }    /**     * Indicates the default mode in which validation failures are expressed     * @param validationFailureHighlightMode the validationFailureHighlightMode to set     */    public void setValidationFailureHighlightMode(HighlightMode validationFailureHighlightMode) {        this.validationFailureHighlightMode = validationFailureHighlightMode;    }    /**     * The emblem that will be drawn on top of the component to indicate the validation failure     * @return the validationFailedEmblem     */    public Image getValidationFailedEmblem() {        return validationFailedEmblem;    }    /**     * The emblem that will be drawn on top of the component to indicate the validation failure     * @param validationFailedEmblem the validationFailedEmblem to set     */    public void setValidationFailedEmblem(Image validationFailedEmblem) {        this.validationFailedEmblem = validationFailedEmblem;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @return the validationEmblemPositionX     */    public float getValidationEmblemPositionX() {        return validationEmblemPositionX;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @param validationEmblemPositionX the validationEmblemPositionX to set     */    public void setValidationEmblemPositionX(float validationEmblemPositionX) {        this.validationEmblemPositionX = validationEmblemPositionX;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @return the validationEmblemPositionY     */    public float getValidationEmblemPositionY() {        return validationEmblemPositionY;    }    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     * @param validationEmblemPositionY the validationEmblemPositionY to set     */    public void setValidationEmblemPositionY(float validationEmblemPositionY) {        this.validationEmblemPositionY = validationEmblemPositionY;    }    /**     * Indicates whether an error message should be shown for the focused component     * @return true if the error message should be displayed     */    public boolean isShowErrorMessageForFocusedComponent() {        return showErrorMessageForFocusedComponent;    }    /**     * Indicates whether an error message should be shown for the focused component     *      * @param showErrorMessageForFocusedComponent true to show the error message     */    public void setShowErrorMessageForFocusedComponent(boolean showErrorMessageForFocusedComponent) {        this.showErrorMessageForFocusedComponent = showErrorMessageForFocusedComponent;    }    /**     * Error message UIID defaults to DialogBody. Allows customizing the look of the message     * @return the errorMessageUIID     */    public String getErrorMessageUIID() {        return errorMessageUIID;    }    /**     * Error message UIID defaults to DialogBody. Allows customizing the look of the message     * @param errorMessageUIID the errorMessageUIID to set     */    public void setErrorMessageUIID(String errorMessageUIID) {        this.errorMessageUIID = errorMessageUIID;    }    /**     * Indicates the validation failure modes     */    public static enum HighlightMode {        UIID,        EMBLEM,        UIID_AND_EMBLEM,        NONE    }    /**     * Indicates the default mode in which validation failures are expressed     */    private static HighlightMode defaultValidationFailureHighlightMode = HighlightMode.EMBLEM;    /**     * Indicates the mode in which validation failures are expressed     */    private HighlightMode validationFailureHighlightMode = defaultValidationFailureHighlightMode;        /**     * The emblem that will be drawn on top of the component to indicate the validation failure     */    private static Image defaultValidationFailedEmblem = null;    /**     * The emblem that will be drawn on top of the component to indicate the validation failure     */    private Image validationFailedEmblem = defaultValidationFailedEmblem;        /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     */    private static float defaultValidationEmblemPositionX = 1;    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     */    private static float defaultValidationEmblemPositionY = 0.5f;            /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     */    private float validationEmblemPositionX = defaultValidationEmblemPositionX;    /**     * The position of the validation emblem on the component as X/Y values between 0 and 1 where      * 0 indicates the start of the component and 1 indicates its end on the given axis.     */    private float validationEmblemPositionY = defaultValidationEmblemPositionY;        private HashMap<Component, Constraint> constraintList = new HashMap<Component, Constraint>();    private ArrayList<Component> submitButtons = new ArrayList<Component>();        /**     * Indicates whether validation should occur on every key press (data change listener) or     * action performed (editing completion)     */    private static boolean validateOnEveryKey = false;        /**     * Indicates whether an error message should be shown for the focused component     */    private boolean showErrorMessageForFocusedComponent;    /**     * Default constructor     */    public Validator() {        if(defaultValidationFailedEmblem == null) {            // initialize the default emblem            defaultValidationFailedEmblem = FontImage.createMaterial(FontImage.MATERIAL_CANCEL, \"InvalidEmblem\", 3);            validationFailedEmblem = defaultValidationFailedEmblem;        }    }        /**     * Places a constraint on the validator, returns this object so constraint     * additions can be chained. Shows validation errors messages even when the     * TextModeLayout is not {@code onTopMode} (it's possible to disable this     * functionality setting to false the theme constant     * {@code showValidationErrorsIfNotOnTopMode}: basically, the error     * message is shown for two second in place of the label on the left of the     * InputComponent (or on right of the InputComponent for RTL languages);     * this solution never breaks the layout, because the error message is     * trimmed to fit the available space. The error message UIID is     * \"ErrorLabel\" when it's not onTopMode.     *     * @param cmp the component to validate     * @param c the constraint or constraints     * @return this object so we can write code like v.addConstraint(cmp1,     * cons).addConstraint(cmp2, otherConstraint);     */    public Validator addConstraint(Component cmp, Constraint... c) {        Constraint constraint = null;        if (c.length == 1) {            constraint = c[0];            constraintList.put(cmp, constraint);        } else if (c.length > 1) {            constraint = new GroupConstraint(c);            constraintList.put(cmp, constraint);        }        if (constraint == null) {            throw new IllegalArgumentException(\"addConstraint needs at least a Constraint, but the Constraint array in empty\");        }        bindDataListener(cmp);        boolean isV = isValid();        for (Component btn : submitButtons) {            btn.setEnabled(isV);        }        // Show validation error on iPhone        if (UIManager.getInstance().isThemeConstant(\"showValidationErrorsIfNotOnTopMode\", true) && cmp instanceof InputComponent) {            final InputComponent inputComponent = (InputComponent) cmp;            if (!inputComponent.isOnTopMode()) {                Label labelForComponent = null;                if (inputComponent instanceof TextComponent) {                    labelForComponent = ((TextComponent) inputComponent).getField().getLabelForComponent();                } else if (inputComponent instanceof PickerComponent) {                    labelForComponent = ((PickerComponent) inputComponent).getPicker().getLabelForComponent();                }                if (labelForComponent != null) {                    final Label myLabel = labelForComponent;                    final String originalText = myLabel.getText();                    final String originalUIID = myLabel.getUIID();                    final Constraint myConstraint = constraint;                    final Runnable showError = new Runnable() {                        @Override                        public void run() {                            boolean isValid = false;                            if (inputComponent instanceof TextComponent) {                                isValid = myConstraint.isValid(((TextComponent) inputComponent).getField().getText());                            } else if (inputComponent instanceof PickerComponent) {                                isValid = myConstraint.isValid(((PickerComponent) inputComponent).getPicker().getValue());                            }                                                        String errorMessage = trimLongString(UIManager.getInstance().localize(myConstraint.getDefaultFailMessage(), myConstraint.getDefaultFailMessage()), \"ErrorLabel\", myLabel.getWidth());                                                        if (errorMessage != null && errorMessage.length() > 0 && !isValid) {                                // show the error in place of the label for component                                myLabel.setUIID(\"ErrorLabel\");                                myLabel.setText(errorMessage);                                UITimer.timer(2000, false, Display.getInstance().getCurrent(), new Runnable() {                                    @Override                                    public void run() {                                        myLabel.setUIID(originalUIID);                                        myLabel.setText(originalText);                                    }                                });                            } else {                                // show the label for component without the error                                myLabel.setUIID(originalUIID);                                myLabel.setText(originalText);                            }                        }                    };                    FocusListener myFocusListener = new FocusListener() {                        @Override                        public void focusLost(Component cmp) {                            showError.run();                        }                        @Override                        public void focusGained(Component cmp) {                            // no code here                        }                    };                    if (inputComponent instanceof TextComponent) {                        ((TextComponent) inputComponent).getField().addFocusListener(myFocusListener);                    } else if (inputComponent instanceof PickerComponent) {                        ((PickerComponent) inputComponent).getPicker().addFocusListener(myFocusListener);                    }                }            }        }        return this;    }        /**     * Long error messages are trimmed to fit the available space in the layout     *     * @param errorMessage the string to be trimmed     * @param uiid the uiid of the errorMessage     * @param width the maximum width     * @return the new String trimmed to fit the available width     */    private String trimLongString(String errorMessage, String uiid, int width) {        Label errorLabel = new Label(errorMessage, uiid);        while (errorLabel.getPreferredW() > width && errorMessage.length() > 1) {            errorMessage = errorMessage.substring(0, errorMessage.length() - 1);            errorLabel.setText(errorMessage);        }        return errorMessage;    }        /**     * Submit buttons (or any other component type) can be disabled until all components contain a valid value.     * Notice that this method should be invoked after all the constraints are added so the initial state of the buttons     * will be correct.     *      * @param cmp set of buttons or components to disable until everything is valid     * @return the validator instance so this method can be chained     */    public Validator addSubmitButtons(Component... cmp) {        boolean isV = isValid();        for(Component c : cmp) {            submitButtons.add(c);            c.setEnabled(isV);        }        return this;    }        /**     * Returns the value of the given component, this can be overriden to add support for custom built components     *      * @param cmp the component     * @return  the object value     */    protected Object getComponentValue(Component cmp) {        if(cmp instanceof InputComponent) {            cmp = ((InputComponent)cmp).getEditor();        }        if(cmp instanceof TextArea) {            return ((TextArea)cmp).getText();        }        if(cmp instanceof Picker) {            return ((Picker)cmp).getValue();        }        if(cmp instanceof RadioButton || cmp instanceof CheckBox) {            if(((Button)cmp).isSelected()) {                return Boolean.TRUE;            }            return Boolean.FALSE;        }        if(cmp instanceof Label) {            return ((Label)cmp).getText();        }        if(cmp instanceof List) {            return ((List)cmp).getSelectedItem();        }        return null;    }        /**     * Binds an event listener to the given component     * @param cmp the component to bind the data listener to     * @deprecated this method was exposed by accident, constraint implicitly calls it and you don't need to      * call it directly. It will be made protected in a future update to Codename One!     */    public void bindDataListener(Component cmp) {        if(showErrorMessageForFocusedComponent) {            if(!(cmp instanceof InputComponent && ((InputComponent)cmp).isOnTopMode())) {                cmp.addFocusListener(new FocusListener() {                    public void focusGained(Component cmp) {                        // special case. Before the form is showing don't show error dialogs                        Form p = cmp.getComponentForm();                        if(p != Display.getInstance().getCurrent()) {                            return;                        }                        if(message != null) {                            message.dispose();                        }                        if(!isValid(cmp)) {                            String err = getErrorMessage(cmp);                            if(err != null && err.length() > 0) {                                message = new InteractionDialog(err);                                message.getTitleComponent().setUIID(errorMessageUIID);                                message.setAnimateShow(false);                                if(validationFailureHighlightMode == HighlightMode.EMBLEM || validationFailureHighlightMode == HighlightMode.UIID_AND_EMBLEM) {                                    int xpos = cmp.getAbsoluteX();                                    int ypos = cmp.getAbsoluteY();                                    Component scr = cmp.getScrollable();                                    if(scr != null) {                                        xpos -= scr.getScrollX();                                        ypos -= scr.getScrollY();                                        scr.addScrollListener(new ScrollListener() {                                            public void scrollChanged(int scrollX, int scrollY, int oldscrollX, int oldscrollY) {                                                if (message != null) {                                                    message.dispose();                                                }                                                message = null;                                            }                                        });                                    }                                    float width = cmp.getWidth();                                    float height = cmp.getHeight();                                    xpos += Math.round(width * validationEmblemPositionX);                                    ypos += Math.round(height * validationEmblemPositionY);                                    if(message != null) {                                        message.showPopupDialog(new Rectangle(xpos, ypos, validationFailedEmblem.getWidth(),                                                 validationFailedEmblem.getHeight()));                                    }                                } else {                                    message.showPopupDialog(cmp);                                }                            }                        }                    }                    public void focusLost(Component cmp) {                    }                });            }        }        if(validateOnEveryKey) {            if(cmp instanceof TextComponent) {                ((TextComponent)cmp).getField().addDataChangedListener(new ComponentListener(cmp));                return;            }            if(cmp instanceof TextField) {                ((TextField)cmp).addDataChangedListener(new ComponentListener(cmp));                return;            }        }        if(cmp instanceof TextComponent) {            ((TextComponent)cmp).getField().addActionListener(new ComponentListener(cmp));            return;        }        if(cmp instanceof TextArea) {            ((TextArea)cmp).addActionListener(new ComponentListener(cmp));            return;        }        if(cmp instanceof List) {            ((List)cmp).addActionListener(new ComponentListener(cmp));            return;        }        if(cmp instanceof CheckBox || cmp instanceof RadioButton) {            ((Button)cmp).addActionListener(new ComponentListener(cmp));            return;        }         if(cmp instanceof Picker) {            ((Picker)cmp).addActionListener(new ComponentListener(cmp));            return;        }        if(cmp instanceof PickerComponent) {            ((PickerComponent)cmp).getPicker().addActionListener(new ComponentListener(cmp));            return;        }    }    /**     * Returns true if all the constraints are currently valid     * @return true if the entire validator is valid     */    public boolean isValid() {        for(Component c : constraintList.keySet()) {            if(!isValid(c)) {                return false;            }        }        return true;    }        /**     * Validates and highlights an individual component     * @param cmp the component to validate     */    protected void validate(Component cmp) {        Object val = getComponentValue(cmp);        Constraint c = constraintList.get(cmp);        if(c != null) {            setValid(cmp, c.isValid(val));        }    }        boolean isValid(Component cmp) {        Boolean b = (Boolean)cmp.getClientProperty(VALID_MARKER);        if(b != null) {            return b.booleanValue();        }        Object val = getComponentValue(cmp);        Constraint c = constraintList.get(cmp);        if(c != null) {            return c.isValid(val);        }        return true;    }        /**     * Returns the validation error message for the given component or null if no such message exists     * @param cmp the invalid component     * @return a string representing the error message     */    public String getErrorMessage(Component cmp) {        return constraintList.get(cmp).getDefaultFailMessage();    }    void setValid(Component cmp, boolean v) {        Boolean b = (Boolean)cmp.getClientProperty(VALID_MARKER);        if(b != null && b.booleanValue() == v) {            return;        }        cmp.putClientProperty(VALID_MARKER, v);        if(!v) {            // if one component is invalid... just disable the submit buttons            for(Component c : submitButtons) {                c.setEnabled(false);            }        } else {            boolean isV = isValid();            for(Component c : submitButtons) {                c.setEnabled(isV);            }            if(message != null && cmp.hasFocus()) {                message.dispose();            }        }        if(cmp instanceof InputComponent && ((InputComponent)cmp).isOnTopMode()) {            InputComponent tc = (InputComponent)cmp;            if(v) {                tc.errorMessage(null);            } else {                tc.errorMessage(getErrorMessage(cmp));            }        }                if(validationFailureHighlightMode == HighlightMode.EMBLEM || validationFailureHighlightMode == HighlightMode.UIID_AND_EMBLEM) {            if(!(cmp.getComponentForm().getGlassPane() instanceof ComponentListener)) {                cmp.getComponentForm().setGlassPane(new ComponentListener(null));            }        }        if(v) {            if(validationFailureHighlightMode == HighlightMode.UIID || validationFailureHighlightMode == HighlightMode.UIID_AND_EMBLEM) {                String uiid = cmp.getUIID();                if(uiid.endsWith(\"Invalid\")) {                    uiid = uiid.substring(0, uiid.length() - 7);                    cmp.setUIID(uiid);                }                return;            }            if(validationFailureHighlightMode == HighlightMode.EMBLEM && validationFailedEmblem != null) {                            }        } else {            if(validationFailureHighlightMode == HighlightMode.UIID || validationFailureHighlightMode == HighlightMode.UIID_AND_EMBLEM) {                String uiid = cmp.getUIID();                if(!uiid.endsWith(\"Invalid\")) {                    cmp.setUIID(uiid + \"Invalid\");                }                return;            }                    }    }        class ComponentListener implements ActionListener, DataChangedListener, Painter {        private Component cmp;        public ComponentListener(Component cmp) {            this.cmp = cmp;        }                public void actionPerformed(ActionEvent evt) {            validate(cmp);        }        public void dataChanged(int type, int index) {            validate(cmp);        }        /**         * Handles the glasspane work just to save a new class object (smaller code)         */        @Override        public void paint(Graphics g, Rectangle rect) {            for(Component c : constraintList.keySet()) {                if(!isValid(c)) {                    if(c instanceof InputComponent && ((InputComponent)c).isOnTopMode()) {                        continue;                    }                    int xpos = c.getAbsoluteX();                    int ypos = c.getAbsoluteY();                    float width = c.getWidth();                    float height = c.getHeight();                    xpos += Math.round(width * validationEmblemPositionX);                    ypos += Math.round(height * validationEmblemPositionY);                    if(xpos + validationFailedEmblem.getWidth() > Display.getInstance().getDisplayWidth()) {                        g.drawImage(validationFailedEmblem, xpos - validationFailedEmblem.getWidth(), ypos - validationFailedEmblem.getHeight() / 2);                    } else {                        g.drawImage(validationFailedEmblem, xpos - validationFailedEmblem.getWidth() / 2, ypos - validationFailedEmblem.getHeight() / 2);                    }                }            }        }    }}","code_tokens":["public","class","validator","{","private","static","final","string","valid","marker","=","\"","cn1","$","$","valid","marker","\"",";","private","interaction","dialog","message","=","new","interaction","dialog","(",")",";","private","string","error","message","uiid","=","\"","dialog","body","\"",";","public","static","highlight","mode","get","default","validation","failure","highlight","mode","(",")","{","return","default","validation","failure","highlight","mode",";","}","public","static","void","set","default","validation","failure","highlight","mode","(","highlight","mode","a","default","validation","failure","highlight","mode",")","{","default","validation","failure","highlight","mode","=","a","default","validation","failure","highlight","mode",";","}","public","static","image","get","default","validation","failed","emblem","(",")","{","return","default","validation","failed","emblem",";","}","public","static","void","set","default","validation","failed","emblem","(","image","a","default","validation","failed","emblem",")","{","default","validation","failed","emblem","=","a","default","validation","failed","emblem",";","}","public","static","float","get","default","validation","emblem","position","x","(",")","{","return","default","validation","emblem","position","x",";","}","public","static","void","set","default","validation","emblem","position","x","(","float","a","default","validation","emblem","position","x",")","{","default","validation","emblem","position","x","=","a","default","validation","emblem","position","x",";","}","public","static","float","get","default","validation","emblem","position","y","(",")","{","return","default","validation","emblem","position","y",";","}","public","static","void","set","default","validation","emblem","position","y","(","float","a","default","validation","emblem","position","y",")","{","default","validation","emblem","position","y","=","a","default","validation","emblem","position","y",";","}","public","static","boolean","is","validate","on","every","key","(",")","{","return","validate","on","every","key",";","}","public","static","void","set","validate","on","every","key","(","boolean","a","validate","on","every","key",")","{","validate","on","every","key","=","a","validate","on","every","key",";","}","public","highlight","mode","get","validation","failure","highlight","mode","(",")","{","return","validation","failure","highlight","mode",";","}","public","void","set","validation","failure","highlight","mode","(","highlight","mode","validation","failure","highlight","mode",")","{","this",".","validation","failure","highlight","mode","=","validation","failure","highlight","mode",";","}","public","image","get","validation","failed","emblem","(",")","{","return","validation","failed","emblem",";","}","public","void","set","validation","failed","emblem","(","image","validation","failed","emblem",")","{","this",".","validation","failed","emblem","=","validation","failed","emblem",";","}","public","float","get","validation","emblem","position","x","(",")","{","return","validation","emblem","position","x",";","}","public","void","set","validation","emblem","position","x","(","float","validation","emblem","position","x",")","{","this",".","validation","emblem","position","x","=","validation","emblem","position","x",";","}","public","float","get","validation","emblem","position","y","(",")","{","return","validation","emblem","position","y",";","}","public","void","set","validation","emblem","position","y","(","float","validation","emblem","position","y",")","{","this",".","validation","emblem","position","y","=","validation","emblem","position","y",";","}","public","boolean","is","show","error","message","for","focused","component","(",")","{","return","show","error","message","for","focused","component",";","}","public","void","set","show","error","message","for","focused","component","(","boolean","show","error","message","for","focused","component",")","{","this",".","show","error","message","for","focused","component","=","show","error","message","for","focused","component",";","}","public","string","get","error","message","uiid","(",")","{","return","error","message","uiid",";","}","public","void","set","error","message","uiid","(","string","error","message","uiid",")","{","this",".","error","message","uiid","=","error","message","uiid",";","}","public","static","enum","highlight","mode","{","uiid",",","emblem",",","uiid","and","emblem",",","none","}","private","static","highlight","mode","default","validation","failure","highlight","mode","=","highlight","mode",".","emblem",";","private","highlight","mode","validation","failure","highlight","mode","=","default","validation","failure","highlight","mode",";","private","static","image","default","validation","failed","emblem","=","null",";","private","image","validation","failed","emblem","=","default","validation","failed","emblem",";","private","static","float","default","validation","emblem","position","x","=","1",";","private","static","float","default","validation","emblem","position","y","=","0",".","5f",";","private","float","validation","emblem","position","x","=","default","validation","emblem","position","x",";","private","float","validation","emblem","position","y","=","default","validation","emblem","position","y",";","private","hash","map","<","component",",","constraint",">","constraint","list","=","new","hash","map","<","component",",","constraint",">","(",")",";","private","array","list","<","component",">","submit","buttons","=","new","array","list","<","component",">","(",")",";","private","static","boolean","validate","on","every","key","=","false",";","private","boolean","show","error","message","for","focused","component",";","public","validator","(",")","{","if","(","default","validation","failed","emblem","=","=","null",")","{","/","/","initialize","the","default","emblem","default","validation","failed","emblem","=","font","image",".","create","material","(","font","image",".","material","cancel",",","\"","invalid","emblem","\"",",","3",")",";","validation","failed","emblem","=","default","validation","failed","emblem",";","}","}","public","validator","add","constraint","(","component","cmp",",","constraint",".",".",".","c",")","{","constraint","constraint","=","null",";","if","(","c",".","length","=","=","1",")","{","constraint","=","c","[","0","]",";","constraint","list",".","put","(","cmp",",","constraint",")",";","}","else","if","(","c",".","length",">","1",")","{","constraint","=","new","group","constraint","(","c",")",";","constraint","list",".","put","(","cmp",",","constraint",")",";","}","if","(","constraint","=","=","null",")","{","throw","new","illegal","argument","exception","(","\"","add","constraint","needs","at","least","a","constraint",",","but","the","constraint","array","in","empty","\"",")",";","}","bind","data","listener","(","cmp",")",";","boolean","is","v","=","is","valid","(",")",";","for","(","component","btn",":","submit","buttons",")","{","btn",".","set","enabled","(","is","v",")",";","}","/","/","show","validation","error","on","i","phone","if","(","ui","manager",".","get","instance","(",")",".","is","theme","constant","(","\"","show","validation","errors","if","not","on","top","mode","\"",",","true",")","&","&","cmp","instanceof","input","component",")","{","final","input","component","input","component","=","(","input","component",")","cmp",";","if","(","!","input","component",".","is","on","top","mode","(",")",")","{","label","label","for","component","=","null",";","if","(","input","component","instanceof","text","component",")","{","label","for","component","=","(","(","text","component",")","input","component",")",".","get","field","(",")",".","get","label","for","component","(",")",";","}","else","if","(","input","component","instanceof","picker","component",")","{","label","for","component","=","(","(","picker","component",")","input","component",")",".","get","picker","(",")",".","get","label","for","component","(",")",";","}","if","(","label","for","component","!","=","null",")","{","final","label","my","label","=","label","for","component",";","final","string","original","text","=","my","label",".","get","text","(",")",";","final","string","original","uiid","=","my","label",".","get","uiid","(",")",";","final","constraint","my","constraint","=","constraint",";","final","runnable","show","error","=","new","runnable","(",")","{","@","override","public","void","run","(",")","{","boolean","is","valid","=","false",";","if","(","input","component","instanceof","text","component",")","{","is","valid","=","my","constraint",".","is","valid","(","(","(","text","component",")","input","component",")",".","get","field","(",")",".","get","text","(",")",")",";","}","else","if","(","input","component","instanceof","picker","component",")","{","is","valid","=","my","constraint",".","is","valid","(","(","(","picker","component",")","input","component",")",".","get","picker","(",")",".","get","value","(",")",")",";","}","string","error","message","=","trim","long","string","(","ui","manager",".","get","instance","(",")",".","localize","(","my","constraint",".","get","default","fail","message","(",")",",","my","constraint",".","get","default","fail","message","(",")",")",",","\"","error","label","\"",",","my","label",".","get","width","(",")",")",";","if","(","error","message","!","=","null","&","&","error","message",".","length","(",")",">","0","&","&","!","is","valid",")","{","/","/","show","the","error","in","place","of","the","label","for","component","my","label",".","set","uiid","(","\"","error","label","\"",")",";","my","label",".","set","text","(","error","message",")",";","ui","timer",".","timer","(","2000",",","false",",","display",".","get","instance","(",")",".","get","current","(",")",",","new","runnable","(",")","{","@","override","public","void","run","(",")","{","my","label",".","set","uiid","(","original","uiid",")",";","my","label",".","set","text","(","original","text",")",";","}","}",")",";","}","else","{","/","/","show","the","label","for","component","without","the","error","my","label",".","set","uiid","(","original","uiid",")",";","my","label",".","set","text","(","original","text",")",";","}","}","}",";","focus","listener","my","focus","listener","=","new","focus","listener","(",")","{","@","override","public","void","focus","lost","(","component","cmp",")","{","show","error",".","run","(",")",";","}","@","override","public","void","focus","gained","(","component","cmp",")","{","/","/","no","code","here","}","}",";","if","(","input","component","instanceof","text","component",")","{","(","(","text","component",")","input","component",")",".","get","field","(",")",".","add","focus","listener","(","my","focus","listener",")",";","}","else","if","(","input","component","instanceof","picker","component",")","{","(","(","picker","component",")","input","component",")",".","get","picker","(",")",".","add","focus","listener","(","my","focus","listener",")",";","}","}","}","}","return","this",";","}","private","string","trim","long","string","(","string","error","message",",","string","uiid",",","int","width",")","{","label","error","label","=","new","label","(","error","message",",","uiid",")",";","while","(","error","label",".","get","preferred","w","(",")",">","width","&","&","error","message",".","length","(",")",">","1",")","{","error","message","=","error","message",".","substring","(","0",",","error","message",".","length","(",")","-","1",")",";","error","label",".","set","text","(","error","message",")",";","}","return","error","message",";","}","public","validator","add","submit","buttons","(","component",".",".",".","cmp",")","{","boolean","is","v","=","is","valid","(",")",";","for","(","component","c",":","cmp",")","{","submit","buttons",".","add","(","c",")",";","c",".","set","enabled","(","is","v",")",";","}","return","this",";","}","protected","object","get","component","value","(","component","cmp",")","{","if","(","cmp","instanceof","input","component",")","{","cmp","=","(","(","input","component",")","cmp",")",".","get","editor","(",")",";","}","if","(","cmp","instanceof","text","area",")","{","return","(","(","text","area",")","cmp",")",".","get","text","(",")",";","}","if","(","cmp","instanceof","picker",")","{","return","(","(","picker",")","cmp",")",".","get","value","(",")",";","}","if","(","cmp","instanceof","radio","button","|","|","cmp","instanceof","check","box",")","{","if","(","(","(","button",")","cmp",")",".","is","selected","(",")",")","{","return","boolean",".","true",";","}","return","boolean",".","false",";","}","if","(","cmp","instanceof","label",")","{","return","(","(","label",")","cmp",")",".","get","text","(",")",";","}","if","(","cmp","instanceof","list",")","{","return","(","(","list",")","cmp",")",".","get","selected","item","(",")",";","}","return","null",";","}","public","void","bind","data","listener","(","component","cmp",")","{","if","(","show","error","message","for","focused","component",")","{","if","(","!","(","cmp","instanceof","input","component","&","&","(","(","input","component",")","cmp",")",".","is","on","top","mode","(",")",")",")","{","cmp",".","add","focus","listener","(","new","focus","listener","(",")","{","public","void","focus","gained","(","component","cmp",")","{","/","/","special","case",".","before","the","form","is","showing","don","'","t","show","error","dialogs","form","p","=","cmp",".","get","component","form","(",")",";","if","(","p","!","=","display",".","get","instance","(",")",".","get","current","(",")",")","{","return",";","}","if","(","message","!","=","null",")","{","message",".","dispose","(",")",";","}","if","(","!","is","valid","(","cmp",")",")","{","string","err","=","get","error","message","(","cmp",")",";","if","(","err","!","=","null","&","&","err",".","length","(",")",">","0",")","{","message","=","new","interaction","dialog","(","err",")",";","message",".","get","title","component","(",")",".","set","uiid","(","error","message","uiid",")",";","message",".","set","animate","show","(","false",")",";","if","(","validation","failure","highlight","mode","=","=","highlight","mode",".","emblem","|","|","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","and","emblem",")","{","int","xpos","=","cmp",".","get","absolute","x","(",")",";","int","ypos","=","cmp",".","get","absolute","y","(",")",";","component","scr","=","cmp",".","get","scrollable","(",")",";","if","(","scr","!","=","null",")","{","xpos","-","=","scr",".","get","scroll","x","(",")",";","ypos","-","=","scr",".","get","scroll","y","(",")",";","scr",".","add","scroll","listener","(","new","scroll","listener","(",")","{","public","void","scroll","changed","(","int","scroll","x",",","int","scroll","y",",","int","oldscroll","x",",","int","oldscroll","y",")","{","if","(","message","!","=","null",")","{","message",".","dispose","(",")",";","}","message","=","null",";","}","}",")",";","}","float","width","=","cmp",".","get","width","(",")",";","float","height","=","cmp",".","get","height","(",")",";","xpos","+","=","math",".","round","(","width","*","validation","emblem","position","x",")",";","ypos","+","=","math",".","round","(","height","*","validation","emblem","position","y",")",";","if","(","message","!","=","null",")","{","message",".","show","popup","dialog","(","new","rectangle","(","xpos",",","ypos",",","validation","failed","emblem",".","get","width","(",")",",","validation","failed","emblem",".","get","height","(",")",")",")",";","}","}","else","{","message",".","show","popup","dialog","(","cmp",")",";","}","}","}","}","public","void","focus","lost","(","component","cmp",")","{","}","}",")",";","}","}","if","(","validate","on","every","key",")","{","if","(","cmp","instanceof","text","component",")","{","(","(","text","component",")","cmp",")",".","get","field","(",")",".","add","data","changed","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","text","field",")","{","(","(","text","field",")","cmp",")",".","add","data","changed","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","}","if","(","cmp","instanceof","text","component",")","{","(","(","text","component",")","cmp",")",".","get","field","(",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","text","area",")","{","(","(","text","area",")","cmp",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","list",")","{","(","(","list",")","cmp",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","check","box","|","|","cmp","instanceof","radio","button",")","{","(","(","button",")","cmp",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","picker",")","{","(","(","picker",")","cmp",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","if","(","cmp","instanceof","picker","component",")","{","(","(","picker","component",")","cmp",")",".","get","picker","(",")",".","add","action","listener","(","new","component","listener","(","cmp",")",")",";","return",";","}","}","public","boolean","is","valid","(",")","{","for","(","component","c",":","constraint","list",".","key","set","(",")",")","{","if","(","!","is","valid","(","c",")",")","{","return","false",";","}","}","return","true",";","}","protected","void","validate","(","component","cmp",")","{","object","val","=","get","component","value","(","cmp",")",";","constraint","c","=","constraint","list",".","get","(","cmp",")",";","if","(","c","!","=","null",")","{","set","valid","(","cmp",",","c",".","is","valid","(","val",")",")",";","}","}","boolean","is","valid","(","component","cmp",")","{","boolean","b","=","(","boolean",")","cmp",".","get","client","property","(","valid","marker",")",";","if","(","b","!","=","null",")","{","return","b",".","boolean","value","(",")",";","}","object","val","=","get","component","value","(","cmp",")",";","constraint","c","=","constraint","list",".","get","(","cmp",")",";","if","(","c","!","=","null",")","{","return","c",".","is","valid","(","val",")",";","}","return","true",";","}","public","string","get","error","message","(","component","cmp",")","{","return","constraint","list",".","get","(","cmp",")",".","get","default","fail","message","(",")",";","}","void","set","valid","(","component","cmp",",","boolean","v",")","{","boolean","b","=","(","boolean",")","cmp",".","get","client","property","(","valid","marker",")",";","if","(","b","!","=","null","&","&","b",".","boolean","value","(",")","=","=","v",")","{","return",";","}","cmp",".","put","client","property","(","valid","marker",",","v",")",";","if","(","!","v",")","{","/","/","if","one","component","is","invalid",".",".",".","just","disable","the","submit","buttons","for","(","component","c",":","submit","buttons",")","{","c",".","set","enabled","(","false",")",";","}","}","else","{","boolean","is","v","=","is","valid","(",")",";","for","(","component","c",":","submit","buttons",")","{","c",".","set","enabled","(","is","v",")",";","}","if","(","message","!","=","null","&","&","cmp",".","has","focus","(",")",")","{","message",".","dispose","(",")",";","}","}","if","(","cmp","instanceof","input","component","&","&","(","(","input","component",")","cmp",")",".","is","on","top","mode","(",")",")","{","input","component","tc","=","(","input","component",")","cmp",";","if","(","v",")","{","tc",".","error","message","(","null",")",";","}","else","{","tc",".","error","message","(","get","error","message","(","cmp",")",")",";","}","}","if","(","validation","failure","highlight","mode","=","=","highlight","mode",".","emblem","|","|","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","and","emblem",")","{","if","(","!","(","cmp",".","get","component","form","(",")",".","get","glass","pane","(",")","instanceof","component","listener",")",")","{","cmp",".","get","component","form","(",")",".","set","glass","pane","(","new","component","listener","(","null",")",")",";","}","}","if","(","v",")","{","if","(","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","|","|","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","and","emblem",")","{","string","uiid","=","cmp",".","get","uiid","(",")",";","if","(","uiid",".","ends","with","(","\"","invalid","\"",")",")","{","uiid","=","uiid",".","substring","(","0",",","uiid",".","length","(",")","-","7",")",";","cmp",".","set","uiid","(","uiid",")",";","}","return",";","}","if","(","validation","failure","highlight","mode","=","=","highlight","mode",".","emblem","&","&","validation","failed","emblem","!","=","null",")","{","}","}","else","{","if","(","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","|","|","validation","failure","highlight","mode","=","=","highlight","mode",".","uiid","and","emblem",")","{","string","uiid","=","cmp",".","get","uiid","(",")",";","if","(","!","uiid",".","ends","with","(","\"","invalid","\"",")",")","{","cmp",".","set","uiid","(","uiid","+","\"","invalid","\"",")",";","}","return",";","}","}","}","class","component","listener","implements","action","listener",",","data","changed","listener",",","painter","{","private","component","cmp",";","public","component","listener","(","component","cmp",")","{","this",".","cmp","=","cmp",";","}","public","void","action","performed","(","action","event","evt",")","{","validate","(","cmp",")",";","}","public","void","data","changed","(","int","type",",","int","index",")","{","validate","(","cmp",")",";","}","@","override","public","void","paint","(","graphics","g",",","rectangle","rect",")","{","for","(","component","c",":","constraint","list",".","key","set","(",")",")","{","if","(","!","is","valid","(","c",")",")","{","if","(","c","instanceof","input","component","&","&","(","(","input","component",")","c",")",".","is","on","top","mode","(",")",")","{","continue",";","}","int","xpos","=","c",".","get","absolute","x","(",")",";","int","ypos","=","c",".","get","absolute","y","(",")",";","float","width","=","c",".","get","width","(",")",";","float","height","=","c",".","get","height","(",")",";","xpos","+","=","math",".","round","(","width","*","validation","emblem","position","x",")",";","ypos","+","=","math",".","round","(","height","*","validation","emblem","position","y",")",";","if","(","xpos","+","validation","failed","emblem",".","get","width","(",")",">","display",".","get","instance","(",")",".","get","display","width","(",")",")","{","g",".","draw","image","(","validation","failed","emblem",",","xpos","-","validation","failed","emblem",".","get","width","(",")",",","ypos","-","validation","failed","emblem",".","get","height","(",")","/","2",")",";","}","else","{","g",".","draw","image","(","validation","failed","emblem",",","xpos","-","validation","failed","emblem",".","get","width","(",")","/","2",",","ypos","-","validation","failed","emblem",".","get","height","(",")","/","2",")",";","}","}","}","}","}","}"],"func_name":"Validator","func_name_tokens":["validator"],"docstring":"  <p>Binds validation constraints to form elements, when validation fails it can be highlighted directly on  the component via an emblem or change of the UIID (to original UIID name + \"Invalid\" e.g. \"TextFieldInvalid\").  Validators just run thru a set of Constraint objects to decide if validation succeeded or failed.</p>   <p>It's possible to create any custom logic of validation. Example (see  discussion</a> on StackOverflow): </p>    <script src=\"https://gist.github.com/codenameone/6a67dd4d151bedf1bc3db6abb7b945ee.js\"></script>    @author Shai Almog","docstring_tokens":["<","p",">","binds","validation","constraints","to","form","elements",",","when","validation","fails","it","can","be","highlighted","directly","on","the","component","via","an","emblem","or","change","of","the","uiid","(","to","original","uiid","name","+","\"","invalid","\"","e",".","g",".","\"","text","field","invalid","\"",")",".","validators","just","run","thru","a","set","of","constraint","objects","to","decide","if","validation","succeeded","or","failed",".","<","/","p",">","<","p",">","it","'","s","possible","to","create","any","custom","logic","of","validation",".","example","(","see","discussion","<","/","a",">","on","stack","overflow",")",":","<","/","p",">","<","script","src","=","\"","\"",">","<","/","script",">"],"query":"Codename One - RegexConstraint to check a valid phone number","query_tokens":["codename","one","-","regex","constraint","to","check","a","valid","phone","number"]}
{"query_id":"33445383","repo_name":"tobiasdiez/jabref","zip_link":"/tobiasdiez/jabref/archive/master.zip","code":"public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {    private static final Logger LOGGER = LoggerFactory.getLogger(OpenHyperlinksInExternalBrowser.class);    private static final String CLICK_EVENT = \"click\";    private static final String ANCHOR_TAG = \"a\";    private final WebView webView;    public OpenHyperlinksInExternalBrowser(WebView webView) {        this.webView = webView;    }    @Override    public void changed(ObservableValue<? extends State> observable, State oldValue, State newValue) {        if (State.SUCCEEDED.equals(newValue)) {            Document document = webView.getEngine().getDocument();            NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);            for (int i = 0; i < anchors.getLength(); i++) {                Node node = anchors.item(i);                EventTarget eventTarget = (EventTarget) node;                eventTarget.addEventListener(CLICK_EVENT, this, false);            }        }    }    @Override    public void handleEvent(Event event) {        HTMLAnchorElement anchorElement = (HTMLAnchorElement) event.getCurrentTarget();        String href = anchorElement.getHref();        try {            JabRefDesktop.openBrowser(href);        } catch (IOException e) {            LOGGER.error(\"Problem opening browser\", e);        }        event.preventDefault();    }}","code_tokens":["public","class","open","hyperlinks","in","external","browser","implements","change","listener","<","worker",".","state",">",",","event","listener","{","private","static","final","logger","logger","=","logger","factory",".","get","logger","(","open","hyperlinks","in","external","browser",".","class",")",";","private","static","final","string","click","event","=","\"","click","\"",";","private","static","final","string","anchor","tag","=","\"","a","\"",";","private","final","web","view","web","view",";","public","open","hyperlinks","in","external","browser","(","web","view","web","view",")","{","this",".","web","view","=","web","view",";","}","@","override","public","void","changed","(","observable","value","<","?","extends","state",">","observable",",","state","old","value",",","state","new","value",")","{","if","(","state",".","succeeded",".","equals","(","new","value",")",")","{","document","document","=","web","view",".","get","engine","(",")",".","get","document","(",")",";","node","list","anchors","=","document",".","get","elements","by","tag","name","(","anchor","tag",")",";","for","(","int","i","=","0",";","i","<","anchors",".","get","length","(",")",";","i","+","+",")","{","node","node","=","anchors",".","item","(","i",")",";","event","target","event","target","=","(","event","target",")","node",";","event","target",".","add","event","listener","(","click","event",",","this",",","false",")",";","}","}","}","@","override","public","void","handle","event","(","event","event",")","{","html","anchor","element","anchor","element","=","(","html","anchor","element",")","event",".","get","current","target","(",")",";","string","href","=","anchor","element",".","get","href","(",")",";","try","{","jab","ref","desktop",".","open","browser","(","href",")",";","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","problem","opening","browser","\"",",","e",")",";","}","event",".","prevent","default","(",")",";","}","}"],"func_name":"OpenHyperlinksInExternalBrowser","func_name_tokens":["open","hyperlinks","in","external","browser"],"docstring":"  A Hyperlink Click Listener for javafx.WebView to open links on click in the browser","docstring_tokens":["a","hyperlink","click","listener","for","javafx",".","web","view","to","open","links","on","click","in","the","browser"],"query":"JavaFX stop opening URL in WebView - open in browser instead","query_tokens":["java","fx","stop","opening","url","in","web","view","-","open","in","browser","instead"]}
{"query_id":"1537207","repo_name":"billchen198318/bamboobsc","zip_link":"/billchen198318/bamboobsc/archive/master.zip","code":"    public static class MapEntryConverter implements Converter {    \t        @SuppressWarnings(\"rawtypes\")\t\tpublic boolean canConvert(Class clazz) {            return AbstractMap.class.isAssignableFrom(clazz);        }                @SuppressWarnings(\"rawtypes\")\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {        \t            AbstractMap map = (AbstractMap) value;            for (Object obj : map.entrySet()) {                Map.Entry entry = (Map.Entry) obj;                writer.startNode(entry.getKey().toString());                Object val = entry.getValue();                if ( null != val ) {                    writer.setValue(val.toString());                }                writer.endNode();            }        }                public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {        \t            Map<String, String> map = new HashMap<String, String>();                        while(reader.hasMoreChildren()) {                reader.moveDown();                String key = reader.getNodeName(); // nodeName aka element's name                String value = reader.getValue();                map.put(key, value);                reader.moveUp();            }            return map;        }    }\t","code_tokens":["public","static","class","map","entry","converter","implements","converter","{","@","suppress","warnings","(","\"","rawtypes","\"",")","public","boolean","can","convert","(","class","clazz",")","{","return","abstract","map",".","class",".","is","assignable","from","(","clazz",")",";","}","@","suppress","warnings","(","\"","rawtypes","\"",")","public","void","marshal","(","object","value",",","hierarchical","stream","writer","writer",",","marshalling","context","context",")","{","abstract","map","map","=","(","abstract","map",")","value",";","for","(","object","obj",":","map",".","entry","set","(",")",")","{","map",".","entry","entry","=","(","map",".","entry",")","obj",";","writer",".","start","node","(","entry",".","get","key","(",")",".","to","string","(",")",")",";","object","val","=","entry",".","get","value","(",")",";","if","(","null","!","=","val",")","{","writer",".","set","value","(","val",".","to","string","(",")",")",";","}","writer",".","end","node","(",")",";","}","}","public","object","unmarshal","(","hierarchical","stream","reader","reader",",","unmarshalling","context","context",")","{","map","<","string",",","string",">","map","=","new","hash","map","<","string",",","string",">","(",")",";","while","(","reader",".","has","more","children","(",")",")","{","reader",".","move","down","(",")",";","string","key","=","reader",".","get","node","name","(",")",";","/","/","node","name","aka","element","'","s","name","string","value","=","reader",".","get","value","(",")",";","map",".","put","(","key",",","value",")",";","reader",".","move","up","(",")",";","}","return","map",";","}","}"],"func_name":"MapEntryConverter","func_name_tokens":["map","entry","converter"],"docstring":"\t\t  copy from :\t  \t ","docstring_tokens":["copy","from",":"],"query":"How to convert XML to java.util.Map and vice versa","query_tokens":["how","to","convert","xml","to","java",".","util",".","map","and","vice","versa"]}
{"query_id":"697436","repo_name":"jifalops/wsnlocalize","zip_link":"/jifalops/wsnlocalize/archive/master.zip","code":"public abstract class AbsTextReaderWriter {    public interface ReadListener {        void onReadSucceeded(List<String> lines);        void onReadFailed(IOException e);    }    public interface TypedReadListener<T> {        void onReadSucceeded(List<T> list, int typingExceptions);        void onReadFailed(IOException e);    }    public interface WriteListener {        void onWriteSucceed(int linesWritten);        void onWriteFailed(IOException e);    }    public interface CopyListener {        void onCopySucceeded(File from, File to);        void onCopyFailed(IOException e);    }    protected final File file;    public AbsTextReaderWriter(@NonNull File file) {        this.file = file;    }    /**     * Read all lines from the file in a temporary thread.     * @return true if a read is attempted (file exists).     */    protected boolean readLines(@Nullable final ReadListener callback) {        if (file.exists()) {            new AsyncTask<Void, Void, List<String>>() {                IOException ioe = null;                @Override                protected List<String> doInBackground(Void... params) {                    List<String> lines = new ArrayList<>();                    BufferedReader r = null;                    synchronized (file) {                        try {                            r = new BufferedReader(new FileReader(file));                            String line;                            while ((line = r.readLine()) != null && line.length() > 0) {                                lines.add(line);                            }                        } catch (FileNotFoundException e) {                            // ignored                        } catch (IOException e) {                            ioe = e;                            App.log().e(\"readLines error: \" + e.getMessage());                        } finally {                            try {                                if (r != null) r.close();                            } catch (IOException e) {                                ioe = e;                            }                        }                    }                    return lines;                }                @Override                protected void onPostExecute(List<String> lines) {                    if (callback != null) {                        if (ioe != null) {                            callback.onReadFailed(ioe);                        } else {                            callback.onReadSucceeded(lines);                        }                    }                }            }.execute();            return true;        }        return false;    }    /**     * Write several lines to the file in a temporary thread.     */    protected void writeLines(final List<String> lines, final boolean append,                           @Nullable final WriteListener callback) {        new AsyncTask<Void, Void, Integer>() {            IOException ioe = null;            @Override            protected Integer doInBackground(Void... params) {                int count = 0;                BufferedWriter w = null;                synchronized (file) {                    try {                        w = new BufferedWriter(new FileWriter(file, append));                        for (String line : lines) {                            w.write(line);                            w.newLine();                            ++count;                        }                        w.flush();                    } catch (FileNotFoundException e) {                        // ignored                    } catch (IOException e) {                        ioe = e;                        App.log().e(\"writeLines error: \" + e.getMessage());                    } finally {                        try {                            if (w != null) w.close();                        } catch (IOException e) {                            ioe = e;                        }                    }                }                return count;            }            @Override            protected void onPostExecute(Integer count) {                if (callback != null) {                    if (ioe == null) {                        callback.onWriteSucceed(count);                    } else {                        callback.onWriteFailed(ioe);                    }                }            }        }.execute();    }    public void backup(@Nullable final CopyListener callback) {        final File f = new File(file.getParentFile(), file.getName() + \".bak\");        new AsyncTask<Void, Void, Void>() {            IOException ioe;            @Override            protected Void doInBackground(Void... params) {                synchronized (file) {                    try {                        Files.copy(file, f);                    } catch (IOException e) {                        ioe = e;                    }                }                return null;            }            @Override            protected void onPostExecute(Void aVoid) {                if (callback != null) {                    if (ioe == null) {                        callback.onCopySucceeded(file, f);                    } else {                        callback.onCopyFailed(ioe);                    }                }            }        }.execute();    }    /** Note: {@link IOException}s are not propagated. */    public void truncate(@Nullable final WriteListener callback) {        new AsyncTask<Void, Void, Void>() {            IOException ioe;            @Override            protected Void doInBackground(Void... params) {                BufferedWriter w = null;                try {                    w = new BufferedWriter(new FileWriter(file, false));                } catch (FileNotFoundException e) {                    // ignored                } catch (IOException e) {                    ioe = e;                    App.log().e(\"truncate error: \" + e.getMessage());                } finally {                    try {                        if (w != null) w.close();                    } catch (IOException e) {                        ioe = e;                    }                }                return null;            }            @Override            protected void onPostExecute(Void aVoid) {                if (callback != null) {                    if (ioe == null) {                        callback.onWriteSucceed(0);                    } else {                        callback.onWriteFailed(ioe);                    }                }            }        }.execute();    }}","code_tokens":["public","abstract","class","abs","text","reader","writer","{","public","interface","read","listener","{","void","on","read","succeeded","(","list","<","string",">","lines",")",";","void","on","read","failed","(","io","exception","e",")",";","}","public","interface","typed","read","listener","<","t",">","{","void","on","read","succeeded","(","list","<","t",">","list",",","int","typing","exceptions",")",";","void","on","read","failed","(","io","exception","e",")",";","}","public","interface","write","listener","{","void","on","write","succeed","(","int","lines","written",")",";","void","on","write","failed","(","io","exception","e",")",";","}","public","interface","copy","listener","{","void","on","copy","succeeded","(","file","from",",","file","to",")",";","void","on","copy","failed","(","io","exception","e",")",";","}","protected","final","file","file",";","public","abs","text","reader","writer","(","@","non","null","file","file",")","{","this",".","file","=","file",";","}","protected","boolean","read","lines","(","@","nullable","final","read","listener","callback",")","{","if","(","file",".","exists","(",")",")","{","new","async","task","<","void",",","void",",","list","<","string",">",">","(",")","{","io","exception","ioe","=","null",";","@","override","protected","list","<","string",">","do","in","background","(","void",".",".",".","params",")","{","list","<","string",">","lines","=","new","array","list","<",">","(",")",";","buffered","reader","r","=","null",";","synchronized","(","file",")","{","try","{","r","=","new","buffered","reader","(","new","file","reader","(","file",")",")",";","string","line",";","while","(","(","line","=","r",".","read","line","(",")",")","!","=","null","&","&","line",".","length","(",")",">","0",")","{","lines",".","add","(","line",")",";","}","}","catch","(","file","not","found","exception","e",")","{","/","/","ignored","}","catch","(","io","exception","e",")","{","ioe","=","e",";","app",".","log","(",")",".","e","(","\"","read","lines","error",":","\"","+","e",".","get","message","(",")",")",";","}","finally","{","try","{","if","(","r","!","=","null",")","r",".","close","(",")",";","}","catch","(","io","exception","e",")","{","ioe","=","e",";","}","}","}","return","lines",";","}","@","override","protected","void","on","post","execute","(","list","<","string",">","lines",")","{","if","(","callback","!","=","null",")","{","if","(","ioe","!","=","null",")","{","callback",".","on","read","failed","(","ioe",")",";","}","else","{","callback",".","on","read","succeeded","(","lines",")",";","}","}","}","}",".","execute","(",")",";","return","true",";","}","return","false",";","}","protected","void","write","lines","(","final","list","<","string",">","lines",",","final","boolean","append",",","@","nullable","final","write","listener","callback",")","{","new","async","task","<","void",",","void",",","integer",">","(",")","{","io","exception","ioe","=","null",";","@","override","protected","integer","do","in","background","(","void",".",".",".","params",")","{","int","count","=","0",";","buffered","writer","w","=","null",";","synchronized","(","file",")","{","try","{","w","=","new","buffered","writer","(","new","file","writer","(","file",",","append",")",")",";","for","(","string","line",":","lines",")","{","w",".","write","(","line",")",";","w",".","new","line","(",")",";","+","+","count",";","}","w",".","flush","(",")",";","}","catch","(","file","not","found","exception","e",")","{","/","/","ignored","}","catch","(","io","exception","e",")","{","ioe","=","e",";","app",".","log","(",")",".","e","(","\"","write","lines","error",":","\"","+","e",".","get","message","(",")",")",";","}","finally","{","try","{","if","(","w","!","=","null",")","w",".","close","(",")",";","}","catch","(","io","exception","e",")","{","ioe","=","e",";","}","}","}","return","count",";","}","@","override","protected","void","on","post","execute","(","integer","count",")","{","if","(","callback","!","=","null",")","{","if","(","ioe","=","=","null",")","{","callback",".","on","write","succeed","(","count",")",";","}","else","{","callback",".","on","write","failed","(","ioe",")",";","}","}","}","}",".","execute","(",")",";","}","public","void","backup","(","@","nullable","final","copy","listener","callback",")","{","final","file","f","=","new","file","(","file",".","get","parent","file","(",")",",","file",".","get","name","(",")","+","\"",".","bak","\"",")",";","new","async","task","<","void",",","void",",","void",">","(",")","{","io","exception","ioe",";","@","override","protected","void","do","in","background","(","void",".",".",".","params",")","{","synchronized","(","file",")","{","try","{","files",".","copy","(","file",",","f",")",";","}","catch","(","io","exception","e",")","{","ioe","=","e",";","}","}","return","null",";","}","@","override","protected","void","on","post","execute","(","void","a","void",")","{","if","(","callback","!","=","null",")","{","if","(","ioe","=","=","null",")","{","callback",".","on","copy","succeeded","(","file",",","f",")",";","}","else","{","callback",".","on","copy","failed","(","ioe",")",";","}","}","}","}",".","execute","(",")",";","}","public","void","truncate","(","@","nullable","final","write","listener","callback",")","{","new","async","task","<","void",",","void",",","void",">","(",")","{","io","exception","ioe",";","@","override","protected","void","do","in","background","(","void",".",".",".","params",")","{","buffered","writer","w","=","null",";","try","{","w","=","new","buffered","writer","(","new","file","writer","(","file",",","false",")",")",";","}","catch","(","file","not","found","exception","e",")","{","/","/","ignored","}","catch","(","io","exception","e",")","{","ioe","=","e",";","app",".","log","(",")",".","e","(","\"","truncate","error",":","\"","+","e",".","get","message","(",")",")",";","}","finally","{","try","{","if","(","w","!","=","null",")","w",".","close","(",")",";","}","catch","(","io","exception","e",")","{","ioe","=","e",";","}","}","return","null",";","}","@","override","protected","void","on","post","execute","(","void","a","void",")","{","if","(","callback","!","=","null",")","{","if","(","ioe","=","=","null",")","{","callback",".","on","write","succeed","(","0",")",";","}","else","{","callback",".","on","write","failed","(","ioe",")",";","}","}","}","}",".","execute","(",")",";","}","}"],"func_name":"AbsTextReaderWriter","func_name_tokens":["abs","text","reader","writer"],"docstring":"  Class for typical read-write operations on a plain text file.  Internally uses a {@link BufferedReader}, {@link BufferedWriter}, and {@link AsyncTask}s  along with synchronization on {@link #file}. This means you can read and write from the same  instance of {@link #file} without worry. However, it does not use java  {@link java.nio.channels.FileLock}s.   Tip: you can write to a temp file and then rename for general async reads and writes on the same","docstring_tokens":["class","for","typical","read","-","write","operations","on","a","plain","text","file",".","internally","uses","a","{","buffered","reader","}",",","{","buffered","writer","}",",","and","{","async","task","}","s","along","with","synchronization","on","{","#","file","}",".","this","means","you","can","read","and","write","from","the","same","instance","of","{","#","file","}","without","worry",".","however",",","it","does","not","use","java","{","java",".","nio",".","channels",".","file","lock","}","s",".","tip",":","you","can","write","to","a","temp","file","and","then","rename","for","general","async","reads","and","writes","on","the","same"],"query":"Lock a file while writing it on the disk","query_tokens":["lock","a","file","while","writing","it","on","the","disk"]}
{"query_id":"1343796","repo_name":"hackugyo/wishlist_hackugyo","zip_link":"/hackugyo/wishlist_hackugyo/archive/master.zip","code":"    public static void increaseHitRectBy(final int amount, final View delegate) {        increaseHitRectBy(amount, amount, amount, amount, delegate);    }","code_tokens":["public","static","void","increase","hit","rect","by","(","final","int","amount",",","final","view","delegate",")","{","increase","hit","rect","by","(","amount",",","amount",",","amount",",","amount",",","delegate",")",";","}"],"func_name":"increaseHitRectBy","func_name_tokens":["increase","hit","rect","by"],"docstring":"          Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.      @param amount The amount of dp's to be added to all four sides of the view hit purposes.      @param delegate The view that needs to have its hit rect increased.","docstring_tokens":["increases","the","hit","rect","of","a","view",".","this","should","be","used","when","an","icon","is","small","and","cannot","be","easily","tapped","on","."],"query":"Is there an example of how to use a TouchDelegate in Android to increase the size of a view's click target?","query_tokens":["is","there","an","example","of","how","to","use","a","touch","delegate","in","android","to","increase","the","size","of","a","view","'","s","click","target","?"]}
{"query_id":"893977","repo_name":"paran0ids0ul/binnavi","zip_link":"/paran0ids0ul/binnavi/archive/master.zip","code":"  public CFilenameFormatter(final File directory) {    Preconditions.checkArgument(directory.exists(), \"Error: Direcctory must exist.\");    m_directory = directory;  }","code_tokens":["public","c","filename","formatter","(","final","file","directory",")","{","preconditions",".","check","argument","(","directory",".","exists","(",")",",","\"","error",":","direcctory","must","exist",".","\"",")",";","m","directory","=","directory",";","}"],"func_name":"CFilenameFormatter","func_name_tokens":["c","filename","formatter"],"docstring":"      Filter for JFormattedTextField. Ensures valid filenames. Does not work for directories.        @param directory Directory where a file with the specified filename is temporarily created for           validation purpose.           -a-file-name-is-valid","docstring_tokens":["filter","for","j","formatted","text","field",".","ensures","valid","filenames",".","does","not","work","for","directories","."],"query":"Java - How to find out whether a File name is valid? [duplicate]","query_tokens":["java","-","how","to","find","out","whether","a","file","name","is","valid","?","[","duplicate","]"]}
{"query_id":"2507898","repo_name":"johnkil/Steganography","zip_link":"/johnkil/Steganography/archive/master.zip","code":"\tprivate void selectImage() {\t\tLog.v(LOG_TAG, \"selectImage() called\");\t\tIntent intent = new Intent(Intent.ACTION_GET_CONTENT);\t\tintent.setType(\"image/*\");\t\tstartActivityForResult(intent, SELECT_IMAGE);\t}","code_tokens":["private","void","select","image","(",")","{","log",".","v","(","log","tag",",","\"","select","image","(",")","called","\"",")",";","intent","intent","=","new","intent","(","intent",".","action","get","content",")",";","intent",".","set","type","(","\"","image","/","*","\"",")",";","start","activity","for","result","(","intent",",","select","image",")",";","}"],"func_name":"selectImage","func_name_tokens":["select","image"],"docstring":"\t\t  Select Image from SD card","docstring_tokens":["select","image","from","sd","card"],"query":"How to pick an image from gallery (SD Card) for my app?","query_tokens":["how","to","pick","an","image","from","gallery","(","sd","card",")","for","my","app","?"]}
{"query_id":"14619218","repo_name":"ukwa/interject","zip_link":"/ukwa/interject/archive/master.zip","code":"public class CommonsImagingConversionServlet extends HttpServlet {       \tprivate static final long serialVersionUID = -8969018766035165227L;\t\tprotected static Logger logger = LogManager.getLogger(CommonsImagingConversionServlet.class);\t    /**     * @see HttpServlet#HttpServlet()     */    public CommonsImagingConversionServlet() {        super();    }\t/**\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\t */\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\t\tString url = request.getParameter(\"url\");\t\tString sourceContentType = request.getParameter(\"sourceContentType\");\t    logger.info(\"Attempting to convert: \"+url+\" from \"+sourceContentType);\t    \t\tif (url != null) {\t\t\ttry {\t\t\t    ImageConverter imageConverter = new ImageConverter(CommonsImageStrategy.INSTANCE);\t\t\t    byte[] imageBytes;\t\t\t\t\timageBytes = imageConverter.convertFromUrlToPng(url, sourceContentType);\t\t\t\tresponse.setContentType(\"image/png\");\t\t\t\tServletOutputStream out = response.getOutputStream();\t\t\t\tout.write(imageBytes, 0, imageBytes.length);\t\t\t\tout.flush();\t\t\t} catch (ConverterException e) {\t\t\t\tthrow new ServletException(e);\t\t\t}\t\t}\t}\t/**\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\t */\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\t\tthis.doGet(request, response);\t}}","code_tokens":["public","class","commons","imaging","conversion","servlet","extends","http","servlet","{","private","static","final","long","serial","version","uid","=","-","8969018766035165227l",";","protected","static","logger","logger","=","log","manager",".","get","logger","(","commons","imaging","conversion","servlet",".","class",")",";","public","commons","imaging","conversion","servlet","(",")","{","super","(",")",";","}","protected","void","do","get","(","http","servlet","request","request",",","http","servlet","response","response",")","throws","servlet","exception",",","io","exception","{","string","url","=","request",".","get","parameter","(","\"","url","\"",")",";","string","source","content","type","=","request",".","get","parameter","(","\"","source","content","type","\"",")",";","logger",".","info","(","\"","attempting","to","convert",":","\"","+","url","+","\"","from","\"","+","source","content","type",")",";","if","(","url","!","=","null",")","{","try","{","image","converter","image","converter","=","new","image","converter","(","commons","image","strategy",".","instance",")",";","byte","[","]","image","bytes",";","image","bytes","=","image","converter",".","convert","from","url","to","png","(","url",",","source","content","type",")",";","response",".","set","content","type","(","\"","image","/","png","\"",")",";","servlet","output","stream","out","=","response",".","get","output","stream","(",")",";","out",".","write","(","image","bytes",",","0",",","image","bytes",".","length",")",";","out",".","flush","(",")",";","}","catch","(","converter","exception","e",")","{","throw","new","servlet","exception","(","e",")",";","}","}","}","protected","void","do","post","(","http","servlet","request","request",",","http","servlet","response","response",")","throws","servlet","exception",",","io","exception","{","this",".","do","get","(","request",",","response",")",";","}","}"],"func_name":"CommonsImagingConversionServlet","func_name_tokens":["commons","imaging","conversion","servlet"],"docstring":"  Servlet implementation class ImageIOConversionServlet    An example image conversion service:    ...reading and writing JPEG, PNG, BMP, WBMP and GIF.  ","docstring_tokens":["servlet","implementation","class","image","io","conversion","servlet","an","example","image","conversion","service",":",".",".",".","reading","and","writing","jpeg",",","png",",","bmp",",","wbmp","and","gif","."],"query":"Image Conversion In Java [closed]","query_tokens":["image","conversion","in","java","[","closed","]"]}
{"query_id":"8235080","repo_name":"taoliuh/iosched-framework-demo","zip_link":"/taoliuh/iosched-framework-demo/archive/demo.zip","code":"public class SignInDialogFragment extends DialogFragment implements TextView.OnEditorActionListener {    private AlertDialog dialog;    EditText accountNameEditText;    EditText passwordEditText;    private String mAccountName = \"\";    private String mPassword = \"\";    /* The activity that creates an instance of this dialog fragment must     * implement this interface in order to receive event callbacks.     * Each method passes the DialogFragment in case the host needs to query it. */    public interface SignInDialogListener {        public void onDialogPositiveClick(String accountName, String password);        public void onDialogNegativeClick();    }    // Use this instance of the interface to deliver action events    SignInDialogListener mListener;    // Override the Fragment.onAttach() method to instantiate the NoticeDialogListener    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        // Verify that the host activity implements the callback interface        try {            // Instantiate the NoticeDialogListener so we can send events to the host            mListener = (SignInDialogListener) activity;        } catch (ClassCastException e) {            // The activity doesn't implement the interface, throw exception            throw new ClassCastException(activity.toString()                    + \" must implement NoticeDialogListener\");        }    }    @Override    public void onDetach() {        super.onDetach();        mListener = null;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (savedInstanceState != null) {            mAccountName = savedInstanceState.getString(\"account_name\");            mPassword = savedInstanceState.getString(\"password\");        }    }    @Override    public Dialog onCreateDialog(Bundle savedInstanceState) {        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        // Get the layout inflater        LayoutInflater inflater = getActivity().getLayoutInflater();        // Inflate and set the layout for the dialog        // Pass null as the parent view because its going in the dialog layout        View view = inflater.inflate(R.layout.dialog_signin, null);        accountNameEditText = (EditText) view.findViewById(R.id.account_name);        passwordEditText = (EditText) view.findViewById(R.id.password);        passwordEditText.setOnEditorActionListener(this);        builder.setView(view)                // Add action buttons                .setPositiveButton(R.string.signin, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        // sign in the user ...                        if (mListener != null) {                            mListener.onDialogPositiveClick(mAccountName, mPassword);                        }                        dismiss();                    }                })                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        dismiss();                    }                });        dialog = builder.create();        return dialog;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);    }    @Override    public void onResume() {        super.onResume();        validateSignInButton();    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putString(\"account_name\", mAccountName);        outState.putString(\"password\", mPassword);    }    @Override    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {        if (EditorInfo.IME_ACTION_DONE == actionId) {            if (validateSignInButton()) {                if (mListener != null) {                    mListener.onDialogPositiveClick(mAccountName, mPassword);                }                this.dismiss();            }            return true;        }        return false;    }    private boolean validateSignInButton() {        accountNameEditText.setText(mAccountName);        passwordEditText.setText(mPassword);        accountNameEditText.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                mAccountName = s.toString();                if (TextUtils.isEmpty(mAccountName)) {                    dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(false);                } else {                    if (TextUtils.isEmpty(mPassword)) {                        dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(false);                    } else {                        dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(true);                    }                }            }        });        passwordEditText.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                mPassword = s.toString();                if (TextUtils.isEmpty(mPassword)) {                    dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(false);                } else {                    if (TextUtils.isEmpty(mAccountName)) {                        dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(false);                    } else {                        dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(true);                    }                }            }        });        if (!TextUtils.isEmpty(accountNameEditText.getText().toString()) && !TextUtils.isEmpty(passwordEditText.getText().toString())) {            dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(true);        } else {            dialog.getButton(Dialog.BUTTON_POSITIVE).setEnabled(false);        }        return dialog.getButton(Dialog.BUTTON_POSITIVE).isEnabled();    }}","code_tokens":["public","class","sign","in","dialog","fragment","extends","dialog","fragment","implements","text","view",".","on","editor","action","listener","{","private","alert","dialog","dialog",";","edit","text","account","name","edit","text",";","edit","text","password","edit","text",";","private","string","m","account","name","=","\"","\"",";","private","string","m","password","=","\"","\"",";","public","interface","sign","in","dialog","listener","{","public","void","on","dialog","positive","click","(","string","account","name",",","string","password",")",";","public","void","on","dialog","negative","click","(",")",";","}","/","/","use","this","instance","of","the","interface","to","deliver","action","events","sign","in","dialog","listener","m","listener",";","/","/","override","the","fragment",".","on","attach","(",")","method","to","instantiate","the","notice","dialog","listener","@","override","public","void","on","attach","(","activity","activity",")","{","super",".","on","attach","(","activity",")",";","/","/","verify","that","the","host","activity","implements","the","callback","interface","try","{","/","/","instantiate","the","notice","dialog","listener","so","we","can","send","events","to","the","host","m","listener","=","(","sign","in","dialog","listener",")","activity",";","}","catch","(","class","cast","exception","e",")","{","/","/","the","activity","doesn","'","t","implement","the","interface",",","throw","exception","throw","new","class","cast","exception","(","activity",".","to","string","(",")","+","\"","must","implement","notice","dialog","listener","\"",")",";","}","}","@","override","public","void","on","detach","(",")","{","super",".","on","detach","(",")",";","m","listener","=","null",";","}","@","override","public","void","on","create","(","bundle","saved","instance","state",")","{","super",".","on","create","(","saved","instance","state",")",";","if","(","saved","instance","state","!","=","null",")","{","m","account","name","=","saved","instance","state",".","get","string","(","\"","account","name","\"",")",";","m","password","=","saved","instance","state",".","get","string","(","\"","password","\"",")",";","}","}","@","override","public","dialog","on","create","dialog","(","bundle","saved","instance","state",")","{","alert","dialog",".","builder","builder","=","new","alert","dialog",".","builder","(","get","activity","(",")",")",";","/","/","get","the","layout","inflater","layout","inflater","inflater","=","get","activity","(",")",".","get","layout","inflater","(",")",";","/","/","inflate","and","set","the","layout","for","the","dialog","/","/","pass","null","as","the","parent","view","because","its","going","in","the","dialog","layout","view","view","=","inflater",".","inflate","(","r",".","layout",".","dialog","signin",",","null",")",";","account","name","edit","text","=","(","edit","text",")","view",".","find","view","by","id","(","r",".","id",".","account","name",")",";","password","edit","text","=","(","edit","text",")","view",".","find","view","by","id","(","r",".","id",".","password",")",";","password","edit","text",".","set","on","editor","action","listener","(","this",")",";","builder",".","set","view","(","view",")","/","/","add","action","buttons",".","set","positive","button","(","r",".","string",".","signin",",","new","dialog","interface",".","on","click","listener","(",")","{","@","override","public","void","on","click","(","dialog","interface","dialog",",","int","id",")","{","/","/","sign","in","the","user",".",".",".","if","(","m","listener","!","=","null",")","{","m","listener",".","on","dialog","positive","click","(","m","account","name",",","m","password",")",";","}","dismiss","(",")",";","}","}",")",".","set","negative","button","(","r",".","string",".","cancel",",","new","dialog","interface",".","on","click","listener","(",")","{","public","void","on","click","(","dialog","interface","dialog",",","int","id",")","{","dismiss","(",")",";","}","}",")",";","dialog","=","builder",".","create","(",")",";","return","dialog",";","}","@","override","public","void","on","activity","created","(","bundle","saved","instance","state",")","{","super",".","on","activity","created","(","saved","instance","state",")",";","get","dialog","(",")",".","get","window","(",")",".","set","soft","input","mode","(","window","manager",".","layout","params",".","soft","input","state","visible",")",";","}","@","override","public","void","on","resume","(",")","{","super",".","on","resume","(",")",";","validate","sign","in","button","(",")",";","}","@","override","public","void","on","save","instance","state","(","bundle","out","state",")","{","super",".","on","save","instance","state","(","out","state",")",";","out","state",".","put","string","(","\"","account","name","\"",",","m","account","name",")",";","out","state",".","put","string","(","\"","password","\"",",","m","password",")",";","}","@","override","public","boolean","on","editor","action","(","text","view","v",",","int","action","id",",","key","event","event",")","{","if","(","editor","info",".","ime","action","done","=","=","action","id",")","{","if","(","validate","sign","in","button","(",")",")","{","if","(","m","listener","!","=","null",")","{","m","listener",".","on","dialog","positive","click","(","m","account","name",",","m","password",")",";","}","this",".","dismiss","(",")",";","}","return","true",";","}","return","false",";","}","private","boolean","validate","sign","in","button","(",")","{","account","name","edit","text",".","set","text","(","m","account","name",")",";","password","edit","text",".","set","text","(","m","password",")",";","account","name","edit","text",".","add","text","changed","listener","(","new","text","watcher","(",")","{","@","override","public","void","before","text","changed","(","char","sequence","s",",","int","start",",","int","count",",","int","after",")","{","}","@","override","public","void","on","text","changed","(","char","sequence","s",",","int","start",",","int","before",",","int","count",")","{","}","@","override","public","void","after","text","changed","(","editable","s",")","{","m","account","name","=","s",".","to","string","(",")",";","if","(","text","utils",".","is","empty","(","m","account","name",")",")","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","false",")",";","}","else","{","if","(","text","utils",".","is","empty","(","m","password",")",")","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","false",")",";","}","else","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","true",")",";","}","}","}","}",")",";","password","edit","text",".","add","text","changed","listener","(","new","text","watcher","(",")","{","@","override","public","void","before","text","changed","(","char","sequence","s",",","int","start",",","int","count",",","int","after",")","{","}","@","override","public","void","on","text","changed","(","char","sequence","s",",","int","start",",","int","before",",","int","count",")","{","}","@","override","public","void","after","text","changed","(","editable","s",")","{","m","password","=","s",".","to","string","(",")",";","if","(","text","utils",".","is","empty","(","m","password",")",")","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","false",")",";","}","else","{","if","(","text","utils",".","is","empty","(","m","account","name",")",")","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","false",")",";","}","else","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","true",")",";","}","}","}","}",")",";","if","(","!","text","utils",".","is","empty","(","account","name","edit","text",".","get","text","(",")",".","to","string","(",")",")","&","&","!","text","utils",".","is","empty","(","password","edit","text",".","get","text","(",")",".","to","string","(",")",")",")","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","true",")",";","}","else","{","dialog",".","get","button","(","dialog",".","button","positive",")",".","set","enabled","(","false",")",";","}","return","dialog",".","get","button","(","dialog",".","button","positive",")",".","is","enabled","(",")",";","}","}"],"func_name":"SignInDialogFragment","func_name_tokens":["sign","in","dialog","fragment"],"docstring":"  When screen orientation changes, and you call setRetainInstance(true) in function onCreate, the dialog will dismiss.   Created by liutao on 12/8/14.","docstring_tokens":["when","screen","orientation","changes",",","and","you","call","set","retain","instance","(","true",")","in","function","on","create",",","the","dialog","will","dismiss",".","created","by","liutao","on","12","/","8","/","14","."],"query":"Fragments, DialogFragment, and Screen Rotation","query_tokens":["fragments",",","dialog","fragment",",","and","screen","rotation"]}
{"query_id":"448981","repo_name":"ArneBab/fred-staging-1","zip_link":"/ArneBab/fred-staging-1/archive/master.zip","code":"\tpublic static String filterCSSIdentifier(String input) {\t\twhile (input.length() < 2) input = input.concat(\"_\");\t\treturn input.replaceFirst(\"^-[^_a-zA-Z]\", \"-_\").replaceAll(\"[^-_a-zA-Z0-9]\", \"_\");\t}","code_tokens":["public","static","string","filter","css","identifier","(","string","input",")","{","while","(","input",".","length","(",")","<","2",")","input","=","input",".","concat","(","\"","\"",")",";","return","input",".","replace","first","(","\"","^","-","[","^","a","-","z","a","-","z","]","\"",",","\"","-","\"",")",".","replace","all","(","\"","[","^","-","a","-","z","a","-","z0","-","9","]","\"",",","\"","\"",")",";","}"],"func_name":"filterCSSIdentifier","func_name_tokens":["filter","css","identifier"],"docstring":"\t\t  Filters a given string so that it will be a valid CSS identifier. It replaces all characters that are not\t  a dash, underscore, or alphanumeric with an underscore. If the first character is a dash and the second\t  character is not a letter or underscore, replaces the second character with an underscore. This filter is\t  overly strict as it does not allow non-ASCII characters or escapes. If the given string is below two\t  characters in length, it appends underscores until it is not.\t  @param input string to filter\t  @return a filtered string guaranteed to be a syntactically valid CSS identifier.\t  @link http://www.w3.org/TR/CSS21/syndata.html#tokenization\t  @link http://www.w3.org/TR/CSS21/grammar.html#scanner","docstring_tokens":["filters","a","given","string","so","that","it","will","be","a","valid","css","identifier",".","it","replaces","all","characters","that","are","not","a","dash",",","underscore",",","or","alphanumeric","with","an","underscore",".","if","the","first","character","is","a","dash","and","the","second","character","is","not","a","letter","or","underscore",",","replaces","the","second","character","with","an","underscore",".","this","filter","is","overly","strict","as","it","does","not","allow","non","-","ascii","characters","or","escapes",".","if","the","given","string","is","below","two","characters","in","length",",","it","appends","underscores","until","it","is","not","."],"query":"Which characters are valid in CSS class names/selectors?","query_tokens":["which","characters","are","valid","in","css","class","names","/","selectors","?"]}
{"query_id":"11395527","repo_name":"Igor-Petrov/rest-assured","zip_link":"/Igor-Petrov/rest-assured/archive/master.zip","code":"public class RestAssuredResponseOptionsImpl<R extends ResponseOptions<R>> implements ExtractableResponse<R> {    private LogRepository logRepository;    protected RestAssuredResponseOptionsGroovyImpl groovyResponse = new RestAssuredResponseOptionsGroovyImpl();    public void setResponseHeaders(Object responseHeaders) {        this.groovyResponse.setResponseHeaders(responseHeaders);    }    public void setCookies(Cookies cookies) {        this.groovyResponse.setCookies(cookies);    }    public void setContent(Object content) {        this.groovyResponse.setContent(content);    }    public void setContentType(Object contentType) {        this.groovyResponse.setContentType(contentType);    }    public void setStatusLine(Object statusLine) {        this.groovyResponse.setStatusLine(statusLine);    }    public void setStatusCode(Object statusCode) {        this.groovyResponse.setStatusCode(statusCode);    }    public void setSessionIdName(Object sessionIdName) {        this.groovyResponse.setSessionIdName(sessionIdName);    }    public void setConnectionManager(Object connectionManager) {        this.groovyResponse.setConnectionManager(connectionManager);    }    public void setDefaultContentType(String defaultContentType) {        this.groovyResponse.setDefaultContentType(defaultContentType);    }    public void setRpr(ResponseParserRegistrar rpr) {        this.groovyResponse.setRpr(rpr);    }    public void setDefaultCharset(String defaultCharset) {        this.groovyResponse.setDefaultCharset(defaultCharset);    }    public void setHasExpectations(boolean hasExpectations) {        this.groovyResponse.setHasExpectations(hasExpectations);    }    public void setConfig(RestAssuredConfig config) {        this.groovyResponse.setConfig(config);    }    public ResponseParserRegistrar getRpr() {        return groovyResponse.getRpr();    }    public RestAssuredConfig getConfig() {        return groovyResponse.getConfig();    }    //    End setters and getters    public ResponseBody body() {        return (ResponseBody) this;    }    public Headers headers() {        return groovyResponse.headers();    }    public String header(String name) {        return groovyResponse.header(name);    }    public Map<String, String> cookies() {        return groovyResponse.cookies();    }    public Cookies detailedCookies() {        return groovyResponse.detailedCookies();    }    public String cookie(String name) {        return groovyResponse.cookie(name);    }    public Cookie detailedCookie(String name) {        return groovyResponse.detailedCookie(name);    }    public String contentType() {        return groovyResponse.contentType();    }    public String statusLine() {        return groovyResponse.statusLine();    }    public String sessionId() {        return groovyResponse.sessionId();    }    public int statusCode() {        return groovyResponse.statusCode();    }    public R response() {        return (R) this;    }    public <T> T as(Class<T> cls) {        return groovyResponse.as(cls, this);    }    public <T> T as(Class<T> cls, ObjectMapperType mapperType) {        return groovyResponse.as(cls, mapperType, this);    }    public <T> T as(Class<T> cls, ObjectMapper mapper) {        return groovyResponse.as(cls, mapper);    }    public JsonPath jsonPath() {        return groovyResponse.jsonPath();    }    public JsonPath jsonPath(JsonPathConfig config) {        return groovyResponse.jsonPath(config);    }    public XmlPath xmlPath() {        return groovyResponse.xmlPath();    }    public XmlPath xmlPath(XmlPathConfig config) {        return groovyResponse.xmlPath(config);    }    public XmlPath xmlPath(XmlPath.CompatibilityMode compatibilityMode) {        return groovyResponse.xmlPath(compatibilityMode);    }    public XmlPath htmlPath() {        return groovyResponse.htmlPath();    }    public <T> T path(String path, String... arguments) {        return groovyResponse.path(path, arguments);    }    public String asString() {        return groovyResponse.asString();    }    public String asString(boolean forcePlatformDefaultCharsetIfNoCharsetIsSpecifiedInResponse) {        return groovyResponse.asString(forcePlatformDefaultCharsetIfNoCharsetIsSpecifiedInResponse);    }    public byte[] asByteArray() {        return groovyResponse.asByteArray();    }    public InputStream asInputStream() {        return groovyResponse.asInputStream();    }    public String print() {        return groovyResponse.print();    }    public String prettyPrint() {        return groovyResponse.prettyPrint((ResponseOptions) this, (ResponseBody) this);    }    public R peek() {        groovyResponse.peek((ResponseOptions) this, (ResponseBody) this);        return (R) this;    }    public R prettyPeek() {        groovyResponse.prettyPeek((ResponseOptions) this, (ResponseBody) this);        return (R) this;    }    public R andReturn() {        return (R) this;    }    public R thenReturn() {        return (R) this;    }    public ResponseBody getBody() {        return (ResponseBody) this;    }    public Headers getHeaders() {        return groovyResponse.getHeaders();    }    public String getHeader(String name) {        return groovyResponse.getHeader(name);    }    public Cookies getDetailedCookies() {        return groovyResponse.getDetailedCookies();    }    public String getCookie(String name) {        return groovyResponse.getCookie(name);    }    public Cookie getDetailedCookie(String name) {        return groovyResponse.getDetailedCookie(name);    }    public String getSessionId() {        return groovyResponse.getSessionId();    }    public Map<String, String> getCookies() {        return groovyResponse.getCookies();    }    public String getContentType() {        return groovyResponse.getContentType();    }    public String getStatusLine() {        return groovyResponse.getStatusLine();    }    public int getStatusCode() {        return groovyResponse.getStatusCode();    }    public Object getContent() {        return groovyResponse.getContent();    }    public boolean getHasExpectations() {        return groovyResponse.getHasExpectations();    }    public String getDefaultContentType() {        return groovyResponse.getDefaultContentType();    }    public String getDefaultCharset() {        return groovyResponse.getDefaultCharset();    }    public Object getSessionIdName() {        return groovyResponse.getSessionIdName();    }    public Object getConnectionManager() {        return groovyResponse.getConnectionManager();    }    public Object getResponseHeaders() {        return groovyResponse.getResponseHeaders();    }    public LogRepository getLogRepository() {        return logRepository;    }    public void setLogRepository(LogRepository logRepository) {        this.logRepository = logRepository;    }    public RestAssuredResponseOptionsGroovyImpl getGroovyResponse() {        return groovyResponse;    }    public void setGroovyResponse(RestAssuredResponseOptionsGroovyImpl groovyResponse) {        this.groovyResponse = groovyResponse;    }}","code_tokens":["public","class","rest","assured","response","options","impl","<","r","extends","response","options","<","r",">",">","implements","extractable","response","<","r",">","{","private","log","repository","log","repository",";","protected","rest","assured","response","options","groovy","impl","groovy","response","=","new","rest","assured","response","options","groovy","impl","(",")",";","public","void","set","response","headers","(","object","response","headers",")","{","this",".","groovy","response",".","set","response","headers","(","response","headers",")",";","}","public","void","set","cookies","(","cookies","cookies",")","{","this",".","groovy","response",".","set","cookies","(","cookies",")",";","}","public","void","set","content","(","object","content",")","{","this",".","groovy","response",".","set","content","(","content",")",";","}","public","void","set","content","type","(","object","content","type",")","{","this",".","groovy","response",".","set","content","type","(","content","type",")",";","}","public","void","set","status","line","(","object","status","line",")","{","this",".","groovy","response",".","set","status","line","(","status","line",")",";","}","public","void","set","status","code","(","object","status","code",")","{","this",".","groovy","response",".","set","status","code","(","status","code",")",";","}","public","void","set","session","id","name","(","object","session","id","name",")","{","this",".","groovy","response",".","set","session","id","name","(","session","id","name",")",";","}","public","void","set","connection","manager","(","object","connection","manager",")","{","this",".","groovy","response",".","set","connection","manager","(","connection","manager",")",";","}","public","void","set","default","content","type","(","string","default","content","type",")","{","this",".","groovy","response",".","set","default","content","type","(","default","content","type",")",";","}","public","void","set","rpr","(","response","parser","registrar","rpr",")","{","this",".","groovy","response",".","set","rpr","(","rpr",")",";","}","public","void","set","default","charset","(","string","default","charset",")","{","this",".","groovy","response",".","set","default","charset","(","default","charset",")",";","}","public","void","set","has","expectations","(","boolean","has","expectations",")","{","this",".","groovy","response",".","set","has","expectations","(","has","expectations",")",";","}","public","void","set","config","(","rest","assured","config","config",")","{","this",".","groovy","response",".","set","config","(","config",")",";","}","public","response","parser","registrar","get","rpr","(",")","{","return","groovy","response",".","get","rpr","(",")",";","}","public","rest","assured","config","get","config","(",")","{","return","groovy","response",".","get","config","(",")",";","}","/","/","end","setters","and","getters","public","response","body","body","(",")","{","return","(","response","body",")","this",";","}","public","headers","headers","(",")","{","return","groovy","response",".","headers","(",")",";","}","public","string","header","(","string","name",")","{","return","groovy","response",".","header","(","name",")",";","}","public","map","<","string",",","string",">","cookies","(",")","{","return","groovy","response",".","cookies","(",")",";","}","public","cookies","detailed","cookies","(",")","{","return","groovy","response",".","detailed","cookies","(",")",";","}","public","string","cookie","(","string","name",")","{","return","groovy","response",".","cookie","(","name",")",";","}","public","cookie","detailed","cookie","(","string","name",")","{","return","groovy","response",".","detailed","cookie","(","name",")",";","}","public","string","content","type","(",")","{","return","groovy","response",".","content","type","(",")",";","}","public","string","status","line","(",")","{","return","groovy","response",".","status","line","(",")",";","}","public","string","session","id","(",")","{","return","groovy","response",".","session","id","(",")",";","}","public","int","status","code","(",")","{","return","groovy","response",".","status","code","(",")",";","}","public","r","response","(",")","{","return","(","r",")","this",";","}","public","<","t",">","t","as","(","class","<","t",">","cls",")","{","return","groovy","response",".","as","(","cls",",","this",")",";","}","public","<","t",">","t","as","(","class","<","t",">","cls",",","object","mapper","type","mapper","type",")","{","return","groovy","response",".","as","(","cls",",","mapper","type",",","this",")",";","}","public","<","t",">","t","as","(","class","<","t",">","cls",",","object","mapper","mapper",")","{","return","groovy","response",".","as","(","cls",",","mapper",")",";","}","public","json","path","json","path","(",")","{","return","groovy","response",".","json","path","(",")",";","}","public","json","path","json","path","(","json","path","config","config",")","{","return","groovy","response",".","json","path","(","config",")",";","}","public","xml","path","xml","path","(",")","{","return","groovy","response",".","xml","path","(",")",";","}","public","xml","path","xml","path","(","xml","path","config","config",")","{","return","groovy","response",".","xml","path","(","config",")",";","}","public","xml","path","xml","path","(","xml","path",".","compatibility","mode","compatibility","mode",")","{","return","groovy","response",".","xml","path","(","compatibility","mode",")",";","}","public","xml","path","html","path","(",")","{","return","groovy","response",".","html","path","(",")",";","}","public","<","t",">","t","path","(","string","path",",","string",".",".",".","arguments",")","{","return","groovy","response",".","path","(","path",",","arguments",")",";","}","public","string","as","string","(",")","{","return","groovy","response",".","as","string","(",")",";","}","public","string","as","string","(","boolean","force","platform","default","charset","if","no","charset","is","specified","in","response",")","{","return","groovy","response",".","as","string","(","force","platform","default","charset","if","no","charset","is","specified","in","response",")",";","}","public","byte","[","]","as","byte","array","(",")","{","return","groovy","response",".","as","byte","array","(",")",";","}","public","input","stream","as","input","stream","(",")","{","return","groovy","response",".","as","input","stream","(",")",";","}","public","string","print","(",")","{","return","groovy","response",".","print","(",")",";","}","public","string","pretty","print","(",")","{","return","groovy","response",".","pretty","print","(","(","response","options",")","this",",","(","response","body",")","this",")",";","}","public","r","peek","(",")","{","groovy","response",".","peek","(","(","response","options",")","this",",","(","response","body",")","this",")",";","return","(","r",")","this",";","}","public","r","pretty","peek","(",")","{","groovy","response",".","pretty","peek","(","(","response","options",")","this",",","(","response","body",")","this",")",";","return","(","r",")","this",";","}","public","r","and","return","(",")","{","return","(","r",")","this",";","}","public","r","then","return","(",")","{","return","(","r",")","this",";","}","public","response","body","get","body","(",")","{","return","(","response","body",")","this",";","}","public","headers","get","headers","(",")","{","return","groovy","response",".","get","headers","(",")",";","}","public","string","get","header","(","string","name",")","{","return","groovy","response",".","get","header","(","name",")",";","}","public","cookies","get","detailed","cookies","(",")","{","return","groovy","response",".","get","detailed","cookies","(",")",";","}","public","string","get","cookie","(","string","name",")","{","return","groovy","response",".","get","cookie","(","name",")",";","}","public","cookie","get","detailed","cookie","(","string","name",")","{","return","groovy","response",".","get","detailed","cookie","(","name",")",";","}","public","string","get","session","id","(",")","{","return","groovy","response",".","get","session","id","(",")",";","}","public","map","<","string",",","string",">","get","cookies","(",")","{","return","groovy","response",".","get","cookies","(",")",";","}","public","string","get","content","type","(",")","{","return","groovy","response",".","get","content","type","(",")",";","}","public","string","get","status","line","(",")","{","return","groovy","response",".","get","status","line","(",")",";","}","public","int","get","status","code","(",")","{","return","groovy","response",".","get","status","code","(",")",";","}","public","object","get","content","(",")","{","return","groovy","response",".","get","content","(",")",";","}","public","boolean","get","has","expectations","(",")","{","return","groovy","response",".","get","has","expectations","(",")",";","}","public","string","get","default","content","type","(",")","{","return","groovy","response",".","get","default","content","type","(",")",";","}","public","string","get","default","charset","(",")","{","return","groovy","response",".","get","default","charset","(",")",";","}","public","object","get","session","id","name","(",")","{","return","groovy","response",".","get","session","id","name","(",")",";","}","public","object","get","connection","manager","(",")","{","return","groovy","response",".","get","connection","manager","(",")",";","}","public","object","get","response","headers","(",")","{","return","groovy","response",".","get","response","headers","(",")",";","}","public","log","repository","get","log","repository","(",")","{","return","log","repository",";","}","public","void","set","log","repository","(","log","repository","log","repository",")","{","this",".","log","repository","=","log","repository",";","}","public","rest","assured","response","options","groovy","impl","get","groovy","response","(",")","{","return","groovy","response",";","}","public","void","set","groovy","response","(","rest","assured","response","options","groovy","impl","groovy","response",")","{","this",".","groovy","response","=","groovy","response",";","}","}"],"func_name":"RestAssuredResponseOptionsImpl","func_name_tokens":["rest","assured","response","options","impl"],"docstring":"  let the Groovy implementation implement our interfaces directly.","docstring_tokens":["let","the","groovy","implementation","implement","our","interfaces","directly","."],"query":"Groovy Generics failure","query_tokens":["groovy","generics","failure"]}
{"query_id":"2808535","repo_name":"AtlasDev/V1OODC-15","zip_link":"/dsluijk/V1OODC-15/archive/master.zip","code":"  private double round(double value) {    BigDecimal bd = new BigDecimal(value);    bd = bd.setScale(2, RoundingMode.HALF_UP);    return bd.doubleValue();  }","code_tokens":["private","double","round","(","double","value",")","{","big","decimal","bd","=","new","big","decimal","(","value",")",";","bd","=","bd",".","set","scale","(","2",",","rounding","mode",".","half","up",")",";","return","bd",".","double","value","(",")",";","}"],"func_name":"round","func_name_tokens":["round"],"docstring":"      Round a double with double point precission, because Java can't be default.    Credits for the idea:    @param value Value to round.    @return The double rounded with double point precission.","docstring_tokens":["round","a","double","with","double","point","precission",",","because","java","can","'","t","be","default",".","credits","for","the","idea",":"],"query":"Round a double to 2 decimal places [duplicate]","query_tokens":["round","a","double","to","2","decimal","places","[","duplicate","]"]}
{"query_id":"60764","repo_name":"mcdan/sling","zip_link":"/mcdan/sling/archive/trunk.zip","code":"    private void addToClasspath(URL u) throws IOException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {        final URLClassLoader sysLoader = (URLClassLoader)ClassLoader.getSystemClassLoader();        final Method m = URLClassLoader.class.getDeclaredMethod(\"addURL\",new Class[]{URL.class});        m.setAccessible(true);        m.invoke(sysLoader,new Object[]{ u });        log.info(\"Added to classpath: {}\", u);    }","code_tokens":["private","void","add","to","classpath","(","url","u",")","throws","io","exception",",","no","such","method","exception",",","security","exception",",","illegal","access","exception",",","illegal","argument","exception",",","invocation","target","exception","{","final","url","class","loader","sys","loader","=","(","url","class","loader",")","class","loader",".","get","system","class","loader","(",")",";","final","method","m","=","url","class","loader",".","class",".","get","declared","method","(","\"","add","url","\"",",","new","class","[","]","{","url",".","class","}",")",";","m",".","set","accessible","(","true",")",";","m",".","invoke","(","sys","loader",",","new","object","[","]","{","u","}",")",";","log",".","info","(","\"","added","to","classpath",":","{","}","\"",",","u",")",";","}"],"func_name":"addToClasspath","func_name_tokens":["add","to","classpath"],"docstring":"     Slightly hacky way to add URLs to the system classloader,","docstring_tokens":["slightly","hacky","way","to","add","ur","ls","to","the","system","classloader",","],"query":"How to load JAR files dynamically at Runtime?","query_tokens":["how","to","load","jar","files","dynamically","at","runtime","?"]}
{"query_id":"5535672","repo_name":"shiyeling/test_import","zip_link":"/shiyeling/test_import/archive/master.zip","code":"public class AutoResizeTextView extends TextView {    // Minimum text size for this text view    private static final float MIN_TEXT_SIZE = 20;    // Interface for resize notifications    public interface OnTextResizeListener {        void onTextResize(TextView textView, float oldSize, float newSize);    }    // Our ellipse string - Unicode Character 'HORIZONTAL ELLIPSIS'    private static final String M_ELLIPSIS = \"\\u2026\";    // Registered resize listener    private OnTextResizeListener mTextResizeListener;    // Flag for text and/or size changes to force a resize    private boolean mNeedsResize = false;    // Text size that is set from code. This acts as a starting point for resizing    private float mTextSize;    // Temporary upper bounds on the starting text size    private float mMaxTextSize = 0;    // Lower bounds for text size    private float mMinTextSize = MIN_TEXT_SIZE;    // Text view line spacing multiplier    private float mSpacingMult = 1.0f;    // Text view additional line spacing    private float mSpacingAdd = 0.0f;    // Add ellipsis to text that overflows at the smallest text size    private boolean mAddEllipsis = true;    // Default constructor override    public AutoResizeTextView(Context context) {        this(context, null);    }    // Default constructor when inflating from XML file    public AutoResizeTextView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    // Default constructor override    public AutoResizeTextView(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);        mTextSize = getTextSize();    }    /**     * When text changes, set the force resize flag to true and reset the text size.     */    @Override    protected void onTextChanged(final CharSequence text, final int start, final int before, final int after) {        mNeedsResize = true;        // Since this view may be reused, it is good to reset the text size        resetTextSize();    }    /**     * If the text view size changed, set the force resize flag to true     */    @Override    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        if (w != oldw || h != oldh) {            mNeedsResize = true;        }    }    /**     * Register listener to receive resize notifications     * @param listener     */    public void setOnResizeListener(OnTextResizeListener listener) {        mTextResizeListener = listener;    }    /**     * Override the set text size to update our internal reference values     */    @Override    public void setTextSize(float size) {        super.setTextSize(size);        mTextSize = getTextSize();    }    /**     * Override the set text size to update our internal reference values     */    @Override    public void setTextSize(int unit, float size) {        super.setTextSize(unit, size);        mTextSize = getTextSize();    }    /**     * Override the set line spacing to update our internal reference values     */    @Override    public void setLineSpacing(float add, float mult) {        super.setLineSpacing(add, mult);        mSpacingMult = mult;        mSpacingAdd = add;    }    /**     * Set the upper text size limit and invalidate the view     * @param maxTextSize     */    public void setMaxTextSize(float maxTextSize) {        mMaxTextSize = maxTextSize;        requestLayout();        invalidate();    }    /**     * Return upper text size limit     * @return     */    public float getMaxTextSize() {        return mMaxTextSize;    }    /**     * Set the lower text size limit and invalidate the view     * @param minTextSize     */    public void setMinTextSize(float minTextSize) {        mMinTextSize = minTextSize;        requestLayout();        invalidate();    }    /**     * Return lower text size limit     * @return     */    public float getMinTextSize() {        return mMinTextSize;    }    /**     * Set flag to add ellipsis to text that overflows at the smallest text size     * @param addEllipsis     */    public void setAddEllipsis(boolean addEllipsis) {        mAddEllipsis = addEllipsis;    }    /**     * Return flag to add ellipsis to text that overflows at the smallest text size     * @return     */    public boolean getAddEllipsis() {        return mAddEllipsis;    }    /**     * Reset the text to the original size     */    private void resetTextSize() {        if (mTextSize > 0) {            super.setTextSize(TypedValue.COMPLEX_UNIT_PX, mTextSize);            mMaxTextSize = mTextSize;        }    }    /**     * Resize text after measuring     */    @Override    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {        if (changed || mNeedsResize) {            int widthLimit = (right - left) - getCompoundPaddingLeft() - getCompoundPaddingRight();            int heightLimit = (bottom - top) - getCompoundPaddingBottom() - getCompoundPaddingTop();            resizeText(widthLimit, heightLimit);        }        super.onLayout(changed, left, top, right, bottom);    }    /**     * Resize the text size with default width and height     */    public void resizeText() {        int heightLimit = getHeight() - getPaddingBottom() - getPaddingTop();        int widthLimit = getWidth() - getPaddingLeft() - getPaddingRight();        resizeText(widthLimit, heightLimit);    }    /**     * Resize the text size with specified width and height     * @param width     * @param height     */    public void resizeText(int width, int height) {        CharSequence text = getText();        // Do not resize if the view does not have dimensions or there is no text        if (text == null || text.length() == 0 || height <= 0 || width <= 0 || mTextSize == 0) {            return;        }        // Get the text view's paint object        TextPaint textPaint = getPaint();        // Store the current text size        float oldTextSize = textPaint.getTextSize();        // If there is a max text size set, use the lesser of that and the default text size        float targetTextSize = mMaxTextSize > 0 ? Math.min(mTextSize, mMaxTextSize) : mTextSize;        // Get the required text height        int textHeight = getTextHeight(text, textPaint, width, targetTextSize);        // Until we either fit within our text view or we had reached our min text size, incrementally try smaller sizes        while (textHeight > height && targetTextSize > mMinTextSize) {            targetTextSize = Math.max(targetTextSize - 2, mMinTextSize);            textHeight = getTextHeight(text, textPaint, width, targetTextSize);        }        // If we had reached our minimum text size and still don't fit, append an ellipsis        if (mAddEllipsis && targetTextSize == mMinTextSize && textHeight > height) {            // Draw using a static layout            // modified: use a copy of TextPaint for measuring            TextPaint paint = new TextPaint(textPaint);            // Draw using a static layout            StaticLayout layout = new StaticLayout(text, paint, width, Layout.Alignment.ALIGN_NORMAL,                    mSpacingMult, mSpacingAdd, false);            // Check that we have a least one line of rendered text            if (layout.getLineCount() > 0) {                // Since the line at the specific vertical position would be cut off,                // we must trim up to the previous line                int lastLine = layout.getLineForVertical(height) - 1;                // If the text would not even fit on a single line, clear it                if (lastLine < 0) {                    setText(\"\");                } else {                    // Otherwise, trim to the previous line and add an ellipsis                    int start = layout.getLineStart(lastLine);                    int end = layout.getLineEnd(lastLine);                    float lineWidth = layout.getLineWidth(lastLine);                    float ellipseWidth = paint.measureText(M_ELLIPSIS);                    // Trim characters off until we have enough room to draw the ellipsis                    while (width < lineWidth + ellipseWidth) {                        lineWidth = paint.measureText(text.subSequence(start, --end + 1).toString());                    }                    setText(text.subSequence(0, end) + M_ELLIPSIS);                }            }        }        // Some devices try to auto adjust line spacing, so force default line spacing        // and invalidate the layout as a side effect        setTextSize(TypedValue.COMPLEX_UNIT_PX, targetTextSize);        setLineSpacing(mSpacingAdd, mSpacingMult);        // Notify the listener if registered        if (mTextResizeListener != null) {            mTextResizeListener.onTextResize(this, oldTextSize, targetTextSize);        }        // Reset force resize flag        mNeedsResize = false;    }    // Set the text size of the text paint object and use a static layout to render text off screen before measuring    private int getTextHeight(CharSequence source, TextPaint paint, int width, float textSize) {        // modified: make a copy of the original TextPaint object for measuring        // (apparently the object gets modified while measuring, see also the        // docs for TextView.getPaint() (which states to access it read-only)        TextPaint paintCopy = new TextPaint(paint);        // Update the text paint object        paintCopy.setTextSize(textSize);        // Measure using a static layout        StaticLayout layout = new StaticLayout(source, paintCopy, width, Layout.Alignment.ALIGN_NORMAL,                mSpacingMult, mSpacingAdd, true);        return layout.getHeight();    }}","code_tokens":["public","class","auto","resize","text","view","extends","text","view","{","/","/","minimum","text","size","for","this","text","view","private","static","final","float","min","text","size","=","20",";","/","/","interface","for","resize","notifications","public","interface","on","text","resize","listener","{","void","on","text","resize","(","text","view","text","view",",","float","old","size",",","float","new","size",")",";","}","/","/","our","ellipse","string","-","unicode","character","'","horizontal","ellipsis","'","private","static","final","string","m","ellipsis","=","\"","\\u","2026","\"",";","/","/","registered","resize","listener","private","on","text","resize","listener","m","text","resize","listener",";","/","/","flag","for","text","and","/","or","size","changes","to","force","a","resize","private","boolean","m","needs","resize","=","false",";","/","/","text","size","that","is","set","from","code",".","this","acts","as","a","starting","point","for","resizing","private","float","m","text","size",";","/","/","temporary","upper","bounds","on","the","starting","text","size","private","float","m","max","text","size","=","0",";","/","/","lower","bounds","for","text","size","private","float","m","min","text","size","=","min","text","size",";","/","/","text","view","line","spacing","multiplier","private","float","m","spacing","mult","=","1",".","0f",";","/","/","text","view","additional","line","spacing","private","float","m","spacing","add","=","0",".","0f",";","/","/","add","ellipsis","to","text","that","overflows","at","the","smallest","text","size","private","boolean","m","add","ellipsis","=","true",";","/","/","default","constructor","override","public","auto","resize","text","view","(","context","context",")","{","this","(","context",",","null",")",";","}","/","/","default","constructor","when","inflating","from","xml","file","public","auto","resize","text","view","(","context","context",",","attribute","set","attrs",")","{","this","(","context",",","attrs",",","0",")",";","}","/","/","default","constructor","override","public","auto","resize","text","view","(","context","context",",","attribute","set","attrs",",","int","def","style",")","{","super","(","context",",","attrs",",","def","style",")",";","m","text","size","=","get","text","size","(",")",";","}","@","override","protected","void","on","text","changed","(","final","char","sequence","text",",","final","int","start",",","final","int","before",",","final","int","after",")","{","m","needs","resize","=","true",";","/","/","since","this","view","may","be","reused",",","it","is","good","to","reset","the","text","size","reset","text","size","(",")",";","}","@","override","protected","void","on","size","changed","(","int","w",",","int","h",",","int","oldw",",","int","oldh",")","{","if","(","w","!","=","oldw","|","|","h","!","=","oldh",")","{","m","needs","resize","=","true",";","}","}","public","void","set","on","resize","listener","(","on","text","resize","listener","listener",")","{","m","text","resize","listener","=","listener",";","}","@","override","public","void","set","text","size","(","float","size",")","{","super",".","set","text","size","(","size",")",";","m","text","size","=","get","text","size","(",")",";","}","@","override","public","void","set","text","size","(","int","unit",",","float","size",")","{","super",".","set","text","size","(","unit",",","size",")",";","m","text","size","=","get","text","size","(",")",";","}","@","override","public","void","set","line","spacing","(","float","add",",","float","mult",")","{","super",".","set","line","spacing","(","add",",","mult",")",";","m","spacing","mult","=","mult",";","m","spacing","add","=","add",";","}","public","void","set","max","text","size","(","float","max","text","size",")","{","m","max","text","size","=","max","text","size",";","request","layout","(",")",";","invalidate","(",")",";","}","public","float","get","max","text","size","(",")","{","return","m","max","text","size",";","}","public","void","set","min","text","size","(","float","min","text","size",")","{","m","min","text","size","=","min","text","size",";","request","layout","(",")",";","invalidate","(",")",";","}","public","float","get","min","text","size","(",")","{","return","m","min","text","size",";","}","public","void","set","add","ellipsis","(","boolean","add","ellipsis",")","{","m","add","ellipsis","=","add","ellipsis",";","}","public","boolean","get","add","ellipsis","(",")","{","return","m","add","ellipsis",";","}","private","void","reset","text","size","(",")","{","if","(","m","text","size",">","0",")","{","super",".","set","text","size","(","typed","value",".","complex","unit","px",",","m","text","size",")",";","m","max","text","size","=","m","text","size",";","}","}","@","override","protected","void","on","layout","(","boolean","changed",",","int","left",",","int","top",",","int","right",",","int","bottom",")","{","if","(","changed","|","|","m","needs","resize",")","{","int","width","limit","=","(","right","-","left",")","-","get","compound","padding","left","(",")","-","get","compound","padding","right","(",")",";","int","height","limit","=","(","bottom","-","top",")","-","get","compound","padding","bottom","(",")","-","get","compound","padding","top","(",")",";","resize","text","(","width","limit",",","height","limit",")",";","}","super",".","on","layout","(","changed",",","left",",","top",",","right",",","bottom",")",";","}","public","void","resize","text","(",")","{","int","height","limit","=","get","height","(",")","-","get","padding","bottom","(",")","-","get","padding","top","(",")",";","int","width","limit","=","get","width","(",")","-","get","padding","left","(",")","-","get","padding","right","(",")",";","resize","text","(","width","limit",",","height","limit",")",";","}","public","void","resize","text","(","int","width",",","int","height",")","{","char","sequence","text","=","get","text","(",")",";","/","/","do","not","resize","if","the","view","does","not","have","dimensions","or","there","is","no","text","if","(","text","=","=","null","|","|","text",".","length","(",")","=","=","0","|","|","height","<","=","0","|","|","width","<","=","0","|","|","m","text","size","=","=","0",")","{","return",";","}","/","/","get","the","text","view","'","s","paint","object","text","paint","text","paint","=","get","paint","(",")",";","/","/","store","the","current","text","size","float","old","text","size","=","text","paint",".","get","text","size","(",")",";","/","/","if","there","is","a","max","text","size","set",",","use","the","lesser","of","that","and","the","default","text","size","float","target","text","size","=","m","max","text","size",">","0","?","math",".","min","(","m","text","size",",","m","max","text","size",")",":","m","text","size",";","/","/","get","the","required","text","height","int","text","height","=","get","text","height","(","text",",","text","paint",",","width",",","target","text","size",")",";","/","/","until","we","either","fit","within","our","text","view","or","we","had","reached","our","min","text","size",",","incrementally","try","smaller","sizes","while","(","text","height",">","height","&","&","target","text","size",">","m","min","text","size",")","{","target","text","size","=","math",".","max","(","target","text","size","-","2",",","m","min","text","size",")",";","text","height","=","get","text","height","(","text",",","text","paint",",","width",",","target","text","size",")",";","}","/","/","if","we","had","reached","our","minimum","text","size","and","still","don","'","t","fit",",","append","an","ellipsis","if","(","m","add","ellipsis","&","&","target","text","size","=","=","m","min","text","size","&","&","text","height",">","height",")","{","/","/","draw","using","a","static","layout","/","/","modified",":","use","a","copy","of","text","paint","for","measuring","text","paint","paint","=","new","text","paint","(","text","paint",")",";","/","/","draw","using","a","static","layout","static","layout","layout","=","new","static","layout","(","text",",","paint",",","width",",","layout",".","alignment",".","align","normal",",","m","spacing","mult",",","m","spacing","add",",","false",")",";","/","/","check","that","we","have","a","least","one","line","of","rendered","text","if","(","layout",".","get","line","count","(",")",">","0",")","{","/","/","since","the","line","at","the","specific","vertical","position","would","be","cut","off",",","/","/","we","must","trim","up","to","the","previous","line","int","last","line","=","layout",".","get","line","for","vertical","(","height",")","-","1",";","/","/","if","the","text","would","not","even","fit","on","a","single","line",",","clear","it","if","(","last","line","<","0",")","{","set","text","(","\"","\"",")",";","}","else","{","/","/","otherwise",",","trim","to","the","previous","line","and","add","an","ellipsis","int","start","=","layout",".","get","line","start","(","last","line",")",";","int","end","=","layout",".","get","line","end","(","last","line",")",";","float","line","width","=","layout",".","get","line","width","(","last","line",")",";","float","ellipse","width","=","paint",".","measure","text","(","m","ellipsis",")",";","/","/","trim","characters","off","until","we","have","enough","room","to","draw","the","ellipsis","while","(","width","<","line","width","+","ellipse","width",")","{","line","width","=","paint",".","measure","text","(","text",".","sub","sequence","(","start",",","-","-","end","+","1",")",".","to","string","(",")",")",";","}","set","text","(","text",".","sub","sequence","(","0",",","end",")","+","m","ellipsis",")",";","}","}","}","/","/","some","devices","try","to","auto","adjust","line","spacing",",","so","force","default","line","spacing","/","/","and","invalidate","the","layout","as","a","side","effect","set","text","size","(","typed","value",".","complex","unit","px",",","target","text","size",")",";","set","line","spacing","(","m","spacing","add",",","m","spacing","mult",")",";","/","/","notify","the","listener","if","registered","if","(","m","text","resize","listener","!","=","null",")","{","m","text","resize","listener",".","on","text","resize","(","this",",","old","text","size",",","target","text","size",")",";","}","/","/","reset","force","resize","flag","m","needs","resize","=","false",";","}","/","/","set","the","text","size","of","the","text","paint","object","and","use","a","static","layout","to","render","text","off","screen","before","measuring","private","int","get","text","height","(","char","sequence","source",",","text","paint","paint",",","int","width",",","float","text","size",")","{","/","/","modified",":","make","a","copy","of","the","original","text","paint","object","for","measuring","/","/","(","apparently","the","object","gets","modified","while","measuring",",","see","also","the","/","/","docs","for","text","view",".","get","paint","(",")","(","which","states","to","access","it","read","-","only",")","text","paint","paint","copy","=","new","text","paint","(","paint",")",";","/","/","update","the","text","paint","object","paint","copy",".","set","text","size","(","text","size",")",";","/","/","measure","using","a","static","layout","static","layout","layout","=","new","static","layout","(","source",",","paint","copy",",","width",",","layout",".","alignment",".","align","normal",",","m","spacing","mult",",","m","spacing","add",",","true",")",";","return","layout",".","get","height","(",")",";","}","}"],"func_name":"AutoResizeTextView","func_name_tokens":["auto","resize","text","view"],"docstring":"  Text view that auto adjusts text size to fit within the view.  If the text size equals the minimum text size and still does not  fit, append with an ellipsis.  ","docstring_tokens":["text","view","that","auto","adjusts","text","size","to","fit","within","the","view",".","if","the","text","size","equals","the","minimum","text","size","and","still","does","not","fit",",","append","with","an","ellipsis","."],"query":"Auto Scale TextView Text to Fit within Bounds","query_tokens":["auto","scale","text","view","text","to","fit","within","bounds"]}
{"query_id":"326390","repo_name":"trishan/posit-mobile.plugin","zip_link":"/trishan/posit-mobile.plugin/archive/master.zip","code":"\t  public static String readFileToString(String file) throws IOException {\t\t  BufferedReader reader = new BufferedReader( new FileReader (file));\t\t    String line  = null;\t\t    StringBuilder stringBuilder = new StringBuilder();\t\t    String ls = System.getProperty(\"line.separator\");\t\t    while( ( line = reader.readLine() ) != null ) {\t\t        stringBuilder.append( line );\t\t        stringBuilder.append( ls );\t\t    }\t\t    return stringBuilder.toString();\t\t}","code_tokens":["public","static","string","read","file","to","string","(","string","file",")","throws","io","exception","{","buffered","reader","reader","=","new","buffered","reader","(","new","file","reader","(","file",")",")",";","string","line","=","null",";","string","builder","string","builder","=","new","string","builder","(",")",";","string","ls","=","system",".","get","property","(","\"","line",".","separator","\"",")",";","while","(","(","line","=","reader",".","read","line","(",")",")","!","=","null",")","{","string","builder",".","append","(","line",")",";","string","builder",".","append","(","ls",")",";","}","return","string","builder",".","to","string","(",")",";","}"],"func_name":"readFileToString","func_name_tokens":["read","file","to","string"],"docstring":"\t  \t    Taken from  \t    Reads content of a file into a string. This is useful for small-ish files\t    You shouldn't be reading very large files anyways, like this.\t    @param path\t    @return\t    @throws IOException","docstring_tokens":["taken","from","reads","content","of","a","file","into","a","string",".","this","is","useful","for","small","-","ish","files","you","shouldn","'","t","be","reading","very","large","files","anyways",",","like","this","."],"query":"How do I create a Java string from the contents of a file?","query_tokens":["how","do","i","create","a","java","string","from","the","contents","of","a","file","?"]}
{"query_id":"26177982","repo_name":"marcjansen/shogun2","zip_link":"/marcjansen/shogun2/archive/master.zip","code":"    public static URI appendQueryString(URI uri, String appendQuery) {        if (uri == null || appendQuery == null || appendQuery.isEmpty()) {            return uri;        }        String newQuery = uri.getQuery();        if (newQuery == null) {            newQuery = appendQuery;        } else {            newQuery += \"&\" + appendQuery;        }        // Fallback is the old URI        URI newUri = uri;        try {            newUri = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), newQuery, uri.getFragment());        } catch (URISyntaxException e) {            String msg = String.format(                \"Failed to append query '%s' to URI '%s', returning URI unchanged.\",                appendQuery, uri            );            LOG.warn(msg);        }        return newUri;    }","code_tokens":["public","static","uri","append","query","string","(","uri","uri",",","string","append","query",")","{","if","(","uri","=","=","null","|","|","append","query","=","=","null","|","|","append","query",".","is","empty","(",")",")","{","return","uri",";","}","string","new","query","=","uri",".","get","query","(",")",";","if","(","new","query","=","=","null",")","{","new","query","=","append","query",";","}","else","{","new","query","+","=","\"","&","\"","+","append","query",";","}","/","/","fallback","is","the","old","uri","uri","new","uri","=","uri",";","try","{","new","uri","=","new","uri","(","uri",".","get","scheme","(",")",",","uri",".","get","authority","(",")",",","uri",".","get","path","(",")",",","new","query",",","uri",".","get","fragment","(",")",")",";","}","catch","(","uri","syntax","exception","e",")","{","string","msg","=","string",".","format","(","\"","failed","to","append","query","'","%","s","'","to","uri","'","%","s","'",",","returning","uri","unchanged",".","\"",",","append","query",",","uri",")",";","log",".","warn","(","msg",")",";","}","return","new","uri",";","}"],"func_name":"appendQueryString","func_name_tokens":["append","query","string"],"docstring":"          Returns a new URI with the passed queryString (e.g. foo=bar&baz=123) appended to the passed URI. Adjusted from           @param uri      @param appendQuery      @return      @throws URISyntaxException","docstring_tokens":["returns","a","new","uri","with","the","passed","query","string","(","e",".","g",".","foo","=","bar","&","baz","=","123",")","appended","to","the","passed","uri",".","adjusted","from"],"query":"How can I append a query parameter to an existing URL?","query_tokens":["how","can","i","append","a","query","parameter","to","an","existing","url","?"]}
{"query_id":"19723415","repo_name":"gattazr/cohorte-herald","zip_link":"/gattazr/cohorte-herald/archive/master.zip","code":"public class TrustAllX509TrustManager implements X509TrustManager {    /*     * (non-Javadoc)     *     * @see     * javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.     * X509Certificate[], java.lang.String)     */    @Override    public void checkClientTrusted(final X509Certificate[] aChain,            final String aAuthType) throws CertificateException {    }    /*     * (non-Javadoc)     *     * @see     * javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.     * X509Certificate[], java.lang.String)     */    @Override    public void checkServerTrusted(final X509Certificate[] aChain,            final String aAuthType) throws CertificateException {    }    /*     * (non-Javadoc)     *     * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()     */    @Override    public X509Certificate[] getAcceptedIssuers() {        return new X509Certificate[0];    }}","code_tokens":["public","class","trust","all","x509trust","manager","implements","x509trust","manager","{","@","override","public","void","check","client","trusted","(","final","x509certificate","[","]","a","chain",",","final","string","a","auth","type",")","throws","certificate","exception","{","}","@","override","public","void","check","server","trusted","(","final","x509certificate","[","]","a","chain",",","final","string","a","auth","type",")","throws","certificate","exception","{","}","@","override","public","x509certificate","[","]","get","accepted","issuers","(",")","{","return","new","x509certificate","[","0","]",";","}","}"],"func_name":"TrustAllX509TrustManager","func_name_tokens":["trust","all","x509trust","manager"],"docstring":"  A \"Trust\" manager, which trusts any given certificate.   disable-ssl-certificate-check   @author Thomas Calmant","docstring_tokens":["a","\"","trust","\"","manager",",","which","trusts","any","given","certificate",".","disable","-","ssl","-","certificate","-","check"],"query":"Java: Overriding function to disable SSL certificate check","query_tokens":["java",":","overriding","function","to","disable","ssl","certificate","check"]}
{"query_id":"218081","repo_name":"fbonzon/graphhopper","zip_link":"/fbonzon/graphhopper/archive/master.zip","code":"    public boolean contains(double lat, double lon) {        if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {            return false;        }        double rayStartLat = maxLat - (minLat / 2);        double rayStartLon = minLon - epsilon;        boolean inside = false;        int len = this.lat.length;        for (int i = 0; i < len; i++) {            if (edgesAreIntersecting(rayStartLon, rayStartLat, lon, lat, this.lon[i], this.lat[i], this.lon[(i + 1) % len], this.lat[(i + 1) % len]))                inside = !inside;        }        return inside;    }","code_tokens":["public","boolean","contains","(","double","lat",",","double","lon",")","{","if","(","lat","<","min","lat","|","|","lat",">","max","lat","|","|","lon","<","min","lon","|","|","lon",">","max","lon",")","{","return","false",";","}","double","ray","start","lat","=","max","lat","-","(","min","lat","/","2",")",";","double","ray","start","lon","=","min","lon","-","epsilon",";","boolean","inside","=","false",";","int","len","=","this",".","lat",".","length",";","for","(","int","i","=","0",";","i","<","len",";","i","+","+",")","{","if","(","edges","are","intersecting","(","ray","start","lon",",","ray","start","lat",",","lon",",","lat",",","this",".","lon","[","i","]",",","this",".","lat","[","i","]",",","this",".","lon","[","(","i","+","1",")","%","len","]",",","this",".","lat","[","(","i","+","1",")","%","len","]",")",")","inside","=","!","inside",";","}","return","inside",";","}"],"func_name":"contains","func_name_tokens":["contains"],"docstring":"          Implements the ray casting algorithm           @param lat Latitude of the point to be checked      @param lon Longitude of the point to be checked      @return true if point is inside polygon","docstring_tokens":["implements","the","ray","casting","algorithm"],"query":"How can I determine whether a 2D Point is within a Polygon?","query_tokens":["how","can","i","determine","whether","a","2d","point","is","within","a","polygon","?"]}
{"query_id":"22909429","repo_name":"amezcua/actor-platform","zip_link":"/amezcua/actor-platform/archive/master.zip","code":"public class BitmapUtil {    private static final int BMP_WIDTH_OF_TIMES = 4;    private static final int BYTE_PER_PIXEL = 3;    /**     * Android Bitmap Object to Window's v3 24bit Bmp Format File     *     * @param orgBitmap     * @param filePath     * @return file saved result     */    public static boolean save(Bitmap orgBitmap, String filePath) throws IOException {        long start = System.currentTimeMillis();        if (orgBitmap == null) {            return false;        }        if (filePath == null) {            return false;        }        boolean isSaveSuccess = true;        //image size        int width = orgBitmap.getWidth();        int height = orgBitmap.getHeight();        //image dummy data size        //reason : the amount of bytes per image row must be a multiple of 4 (requirements of bmp format)        byte[] dummyBytesPerRow = null;        boolean hasDummy = false;        int rowWidthInBytes = BYTE_PER_PIXEL * width; //source image width * number of bytes to encode one pixel.        if (rowWidthInBytes % BMP_WIDTH_OF_TIMES > 0) {            hasDummy = true;            //the number of dummy bytes we need to add on each row            dummyBytesPerRow = new byte[(BMP_WIDTH_OF_TIMES - (rowWidthInBytes % BMP_WIDTH_OF_TIMES))];            //just fill an array with the dummy bytes we need to append at the end of each row            for (int i = 0; i < dummyBytesPerRow.length; i++) {                dummyBytesPerRow[i] = (byte) 0xFF;            }        }        //an array to receive the pixels from the source image        int[] pixels = new int[width * height];        //the number of bytes used in the file to store raw image data (excluding file headers)        int imageSize = (rowWidthInBytes + (hasDummy ? dummyBytesPerRow.length : 0)) * height;        //file headers size        int imageDataOffset = 0x36;        //final size of the file        int fileSize = imageSize + imageDataOffset;        //Android Bitmap Image Data        orgBitmap.getPixels(pixels, 0, width, 0, 0, width, height);        //ByteArrayOutputStream baos = new ByteArrayOutputStream(fileSize);        ByteBuffer buffer = ByteBuffer.allocate(fileSize);        /**         * BITMAP FILE HEADER Write Start         **/        buffer.put((byte) 0x42);        buffer.put((byte) 0x4D);        //size        buffer.put(writeInt(fileSize));        //reserved        buffer.put(writeShort((short) 0));        buffer.put(writeShort((short) 0));        //image data start offset        buffer.put(writeInt(imageDataOffset));        /** BITMAP FILE HEADER Write End */        //*******************************************        /** BITMAP INFO HEADER Write Start */        //size        buffer.put(writeInt(0x28));        //width, height        //if we add 3 dummy bytes per row : it means we add a pixel (and the image width is modified.        buffer.put(writeInt(width + (hasDummy ? (dummyBytesPerRow.length == 3 ? 1 : 0) : 0)));        buffer.put(writeInt(height));        //planes        buffer.put(writeShort((short) 1));        //bit count        buffer.put(writeShort((short) 24));        //bit compression        buffer.put(writeInt(0));        //image data size        buffer.put(writeInt(imageSize));        //horizontal resolution in pixels per meter        buffer.put(writeInt(0));        //vertical resolution in pixels per meter (unreliable)        buffer.put(writeInt(0));        buffer.put(writeInt(0));        buffer.put(writeInt(0));        /** BITMAP INFO HEADER Write End */        int row = height;        int col = width;        int startPosition = (row - 1) * col;        int endPosition = row * col;        while (row > 0) {            for (int i = startPosition; i < endPosition; i++) {                buffer.put((byte) (pixels[i] & 0x000000FF));                buffer.put((byte) ((pixels[i] & 0x0000FF00) >> 8));                buffer.put((byte) ((pixels[i] & 0x00FF0000) >> 16));            }            if (hasDummy) {                buffer.put(dummyBytesPerRow);            }            row--;            endPosition = startPosition;            startPosition = startPosition - col;        }        FileOutputStream fos = new FileOutputStream(filePath);        fos.write(buffer.array());        fos.close();        Log.v(\"AndroidBmpUtil\", System.currentTimeMillis() - start + \" ms\");        return isSaveSuccess;    }    /**     * Write integer to little-endian     *     * @param value     * @return     * @throws java.io.IOException     */    private static byte[] writeInt(int value) throws IOException {        byte[] b = new byte[4];        b[0] = (byte) (value & 0x000000FF);        b[1] = (byte) ((value & 0x0000FF00) >> 8);        b[2] = (byte) ((value & 0x00FF0000) >> 16);        b[3] = (byte) ((value & 0xFF000000) >> 24);        return b;    }    /**     * Write short to little-endian byte array     *     * @param value     * @return     * @throws java.io.IOException     */    private static byte[] writeShort(short value) throws IOException {        byte[] b = new byte[2];        b[0] = (byte) (value & 0x00FF);        b[1] = (byte) ((value & 0xFF00) >> 8);        return b;    }    public static Bitmap fastBlur(Bitmap sentBitmap, int radius) {        // todo faster!!1        // Stack Blur v1.0 from        // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html        //        // Java Author: Mario Klingemann <mario at quasimondo.com>        // http://incubator.quasimondo.com        // created Feburary 29, 2004        // Android port : Yahel Bouaziz <yahel at kayenko.com>        // http://www.kayenko.com        // ported april 5th, 2012        // This is a compromise between Gaussian Blur and Box blur        // It creates much better looking blurs than Box Blur, but is        // 7x faster than my Gaussian Blur implementation.        //        // I called it Stack Blur because this describes best how this        // filter works internally: it creates a kind of moving stack        // of colors whilst scanning through the image. Thereby it        // just has to add one new block of color to the right side        // of the stack and remove the leftmost color. The remaining        // colors on the topmost layer of the stack are either added on        // or reduced by one, depending on if they are on the right or        // on the left side of the stack.        //        // If you are using this algorithm in your code please add        // the following line:        //        // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>        Bitmap bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);        if (radius < 1) {            return bitmap;        }        try {            int w = bitmap.getWidth();            int h = bitmap.getHeight();            int[] pix = new int[w * h];            Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);            bitmap.getPixels(pix, 0, w, 0, 0, w, h);            int wm = w - 1;            int hm = h - 1;            int wh = w * h;            int div = radius + radius + 1;            int r[] = new int[wh];            int g[] = new int[wh];            int b[] = new int[wh];            int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;            int vmin[] = new int[Math.max(w, h)];            int divsum = (div + 1) >> 1;            divsum *= divsum;            int dv[] = new int[256 * divsum];            for (i = 0; i < 256 * divsum; i++) {                dv[i] = (i / divsum);            }            yw = yi = 0;            int[][] stack = new int[div][3];            int stackpointer;            int stackstart;            int[] sir;            int rbs;            int r1 = radius + 1;            int routsum, goutsum, boutsum;            int rinsum, ginsum, binsum;            for (y = 0; y < h; y++) {                rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;                for (i = -radius; i <= radius; i++) {                    p = pix[yi + Math.min(wm, Math.max(i, 0))];                    sir = stack[i + radius];                    sir[0] = (p & 0xff0000) >> 16;                    sir[1] = (p & 0x00ff00) >> 8;                    sir[2] = (p & 0x0000ff);                    rbs = r1 - Math.abs(i);                    rsum += sir[0] * rbs;                    gsum += sir[1] * rbs;                    bsum += sir[2] * rbs;                    if (i > 0) {                        rinsum += sir[0];                        ginsum += sir[1];                        binsum += sir[2];                    } else {                        routsum += sir[0];                        goutsum += sir[1];                        boutsum += sir[2];                    }                }                stackpointer = radius;                for (x = 0; x < w; x++) {                    r[yi] = dv[rsum];                    g[yi] = dv[gsum];                    b[yi] = dv[bsum];                    rsum -= routsum;                    gsum -= goutsum;                    bsum -= boutsum;                    stackstart = stackpointer - radius + div;                    sir = stack[stackstart % div];                    routsum -= sir[0];                    goutsum -= sir[1];                    boutsum -= sir[2];                    if (y == 0) {                        vmin[x] = Math.min(x + radius + 1, wm);                    }                    p = pix[yw + vmin[x]];                    sir[0] = (p & 0xff0000) >> 16;                    sir[1] = (p & 0x00ff00) >> 8;                    sir[2] = (p & 0x0000ff);                    rinsum += sir[0];                    ginsum += sir[1];                    binsum += sir[2];                    rsum += rinsum;                    gsum += ginsum;                    bsum += binsum;                    stackpointer = (stackpointer + 1) % div;                    sir = stack[(stackpointer) % div];                    routsum += sir[0];                    goutsum += sir[1];                    boutsum += sir[2];                    rinsum -= sir[0];                    ginsum -= sir[1];                    binsum -= sir[2];                    yi++;                }                yw += w;            }            for (x = 0; x < w; x++) {                rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;                yp = -radius * w;                for (i = -radius; i <= radius; i++) {                    yi = Math.max(0, yp) + x;                    sir = stack[i + radius];                    sir[0] = r[yi];                    sir[1] = g[yi];                    sir[2] = b[yi];                    rbs = r1 - Math.abs(i);                    rsum += r[yi] * rbs;                    gsum += g[yi] * rbs;                    bsum += b[yi] * rbs;                    if (i > 0) {                        rinsum += sir[0];                        ginsum += sir[1];                        binsum += sir[2];                    } else {                        routsum += sir[0];                        goutsum += sir[1];                        boutsum += sir[2];                    }                    if (i < hm) {                        yp += w;                    }                }                yi = x;                stackpointer = radius;                for (y = 0; y < h; y++) {                    // Preserve alpha channel: ( 0xff000000 & pix[yi] )                    pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];                    rsum -= routsum;                    gsum -= goutsum;                    bsum -= boutsum;                    stackstart = stackpointer - radius + div;                    sir = stack[stackstart % div];                    routsum -= sir[0];                    goutsum -= sir[1];                    boutsum -= sir[2];                    if (x == 0) {                        vmin[y] = Math.min(y + r1, hm) * w;                    }                    p = x + vmin[y];                    sir[0] = r[p];                    sir[1] = g[p];                    sir[2] = b[p];                    rinsum += sir[0];                    ginsum += sir[1];                    binsum += sir[2];                    rsum += rinsum;                    gsum += ginsum;                    bsum += binsum;                    stackpointer = (stackpointer + 1) % div;                    sir = stack[stackpointer];                    routsum += sir[0];                    goutsum += sir[1];                    boutsum += sir[2];                    rinsum -= sir[0];                    ginsum -= sir[1];                    binsum -= sir[2];                    yi += w;                }            }            Log.e(\"pix\", w + \" \" + h + \" \" + pix.length);            bitmap.setPixels(pix, 0, w, 0, 0, w, h);        } catch (Exception exp) {        }        return (bitmap);    }    public static Bitmap fromBytes(byte[] bytes) {            return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);    }}","code_tokens":["public","class","bitmap","util","{","private","static","final","int","bmp","width","of","times","=","4",";","private","static","final","int","byte","per","pixel","=","3",";","public","static","boolean","save","(","bitmap","org","bitmap",",","string","file","path",")","throws","io","exception","{","long","start","=","system",".","current","time","millis","(",")",";","if","(","org","bitmap","=","=","null",")","{","return","false",";","}","if","(","file","path","=","=","null",")","{","return","false",";","}","boolean","is","save","success","=","true",";","/","/","image","size","int","width","=","org","bitmap",".","get","width","(",")",";","int","height","=","org","bitmap",".","get","height","(",")",";","/","/","image","dummy","data","size","/","/","reason",":","the","amount","of","bytes","per","image","row","must","be","a","multiple","of","4","(","requirements","of","bmp","format",")","byte","[","]","dummy","bytes","per","row","=","null",";","boolean","has","dummy","=","false",";","int","row","width","in","bytes","=","byte","per","pixel","*","width",";","/","/","source","image","width","*","number","of","bytes","to","encode","one","pixel",".","if","(","row","width","in","bytes","%","bmp","width","of","times",">","0",")","{","has","dummy","=","true",";","/","/","the","number","of","dummy","bytes","we","need","to","add","on","each","row","dummy","bytes","per","row","=","new","byte","[","(","bmp","width","of","times","-","(","row","width","in","bytes","%","bmp","width","of","times",")",")","]",";","/","/","just","fill","an","array","with","the","dummy","bytes","we","need","to","append","at","the","end","of","each","row","for","(","int","i","=","0",";","i","<","dummy","bytes","per","row",".","length",";","i","+","+",")","{","dummy","bytes","per","row","[","i","]","=","(","byte",")","0x","ff",";","}","}","/","/","an","array","to","receive","the","pixels","from","the","source","image","int","[","]","pixels","=","new","int","[","width","*","height","]",";","/","/","the","number","of","bytes","used","in","the","file","to","store","raw","image","data","(","excluding","file","headers",")","int","image","size","=","(","row","width","in","bytes","+","(","has","dummy","?","dummy","bytes","per","row",".","length",":","0",")",")","*","height",";","/","/","file","headers","size","int","image","data","offset","=","0x36",";","/","/","final","size","of","the","file","int","file","size","=","image","size","+","image","data","offset",";","/","/","android","bitmap","image","data","org","bitmap",".","get","pixels","(","pixels",",","0",",","width",",","0",",","0",",","width",",","height",")",";","/","/","byte","array","output","stream","baos","=","new","byte","array","output","stream","(","file","size",")",";","byte","buffer","buffer","=","byte","buffer",".","allocate","(","file","size",")",";","buffer",".","put","(","(","byte",")","0x42",")",";","buffer",".","put","(","(","byte",")","0x4d",")",";","/","/","size","buffer",".","put","(","write","int","(","file","size",")",")",";","/","/","reserved","buffer",".","put","(","write","short","(","(","short",")","0",")",")",";","buffer",".","put","(","write","short","(","(","short",")","0",")",")",";","/","/","image","data","start","offset","buffer",".","put","(","write","int","(","image","data","offset",")",")",";","/","/","/","size","buffer",".","put","(","write","int","(","0x28",")",")",";","/","/","width",",","height","/","/","if","we","add","3","dummy","bytes","per","row",":","it","means","we","add","a","pixel","(","and","the","image","width","is","modified",".","buffer",".","put","(","write","int","(","width","+","(","has","dummy","?","(","dummy","bytes","per","row",".","length","=","=","3","?","1",":","0",")",":","0",")",")",")",";","buffer",".","put","(","write","int","(","height",")",")",";","/","/","planes","buffer",".","put","(","write","short","(","(","short",")","1",")",")",";","/","/","bit","count","buffer",".","put","(","write","short","(","(","short",")","24",")",")",";","/","/","bit","compression","buffer",".","put","(","write","int","(","0",")",")",";","/","/","image","data","size","buffer",".","put","(","write","int","(","image","size",")",")",";","/","/","horizontal","resolution","in","pixels","per","meter","buffer",".","put","(","write","int","(","0",")",")",";","/","/","vertical","resolution","in","pixels","per","meter","(","unreliable",")","buffer",".","put","(","write","int","(","0",")",")",";","buffer",".","put","(","write","int","(","0",")",")",";","buffer",".","put","(","write","int","(","0",")",")",";","int","row","=","height",";","int","col","=","width",";","int","start","position","=","(","row","-","1",")","*","col",";","int","end","position","=","row","*","col",";","while","(","row",">","0",")","{","for","(","int","i","=","start","position",";","i","<","end","position",";","i","+","+",")","{","buffer",".","put","(","(","byte",")","(","pixels","[","i","]","&","0x000000ff",")",")",";","buffer",".","put","(","(","byte",")","(","(","pixels","[","i","]","&","0x0000ff00",")",">",">","8",")",")",";","buffer",".","put","(","(","byte",")","(","(","pixels","[","i","]","&","0x00ff0000",")",">",">","16",")",")",";","}","if","(","has","dummy",")","{","buffer",".","put","(","dummy","bytes","per","row",")",";","}","row","-","-",";","end","position","=","start","position",";","start","position","=","start","position","-","col",";","}","file","output","stream","fos","=","new","file","output","stream","(","file","path",")",";","fos",".","write","(","buffer",".","array","(",")",")",";","fos",".","close","(",")",";","log",".","v","(","\"","android","bmp","util","\"",",","system",".","current","time","millis","(",")","-","start","+","\"","ms","\"",")",";","return","is","save","success",";","}","private","static","byte","[","]","write","int","(","int","value",")","throws","io","exception","{","byte","[","]","b","=","new","byte","[","4","]",";","b","[","0","]","=","(","byte",")","(","value","&","0x000000ff",")",";","b","[","1","]","=","(","byte",")","(","(","value","&","0x0000ff00",")",">",">","8",")",";","b","[","2","]","=","(","byte",")","(","(","value","&","0x00ff0000",")",">",">","16",")",";","b","[","3","]","=","(","byte",")","(","(","value","&","0x","ff000000",")",">",">","24",")",";","return","b",";","}","private","static","byte","[","]","write","short","(","short","value",")","throws","io","exception","{","byte","[","]","b","=","new","byte","[","2","]",";","b","[","0","]","=","(","byte",")","(","value","&","0x00ff",")",";","b","[","1","]","=","(","byte",")","(","(","value","&","0x","ff00",")",">",">","8",")",";","return","b",";","}","public","static","bitmap","fast","blur","(","bitmap","sent","bitmap",",","int","radius",")","{","/","/","todo","faster","!","!","1","/","/","stack","blur","v1",".","0","from","/","/","/","/","/","/","java","author",":","mario","klingemann","<","mario","at","quasimondo",".","com",">","/","/","/","/","created","feburary","29",",","2004","/","/","android","port",":","yahel","bouaziz","<","yahel","at","kayenko",".","com",">","/","/","/","/","ported","april","5th",",","2012","/","/","this","is","a","compromise","between","gaussian","blur","and","box","blur","/","/","it","creates","much","better","looking","blurs","than","box","blur",",","but","is","/","/","7x","faster","than","my","gaussian","blur","implementation",".","/","/","/","/","i","called","it","stack","blur","because","this","describes","best","how","this","/","/","filter","works","internally",":","it","creates","a","kind","of","moving","stack","/","/","of","colors","whilst","scanning","through","the","image",".","thereby","it","/","/","just","has","to","add","one","new","block","of","color","to","the","right","side","/","/","of","the","stack","and","remove","the","leftmost","color",".","the","remaining","/","/","colors","on","the","topmost","layer","of","the","stack","are","either","added","on","/","/","or","reduced","by","one",",","depending","on","if","they","are","on","the","right","or","/","/","on","the","left","side","of","the","stack",".","/","/","/","/","if","you","are","using","this","algorithm","in","your","code","please","add","/","/","the","following","line",":","/","/","/","/","stack","blur","algorithm","by","mario","klingemann","<","mario","@","quasimondo",".","com",">","bitmap","bitmap","=","sent","bitmap",".","copy","(","sent","bitmap",".","get","config","(",")",",","true",")",";","if","(","radius","<","1",")","{","return","bitmap",";","}","try","{","int","w","=","bitmap",".","get","width","(",")",";","int","h","=","bitmap",".","get","height","(",")",";","int","[","]","pix","=","new","int","[","w","*","h","]",";","log",".","e","(","\"","pix","\"",",","w","+","\"","\"","+","h","+","\"","\"","+","pix",".","length",")",";","bitmap",".","get","pixels","(","pix",",","0",",","w",",","0",",","0",",","w",",","h",")",";","int","wm","=","w","-","1",";","int","hm","=","h","-","1",";","int","wh","=","w","*","h",";","int","div","=","radius","+","radius","+","1",";","int","r","[","]","=","new","int","[","wh","]",";","int","g","[","]","=","new","int","[","wh","]",";","int","b","[","]","=","new","int","[","wh","]",";","int","rsum",",","gsum",",","bsum",",","x",",","y",",","i",",","p",",","yp",",","yi",",","yw",";","int","vmin","[","]","=","new","int","[","math",".","max","(","w",",","h",")","]",";","int","divsum","=","(","div","+","1",")",">",">","1",";","divsum","*","=","divsum",";","int","dv","[","]","=","new","int","[","256","*","divsum","]",";","for","(","i","=","0",";","i","<","256","*","divsum",";","i","+","+",")","{","dv","[","i","]","=","(","i","/","divsum",")",";","}","yw","=","yi","=","0",";","int","[","]","[","]","stack","=","new","int","[","div","]","[","3","]",";","int","stackpointer",";","int","stackstart",";","int","[","]","sir",";","int","rbs",";","int","r1","=","radius","+","1",";","int","routsum",",","goutsum",",","boutsum",";","int","rinsum",",","ginsum",",","binsum",";","for","(","y","=","0",";","y","<","h",";","y","+","+",")","{","rinsum","=","ginsum","=","binsum","=","routsum","=","goutsum","=","boutsum","=","rsum","=","gsum","=","bsum","=","0",";","for","(","i","=","-","radius",";","i","<","=","radius",";","i","+","+",")","{","p","=","pix","[","yi","+","math",".","min","(","wm",",","math",".","max","(","i",",","0",")",")","]",";","sir","=","stack","[","i","+","radius","]",";","sir","[","0","]","=","(","p","&","0xff0000",")",">",">","16",";","sir","[","1","]","=","(","p","&","0x00ff00",")",">",">","8",";","sir","[","2","]","=","(","p","&","0x0000ff",")",";","rbs","=","r1","-","math",".","abs","(","i",")",";","rsum","+","=","sir","[","0","]","*","rbs",";","gsum","+","=","sir","[","1","]","*","rbs",";","bsum","+","=","sir","[","2","]","*","rbs",";","if","(","i",">","0",")","{","rinsum","+","=","sir","[","0","]",";","ginsum","+","=","sir","[","1","]",";","binsum","+","=","sir","[","2","]",";","}","else","{","routsum","+","=","sir","[","0","]",";","goutsum","+","=","sir","[","1","]",";","boutsum","+","=","sir","[","2","]",";","}","}","stackpointer","=","radius",";","for","(","x","=","0",";","x","<","w",";","x","+","+",")","{","r","[","yi","]","=","dv","[","rsum","]",";","g","[","yi","]","=","dv","[","gsum","]",";","b","[","yi","]","=","dv","[","bsum","]",";","rsum","-","=","routsum",";","gsum","-","=","goutsum",";","bsum","-","=","boutsum",";","stackstart","=","stackpointer","-","radius","+","div",";","sir","=","stack","[","stackstart","%","div","]",";","routsum","-","=","sir","[","0","]",";","goutsum","-","=","sir","[","1","]",";","boutsum","-","=","sir","[","2","]",";","if","(","y","=","=","0",")","{","vmin","[","x","]","=","math",".","min","(","x","+","radius","+","1",",","wm",")",";","}","p","=","pix","[","yw","+","vmin","[","x","]","]",";","sir","[","0","]","=","(","p","&","0xff0000",")",">",">","16",";","sir","[","1","]","=","(","p","&","0x00ff00",")",">",">","8",";","sir","[","2","]","=","(","p","&","0x0000ff",")",";","rinsum","+","=","sir","[","0","]",";","ginsum","+","=","sir","[","1","]",";","binsum","+","=","sir","[","2","]",";","rsum","+","=","rinsum",";","gsum","+","=","ginsum",";","bsum","+","=","binsum",";","stackpointer","=","(","stackpointer","+","1",")","%","div",";","sir","=","stack","[","(","stackpointer",")","%","div","]",";","routsum","+","=","sir","[","0","]",";","goutsum","+","=","sir","[","1","]",";","boutsum","+","=","sir","[","2","]",";","rinsum","-","=","sir","[","0","]",";","ginsum","-","=","sir","[","1","]",";","binsum","-","=","sir","[","2","]",";","yi","+","+",";","}","yw","+","=","w",";","}","for","(","x","=","0",";","x","<","w",";","x","+","+",")","{","rinsum","=","ginsum","=","binsum","=","routsum","=","goutsum","=","boutsum","=","rsum","=","gsum","=","bsum","=","0",";","yp","=","-","radius","*","w",";","for","(","i","=","-","radius",";","i","<","=","radius",";","i","+","+",")","{","yi","=","math",".","max","(","0",",","yp",")","+","x",";","sir","=","stack","[","i","+","radius","]",";","sir","[","0","]","=","r","[","yi","]",";","sir","[","1","]","=","g","[","yi","]",";","sir","[","2","]","=","b","[","yi","]",";","rbs","=","r1","-","math",".","abs","(","i",")",";","rsum","+","=","r","[","yi","]","*","rbs",";","gsum","+","=","g","[","yi","]","*","rbs",";","bsum","+","=","b","[","yi","]","*","rbs",";","if","(","i",">","0",")","{","rinsum","+","=","sir","[","0","]",";","ginsum","+","=","sir","[","1","]",";","binsum","+","=","sir","[","2","]",";","}","else","{","routsum","+","=","sir","[","0","]",";","goutsum","+","=","sir","[","1","]",";","boutsum","+","=","sir","[","2","]",";","}","if","(","i","<","hm",")","{","yp","+","=","w",";","}","}","yi","=","x",";","stackpointer","=","radius",";","for","(","y","=","0",";","y","<","h",";","y","+","+",")","{","/","/","preserve","alpha","channel",":","(","0xff000000","&","pix","[","yi","]",")","pix","[","yi","]","=","(","0xff000000","&","pix","[","yi","]",")","|","(","dv","[","rsum","]","<","<","16",")","|","(","dv","[","gsum","]","<","<","8",")","|","dv","[","bsum","]",";","rsum","-","=","routsum",";","gsum","-","=","goutsum",";","bsum","-","=","boutsum",";","stackstart","=","stackpointer","-","radius","+","div",";","sir","=","stack","[","stackstart","%","div","]",";","routsum","-","=","sir","[","0","]",";","goutsum","-","=","sir","[","1","]",";","boutsum","-","=","sir","[","2","]",";","if","(","x","=","=","0",")","{","vmin","[","y","]","=","math",".","min","(","y","+","r1",",","hm",")","*","w",";","}","p","=","x","+","vmin","[","y","]",";","sir","[","0","]","=","r","[","p","]",";","sir","[","1","]","=","g","[","p","]",";","sir","[","2","]","=","b","[","p","]",";","rinsum","+","=","sir","[","0","]",";","ginsum","+","=","sir","[","1","]",";","binsum","+","=","sir","[","2","]",";","rsum","+","=","rinsum",";","gsum","+","=","ginsum",";","bsum","+","=","binsum",";","stackpointer","=","(","stackpointer","+","1",")","%","div",";","sir","=","stack","[","stackpointer","]",";","routsum","+","=","sir","[","0","]",";","goutsum","+","=","sir","[","1","]",";","boutsum","+","=","sir","[","2","]",";","rinsum","-","=","sir","[","0","]",";","ginsum","-","=","sir","[","1","]",";","binsum","-","=","sir","[","2","]",";","yi","+","=","w",";","}","}","log",".","e","(","\"","pix","\"",",","w","+","\"","\"","+","h","+","\"","\"","+","pix",".","length",")",";","bitmap",".","set","pixels","(","pix",",","0",",","w",",","0",",","0",",","w",",","h",")",";","}","catch","(","exception","exp",")","{","}","return","(","bitmap",")",";","}","public","static","bitmap","from","bytes","(","byte","[","]","bytes",")","{","return","bitmap","factory",".","decode","byte","array","(","bytes",",","0",",","bytes",".","length",")",";","}","}"],"func_name":"BitmapUtil","func_name_tokens":["bitmap","util"],"docstring":"  Original code by ultrakain  from https://github.com/ultrakain/AndroidBitmapUtil@cf88855b82  With fix by ben75","docstring_tokens":["original","code","by","ultrakain","from","with","fix","by","ben75"],"query":"Android : save a Bitmap to bmp file format","query_tokens":["android",":","save","a","bitmap","to","bmp","file","format"]}
{"query_id":"5445161","repo_name":"yugecin/opsu","zip_link":"/yugecin/opsu/archive/master.zip","code":"\tpublic static String convertStreamToString(InputStream is) {\t\ttry (Scanner s = new Scanner(is)) {\t\t\treturn s.useDelimiter(\"\\\\A\").hasNext() ? s.next() : \"\";\t\t}\t}","code_tokens":["public","static","string","convert","stream","to","string","(","input","stream","is",")","{","try","(","scanner","s","=","new","scanner","(","is",")",")","{","return","s",".","use","delimiter","(","\"","\\","\\a","\"",")",".","has","next","(",")","?","s",".","next","(",")",":","\"","\"",";","}","}"],"func_name":"convertStreamToString","func_name_tokens":["convert","stream","to","string"],"docstring":"\t\t  Converts an input stream to a string.\t  @param is the input stream","docstring_tokens":["converts","an","input","stream","to","a","string","."],"query":"How do I read / convert an InputStream into a String in Java?","query_tokens":["how","do","i","read","/","convert","an","input","stream","into","a","string","in","java","?"]}
{"query_id":"5498865","repo_name":"sibbi77/openhab","zip_link":"/sibbi77/openhab/archive/master.zip","code":"    private class SizeLimitedQueue<E> extends LinkedList<E> {        private int limit;        public SizeLimitedQueue(int limit) {            this.limit = limit;        }        @Override        public boolean add(E o) {            super.add(o);            while (size() > limit) {                super.remove();            }            return true;        }    }","code_tokens":["private","class","size","limited","queue","<","e",">","extends","linked","list","<","e",">","{","private","int","limit",";","public","size","limited","queue","(","int","limit",")","{","this",".","limit","=","limit",";","}","@","override","public","boolean","add","(","e","o",")","{","super",".","add","(","o",")",";","while","(","size","(",")",">","limit",")","{","super",".","remove","(",")",";","}","return","true",";","}","}"],"func_name":"SizeLimitedQueue","func_name_tokens":["size","limited","queue"],"docstring":"          To ease nonce error condition tracking, we keep nonce values after they expire or are used.      Limit the number we keep to avoid a memory leak                @author Dave Badia","docstring_tokens":["to","ease","nonce","error","condition","tracking",",","we","keep","nonce","values","after","they","expire","or","are","used",".","limit","the","number","we","keep","to","avoid","a","memory","leak"],"query":"Size-limited queue that holds last N elements in Java","query_tokens":["size","-","limited","queue","that","holds","last","n","elements","in","java"]}
{"query_id":"26318757","repo_name":"Tombarr/Noyze","zip_link":"/Tombarr/Noyze/archive/master.zip","code":"    public static Intent createExplicitFromImplicitIntent(Context context, Intent implicitIntent) {        // Retrieve all services that can match the given intent        PackageManager pm = context.getPackageManager();        List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0);        // Make sure only one match was found        if (resolveInfo == null || resolveInfo.size() != 1) {            return null;        }        // Get component info and create ComponentName        ResolveInfo serviceInfo = resolveInfo.get(0);        String packageName = serviceInfo.serviceInfo.packageName;        String className = serviceInfo.serviceInfo.name;        ComponentName component = new ComponentName(packageName, className);        // Create a new intent. Use the old one for extras and such reuse        Intent explicitIntent = new Intent(implicitIntent);        // Set the component to be explicit        explicitIntent.setComponent(component);        return explicitIntent;    }","code_tokens":["public","static","intent","create","explicit","from","implicit","intent","(","context","context",",","intent","implicit","intent",")","{","/","/","retrieve","all","services","that","can","match","the","given","intent","package","manager","pm","=","context",".","get","package","manager","(",")",";","list","<","resolve","info",">","resolve","info","=","pm",".","query","intent","services","(","implicit","intent",",","0",")",";","/","/","make","sure","only","one","match","was","found","if","(","resolve","info","=","=","null","|","|","resolve","info",".","size","(",")","!","=","1",")","{","return","null",";","}","/","/","get","component","info","and","create","component","name","resolve","info","service","info","=","resolve","info",".","get","(","0",")",";","string","package","name","=","service","info",".","service","info",".","package","name",";","string","class","name","=","service","info",".","service","info",".","name",";","component","name","component","=","new","component","name","(","package","name",",","class","name",")",";","/","/","create","a","new","intent",".","use","the","old","one","for","extras","and","such","reuse","intent","explicit","intent","=","new","intent","(","implicit","intent",")",";","/","/","set","the","component","to","be","explicit","explicit","intent",".","set","component","(","component",")",";","return","explicit","intent",";","}"],"func_name":"createExplicitFromImplicitIntent","func_name_tokens":["create","explicit","from","implicit","intent"],"docstring":"          Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,      \"java.lang.IllegalArgumentException: Service Intent must be explicit\"           If you are using an implicit intent, and know only 1 target would answer this intent,      This method will help you turn the implicit intent into the explicit form.           @param context      @param implicitIntent - The original implicit intent      @return Explicit Intent created from the implicit original intent","docstring_tokens":["android","l","(","lollipop",",","api","21",")","introduced","a","new","problem","when","trying","to","invoke","implicit","intent",",","\"","java",".","lang",".","illegal","argument","exception",":","service","intent","must","be","explicit","\"","if","you","are","using","an","implicit","intent",",","and","know","only","1","target","would","answer","this","intent",",","this","method","will","help","you","turn","the","implicit","intent","into","the","explicit","form","."],"query":"Google In-App billing, IllegalArgumentException: Service Intent must be explicit, after upgrading to Android L Dev Preview","query_tokens":["google","in","-","app","billing",",","illegal","argument","exception",":","service","intent","must","be","explicit",",","after","upgrading","to","android","l","dev","preview"]}
{"query_id":"20087804","repo_name":"icodechef/Tick","zip_link":"/icodechef/Tick/archive/master.zip","code":"public class Sound {\r    private Context mContext;\r    private MediaPlayer mMediaPlayer;\r    private MediaPlayer mNextPlayer;\r\r    private OnCompletionListener mOnCompletionListener = new OnCompletionListener() {\r        @Override\r        public void onCompletion(MediaPlayer mediaPlayer) {\r            mediaPlayer.stop();\r            mediaPlayer.release();\r            mMediaPlayer = mNextPlayer;\r            setNextMediaPlayer();\r        }\r    };\r\r    public Sound(Context context) {\r        mContext = context;\r        build();\r    }\r\r    /**\r     * setLooping(true) 虽然能循环播放，但不能做到无缝播放处理，会出现短暂的暂停\r     * 这里采用 setNextMediaPlayer 来解决这问题\r     *\r     * @link https://stackoverflow.com/questions/13409657/how-to-loop-a-sound-without-gaps-in-android\r     * @link https://developer.android.com/reference/android/media/MediaPlayer.html#setNextMediaPlayer(android.media.MediaPlayer)\r     */\r    private void build() {\r        mMediaPlayer = MediaPlayer.create(mContext, R.raw.ticking);\r        setNextMediaPlayer();\r    }\r\r    private void setNextMediaPlayer() {\r        mNextPlayer = MediaPlayer.create(mContext, R.raw.ticking);\r        mMediaPlayer.setNextMediaPlayer(mNextPlayer);\r        mMediaPlayer.setOnCompletionListener(mOnCompletionListener);\r    }\r\r    public void play() {\r        if (isSoundOn()) {\r            if (!mMediaPlayer.isPlaying()) {\r                mMediaPlayer.start();\r            }\r        }\r    }\r\r    public void pause() {\r        if (mMediaPlayer.isPlaying()) {\r            mMediaPlayer.pause();\r        }\r    }\r\r    public void resume() {\r        if (isSoundOn()) {\r            if (!mMediaPlayer.isPlaying()) {\r                mMediaPlayer.start();\r            }\r        }\r    }\r\r    /**\r     * 不要调用 MediaPlayer.stop 停止播放音频，调用这个方法后的 MediaPlayer 对象无法再播放音频\r     */\r    public void stop() {\r        if (mMediaPlayer.isPlaying()) {\r            release();\r            build();\r        }\r    }\r\r    public void release() {\r        if (mMediaPlayer != null) {\r            mMediaPlayer.stop();\r            mMediaPlayer.release();\r            mMediaPlayer = null;\r\r            mNextPlayer.stop();\r            mNextPlayer.release();\r            mNextPlayer = null;\r        }\r    }\r\r    private boolean isSoundOn() {\r        return PreferenceManager.getDefaultSharedPreferences(mContext)\r                .getBoolean(\"pref_key_tick_sound\", true);\r    }\r}\r","code_tokens":["public","class","sound","{","private","context","m","context",";","private","media","player","m","media","player",";","private","media","player","m","next","player",";","private","on","completion","listener","m","on","completion","listener","=","new","on","completion","listener","(",")","{","@","override","public","void","on","completion","(","media","player","media","player",")","{","media","player",".","stop","(",")",";","media","player",".","release","(",")",";","m","media","player","=","m","next","player",";","set","next","media","player","(",")",";","}","}",";","public","sound","(","context","context",")","{","m","context","=","context",";","build","(",")",";","}","private","void","build","(",")","{","m","media","player","=","media","player",".","create","(","m","context",",","r",".","raw",".","ticking",")",";","set","next","media","player","(",")",";","}","private","void","set","next","media","player","(",")","{","m","next","player","=","media","player",".","create","(","m","context",",","r",".","raw",".","ticking",")",";","m","media","player",".","set","next","media","player","(","m","next","player",")",";","m","media","player",".","set","on","completion","listener","(","m","on","completion","listener",")",";","}","public","void","play","(",")","{","if","(","is","sound","on","(",")",")","{","if","(","!","m","media","player",".","is","playing","(",")",")","{","m","media","player",".","start","(",")",";","}","}","}","public","void","pause","(",")","{","if","(","m","media","player",".","is","playing","(",")",")","{","m","media","player",".","pause","(",")",";","}","}","public","void","resume","(",")","{","if","(","is","sound","on","(",")",")","{","if","(","!","m","media","player",".","is","playing","(",")",")","{","m","media","player",".","start","(",")",";","}","}","}","public","void","stop","(",")","{","if","(","m","media","player",".","is","playing","(",")",")","{","release","(",")",";","build","(",")",";","}","}","public","void","release","(",")","{","if","(","m","media","player","!","=","null",")","{","m","media","player",".","stop","(",")",";","m","media","player",".","release","(",")",";","m","media","player","=","null",";","m","next","player",".","stop","(",")",";","m","next","player",".","release","(",")",";","m","next","player","=","null",";","}","}","private","boolean","is","sound","on","(",")","{","return","preference","manager",".","get","default","shared","preferences","(","m","context",")",".","get","boolean","(","\"","pref","key","tick","sound","\"",",","true",")",";","}","}"],"func_name":"Sound","func_name_tokens":["sound"],"docstring":"\r  4.4 出现 MediaPlayer: Should have subtitle controller already set 错误\r  Don't care about this \"Exception\".\r \r","docstring_tokens":["4",".","4","media","player",":","should","have","subtitle","controller","already","set","don","'","t","care","about","this","\"","exception","\"","."],"query":"Should have subtitle controller already set Mediaplayer error Android","query_tokens":["should","have","subtitle","controller","already","set","mediaplayer","error","android"]}
{"query_id":"11916946","repo_name":"ffays/eu.fays.sandbox","zip_link":"/ffays/eu.fays.sandbox/archive/master.zip","code":"public class PermutationIterator implements Iterator<int[]> {\r\tprivate int[] _next = null;\r\r\tprivate final int _n;\r\tprivate int[] _perm;\r\tprivate int[] _dirs;\r\r\t/**\r\t * Constructor\r\t * @param size number of elements\r\t */\r\tpublic PermutationIterator(int size) {\r\t\t_n = size;\r\t\tif (_n <= 0) {\r\t\t\t_perm = (_dirs = null);\r\t\t} else {\r\t\t\t_perm = new int[_n];\r\t\t\t_dirs = new int[_n];\r\t\t\tfor (int i = 0; i < _n; i++) {\r\t\t\t\t_perm[i] = i;\r\t\t\t\t_dirs[i] = -1;\r\t\t\t}\r\t\t\t_dirs[0] = 0;\r\t\t}\r\r\t\t_next = _perm;\r\t}\r\r\t/**\r\t * @see java.util.Iterator#next()\r\t */\r\t@Override\r\tpublic int[] next() {\r\t\tint[] r = makeNext();\r\t\t_next = null;\r\t\treturn r;\r\t}\r\r\t/**\r\t * @see java.util.Iterator#hasNext()\r\t */\r\t@Override\r\tpublic boolean hasNext() {\r\t\treturn (makeNext() != null);\r\t}\r\r\t/**\r\t * @see java.util.Iterator#remove()\r\t */\r\t@Override\r\tpublic void remove() {\r\t\tthrow new UnsupportedOperationException();\r\t}\r\r\t/**\r\t * Converts this iterator into a stream\r\t * @param parallel if {@code true} then the returned stream is a parallel stream; if {@code false} the returned stream is a sequential stream.\r\t * @return the stream\r\t */\r\tpublic Stream<int[]> permutationStream(final boolean parallel) {\r\t\treturn StreamSupport.stream(Spliterators.spliteratorUnknownSize(this, Spliterator.ORDERED), parallel);\r\t}\r\r\t/**\r\t * Factory method : provides a new stream of permutations\r\t * @param size number of elements\r\t * @param parallel if {@code true} then the returned stream is a parallel stream; if {@code false} the returned stream is a sequential stream.\r\t * @return the new stream\r\t */\r\tpublic static Stream<int[]> permutationStream(final int size, final boolean parallel) {\r\t\treturn StreamSupport.stream(Spliterators.spliteratorUnknownSize(new PermutationIterator(size), Spliterator.ORDERED), parallel);\r\t}\r\r\t/**\r\t * @return next permutation\r\t */\r\tprivate int[] makeNext() {\r\t\tif (_next != null)\r\t\t\treturn _next;\r\t\tif (_perm == null)\r\t\t\treturn null;\r\r\t\t// find the largest element with != 0 direction\r\t\tint i = -1, e = -1;\r\t\tfor (int j = 0; j < _n; j++)\r\t\t\tif ((_dirs[j] != 0) && (_perm[j] > e)) {\r\t\t\t\te = _perm[j];\r\t\t\t\ti = j;\r\t\t\t}\r\r\t\tif (i == -1) // no such element -> no more premutations\r\t\t\treturn (_next = (_perm = (_dirs = null))); // no more permutations\r\r\t\t// swap with the element in its direction\r\t\tint k = i + _dirs[i];\r\t\tswap(i, k, _dirs);\r\t\tswap(i, k, _perm);\r\t\t// if it's at the start/end or the next element in the direction\r\t\t// is greater, reset its direction.\r\t\tif ((k == 0) || (k == _n - 1) || (_perm[k + _dirs[k]] > e))\r\t\t\t_dirs[k] = 0;\r\r\t\t// set directions to all greater elements\r\t\tfor (int j = 0; j < _n; j++)\r\t\t\tif (_perm[j] > e)\r\t\t\t\t_dirs[j] = (j < k) ? +1 : -1;\r\r\t\treturn (_next = _perm);\r\t}\r\r\t/**\r\t * Swaps two elements\r\t * @param i first index\r\t * @param j second index;\r\t * @param arr the array holding the elements\r\t */\r\tprotected static void swap(int i, int j, int[] arr) {\r\t\tint v = arr[i];\r\t\tarr[i] = arr[j];\r\t\tarr[j] = v;\r\t}\r\r\t/**\r\t * Main\r\t * @param argv only first argument will be used\r\t */\r\tpublic static void main(String argv[]) {\r\t\tString s = argv[0];\r\t\tfor (Iterator<int[]> it = new PermutationIterator(s.length()); it.hasNext();) {\r\t\t\tfinal int[] perm = it.next();\r\t\t\tfinal StringBuilder builder = new StringBuilder(s.length());\r\t\t\tfor (int j = 0; j < perm.length; j++) {\r\t\t\t\tbuilder.append(s.charAt(perm[j]));\r\t\t\t\tLOGGER.info(builder.toString());\r\t\t\t}\r\t\t}\r\t}\r\r\t/** Standard logger */\r\tprivate static final Logger LOGGER = Logger.getLogger(PermutationIterator.class.getName());\r}","code_tokens":["public","class","permutation","iterator","implements","iterator","<","int","[","]",">","{","private","int","[","]","next","=","null",";","private","final","int","n",";","private","int","[","]","perm",";","private","int","[","]","dirs",";","public","permutation","iterator","(","int","size",")","{","n","=","size",";","if","(","n","<","=","0",")","{","perm","=","(","dirs","=","null",")",";","}","else","{","perm","=","new","int","[","n","]",";","dirs","=","new","int","[","n","]",";","for","(","int","i","=","0",";","i","<","n",";","i","+","+",")","{","perm","[","i","]","=","i",";","dirs","[","i","]","=","-","1",";","}","dirs","[","0","]","=","0",";","}","next","=","perm",";","}","@","override","public","int","[","]","next","(",")","{","int","[","]","r","=","make","next","(",")",";","next","=","null",";","return","r",";","}","@","override","public","boolean","has","next","(",")","{","return","(","make","next","(",")","!","=","null",")",";","}","@","override","public","void","remove","(",")","{","throw","new","unsupported","operation","exception","(",")",";","}","public","stream","<","int","[","]",">","permutation","stream","(","final","boolean","parallel",")","{","return","stream","support",".","stream","(","spliterators",".","spliterator","unknown","size","(","this",",","spliterator",".","ordered",")",",","parallel",")",";","}","public","static","stream","<","int","[","]",">","permutation","stream","(","final","int","size",",","final","boolean","parallel",")","{","return","stream","support",".","stream","(","spliterators",".","spliterator","unknown","size","(","new","permutation","iterator","(","size",")",",","spliterator",".","ordered",")",",","parallel",")",";","}","private","int","[","]","make","next","(",")","{","if","(","next","!","=","null",")","return","next",";","if","(","perm","=","=","null",")","return","null",";","/","/","find","the","largest","element","with","!","=","0","direction","int","i","=","-","1",",","e","=","-","1",";","for","(","int","j","=","0",";","j","<","n",";","j","+","+",")","if","(","(","dirs","[","j","]","!","=","0",")","&","&","(","perm","[","j","]",">","e",")",")","{","e","=","perm","[","j","]",";","i","=","j",";","}","if","(","i","=","=","-","1",")","/","/","no","such","element","-",">","no","more","premutations","return","(","next","=","(","perm","=","(","dirs","=","null",")",")",")",";","/","/","no","more","permutations","/","/","swap","with","the","element","in","its","direction","int","k","=","i","+","dirs","[","i","]",";","swap","(","i",",","k",",","dirs",")",";","swap","(","i",",","k",",","perm",")",";","/","/","if","it","'","s","at","the","start","/","end","or","the","next","element","in","the","direction","/","/","is","greater",",","reset","its","direction",".","if","(","(","k","=","=","0",")","|","|","(","k","=","=","n","-","1",")","|","|","(","perm","[","k","+","dirs","[","k","]","]",">","e",")",")","dirs","[","k","]","=","0",";","/","/","set","directions","to","all","greater","elements","for","(","int","j","=","0",";","j","<","n",";","j","+","+",")","if","(","perm","[","j","]",">","e",")","dirs","[","j","]","=","(","j","<","k",")","?","+","1",":","-","1",";","return","(","next","=","perm",")",";","}","protected","static","void","swap","(","int","i",",","int","j",",","int","[","]","arr",")","{","int","v","=","arr","[","i","]",";","arr","[","i","]","=","arr","[","j","]",";","arr","[","j","]","=","v",";","}","public","static","void","main","(","string","argv","[","]",")","{","string","s","=","argv","[","0","]",";","for","(","iterator","<","int","[","]",">","it","=","new","permutation","iterator","(","s",".","length","(",")",")",";","it",".","has","next","(",")",";",")","{","final","int","[","]","perm","=","it",".","next","(",")",";","final","string","builder","builder","=","new","string","builder","(","s",".","length","(",")",")",";","for","(","int","j","=","0",";","j","<","perm",".","length",";","j","+","+",")","{","builder",".","append","(","s",".","char","at","(","perm","[","j","]",")",")",";","logger",".","info","(","builder",".","to","string","(",")",")",";","}","}","}","private","static","final","logger","logger","=","logger",".","get","logger","(","permutation","iterator",".","class",".","get","name","(",")",")",";","}"],"func_name":"PermutationIterator","func_name_tokens":["permutation","iterator"],"docstring":"\r  Sources:<br>\r  <ul>\r  <li><a href=\"https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm#Even.27s_speedup\">Steinhaus-Johnson-Trotter algorithm</a>\r  </ul>\r  <strong>Strong advice</strong>: do not use this class! It is far more wise to rely on a well-tested library such as <a href=\"http://commons.apache.org/proper/commons-math/\">The Apache Commons Mathematics Library</a>, and to use the class\r  <a href=\"http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/CombinatoricsUtils.html\">CombinatoricsUtils</a>\r","docstring_tokens":["sources",":","<","br",">","<","ul",">","<","li",">","<","a","href","=","\"","\"",">","steinhaus","-","johnson","-","trotter","algorithm","<","/","a",">","<","/","ul",">","<","strong",">","strong","advice","<","/","strong",">",":","do","not","use","this","class","!","it","is","far","more","wise","to","rely","on","a","well","-","tested","library","such","as","<","a","href","=","\"","\"",">","the","apache","commons","mathematics","library","<","/","a",">",",","and","to","use","the","class","<","a","href","=","\"","\"",">","combinatorics","utils","<","/","a",">"],"query":"Stepping through all permutations one swap at a time","query_tokens":["stepping","through","all","permutations","one","swap","at","a","time"]}
{"query_id":"785973","repo_name":"jianlinwei/cryptonite","zip_link":"/jianlinwei/cryptonite/archive/master.zip","code":"    public static String encrypt(String value, Context context) throws RuntimeException {        try {            final byte[] bytes = value!=null ? value.getBytes(\"utf-8\") : new byte[0];            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(jniFullPw().toCharArray()));            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");            pbeCipher.init(Cipher.ENCRYPT_MODE, key,                    new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),                            Settings.Secure.ANDROID_ID).getBytes(\"utf-8\"), 20));            return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP), \"utf-8\");        } catch( Exception e ) {            throw new RuntimeException(e);        }    }","code_tokens":["public","static","string","encrypt","(","string","value",",","context","context",")","throws","runtime","exception","{","try","{","final","byte","[","]","bytes","=","value","!","=","null","?","value",".","get","bytes","(","\"","utf","-","8","\"",")",":","new","byte","[","0","]",";","secret","key","factory","key","factory","=","secret","key","factory",".","get","instance","(","\"","pbe","with","md5and","des","\"",")",";","secret","key","key","=","key","factory",".","generate","secret","(","new","pbe","key","spec","(","jni","full","pw","(",")",".","to","char","array","(",")",")",")",";","cipher","pbe","cipher","=","cipher",".","get","instance","(","\"","pbe","with","md5and","des","\"",")",";","pbe","cipher",".","init","(","cipher",".","encrypt","mode",",","key",",","new","pbe","parameter","spec","(","settings",".","secure",".","get","string","(","context",".","get","content","resolver","(",")",",","settings",".","secure",".","android","id",")",".","get","bytes","(","\"","utf","-","8","\"",")",",","20",")",")",";","return","new","string","(","base64",".","encode","(","pbe","cipher",".","do","final","(","bytes",")",",","base64",".","no","wrap",")",",","\"","utf","-","8","\"",")",";","}","catch","(","exception","e",")","{","throw","new","runtime","exception","(","e",")",";","}","}"],"func_name":"encrypt","func_name_tokens":["encrypt"],"docstring":"    / With some modifications from:      Michael Burton (http://stackoverflow.com/users/82156/emmby)","docstring_tokens":["/","with","some","modifications","from",":","michael","burton","(",")"],"query":"What is the most appropriate way to store user settings in Android application","query_tokens":["what","is","the","most","appropriate","way","to","store","user","settings","in","android","application"]}
{"query_id":"14561345","repo_name":"TomeOkin/LsPush","zip_link":"/TomeOkin/LsPush/archive/master.zip","code":"        private class ZanyInputConnection extends InputConnectionWrapper {            public ZanyInputConnection(android.view.inputmethod.InputConnection target, boolean mutable) {                super(target, mutable);            }            @Override            public boolean deleteSurroundingText(int beforeLength, int afterLength) {                // magic: in latest Android, deleteSurroundingText(1, 0) will be called for backspace                if (beforeLength == 1 && afterLength == 0) {                    // backspace                    return sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL)) && sendKeyEvent(                        new KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_DEL));                }                return super.deleteSurroundingText(beforeLength, afterLength);            }        }","code_tokens":["private","class","zany","input","connection","extends","input","connection","wrapper","{","public","zany","input","connection","(","android",".","view",".","inputmethod",".","input","connection","target",",","boolean","mutable",")","{","super","(","target",",","mutable",")",";","}","@","override","public","boolean","delete","surrounding","text","(","int","before","length",",","int","after","length",")","{","/","/","magic",":","in","latest","android",",","delete","surrounding","text","(","1",",","0",")","will","be","called","for","backspace","if","(","before","length","=","=","1","&","&","after","length","=","=","0",")","{","/","/","backspace","return","send","key","event","(","new","key","event","(","key","event",".","action","down",",","key","event",".","keycode","del",")",")","&","&","send","key","event","(","new","key","event","(","key","event",".","action","up",",","key","event",".","keycode","del",")",")",";","}","return","super",".","delete","surrounding","text","(","before","length",",","after","length",")",";","}","}"],"func_name":"ZanyInputConnection","func_name_tokens":["zany","input","connection"],"docstring":"                  Android: Backspace in WebView/BaseInputConnection</a>","docstring_tokens":["android",":","backspace","in","web","view","/","base","input","connection","<","/","a",">"],"query":"Android: Backspace in WebView/BaseInputConnection","query_tokens":["android",":","backspace","in","web","view","/","base","input","connection"]}
{"query_id":"481836","repo_name":"mayukuntian/stanford-ner","zip_link":"/fnet-coling/stanford-ner/archive/master.zip","code":"  public static <T extends Comparable<? super T>> int nullSafeComparator(final T one, final T two) {    if (one == null ^ two == null) {      return (one == null) ? -1 : 1;    }    if (one == null && two == null) {      return 0;    }    return one.compareTo(two);  }","code_tokens":["public","static","<","t","extends","comparable","<","?","super","t",">",">","int","null","safe","comparator","(","final","t","one",",","final","t","two",")","{","if","(","one","=","=","null","^","two","=","=","null",")","{","return","(","one","=","=","null",")","?","-","1",":","1",";","}","if","(","one","=","=","null","&","&","two","=","=","null",")","{","return","0",";","}","return","one",".","compare","to","(","two",")",";","}"],"func_name":"nullSafeComparator","func_name_tokens":["null","safe","comparator"],"docstring":"      Returns a consistent ordering over two elements even if one of them is null    (as long as compareTo() is stable, of course).    ","docstring_tokens":["returns","a","consistent","ordering","over","two","elements","even","if","one","of","them","is","null","(","as","long","as","compare","to","(",")","is","stable",",","of","course",")","."],"query":"How to simplify a null-safe compareTo() implementation?","query_tokens":["how","to","simplify","a","null","-","safe","compare","to","(",")","implementation","?"]}
{"query_id":"28788616","repo_name":"itdelatrisu/opsu","zip_link":"/itdelatrisu/opsu/archive/master.zip","code":"public class OsuReader {\t/** Input stream reader. */\tprivate DataInputStream reader;\t/**\t * Constructor.\t * @param file the file to read from\t * @throws IOException\t */\tpublic OsuReader(File file) throws IOException {\t\tthis(new FileInputStream(file));\t}\t/**\t * Constructor.\t * @param source the input stream to read from\t */\tpublic OsuReader(InputStream source) {\t\tthis.reader = new DataInputStream(new BufferedInputStream(source));\t}\t/**\t * Returns the input stream in use.\t */\tpublic InputStream getInputStream() { return reader; }\t/**\t * Closes the input stream.\t * @throws IOException if an I/O error occurs\t */\tpublic void close() throws IOException { reader.close(); }\t/**\t * Reads a 1-byte value.\t */\tpublic byte readByte() throws IOException {\t\treturn this.reader.readByte();\t}\t/**\t * Reads a 2-byte little endian value.\t */\tpublic short readShort() throws IOException {\t\tbyte[] bytes = new byte[2];\t\tthis.reader.readFully(bytes);\t\tByteBuffer bb = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\t\treturn bb.getShort();\t}\t/**\t * Reads a 4-byte little endian value.\t */\tpublic int readInt() throws IOException {\t\tbyte[] bytes = new byte[4];\t\tthis.reader.readFully(bytes);\t\tByteBuffer bb = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\t\treturn bb.getInt();\t}\t/**\t * Reads an 8-byte little endian value.\t */\tpublic long readLong() throws IOException {\t\tbyte[] bytes = new byte[8];\t\tthis.reader.readFully(bytes);\t\tByteBuffer bb = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\t\treturn bb.getLong();\t}\t/**\t * Reads a 4-byte little endian float.\t */\tpublic float readSingle() throws IOException {\t\tbyte[] bytes = new byte[4];\t\tthis.reader.readFully(bytes);\t\tByteBuffer bb = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\t\treturn bb.getFloat();\t}\t/**\t * Reads an 8-byte little endian double.\t */\tpublic double readDouble() throws IOException {\t\tbyte[] bytes = new byte[8];\t\tthis.reader.readFully(bytes);\t\tByteBuffer bb = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\t\treturn bb.getDouble();\t}\t/**\t * Reads a 1-byte value as a boolean.\t */\tpublic boolean readBoolean() throws IOException {\t\treturn this.reader.readBoolean();\t}\t/**\t * Reads an unsigned variable length integer (ULEB128).\t */\tpublic int readULEB128() throws IOException {\t\tint value = 0;\t\tfor (int shift = 0; shift < 32; shift += 7) {\t\t\tbyte b = this.reader.readByte();\t\t\tvalue |= (b & 0x7F) << shift;\t\t\tif (b >= 0)\t\t\t\treturn value;  // MSB is zero. End of value.\t\t}\t\tthrow new IOException(\"ULEB128 too large\");\t}\t/**\t * Reads a variable-length string of 1-byte characters.\t */\tpublic String readString() throws IOException {\t\t// 00 = empty string\t\t// 0B <length> <char>* = normal string\t\t// <length> is encoded as an LEB, and is the byte length of the rest.\t\t// <char>* is encoded as UTF8, and is the string content.\t\tbyte kind = this.reader.readByte();\t\tif (kind == 0)\t\t\treturn \"\";\t\tif (kind != 0x0B)\t\t\tthrow new IOException(String.format(\"String format error: Expected 0x0B or 0x00, found 0x%02X\", kind & 0xFF));\t\tint length = readULEB128();\t\tif (length == 0)\t\t\treturn \"\";\t\tbyte[] utf8bytes = new byte[length];\t\tthis.reader.readFully(utf8bytes);\t\treturn new String(utf8bytes, \"UTF-8\");\t}\t/**\t * Reads an 8-byte date in Windows ticks.\t */\tpublic Date readDate() throws IOException {\t\tlong ticks = readLong();\t\tfinal long TICKS_AT_EPOCH = 621355968000000000L;\t\tfinal long TICKS_PER_MILLISECOND = 10000;\t\treturn new Date((ticks - TICKS_AT_EPOCH) / TICKS_PER_MILLISECOND);\t}}","code_tokens":["public","class","osu","reader","{","private","data","input","stream","reader",";","public","osu","reader","(","file","file",")","throws","io","exception","{","this","(","new","file","input","stream","(","file",")",")",";","}","public","osu","reader","(","input","stream","source",")","{","this",".","reader","=","new","data","input","stream","(","new","buffered","input","stream","(","source",")",")",";","}","public","input","stream","get","input","stream","(",")","{","return","reader",";","}","public","void","close","(",")","throws","io","exception","{","reader",".","close","(",")",";","}","public","byte","read","byte","(",")","throws","io","exception","{","return","this",".","reader",".","read","byte","(",")",";","}","public","short","read","short","(",")","throws","io","exception","{","byte","[","]","bytes","=","new","byte","[","2","]",";","this",".","reader",".","read","fully","(","bytes",")",";","byte","buffer","bb","=","byte","buffer",".","wrap","(","bytes",")",".","order","(","byte","order",".","little","endian",")",";","return","bb",".","get","short","(",")",";","}","public","int","read","int","(",")","throws","io","exception","{","byte","[","]","bytes","=","new","byte","[","4","]",";","this",".","reader",".","read","fully","(","bytes",")",";","byte","buffer","bb","=","byte","buffer",".","wrap","(","bytes",")",".","order","(","byte","order",".","little","endian",")",";","return","bb",".","get","int","(",")",";","}","public","long","read","long","(",")","throws","io","exception","{","byte","[","]","bytes","=","new","byte","[","8","]",";","this",".","reader",".","read","fully","(","bytes",")",";","byte","buffer","bb","=","byte","buffer",".","wrap","(","bytes",")",".","order","(","byte","order",".","little","endian",")",";","return","bb",".","get","long","(",")",";","}","public","float","read","single","(",")","throws","io","exception","{","byte","[","]","bytes","=","new","byte","[","4","]",";","this",".","reader",".","read","fully","(","bytes",")",";","byte","buffer","bb","=","byte","buffer",".","wrap","(","bytes",")",".","order","(","byte","order",".","little","endian",")",";","return","bb",".","get","float","(",")",";","}","public","double","read","double","(",")","throws","io","exception","{","byte","[","]","bytes","=","new","byte","[","8","]",";","this",".","reader",".","read","fully","(","bytes",")",";","byte","buffer","bb","=","byte","buffer",".","wrap","(","bytes",")",".","order","(","byte","order",".","little","endian",")",";","return","bb",".","get","double","(",")",";","}","public","boolean","read","boolean","(",")","throws","io","exception","{","return","this",".","reader",".","read","boolean","(",")",";","}","public","int","read","uleb128","(",")","throws","io","exception","{","int","value","=","0",";","for","(","int","shift","=","0",";","shift","<","32",";","shift","+","=","7",")","{","byte","b","=","this",".","reader",".","read","byte","(",")",";","value","|","=","(","b","&","0x7f",")","<","<","shift",";","if","(","b",">","=","0",")","return","value",";","/","/","msb","is","zero",".","end","of","value",".","}","throw","new","io","exception","(","\"","uleb128","too","large","\"",")",";","}","public","string","read","string","(",")","throws","io","exception","{","/","/","00","=","empty","string","/","/","0b","<","length",">","<","char",">","*","=","normal","string","/","/","<","length",">","is","encoded","as","an","leb",",","and","is","the","byte","length","of","the","rest",".","/","/","<","char",">","*","is","encoded","as","utf8",",","and","is","the","string","content",".","byte","kind","=","this",".","reader",".","read","byte","(",")",";","if","(","kind","=","=","0",")","return","\"","\"",";","if","(","kind","!","=","0x0b",")","throw","new","io","exception","(","string",".","format","(","\"","string","format","error",":","expected","0x0b","or","0x00",",","found","0x","%","02x","\"",",","kind","&","0x","ff",")",")",";","int","length","=","read","uleb128","(",")",";","if","(","length","=","=","0",")","return","\"","\"",";","byte","[","]","utf8bytes","=","new","byte","[","length","]",";","this",".","reader",".","read","fully","(","utf8bytes",")",";","return","new","string","(","utf8bytes",",","\"","utf","-","8","\"",")",";","}","public","date","read","date","(",")","throws","io","exception","{","long","ticks","=","read","long","(",")",";","final","long","ticks","at","epoch","=","621355968000000000l",";","final","long","ticks","per","millisecond","=","10000",";","return","new","date","(","(","ticks","-","ticks","at","epoch",")","/","ticks","per","millisecond",")",";","}","}"],"func_name":"OsuReader","func_name_tokens":["osu","reader"],"docstring":"  Reader for osu! file types. ","docstring_tokens":["reader","for","osu","!","file","types","."],"query":"Parse the osu! binary database in Java","query_tokens":["parse","the","osu","!","binary","database","in","java"]}
{"query_id":"2011929","repo_name":"ychaim/sparkbit","zip_link":"/ychaim/sparkbit/archive/master.zip","code":"public class LoggerStartupListener extends ContextAwareBase implements LoggerContextListener, LifeCycle {    private static final String JSONRPC_LOG_FILENAME_PROPERTY = \"jsonrpc_server_log_file\";    private static final String JSONRPC_LOG_FILENAME = \"jsonrpc.log\";    private boolean started = false;    @Override    public void start() {        if (started) return;\tApplicationDataDirectoryLocator applicationDataDirectoryLocator = new ApplicationDataDirectoryLocator();\tString filename = applicationDataDirectoryLocator.getApplicationDataDirectory() + File.separator                        + SparkBitInExecutableJar.OUTPUT_DIRECTORY + File.separator + JSONRPC_LOG_FILENAME;        Context context = getContext();        context.putProperty(JSONRPC_LOG_FILENAME_PROPERTY, filename);        started = true;    }    @Override    public void stop() {    }    @Override    public boolean isStarted() {        return started;    }    @Override    public boolean isResetResistant() {        return true;    }    @Override    public void onStart(LoggerContext context) {    }    @Override    public void onReset(LoggerContext context) {    }    @Override    public void onStop(LoggerContext context) {    }    @Override    public void onLevelChange(Logger logger, Level level) {    }    }","code_tokens":["public","class","logger","startup","listener","extends","context","aware","base","implements","logger","context","listener",",","life","cycle","{","private","static","final","string","jsonrpc","log","filename","property","=","\"","jsonrpc","server","log","file","\"",";","private","static","final","string","jsonrpc","log","filename","=","\"","jsonrpc",".","log","\"",";","private","boolean","started","=","false",";","@","override","public","void","start","(",")","{","if","(","started",")","return",";","application","data","directory","locator","application","data","directory","locator","=","new","application","data","directory","locator","(",")",";","string","filename","=","application","data","directory","locator",".","get","application","data","directory","(",")","+","file",".","separator","+","spark","bit","in","executable","jar",".","output","directory","+","file",".","separator","+","jsonrpc","log","filename",";","context","context","=","get","context","(",")",";","context",".","put","property","(","jsonrpc","log","filename","property",",","filename",")",";","started","=","true",";","}","@","override","public","void","stop","(",")","{","}","@","override","public","boolean","is","started","(",")","{","return","started",";","}","@","override","public","boolean","is","reset","resistant","(",")","{","return","true",";","}","@","override","public","void","on","start","(","logger","context","context",")","{","}","@","override","public","void","on","reset","(","logger","context","context",")","{","}","@","override","public","void","on","stop","(","logger","context","context",")","{","}","@","override","public","void","on","level","change","(","logger","logger",",","level","level",")","{","}","}"],"func_name":"LoggerStartupListener","func_name_tokens":["logger","startup","listener"],"docstring":"  Setting java system property did not work in dynamically setting log file location.  Using a listener to set the context property does work, as mentioned here:  http://stackoverflow.com/questions/1975939/read-environment-variables-from-logback-configuration-file?rq=1  Setting this programmatically without using configuration file did not work.  http://stackoverflow.com/questions/7824620/logback-set-log-file-name-programatically  http://stackoverflow.com/questions/3803184/setting-logback-appender-path-programmatically  Java logging is painful.","docstring_tokens":["setting","java","system","property","did","not","work","in","dynamically","setting","log","file","location",".","using","a","listener","to","set","the","context","property","does","work",",","as","mentioned","here",":","setting","this","programmatically","without","using","configuration","file","did","not","work",".","java","logging","is","painful","."],"query":"switch from log4j to logback","query_tokens":["switch","from","log4j","to","logback"]}
{"query_id":"14784841","repo_name":"nguyenti/TripBuddy","zip_link":"/nguyenti/TripBuddy/archive/master.zip","code":"public class CustomMapTileProvider implements TileProvider {    private static final int TILE_WIDTH = 256;    private static final int TILE_HEIGHT = 256;    private static final int BUFFER_SIZE = 16 * 1024;    private AssetManager mAssets;    public CustomMapTileProvider(AssetManager assets) {        mAssets = assets;    }    @Override    public Tile getTile(int x, int y, int zoom) {        y = fixYCoordinate(y, zoom);        byte[] image = readTileImage(x, y, zoom);        return image == null ? null : new Tile(TILE_WIDTH, TILE_HEIGHT, image);    }    private byte[] readTileImage(int x, int y, int zoom) {        InputStream in = null;        ByteArrayOutputStream buffer = null;        try {            in = mAssets.open(getTileFilename(x, y, zoom));            buffer = new ByteArrayOutputStream();            int nRead;            byte[] data = new byte[BUFFER_SIZE];            while ((nRead = in.read(data, 0, BUFFER_SIZE)) != -1) {                buffer.write(data, 0, nRead);            }            buffer.flush();            return buffer.toByteArray();        } catch (IOException e) {            e.printStackTrace();            return null;        } catch (OutOfMemoryError e) {            e.printStackTrace();            return null;        } finally {            if (in != null) try { in.close(); } catch (Exception ignored) {}            if (buffer != null) try { buffer.close(); } catch (Exception ignored) {}        }    }    private String getTileFilename(int x, int y, int zoom) {        return \"map/\" + zoom + '/' + x + '/' + y + \".png\";    }    private int fixYCoordinate(int y, int zoom) {        int size = 1 << zoom; // size = 2^zoom        return size - 1 - y;    }}","code_tokens":["public","class","custom","map","tile","provider","implements","tile","provider","{","private","static","final","int","tile","width","=","256",";","private","static","final","int","tile","height","=","256",";","private","static","final","int","buffer","size","=","16","*","1024",";","private","asset","manager","m","assets",";","public","custom","map","tile","provider","(","asset","manager","assets",")","{","m","assets","=","assets",";","}","@","override","public","tile","get","tile","(","int","x",",","int","y",",","int","zoom",")","{","y","=","fix","y","coordinate","(","y",",","zoom",")",";","byte","[","]","image","=","read","tile","image","(","x",",","y",",","zoom",")",";","return","image","=","=","null","?","null",":","new","tile","(","tile","width",",","tile","height",",","image",")",";","}","private","byte","[","]","read","tile","image","(","int","x",",","int","y",",","int","zoom",")","{","input","stream","in","=","null",";","byte","array","output","stream","buffer","=","null",";","try","{","in","=","m","assets",".","open","(","get","tile","filename","(","x",",","y",",","zoom",")",")",";","buffer","=","new","byte","array","output","stream","(",")",";","int","n","read",";","byte","[","]","data","=","new","byte","[","buffer","size","]",";","while","(","(","n","read","=","in",".","read","(","data",",","0",",","buffer","size",")",")","!","=","-","1",")","{","buffer",".","write","(","data",",","0",",","n","read",")",";","}","buffer",".","flush","(",")",";","return","buffer",".","to","byte","array","(",")",";","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","return","null",";","}","catch","(","out","of","memory","error","e",")","{","e",".","print","stack","trace","(",")",";","return","null",";","}","finally","{","if","(","in","!","=","null",")","try","{","in",".","close","(",")",";","}","catch","(","exception","ignored",")","{","}","if","(","buffer","!","=","null",")","try","{","buffer",".","close","(",")",";","}","catch","(","exception","ignored",")","{","}","}","}","private","string","get","tile","filename","(","int","x",",","int","y",",","int","zoom",")","{","return","\"","map","/","\"","+","zoom","+","'","/","'","+","x","+","'","/","'","+","y","+","\"",".","png","\"",";","}","private","int","fix","y","coordinate","(","int","y",",","int","zoom",")","{","int","size","=","1","<","<","zoom",";","/","/","size","=","2","^","zoom","return","size","-","1","-","y",";","}","}"],"func_name":"CustomMapTileProvider","func_name_tokens":["custom","map","tile","provider"],"docstring":"  Created by tiffanynguyen on 12/14/14.  Code from:","docstring_tokens":["created","by","tiffanynguyen","on","12","/","14","/","14",".","code","from",":"],"query":"TileProvider using local tiles","query_tokens":["tile","provider","using","local","tiles"]}
{"query_id":"638807","repo_name":"jurgendl/jhaws","zip_link":"/jurgendl/jhaws/archive/master.zip","code":"public class TableRowTransferHandler extends TransferHandler {\r\tprivate static final long serialVersionUID = -7424691675591737713L;\r\r\tprivate final DataFlavor localObjectFlavor = new ActivationDataFlavor(Integer.class, DataFlavor.javaJVMLocalObjectMimeType, \"Integer Row Index\"); //$NON-NLS-1$\r\r\tprivate JTable table = null;\r\r\tpublic TableRowTransferHandler(JTable table) {\r\t\tthis.table = table;\r\t}\r\r\t@Override\r\tpublic boolean canImport(TransferHandler.TransferSupport info) {\r\t\tboolean b = info.getComponent() == table && info.isDrop() && info.isDataFlavorSupported(localObjectFlavor);\r\t\ttable.setCursor(b ? DragSource.DefaultMoveDrop : DragSource.DefaultMoveNoDrop);\r\t\treturn b;\r\t}\r\r\t@Override\r\tprotected Transferable createTransferable(JComponent c) {\r\t\tassert c == table;\r\t\treturn new DataHandler(Integer.valueOf(table.getSelectedRow()), localObjectFlavor.getMimeType());\r\t}\r\r\t@Override\r\tprotected void exportDone(JComponent c, Transferable t, int act) {\r\t\tif (act == TransferHandler.MOVE) {\r\t\t\ttable.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\r\t\t}\r\t}\r\r\t@Override\r\tpublic int getSourceActions(JComponent c) {\r\t\treturn TransferHandler.COPY_OR_MOVE;\r\t}\r\r\t@Override\r\tpublic boolean importData(TransferHandler.TransferSupport info) {\r\t\tJTable target = (JTable) info.getComponent();\r\t\tJTable.DropLocation dl = (JTable.DropLocation) info.getDropLocation();\r\t\tint index = dl.getRow();\r\t\tint max = table.getModel().getRowCount();\r\t\tif (index < 0 || index > max) {\r\t\t\tindex = max;\r\t\t}\r\t\ttarget.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\r\t\ttry {\r\t\t\tInteger rowFrom = (Integer) info.getTransferable().getTransferData(localObjectFlavor);\r\t\t\tif (rowFrom != -1 && rowFrom != index) {\r\t\t\t\tif (table instanceof Reorderable) {\r\t\t\t\t\t((Reorderable) table).reorder(rowFrom, index);\r\t\t\t\t}\r\t\t\t\tif (table.getModel() instanceof Reorderable) {\r\t\t\t\t\t((Reorderable) table.getModel()).reorder(rowFrom, index);\r\t\t\t\t}\r\t\t\t\tif (index > rowFrom) {\r\t\t\t\t\tindex--;\r\t\t\t\t}\r\t\t\t\ttarget.getSelectionModel().addSelectionInterval(index, index);\r\t\t\t\treturn true;\r\t\t\t}\r\t\t} catch (Exception e) {\r\t\t\te.printStackTrace();\r\t\t}\r\t\treturn false;\r\t}\r}\r","code_tokens":["public","class","table","row","transfer","handler","extends","transfer","handler","{","private","static","final","long","serial","version","uid","=","-","7424691675591737713l",";","private","final","data","flavor","local","object","flavor","=","new","activation","data","flavor","(","integer",".","class",",","data","flavor",".","java","jvm","local","object","mime","type",",","\"","integer","row","index","\"",")",";","/","/","$","non","-","nls","-","1","$","private","j","table","table","=","null",";","public","table","row","transfer","handler","(","j","table","table",")","{","this",".","table","=","table",";","}","@","override","public","boolean","can","import","(","transfer","handler",".","transfer","support","info",")","{","boolean","b","=","info",".","get","component","(",")","=","=","table","&","&","info",".","is","drop","(",")","&","&","info",".","is","data","flavor","supported","(","local","object","flavor",")",";","table",".","set","cursor","(","b","?","drag","source",".","default","move","drop",":","drag","source",".","default","move","no","drop",")",";","return","b",";","}","@","override","protected","transferable","create","transferable","(","j","component","c",")","{","assert","c","=","=","table",";","return","new","data","handler","(","integer",".","value","of","(","table",".","get","selected","row","(",")",")",",","local","object","flavor",".","get","mime","type","(",")",")",";","}","@","override","protected","void","export","done","(","j","component","c",",","transferable","t",",","int","act",")","{","if","(","act","=","=","transfer","handler",".","move",")","{","table",".","set","cursor","(","cursor",".","get","predefined","cursor","(","cursor",".","default","cursor",")",")",";","}","}","@","override","public","int","get","source","actions","(","j","component","c",")","{","return","transfer","handler",".","copy","or","move",";","}","@","override","public","boolean","import","data","(","transfer","handler",".","transfer","support","info",")","{","j","table","target","=","(","j","table",")","info",".","get","component","(",")",";","j","table",".","drop","location","dl","=","(","j","table",".","drop","location",")","info",".","get","drop","location","(",")",";","int","index","=","dl",".","get","row","(",")",";","int","max","=","table",".","get","model","(",")",".","get","row","count","(",")",";","if","(","index","<","0","|","|","index",">","max",")","{","index","=","max",";","}","target",".","set","cursor","(","cursor",".","get","predefined","cursor","(","cursor",".","default","cursor",")",")",";","try","{","integer","row","from","=","(","integer",")","info",".","get","transferable","(",")",".","get","transfer","data","(","local","object","flavor",")",";","if","(","row","from","!","=","-","1","&","&","row","from","!","=","index",")","{","if","(","table","instanceof","reorderable",")","{","(","(","reorderable",")","table",")",".","reorder","(","row","from",",","index",")",";","}","if","(","table",".","get","model","(",")","instanceof","reorderable",")","{","(","(","reorderable",")","table",".","get","model","(",")",")",".","reorder","(","row","from",",","index",")",";","}","if","(","index",">","row","from",")","{","index","-","-",";","}","target",".","get","selection","model","(",")",".","add","selection","interval","(","index",",","index",")",";","return","true",";","}","}","catch","(","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","return","false",";","}","}"],"func_name":"TableRowTransferHandler","func_name_tokens":["table","row","transfer","handler"],"docstring":"\r  Handles drag & drop row reordering\r \r","docstring_tokens":["handles","drag","&","drop","row","reordering"],"query":"How do I drag and drop a row in a JTable?","query_tokens":["how","do","i","drag","and","drop","a","row","in","a","j","table","?"]}
{"query_id":"30225398","repo_name":"JensErat/openhab","zip_link":"/JensErat/openhab/archive/master.zip","code":"\tprivate void initializeNashornGlobals() {\t\tif( !Script.class.getClassLoader().getParent().toString().contains(\"ExtClassLoader\") ){\t\t\t\t\t\t\tlogger.warn(\"Found wrong classloader: To prevent Class loading Problems use this directive in start.sh/-.bat: -Dorg.osgi.framework.bundle.parent=ext\");\t\t}\t\ttry {\t\t\t\t\t\tlogger.info(\"initializeSciptGlobals for : \" + engine.getFactory().getEngineName());\t\t\t\t\t\tengine.put(\"ItemRegistry\", \t\tscriptManager.getItemRegistry());\t\t\tengine.put(\"ir\", \t\t\t\tscriptManager.getItemRegistry());\t\t\tengine.eval(\"var shared = org.openhab.core.jsr223.internal.shared,\\n\"\t\t\t\t+\"RuleSet \t\t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.RuleSet'),\\n\"\t\t\t\t+\"Rule \t\t\t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.Rule'),\\n\"\t\t\t\t+\"ChangedEventTrigger \t= Java.type('org.openhab.core.jsr223.internal.shared.ChangedEventTrigger'),\\n\"\t\t\t\t+\"CommandEventTrigger \t= Java.type('org.openhab.core.jsr223.internal.shared.CommandEventTrigger'),\\n\"\t\t\t\t+\"Event \t\t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.Event'),\\n\"\t\t\t\t+\"EventTrigger\t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.EventTrigger'),\\n\"\t\t\t\t+\"ShutdownTrigger \t\t= Java.type('org.openhab.core.jsr223.internal.shared.ShutdownTrigger'),\\n\"\t\t\t\t+\"StartupTrigger \t\t= Java.type('org.openhab.core.jsr223.internal.shared.StartupTrigger'),\\n\"\t\t\t\t+\"TimerTrigger \t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.TimerTrigger'),\\n\"\t\t\t\t+\"TriggerType \t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.TriggerType'),\\n\"\t\t\t\t+\"PersistenceExtensions\t= Java.type('org.openhab.core.persistence.extensions.PersistenceExtensions'),\\n\"\t\t\t\t+\"pe\t\t\t\t\t= Java.type('org.openhab.core.persistence.extensions.PersistenceExtensions'),\\n\"\t\t\t\t+\"oh \t\t\t\t\t= Java.type('org.openhab.core.jsr223.internal.shared.Openhab'),\\n\"\t\t\t\t+\"State \t\t\t\t= Java.type('org.openhab.core.types.State'),\\n\"\t\t\t\t+\"Command \t\t\t\t= Java.type('org.openhab.core.types.Command'),\\n\"\t\t\t\t+\"DateTime \t\t\t\t= Java.type('org.joda.time.DateTime'),\\n\"\t\t\t\t+\"StringUtils \t\t\t= Java.type('org.apache.commons.lang.StringUtils'),\\n\"\t\t\t\t+\"URLEncoder \t\t\t= Java.type('java.net.URLEncoder'),\\n\"\t\t\t\t+\"CallType \t\t\t\t= Java.type('org.openhab.library.tel.types.CallType'),\\n\"\t\t\t\t+\"DateTimeType \t\t\t= Java.type('org.openhab.core.library.types.DateTimeType'),\\n\"\t\t\t\t+\"DecimalType \t\t\t= Java.type('org.openhab.core.library.types.DecimalType'),\\n\"\t\t\t\t+\"HSBType \t\t\t\t= Java.type('org.openhab.core.library.types.HSBType'),\\n\"\t\t\t\t+\"IncreaseDecreaseType \t= Java.type('org.openhab.core.library.types.IncreaseDecreaseType'),\\n\"\t\t\t\t+\"OnOffType \t\t\t= Java.type('org.openhab.core.library.types.OnOffType'),\\n\"\t\t\t\t+\"OpenClosedType \t\t= Java.type('org.openhab.core.library.types.OpenClosedType'),\\n\"\t\t\t\t+\"PercentType \t\t\t= Java.type('org.openhab.core.library.types.PercentType'),\\n\"\t\t\t\t+\"PointType \t\t\t= Java.type('org.openhab.core.library.types.PointType'),\\n\"\t\t\t\t+\"StopMoveType \t\t\t= Java.type('org.openhab.core.library.types.StopMoveType'),\\n\"\t\t\t\t+\"UpDownType \t\t\t= Java.type('org.openhab.core.library.types.UpDownType'),\\n\"\t\t\t\t+\"StringType \t\t\t= Java.type('org.openhab.core.library.types.StringType'),\\n\"\t\t\t\t\t\t\t\t//As of now, Nashorn does not support calling super class methods.\t\t\t\t//http://nashorn-dev.openjdk.java.narkive.com/VX59ksgk/calling-super-methods-when-extending-classes\t\t\t\t//therefore:\t\t\t\t+\"BusEvent \t\t\t\t= Java.type('org.openhab.model.script.actions.BusEvent'),\\n\"\t\t\t\t+\"be \t\t\t\t\t= Java.type('org.openhab.model.script.actions.BusEvent'),\\n\"\t\t\t\t\t\t\t\t+\"transform \t\t\t= oh.getAction('Transformation').static.transform,\\n\"\t\t\t\t\t\t\t\t//Item\t\t\t\t+\"getItem \t\t\t\t= ItemRegistry.getItem,\\n\"\t\t\t\t+\"postUpdate \t\t\t= BusEvent.postUpdate,\\n\"\t\t\t\t+\"sendCommand \t\t\t= BusEvent.sendCommand,\\n\"\t\t\t\t\t\t\t\t//System\t\t\t\t+\"FileUtils \t\t\t= Java.type('org.apache.commons.io.FileUtils'),\\n\"\t\t\t\t+\"FilenameUtils\t\t\t= Java.type('org.apache.commons.io.FilenameUtils'),\\n\"\t\t\t\t+\"File \t\t\t\t\t= Java.type('java.io.File'),\\n\"\t\t\t\t\t\t\t\t+\"ohEngine\t\t\t\t= 'javascript';\\n\"\t\t\t\t\t\t\t\t//Helper Functions and Libs eventually later a lib Folder for default (Auto) loaded Libraries\t\t\t\t//Bas64: https://gist.github.com/ncerminara/11257943\t\t\t\t//+\"load('configurations/scripts/jslib/b64.js');\\n\"\t\t\t);\t\t\t\t\t} catch (ScriptException e) {\t\t\tlogger.error(\"ScriptException in initializeSciptGlobals while importing default-classes: \", e);\t\t}\t}","code_tokens":["private","void","initialize","nashorn","globals","(",")","{","if","(","!","script",".","class",".","get","class","loader","(",")",".","get","parent","(",")",".","to","string","(",")",".","contains","(","\"","ext","class","loader","\"",")",")","{","logger",".","warn","(","\"","found","wrong","classloader",":","to","prevent","class","loading","problems","use","this","directive","in","start",".","sh","/","-",".","bat",":","-","dorg",".","osgi",".","framework",".","bundle",".","parent","=","ext","\"",")",";","}","try","{","logger",".","info","(","\"","initialize","scipt","globals","for",":","\"","+","engine",".","get","factory","(",")",".","get","engine","name","(",")",")",";","engine",".","put","(","\"","item","registry","\"",",","script","manager",".","get","item","registry","(",")",")",";","engine",".","put","(","\"","ir","\"",",","script","manager",".","get","item","registry","(",")",")",";","engine",".","eval","(","\"","var","shared","=","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",",","\\n","\"","+","\"","rule","set","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","rule","set","'",")",",","\\n","\"","+","\"","rule","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","rule","'",")",",","\\n","\"","+","\"","changed","event","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","changed","event","trigger","'",")",",","\\n","\"","+","\"","command","event","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","command","event","trigger","'",")",",","\\n","\"","+","\"","event","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","event","'",")",",","\\n","\"","+","\"","event","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","event","trigger","'",")",",","\\n","\"","+","\"","shutdown","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","shutdown","trigger","'",")",",","\\n","\"","+","\"","startup","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","startup","trigger","'",")",",","\\n","\"","+","\"","timer","trigger","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","timer","trigger","'",")",",","\\n","\"","+","\"","trigger","type","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","trigger","type","'",")",",","\\n","\"","+","\"","persistence","extensions","=","java",".","type","(","'","org",".","openhab",".","core",".","persistence",".","extensions",".","persistence","extensions","'",")",",","\\n","\"","+","\"","pe","=","java",".","type","(","'","org",".","openhab",".","core",".","persistence",".","extensions",".","persistence","extensions","'",")",",","\\n","\"","+","\"","oh","=","java",".","type","(","'","org",".","openhab",".","core",".","jsr223",".","internal",".","shared",".","openhab","'",")",",","\\n","\"","+","\"","state","=","java",".","type","(","'","org",".","openhab",".","core",".","types",".","state","'",")",",","\\n","\"","+","\"","command","=","java",".","type","(","'","org",".","openhab",".","core",".","types",".","command","'",")",",","\\n","\"","+","\"","date","time","=","java",".","type","(","'","org",".","joda",".","time",".","date","time","'",")",",","\\n","\"","+","\"","string","utils","=","java",".","type","(","'","org",".","apache",".","commons",".","lang",".","string","utils","'",")",",","\\n","\"","+","\"","url","encoder","=","java",".","type","(","'","java",".","net",".","url","encoder","'",")",",","\\n","\"","+","\"","call","type","=","java",".","type","(","'","org",".","openhab",".","library",".","tel",".","types",".","call","type","'",")",",","\\n","\"","+","\"","date","time","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","date","time","type","'",")",",","\\n","\"","+","\"","decimal","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","decimal","type","'",")",",","\\n","\"","+","\"","hsb","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","hsb","type","'",")",",","\\n","\"","+","\"","increase","decrease","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","increase","decrease","type","'",")",",","\\n","\"","+","\"","on","off","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","on","off","type","'",")",",","\\n","\"","+","\"","open","closed","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","open","closed","type","'",")",",","\\n","\"","+","\"","percent","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","percent","type","'",")",",","\\n","\"","+","\"","point","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","point","type","'",")",",","\\n","\"","+","\"","stop","move","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","stop","move","type","'",")",",","\\n","\"","+","\"","up","down","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","up","down","type","'",")",",","\\n","\"","+","\"","string","type","=","java",".","type","(","'","org",".","openhab",".","core",".","library",".","types",".","string","type","'",")",",","\\n","\"","/","/","as","of","now",",","nashorn","does","not","support","calling","super","class","methods",".","/","/","/","/","therefore",":","+","\"","bus","event","=","java",".","type","(","'","org",".","openhab",".","model",".","script",".","actions",".","bus","event","'",")",",","\\n","\"","+","\"","be","=","java",".","type","(","'","org",".","openhab",".","model",".","script",".","actions",".","bus","event","'",")",",","\\n","\"","+","\"","transform","=","oh",".","get","action","(","'","transformation","'",")",".","static",".","transform",",","\\n","\"","/","/","item","+","\"","get","item","=","item","registry",".","get","item",",","\\n","\"","+","\"","post","update","=","bus","event",".","post","update",",","\\n","\"","+","\"","send","command","=","bus","event",".","send","command",",","\\n","\"","/","/","system","+","\"","file","utils","=","java",".","type","(","'","org",".","apache",".","commons",".","io",".","file","utils","'",")",",","\\n","\"","+","\"","filename","utils","=","java",".","type","(","'","org",".","apache",".","commons",".","io",".","filename","utils","'",")",",","\\n","\"","+","\"","file","=","java",".","type","(","'","java",".","io",".","file","'",")",",","\\n","\"","+","\"","oh","engine","=","'","javascript","'",";","\\n","\"","/","/","helper","functions","and","libs","eventually","later","a","lib","folder","for","default","(","auto",")","loaded","libraries","/","/","bas64",":","/","/","+","\"","load","(","'","configurations","/","scripts","/","jslib","/","b64",".","js","'",")",";","\\n","\"",")",";","}","catch","(","script","exception","e",")","{","logger",".","error","(","\"","script","exception","in","initialize","scipt","globals","while","importing","default","-","classes",":","\"",",","e",")",";","}","}"],"func_name":"initializeNashornGlobals","func_name_tokens":["initialize","nashorn","globals"],"docstring":"\t\t  initializes Globals for Oracle Nashorn in conjunction with Java 8\t  \t  To prevent Class loading Problems use this directive in start.sh/-.bat: -Dorg.osgi.framework.bundle.parent=ext\t  further information: \t  http://apache-felix.18485.x6.nabble.com/org-osgi-framework-bootdelegation-and-org-osgi-framework-system-packages-extra-td4946354.html\t  https://bugs.eclipse.org/bugs/show_bug.cgi?id=466683\t  http://spring.io/blog/2009/01/19/exposing-the-boot-classpath-in-osgi/\t  http://osdir.com/ml/users-felix-apache/2015-02/msg00067.html\t  \t  later we will get Autoimports for Classes in Nashorn:\t  further information: \t  http://nashorn.36665.n7.nabble.com/8u60-8085937-add-autoimports-sample-script-to-easily-explore-Java-classes-in-interactive-mode-td4705.html\t  \t  Later in a pure Java 8/9 environment: \t  http://mail.openjdk.java.net/pipermail/nashorn-dev/2015-February/004177.html\t  Using Nashorn with interfaces loaded from custom classloaders, \"script function\" as a Java lambda:\t  \t  \t\tengine.put(\"JavaClass\", (Function<String, Class>)\t  \t\t\t\ts -> {\t  \t\t\t\t\ttry {\t  \t\t\t\t\t\t// replace this whatever Class finding logic here\t  \t\t\t\t\t\t// say, using your own class loader(s) based search\t  \t\t\t\t\t\tClass<?> c = Class.forName(s);\t  \t\t\t\t\t\tlogger.error(\"Class \" + c.getName());\t  \t\t\t\t\t\tlogger.error(\"s \" + s);\t  \t\t\t\t\t\treturn Class.forName(s);\t  \t\t\t\t\t} catch (ClassNotFoundException cnfe) {\t  \t\t\t\t\t\tthrow new RuntimeException(cnfe);\t  \t\t\t\t\t}\t  \t\t\t\t});\t  \t\tengine.eval(\"var System = JavaClass('java.lang.System').static\");\t  \t\tengine.eval(\"System.out.println('hello world')\");\t  ","docstring_tokens":["initializes","globals","for","oracle","nashorn","in","conjunction","with","java","8","to","prevent","class","loading","problems","use","this","directive","in","start",".","sh","/","-",".","bat",":","-","dorg",".","osgi",".","framework",".","bundle",".","parent","=","ext","further","information",":","later","we","will","get","autoimports","for","classes","in","nashorn",":","further","information",":","later","in","a","pure","java","8","/","9","environment",":","using","nashorn","with","interfaces","loaded","from","custom","classloaders",",","\"","script","function","\"","as","a","java","lambda",":","engine",".","put","(","\"","java","class","\"",",","(","function","<","string",",","class",">",")","s","-",">","{","try","{","/","/","replace","this","whatever","class","finding","logic","here","/","/","say",",","using","your","own","class","loader","(","s",")","based","search","class","<","?",">","c","=","class",".","for","name","(","s",")",";","logger",".","error","(","\"","class","\"","+","c",".","get","name","(",")",")",";","logger",".","error","(","\"","s","\"","+","s",")",";","return","class",".","for","name","(","s",")",";","}","catch","(","class","not","found","exception","cnfe",")","{","throw","new","runtime","exception","(","cnfe",")",";","}","}",")",";","engine",".","eval","(","\"","var","system","=","java","class","(","'","java",".","lang",".","system","'",")",".","static","\"",")",";","engine",".","eval","(","\"","system",".","out",".","println","(","'","hello","world","'",")","\"",")",";"],"query":"Java 8 ScriptEngine across ClassLoaders","query_tokens":["java","8","script","engine","across","class","loaders"]}
{"query_id":"24679963","repo_name":"routexl/graphhopper","zip_link":"/routexl/graphhopper/archive/master.zip","code":"public class BresenhamLine {    public static void calcPoints(int y1, int x1, int y2, int x2, PointEmitter emitter) {        bresenham(y1, x1, y2, x2, emitter);    }    public static void bresenham(int y1, int x1, int y2, int x2, PointEmitter emitter) {        boolean latIncreasing = y1 < y2;        boolean lonIncreasing = x1 < x2;        int dLat = Math.abs(y2 - y1), sLat = latIncreasing ? 1 : -1;        int dLon = Math.abs(x2 - x1), sLon = lonIncreasing ? 1 : -1;        int err = dLon - dLat;        while (true) {            emitter.set(y1, x1);            if (y1 == y2 && x1 == x2)                break;            int tmpErr = 2 * err;            if (tmpErr > -dLat) {                err -= dLat;                x1 += sLon;            }            if (tmpErr < dLon) {                err += dLon;                y1 += sLat;            }        }    }    /**     * Calls the Bresenham algorithm but make it working for double values     */    public static void calcPoints(final double lat1, final double lon1,                                  final double lat2, final double lon2,                                  final PointEmitter emitter,                                  final double offsetLat, final double offsetLon,                                  final double deltaLat, final double deltaLon) {        // round to make results of bresenham closer to correct solution        int y1 = (int) ((lat1 - offsetLat) / deltaLat);        int x1 = (int) ((lon1 - offsetLon) / deltaLon);        int y2 = (int) ((lat2 - offsetLat) / deltaLat);        int x2 = (int) ((lon2 - offsetLon) / deltaLon);        bresenham(y1, x1, y2, x2, new PointEmitter() {            @Override            public void set(double lat, double lon) {                // +.1 to move more near the center of the tile                emitter.set((lat + .1) * deltaLat + offsetLat, (lon + .1) * deltaLon + offsetLon);            }        });    }}","code_tokens":["public","class","bresenham","line","{","public","static","void","calc","points","(","int","y1",",","int","x1",",","int","y2",",","int","x2",",","point","emitter","emitter",")","{","bresenham","(","y1",",","x1",",","y2",",","x2",",","emitter",")",";","}","public","static","void","bresenham","(","int","y1",",","int","x1",",","int","y2",",","int","x2",",","point","emitter","emitter",")","{","boolean","lat","increasing","=","y1","<","y2",";","boolean","lon","increasing","=","x1","<","x2",";","int","d","lat","=","math",".","abs","(","y2","-","y1",")",",","s","lat","=","lat","increasing","?","1",":","-","1",";","int","d","lon","=","math",".","abs","(","x2","-","x1",")",",","s","lon","=","lon","increasing","?","1",":","-","1",";","int","err","=","d","lon","-","d","lat",";","while","(","true",")","{","emitter",".","set","(","y1",",","x1",")",";","if","(","y1","=","=","y2","&","&","x1","=","=","x2",")","break",";","int","tmp","err","=","2","*","err",";","if","(","tmp","err",">","-","d","lat",")","{","err","-","=","d","lat",";","x1","+","=","s","lon",";","}","if","(","tmp","err","<","d","lon",")","{","err","+","=","d","lon",";","y1","+","=","s","lat",";","}","}","}","public","static","void","calc","points","(","final","double","lat1",",","final","double","lon1",",","final","double","lat2",",","final","double","lon2",",","final","point","emitter","emitter",",","final","double","offset","lat",",","final","double","offset","lon",",","final","double","delta","lat",",","final","double","delta","lon",")","{","/","/","round","to","make","results","of","bresenham","closer","to","correct","solution","int","y1","=","(","int",")","(","(","lat1","-","offset","lat",")","/","delta","lat",")",";","int","x1","=","(","int",")","(","(","lon1","-","offset","lon",")","/","delta","lon",")",";","int","y2","=","(","int",")","(","(","lat2","-","offset","lat",")","/","delta","lat",")",";","int","x2","=","(","int",")","(","(","lon2","-","offset","lon",")","/","delta","lon",")",";","bresenham","(","y1",",","x1",",","y2",",","x2",",","new","point","emitter","(",")","{","@","override","public","void","set","(","double","lat",",","double","lon",")","{","/","/","+",".","1","to","move","more","near","the","center","of","the","tile","emitter",".","set","(","(","lat","+",".","1",")","*","delta","lat","+","offset","lat",",","(","lon","+",".","1",")","*","delta","lon","+","offset","lon",")",";","}","}",")",";","}","}"],"func_name":"BresenhamLine","func_name_tokens":["bresenham","line"],"docstring":"  We need the supercover line. The best algorithm is a 'voxel grid traversal algorithm' and  described in \"A Fast Voxel Traversal Algorithm for Ray Tracing\" by John Amanatides and Andrew Woo  (1987): http://www.cse.yorku.ca/~amana/research/grid.pdf  <p>  Other methods we used are Bresenham (only integer start and end values) and Xiaolin Wu (anti  aliasing). See some discussion here: http://stackoverflow.com/a/3234074/194609 and here  <p>   @author Peter Karich","docstring_tokens":["we","need","the","supercover","line",".","the","best","algorithm","is","a","'","voxel","grid","traversal","algorithm","'","and","described","in","\"","a","fast","voxel","traversal","algorithm","for","ray","tracing","\"","by","john","amanatides","and","andrew","woo","(","1987",")",":","<","p",">","other","methods","we","used","are","bresenham","(","only","integer","start","and","end","values",")","and","xiaolin","wu","(","anti","aliasing",")",".","see","some","discussion","here",":","and","here","<","p",">"],"query":"Precise subpixel line drawing algorithm (rasterization algorithm)","query_tokens":["precise","subpixel","line","drawing","algorithm","(","rasterization","algorithm",")"]}
{"query_id":"2471935","repo_name":"swojo/wsandroid","zip_link":"/swojo/wsandroid/archive/master.zip","code":"    private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {        ImageView bmImage;        public DownloadImageTask(ImageView bmImage) {            this.bmImage = bmImage;        }        protected Bitmap doInBackground(String... urls) {            String urldisplay = urls[0];            Bitmap mIcon11 = null;            try {                InputStream in = new java.net.URL(urldisplay).openStream();                mIcon11 = BitmapFactory.decodeStream(in);            } catch (Exception e) {                Log.e(\"Error\", e.getMessage());            }            return mIcon11;        }        protected void onPostExecute(Bitmap result) {            if (result != null) {                bmImage.setImageBitmap(result);                Tools.scaleImage(bmImage, bmImage.getWidth());                // Attempt to now force the name on top of the picture                lblMemberName.setTextColor(Color.WHITE);            }            layoutHostDetails.setVisibility(View.VISIBLE);        }    }","code_tokens":["private","class","download","image","task","extends","async","task","<","string",",","void",",","bitmap",">","{","image","view","bm","image",";","public","download","image","task","(","image","view","bm","image",")","{","this",".","bm","image","=","bm","image",";","}","protected","bitmap","do","in","background","(","string",".",".",".","urls",")","{","string","urldisplay","=","urls","[","0","]",";","bitmap","m","icon11","=","null",";","try","{","input","stream","in","=","new","java",".","net",".","url","(","urldisplay",")",".","open","stream","(",")",";","m","icon11","=","bitmap","factory",".","decode","stream","(","in",")",";","}","catch","(","exception","e",")","{","log",".","e","(","\"","error","\"",",","e",".","get","message","(",")",")",";","}","return","m","icon11",";","}","protected","void","on","post","execute","(","bitmap","result",")","{","if","(","result","!","=","null",")","{","bm","image",".","set","image","bitmap","(","result",")",";","tools",".","scale","image","(","bm","image",",","bm","image",".","get","width","(",")",")",";","/","/","attempt","to","now","force","the","name","on","top","of","the","picture","lbl","member","name",".","set","text","color","(","color",".","white",")",";","}","layout","host","details",".","set","visibility","(","view",".","visible",")",";","}","}"],"func_name":"DownloadImageTask","func_name_tokens":["download","image","task"],"docstring":"          Download an image into a bitmap in an AsyncTask      <p/>","docstring_tokens":["download","an","image","into","a","bitmap","in","an","async","task","<","p","/",">"],"query":"How to load an ImageView by URL in Android? [closed]","query_tokens":["how","to","load","an","image","view","by","url","in","android","?","[","closed","]"]}
{"query_id":"28880785","repo_name":"devcon5io/awtt","zip_link":"/devcon5io/awtt/archive/master.zip","code":"public class HelloWorld extends Application {    public static void main(String... args) {        launch(args);    }    @Override    public void start(Stage primaryStage) {        primaryStage.setTitle(\"Hello World!\");        Button btn = new Button();        btn.setText(\"Say 'Hello World'\");        btn.setOnAction(event -> System.out.println(\"Hello World!\"));        StackPane root = new StackPane();        root.getChildren().add(btn);        primaryStage.setScene(new Scene(root, 300, 250));        primaryStage.show();    }}","code_tokens":["public","class","hello","world","extends","application","{","public","static","void","main","(","string",".",".",".","args",")","{","launch","(","args",")",";","}","@","override","public","void","start","(","stage","primary","stage",")","{","primary","stage",".","set","title","(","\"","hello","world","!","\"",")",";","button","btn","=","new","button","(",")",";","btn",".","set","text","(","\"","say","'","hello","world","'","\"",")",";","btn",".","set","on","action","(","event","-",">","system",".","out",".","println","(","\"","hello","world","!","\"",")",")",";","stack","pane","root","=","new","stack","pane","(",")",";","root",".","get","children","(",")",".","add","(","btn",")",";","primary","stage",".","set","scene","(","new","scene","(","root",",","300",",","250",")",")",";","primary","stage",".","show","(",")",";","}","}"],"func_name":"HelloWorld","func_name_tokens":["hello","world"],"docstring":"  Its recommended to use the scene builder for designing the ui. Follow the instructions on  Created by Gerald M�cke on 09.09.2015.","docstring_tokens":["its","recommended","to","use","the","scene","builder","for","designing","the","ui",".","follow","the","instructions","on","created","by","gerald","m","�","cke","on","09",".","09",".","2015","."],"query":"Where has the JavaFX scene builder gone?","query_tokens":["where","has","the","java","fx","scene","builder","gone","?"]}
{"query_id":"13524519","repo_name":"trejkaz/swingx","zip_link":"/trejkaz/swingx/archive/master.zip","code":"    public void interactiveEditorNull() {        final JTable table = new JTable(create1535TableModel());        Action action = new AbstractAction(\"terminateEditing\") {                        @Override            public void actionPerformed(ActionEvent e) {                if (table.isEditing() && !table.getCellEditor().stopCellEditing() ) {                    table.getCellEditor().cancelCellEditing();                }            }        };        JXFrame frame = wrapWithScrollingInFrame(table, \"Core: NPE on stopping edit\");        addAction(frame, action);        show(frame);    }","code_tokens":["public","void","interactive","editor","null","(",")","{","final","j","table","table","=","new","j","table","(","create1535table","model","(",")",")",";","action","action","=","new","abstract","action","(","\"","terminate","editing","\"",")","{","@","override","public","void","action","performed","(","action","event","e",")","{","if","(","table",".","is","editing","(",")","&","&","!","table",".","get","cell","editor","(",")",".","stop","cell","editing","(",")",")","{","table",".","get","cell","editor","(",")",".","cancel","cell","editing","(",")",";","}","}","}",";","jx","frame","frame","=","wrap","with","scrolling","in","frame","(","table",",","\"","core",":","npe","on","stopping","edit","\"",")",";","add","action","(","frame",",","action",")",";","show","(","frame",")",";","}"],"func_name":"interactiveEditorNull","func_name_tokens":["interactive","editor","null"],"docstring":"          Issue #1535-swingx: GenericEditor fires editingStopped  even if       value invalid (= empty). Leads to NPE in columnMoved (jdk7) or when      external code calls the stop/cancel sequence.      Core issue but c&p'd to JXTable.                  1. doesn't allow editing if the column type doesn't have a          single parameter constructor of type String         (fails silently in this case) - unrelated to this issue               2. throws NPE on moving column while editing, the editingValue         is empty and the class cannot handle empty strings. The NPE         is triggered in column moved, because the GenericEditor         Visible only when run with jdk7 because the inappropriate          removeEditor is fixed :-)","docstring_tokens":["issue","#","1535","-","swingx",":","generic","editor","fires","editing","stopped","even","if","value","invalid","(","=","empty",")",".","leads","to","npe","in","column","moved","(","jdk7",")","or","when","external","code","calls","the","stop","/","cancel","sequence",".","core","issue","but","c","&","p","'","d","to","jx","table",".","1",".","doesn","'","t","allow","editing","if","the","column","type","doesn","'","t","have","a","single","parameter","constructor","of","type","string","(","fails","silently","in","this","case",")","-","unrelated","to","this","issue","2",".","throws","npe","on","moving","column","while","editing",",","the","editing","value","is","empty","and","the","class","cannot","handle","empty","strings",".","the","npe","is","triggered","in","column","moved",",","because","the","generic","editor","visible","only","when","run","with","jdk7","because","the","inappropriate","remove","editor","is","fixed",":","-",")"],"query":"a bug of JTable.columnMoved method","query_tokens":["a","bug","of","j","table",".","column","moved","method"]}
{"query_id":"27644361","repo_name":"fjalvingh/domui","zip_link":"/fjalvingh/domui/archive/master-java11.zip","code":"public class Lambda {\t@FunctionalInterface\tpublic interface Consumer_WithExceptions<T, E extends Exception> {\t\tvoid accept(T t) throws E;\t}\t@FunctionalInterface\tpublic interface BiConsumer_WithExceptions<T, U, E extends Exception> {\t\tvoid accept(T t, U u) throws E;\t}\t@FunctionalInterface\tpublic interface Function_WithExceptions<T, R, E extends Exception> {\t\tR apply(T t) throws E;\t}\t@FunctionalInterface\tpublic interface Supplier_WithExceptions<T, E extends Exception> {\t\tT get() throws E;\t}\t@FunctionalInterface\tpublic interface Runnable_WithExceptions<E extends Exception> {\t\tvoid run() throws E;\t}\t/**\t * .forEach(rethrowConsumer(name -> System.out.println(Class.forName(name)))); or .forEach(rethrowConsumer(ClassNameUtil::println));\t */\tpublic static <T, E extends Exception> Consumer<T> rethrowConsumer(Consumer_WithExceptions<T, E> consumer) {\t\treturn t -> {\t\t\ttry {\t\t\t\tconsumer.accept(t);\t\t\t} catch(Exception exception) {\t\t\t\tthrowAsUnchecked(exception);\t\t\t}\t\t};\t}\tpublic static <T, U, E extends Exception> BiConsumer<T, U> rethrowBiConsumer(BiConsumer_WithExceptions<T, U, E> biConsumer) {\t\treturn (t, u) -> {\t\t\ttry {\t\t\t\tbiConsumer.accept(t, u);\t\t\t} catch(Exception exception) {\t\t\t\tthrowAsUnchecked(exception);\t\t\t}\t\t};\t}\t/**\t * .map(rethrowFunction(name -> Class.forName(name))) or .map(rethrowFunction(Class::forName))\t */\tpublic static <T, R, E extends Exception> Function<T, R> rethrowFunction(Function_WithExceptions<T, R, E> function) {\t\treturn t -> {\t\t\ttry {\t\t\t\treturn function.apply(t);\t\t\t} catch(Exception exception) {\t\t\t\tthrowAsUnchecked(exception);\t\t\t\treturn null;\t\t\t}\t\t};\t}\t/**\t * rethrowSupplier(() -> new StringJoiner(new String(new byte[]{77, 97, 114, 107}, \"UTF-8\"))),\t */\tpublic static <T, E extends Exception> Supplier<T> rethrowSupplier(Supplier_WithExceptions<T, E> function) {\t\treturn () -> {\t\t\ttry {\t\t\t\treturn function.get();\t\t\t} catch(Exception exception) {\t\t\t\tthrowAsUnchecked(exception);\t\t\t\treturn null;\t\t\t}\t\t};\t}\t/**\t * uncheck(() -> Class.forName(\"xxx\"));\t */\tpublic static void uncheck(Runnable_WithExceptions t) {\t\ttry {\t\t\tt.run();\t\t} catch(Exception exception) {\t\t\tthrowAsUnchecked(exception);\t\t}\t}\t/**\t * uncheck(() -> Class.forName(\"xxx\"));\t */\tpublic static <R, E extends Exception> R uncheck(Supplier_WithExceptions<R, E> supplier) {\t\ttry {\t\t\treturn supplier.get();\t\t} catch(Exception exception) {\t\t\tthrowAsUnchecked(exception);\t\t\treturn null;\t\t}\t}\t/**\t * uncheck(Class::forName, \"xxx\");\t */\tpublic static <T, R, E extends Exception> R uncheck(Function_WithExceptions<T, R, E> function, T t) {\t\ttry {\t\t\treturn function.apply(t);\t\t} catch(Exception exception) {\t\t\tthrowAsUnchecked(exception);\t\t\treturn null;\t\t}\t}\t//@SuppressWarnings(\"unchecked\")\tprivate static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E {\t\tthrow (E) exception;\t}}","code_tokens":["public","class","lambda","{","@","functional","interface","public","interface","consumer","with","exceptions","<","t",",","e","extends","exception",">","{","void","accept","(","t","t",")","throws","e",";","}","@","functional","interface","public","interface","bi","consumer","with","exceptions","<","t",",","u",",","e","extends","exception",">","{","void","accept","(","t","t",",","u","u",")","throws","e",";","}","@","functional","interface","public","interface","function","with","exceptions","<","t",",","r",",","e","extends","exception",">","{","r","apply","(","t","t",")","throws","e",";","}","@","functional","interface","public","interface","supplier","with","exceptions","<","t",",","e","extends","exception",">","{","t","get","(",")","throws","e",";","}","@","functional","interface","public","interface","runnable","with","exceptions","<","e","extends","exception",">","{","void","run","(",")","throws","e",";","}","public","static","<","t",",","e","extends","exception",">","consumer","<","t",">","rethrow","consumer","(","consumer","with","exceptions","<","t",",","e",">","consumer",")","{","return","t","-",">","{","try","{","consumer",".","accept","(","t",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","}","}",";","}","public","static","<","t",",","u",",","e","extends","exception",">","bi","consumer","<","t",",","u",">","rethrow","bi","consumer","(","bi","consumer","with","exceptions","<","t",",","u",",","e",">","bi","consumer",")","{","return","(","t",",","u",")","-",">","{","try","{","bi","consumer",".","accept","(","t",",","u",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","}","}",";","}","public","static","<","t",",","r",",","e","extends","exception",">","function","<","t",",","r",">","rethrow","function","(","function","with","exceptions","<","t",",","r",",","e",">","function",")","{","return","t","-",">","{","try","{","return","function",".","apply","(","t",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","return","null",";","}","}",";","}","public","static","<","t",",","e","extends","exception",">","supplier","<","t",">","rethrow","supplier","(","supplier","with","exceptions","<","t",",","e",">","function",")","{","return","(",")","-",">","{","try","{","return","function",".","get","(",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","return","null",";","}","}",";","}","public","static","void","uncheck","(","runnable","with","exceptions","t",")","{","try","{","t",".","run","(",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","}","}","public","static","<","r",",","e","extends","exception",">","r","uncheck","(","supplier","with","exceptions","<","r",",","e",">","supplier",")","{","try","{","return","supplier",".","get","(",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","return","null",";","}","}","public","static","<","t",",","r",",","e","extends","exception",">","r","uncheck","(","function","with","exceptions","<","t",",","r",",","e",">","function",",","t","t",")","{","try","{","return","function",".","apply","(","t",")",";","}","catch","(","exception","exception",")","{","throw","as","unchecked","(","exception",")",";","return","null",";","}","}","/","/","@","suppress","warnings","(","\"","unchecked","\"",")","private","static","<","e","extends","throwable",">","void","throw","as","unchecked","(","exception","exception",")","throws","e","{","throw","(","e",")","exception",";","}","}"],"func_name":"Lambda","func_name_tokens":["lambda"],"docstring":"  EXPERIMENTAL.           Created on 13-1-17.","docstring_tokens":["experimental",".","created","on","13","-","1","-","17","."],"query":"How can I throw CHECKED exceptions from inside Java 8 streams?","query_tokens":["how","can","i","throw","checked","exceptions","from","inside","java","8","streams","?"]}
{"query_id":"41629503","repo_name":"mpalourdio/SpringBootTemplate","zip_link":"/mpalourdio/SpringBootTemplate/archive/master.zip","code":"public class CustomParameterizedType implements ParameterizedType {    private final ParameterizedType delegate;    private final Type[] actualTypeArguments;    public CustomParameterizedType(ParameterizedType delegate, Type[] actualTypeArguments) {        this.delegate = delegate;        this.actualTypeArguments = actualTypeArguments;    }    @Override    public Type[] getActualTypeArguments() {        return actualTypeArguments;    }    @Override    public Type getRawType() {        return delegate.getRawType();    }    @Override    public Type getOwnerType() {        return delegate.getOwnerType();    }}","code_tokens":["public","class","custom","parameterized","type","implements","parameterized","type","{","private","final","parameterized","type","delegate",";","private","final","type","[","]","actual","type","arguments",";","public","custom","parameterized","type","(","parameterized","type","delegate",",","type","[","]","actual","type","arguments",")","{","this",".","delegate","=","delegate",";","this",".","actual","type","arguments","=","actual","type","arguments",";","}","@","override","public","type","[","]","get","actual","type","arguments","(",")","{","return","actual","type","arguments",";","}","@","override","public","type","get","raw","type","(",")","{","return","delegate",".","get","raw","type","(",")",";","}","@","override","public","type","get","owner","type","(",")","{","return","delegate",".","get","owner","type","(",")",";","}","}"],"func_name":"CustomParameterizedType","func_name_tokens":["custom","parameterized","type"],"docstring":"  Shamelessly copy/pasted from SO ","docstring_tokens":["shamelessly","copy","/","pasted","from","so"],"query":"Using Spring RestTemplate in generic method with generic parameter","query_tokens":["using","spring","rest","template","in","generic","method","with","generic","parameter"]}
{"query_id":"543479","repo_name":"mes5k/nextflow","zip_link":"/mes5k/nextflow/archive/master.zip","code":"public class CustomMetaClassCreationHandle extends MetaClassRegistry.MetaClassCreationHandle {    static final Logger log = LoggerFactory.getLogger(CustomMetaClassCreationHandle.class);    protected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry) {        MetaClass metaClass = super.createNormalMetaClass( theClass, registry );        if( Number.class.isAssignableFrom(theClass) ) {            log.trace(\"Registering number meta-class for: {}\", theClass);             return new NumberDelegatingMetaClass(metaClass);        }        else if (isSplitterClass(theClass)) {            log.trace(\"Registering custom meta-class for: {}\", theClass);            return new NextflowDelegatingMetaClass(metaClass);        }        return metaClass;    }    protected boolean isSplitterClass( Class theClass ) {        return  String.class == theClass ||                File.class == theClass ||                Path.class.isAssignableFrom(theClass) ||                InputStream.class.isAssignableFrom(theClass) ||                Reader.class.isAssignableFrom(theClass) ||                DataflowVariable.class.isAssignableFrom(theClass) ||                DataflowQueue.class.isAssignableFrom(theClass);    }}","code_tokens":["public","class","custom","meta","class","creation","handle","extends","meta","class","registry",".","meta","class","creation","handle","{","static","final","logger","log","=","logger","factory",".","get","logger","(","custom","meta","class","creation","handle",".","class",")",";","protected","meta","class","create","normal","meta","class","(","class","the","class",",","meta","class","registry","registry",")","{","meta","class","meta","class","=","super",".","create","normal","meta","class","(","the","class",",","registry",")",";","if","(","number",".","class",".","is","assignable","from","(","the","class",")",")","{","log",".","trace","(","\"","registering","number","meta","-","class","for",":","{","}","\"",",","the","class",")",";","return","new","number","delegating","meta","class","(","meta","class",")",";","}","else","if","(","is","splitter","class","(","the","class",")",")","{","log",".","trace","(","\"","registering","custom","meta","-","class","for",":","{","}","\"",",","the","class",")",";","return","new","nextflow","delegating","meta","class","(","meta","class",")",";","}","return","meta","class",";","}","protected","boolean","is","splitter","class","(","class","the","class",")","{","return","string",".","class","=","=","the","class","|","|","file",".","class","=","=","the","class","|","|","path",".","class",".","is","assignable","from","(","the","class",")","|","|","input","stream",".","class",".","is","assignable","from","(","the","class",")","|","|","reader",".","class",".","is","assignable","from","(","the","class",")","|","|","dataflow","variable",".","class",".","is","assignable","from","(","the","class",")","|","|","dataflow","queue",".","class",".","is","assignable","from","(","the","class",")",";","}","}"],"func_name":"CustomMetaClassCreationHandle","func_name_tokens":["custom","meta","class","creation","handle"],"docstring":"  Register a generic meta-class handler to provide extra \"dynamic\" extension methods.  <p>  It add the splitter methods to the following classes:  <li>{@link Path}  <li>{@link File}  <li>{@link String}  <li>{@link java.io.InputStream}  <li>{@link Reader}  <li>{@link groovyx.gpars.dataflow.DataflowVariable}  <li>{@link groovyx.gpars.dataflow.DataflowQueue}     @link http://www.objectpartners.com/2013/07/30/customizing-mop-in-groovy/   @author Paolo Di Tommaso <paolo.ditommaso@gmail.com>","docstring_tokens":["register","a","generic","meta","-","class","handler","to","provide","extra","\"","dynamic","\"","extension","methods",".","<","p",">","it","add","the","splitter","methods","to","the","following","classes",":","<","li",">","{","path","}","<","li",">","{","file","}","<","li",">","{","string","}","<","li",">","{","java",".","io",".","input","stream","}","<","li",">","{","reader","}","<","li",">","{","groovyx",".","gpars",".","dataflow",".","dataflow","variable","}","<","li",">","{","groovyx",".","gpars",".","dataflow",".","dataflow","queue","}"],"query":"Groovy: Delegating metaclass for an Interface?","query_tokens":["groovy",":","delegating","metaclass","for","an","interface","?"]}
{"query_id":"18720212","repo_name":"jonatkins/ingress-intel-total-conversion","zip_link":"/iitc-project/ingress-intel-total-conversion/archive/master.zip","code":"    private static class HeaderAdapter extends ArrayAdapter<Header> {        static final int HEADER_TYPE_CATEGORY = 0;        static final int HEADER_TYPE_NORMAL = 1;        private static final int HEADER_TYPE_COUNT = HEADER_TYPE_NORMAL + 1;        private static class HeaderViewHolder {            TextView title;            TextView summary;        }        private final LayoutInflater mInflater;        static int getHeaderType(final Header header) {            if (header.fragment == null && header.intent == null) {                return HEADER_TYPE_CATEGORY;            } else {                return HEADER_TYPE_NORMAL;            }        }        @Override        public int getItemViewType(final int position) {            final Header header = getItem(position);            return getHeaderType(header);        }        @Override        public boolean areAllItemsEnabled() {            return false; // because of categories        }        @Override        public boolean isEnabled(final int position) {            return getItemViewType(position) != HEADER_TYPE_CATEGORY;        }        @Override        public int getViewTypeCount() {            return HEADER_TYPE_COUNT;        }        @Override        public boolean hasStableIds() {            return true;        }        public HeaderAdapter(final Context context, final List<Header> objects) {            super(context, 0, objects);            mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        }        @Override        public View getView(final int position, final View convertView, final ViewGroup parent) {            HeaderViewHolder holder;            final Header header = getItem(position);            final int headerType = getHeaderType(header);            View view = null;            if (convertView == null) {                holder = new HeaderViewHolder();                switch (headerType) {                    case HEADER_TYPE_CATEGORY:                        view = new TextView(getContext(), null, android.R.attr.listSeparatorTextViewStyle);                        holder.title = (TextView) view;                        break;                    case HEADER_TYPE_NORMAL:                        view = mInflater.inflate(R.layout.preference_header_item, parent, false);                        holder.title = (TextView) view.findViewById(R.id.plug_pref_title);                        holder.summary = (TextView) view.findViewById(R.id.plug_pref_summary);                        break;                }                view.setTag(holder);            } else {                view = convertView;                holder = (HeaderViewHolder) view.getTag();            }            // All view fields must be updated every time, because the view may be recycled            switch (headerType) {                case HEADER_TYPE_CATEGORY:                    holder.title.setText(header.getTitle(getContext().getResources()));                    break;                case HEADER_TYPE_NORMAL:                    holder.title.setText(header.getTitle(getContext().getResources()));                    final CharSequence summary = header.getSummary(getContext().getResources());                    if (!TextUtils.isEmpty(summary)) {                        holder.summary.setVisibility(View.VISIBLE);                        holder.summary.setText(summary);                    } else {                        holder.summary.setVisibility(View.GONE);                    }                    break;            }            return view;        }    }","code_tokens":["private","static","class","header","adapter","extends","array","adapter","<","header",">","{","static","final","int","header","type","category","=","0",";","static","final","int","header","type","normal","=","1",";","private","static","final","int","header","type","count","=","header","type","normal","+","1",";","private","static","class","header","view","holder","{","text","view","title",";","text","view","summary",";","}","private","final","layout","inflater","m","inflater",";","static","int","get","header","type","(","final","header","header",")","{","if","(","header",".","fragment","=","=","null","&","&","header",".","intent","=","=","null",")","{","return","header","type","category",";","}","else","{","return","header","type","normal",";","}","}","@","override","public","int","get","item","view","type","(","final","int","position",")","{","final","header","header","=","get","item","(","position",")",";","return","get","header","type","(","header",")",";","}","@","override","public","boolean","are","all","items","enabled","(",")","{","return","false",";","/","/","because","of","categories","}","@","override","public","boolean","is","enabled","(","final","int","position",")","{","return","get","item","view","type","(","position",")","!","=","header","type","category",";","}","@","override","public","int","get","view","type","count","(",")","{","return","header","type","count",";","}","@","override","public","boolean","has","stable","ids","(",")","{","return","true",";","}","public","header","adapter","(","final","context","context",",","final","list","<","header",">","objects",")","{","super","(","context",",","0",",","objects",")",";","m","inflater","=","(","layout","inflater",")","context",".","get","system","service","(","context",".","layout","inflater","service",")",";","}","@","override","public","view","get","view","(","final","int","position",",","final","view","convert","view",",","final","view","group","parent",")","{","header","view","holder","holder",";","final","header","header","=","get","item","(","position",")",";","final","int","header","type","=","get","header","type","(","header",")",";","view","view","=","null",";","if","(","convert","view","=","=","null",")","{","holder","=","new","header","view","holder","(",")",";","switch","(","header","type",")","{","case","header","type","category",":","view","=","new","text","view","(","get","context","(",")",",","null",",","android",".","r",".","attr",".","list","separator","text","view","style",")",";","holder",".","title","=","(","text","view",")","view",";","break",";","case","header","type","normal",":","view","=","m","inflater",".","inflate","(","r",".","layout",".","preference","header","item",",","parent",",","false",")",";","holder",".","title","=","(","text","view",")","view",".","find","view","by","id","(","r",".","id",".","plug","pref","title",")",";","holder",".","summary","=","(","text","view",")","view",".","find","view","by","id","(","r",".","id",".","plug","pref","summary",")",";","break",";","}","view",".","set","tag","(","holder",")",";","}","else","{","view","=","convert","view",";","holder","=","(","header","view","holder",")","view",".","get","tag","(",")",";","}","/","/","all","view","fields","must","be","updated","every","time",",","because","the","view","may","be","recycled","switch","(","header","type",")","{","case","header","type","category",":","holder",".","title",".","set","text","(","header",".","get","title","(","get","context","(",")",".","get","resources","(",")",")",")",";","break",";","case","header","type","normal",":","holder",".","title",".","set","text","(","header",".","get","title","(","get","context","(",")",".","get","resources","(",")",")",")",";","final","char","sequence","summary","=","header",".","get","summary","(","get","context","(",")",".","get","resources","(",")",")",";","if","(","!","text","utils",".","is","empty","(","summary",")",")","{","holder",".","summary",".","set","visibility","(","view",".","visible",")",";","holder",".","summary",".","set","text","(","summary",")",";","}","else","{","holder",".","summary",".","set","visibility","(","view",".","gone",")",";","}","break",";","}","return","view",";","}","}"],"func_name":"HeaderAdapter","func_name_tokens":["header","adapter"],"docstring":"    /      This code is only for header categories. Thx to Android that we haven't this by default and","docstring_tokens":["/","this","code","is","only","for","header","categories",".","thx","to","android","that","we","haven","'","t","this","by","default","and"],"query":"How to create preference headers groups in Android PreferenceActivity?","query_tokens":["how","to","create","preference","headers","groups","in","android","preference","activity","?"]}
{"query_id":"13814551","repo_name":"theworldbright/SoundLocker","zip_link":"/KentShikama/SoundLocker/archive/develop.zip","code":"public class JSONReader {    private static final String WEBSITES_JSON_FILE = \"websites.json\";    private static final String TAG = \"JSONReader\";    private static final String UTF8 = \"UTF-8\";    public static String loadJSONFromAsset(Context context) {        String json = null;        try {            InputStream is = context.getAssets().open(WEBSITES_JSON_FILE);            int size = is.available();            byte[] buffer = new byte[size];            is.read(buffer);            is.close();            json = new String(buffer, UTF8);        } catch (UnsupportedEncodingException e) {            Log.e(TAG, e.getMessage());        } catch (IOException e) {            Log.e(TAG, e.getMessage());        }        return json;    }}","code_tokens":["public","class","json","reader","{","private","static","final","string","websites","json","file","=","\"","websites",".","json","\"",";","private","static","final","string","tag","=","\"","json","reader","\"",";","private","static","final","string","utf8","=","\"","utf","-","8","\"",";","public","static","string","load","json","from","asset","(","context","context",")","{","string","json","=","null",";","try","{","input","stream","is","=","context",".","get","assets","(",")",".","open","(","websites","json","file",")",";","int","size","=","is",".","available","(",")",";","byte","[","]","buffer","=","new","byte","[","size","]",";","is",".","read","(","buffer",")",";","is",".","close","(",")",";","json","=","new","string","(","buffer",",","utf8",")",";","}","catch","(","unsupported","encoding","exception","e",")","{","log",".","e","(","tag",",","e",".","get","message","(",")",")",";","}","catch","(","io","exception","e",")","{","log",".","e","(","tag",",","e",".","get","message","(",")",")",";","}","return","json",";","}","}"],"func_name":"JSONReader","func_name_tokens":["json","reader"],"docstring":"  Loads JSON from an JSON file under the assets folder","docstring_tokens":["loads","json","from","an","json","file","under","the","assets","folder"],"query":"Reading a json file in Android [closed]","query_tokens":["reading","a","json","file","in","android","[","closed","]"]}
{"query_id":"4129666","repo_name":"lcappuccio/life-game","zip_link":"/lcappuccio/life-game/archive/master.zip","code":"\tprivate static Color hex2Rgb(String colorStr) {\t\treturn new Color(Integer.valueOf(colorStr.substring(1, 3), 16), Integer.valueOf(colorStr.substring(3, 5), 16),\t\t\t\tInteger.valueOf(colorStr.substring(5, 7), 16));\t}","code_tokens":["private","static","color","hex2rgb","(","string","color","str",")","{","return","new","color","(","integer",".","value","of","(","color","str",".","substring","(","1",",","3",")",",","16",")",",","integer",".","value","of","(","color","str",".","substring","(","3",",","5",")",",","16",")",",","integer",".","value","of","(","color","str",".","substring","(","5",",","7",")",",","16",")",")",";","}"],"func_name":"hex2Rgb","func_name_tokens":["hex2rgb"],"docstring":"\t\t  As seen on:\t  to-rgb-using-java\t \t  @param colorStr e.g. \"#FFFFFF\"\t  @return the colour in RGB fashion","docstring_tokens":["as","seen","on",":","to","-","rgb","-","using","-","java"],"query":"How to convert hex to rgb using Java?","query_tokens":["how","to","convert","hex","to","rgb","using","java","?"]}
{"query_id":"31345545","repo_name":"Pogman/640gAndroidUploader","zip_link":"/Pogman/640gAndroidUploader/archive/master.zip","code":"public class EditTextPreferenceURCHIN extends EditTextPreference {    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    public EditTextPreferenceURCHIN(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {        super(context, attrs, defStyleAttr, defStyleRes);    }    public EditTextPreferenceURCHIN(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    public EditTextPreferenceURCHIN(Context context, AttributeSet attrs) {        super(context, attrs);    }    public EditTextPreferenceURCHIN(Context context) {        super(context);    }    @Override    protected void showDialog(Bundle state) {        super.showDialog(state);        AlertDialog dlg = (AlertDialog) getDialog();        View positiveButton = dlg.getButton(DialogInterface.BUTTON_POSITIVE);        getEditText().setError(null);        positiveButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onPositiveButtonClicked(v);            }        });    }    private void onPositiveButtonClicked(View v) {        String errorMessage = onValidate(getEditText().getText().toString());        if (errorMessage == null) {            getEditText().setError(null);            onClick(getDialog(), DialogInterface.BUTTON_POSITIVE);            getDialog().dismiss();        } else {            getEditText().setError(errorMessage);        }    }    /***     * Called to validate contents of the edit text.     * <p/>     * Return null to indicate success, or return a validation error message to display on the edit text.     *     * @param text The text to validate.     * @return An error message, or null if the value passes validation.     */    private String legalCharacters = \" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz°•·-`~!@#$%^&*()_+=[]\\\\{}|;':\\\",./<>?\";    public String onValidate(String text) {        for (int i = 0; i < text.length(); i++) {            if (!legalCharacters.contains(text.substring(i, i+1)))                return getContext().getString(R.string.error_msg_illegal_characters);        }        if (text.length() > 30)            return getContext().getString(R.string.error_msg_exceeds_length);        return null;    }}","code_tokens":["public","class","edit","text","preference","urchin","extends","edit","text","preference","{","@","target","api","(","build",".","version","codes",".","lollipop",")","public","edit","text","preference","urchin","(","context","context",",","attribute","set","attrs",",","int","def","style","attr",",","int","def","style","res",")","{","super","(","context",",","attrs",",","def","style","attr",",","def","style","res",")",";","}","public","edit","text","preference","urchin","(","context","context",",","attribute","set","attrs",",","int","def","style","attr",")","{","super","(","context",",","attrs",",","def","style","attr",")",";","}","public","edit","text","preference","urchin","(","context","context",",","attribute","set","attrs",")","{","super","(","context",",","attrs",")",";","}","public","edit","text","preference","urchin","(","context","context",")","{","super","(","context",")",";","}","@","override","protected","void","show","dialog","(","bundle","state",")","{","super",".","show","dialog","(","state",")",";","alert","dialog","dlg","=","(","alert","dialog",")","get","dialog","(",")",";","view","positive","button","=","dlg",".","get","button","(","dialog","interface",".","button","positive",")",";","get","edit","text","(",")",".","set","error","(","null",")",";","positive","button",".","set","on","click","listener","(","new","view",".","on","click","listener","(",")","{","@","override","public","void","on","click","(","view","v",")","{","on","positive","button","clicked","(","v",")",";","}","}",")",";","}","private","void","on","positive","button","clicked","(","view","v",")","{","string","error","message","=","on","validate","(","get","edit","text","(",")",".","get","text","(",")",".","to","string","(",")",")",";","if","(","error","message","=","=","null",")","{","get","edit","text","(",")",".","set","error","(","null",")",";","on","click","(","get","dialog","(",")",",","dialog","interface",".","button","positive",")",";","get","dialog","(",")",".","dismiss","(",")",";","}","else","{","get","edit","text","(",")",".","set","error","(","error","message",")",";","}","}","private","string","legal","characters","=","\"","0123456789abcdefghijklmnopqrstuvwxy","zabcdefghijklmnopqrstuvwxyz","°","•","·","-","`","~","!","@","#","$","%","^","&","*","(",")","+","=","[","]","\\","\\","{","}","|",";","'",":","\\","\"",",",".","/","<",">","?","\"",";","public","string","on","validate","(","string","text",")","{","for","(","int","i","=","0",";","i","<","text",".","length","(",")",";","i","+","+",")","{","if","(","!","legal","characters",".","contains","(","text",".","substring","(","i",",","i","+","1",")",")",")","return","get","context","(",")",".","get","string","(","r",".","string",".","error","msg","illegal","characters",")",";","}","if","(","text",".","length","(",")",">","30",")","return","get","context","(",")",".","get","string","(","r",".","string",".","error","msg","exceeds","length",")",";","return","null",";","}","}"],"func_name":"EditTextPreferenceURCHIN","func_name_tokens":["edit","text","preference","urchin"],"docstring":"  Created by lgoedhart on 29/05/2016. ","docstring_tokens":["created","by","lgoedhart","on","29","/","05","/","2016","."],"query":"Validating editTextPreference Android","query_tokens":["validating","edit","text","preference","android"]}
{"query_id":"5419039","repo_name":"natasha-pel/hadoop-etl-udfs","zip_link":"/natasha-pel/hadoop-etl-udfs/archive/master.zip","code":"    private static void addDirToJavaLibraryPath(String path) throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {        System.setProperty(\"java.library.path\", path );        Field fieldSysPath = ClassLoader.class.getDeclaredField( \"sys_paths\" );        fieldSysPath.setAccessible( true );        fieldSysPath.set( null, null );    }","code_tokens":["private","static","void","add","dir","to","java","library","path","(","string","path",")","throws","no","such","field","exception",",","security","exception",",","illegal","argument","exception",",","illegal","access","exception","{","system",".","set","property","(","\"","java",".","library",".","path","\"",",","path",")",";","field","field","sys","path","=","class","loader",".","class",".","get","declared","field","(","\"","sys","paths","\"",")",";","field","sys","path",".","set","accessible","(","true",")",";","field","sys","path",".","set","(","null",",","null",")",";","}"],"func_name":"addDirToJavaLibraryPath","func_name_tokens":["add","dir","to","java","library","path"],"docstring":"          This enables the java.library.path to be modified at runtime, which is required to load java native libraries      From a Sun engineer at http://forums.sun.com/thread.jspa?threadID=707176      and http://fahdshariff.blogspot.jp/2011/08/changing-java-library-path-at-runtime.html","docstring_tokens":["this","enables","the","java",".","library",".","path","to","be","modified","at","runtime",",","which","is","required","to","load","java","native","libraries","from","a","sun","engineer","at","and"],"query":"Is -Djava.library.path=… equivalent to System.setProperty(“java.library.path”, …)","query_tokens":["is","-","djava",".","library",".","path","=","…","equivalent","to","system",".","set","property","(","“","java",".","library",".","path","”",",","…",")"]}
{"query_id":"7428996","repo_name":"Minitour/crofis-android-uikit","zip_link":"/Minitour/crofis-android-uikit/archive/master.zip","code":"    private static int getMaxTextureSize() {        // Safe minimum default size        final int IMAGE_MAX_BITMAP_DIMENSION = 2048;        try {            // Get EGL Display            EGL10 egl = (EGL10) EGLContext.getEGL();            EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);            // Initialise            int[] version = new int[2];            egl.eglInitialize(display, version);            // Query total number of configurations            int[] totalConfigurations = new int[1];            egl.eglGetConfigs(display, null, 0, totalConfigurations);            // Query actual list configurations            EGLConfig[] configurationsList = new EGLConfig[totalConfigurations[0]];            egl.eglGetConfigs(display, configurationsList, totalConfigurations[0], totalConfigurations);            int[] textureSize = new int[1];            int maximumTextureSize = 0;            // Iterate through all the configurations to located the maximum texture size            for (int i = 0; i < totalConfigurations[0]; i++) {                // Only need to check for width since opengl textures are always squared                egl.eglGetConfigAttrib(display, configurationsList[i], EGL10.EGL_MAX_PBUFFER_WIDTH, textureSize);                // Keep track of the maximum texture size                if (maximumTextureSize < textureSize[0]) {                    maximumTextureSize = textureSize[0];                }            }            // Release            egl.eglTerminate(display);            // Return largest texture size found, or default            return Math.max(maximumTextureSize, IMAGE_MAX_BITMAP_DIMENSION);        } catch (Exception e) {            return IMAGE_MAX_BITMAP_DIMENSION;        }    }","code_tokens":["private","static","int","get","max","texture","size","(",")","{","/","/","safe","minimum","default","size","final","int","image","max","bitmap","dimension","=","2048",";","try","{","/","/","get","egl","display","egl10","egl","=","(","egl10",")","egl","context",".","get","egl","(",")",";","egl","display","display","=","egl",".","egl","get","display","(","egl10",".","egl","default","display",")",";","/","/","initialise","int","[","]","version","=","new","int","[","2","]",";","egl",".","egl","initialize","(","display",",","version",")",";","/","/","query","total","number","of","configurations","int","[","]","total","configurations","=","new","int","[","1","]",";","egl",".","egl","get","configs","(","display",",","null",",","0",",","total","configurations",")",";","/","/","query","actual","list","configurations","egl","config","[","]","configurations","list","=","new","egl","config","[","total","configurations","[","0","]","]",";","egl",".","egl","get","configs","(","display",",","configurations","list",",","total","configurations","[","0","]",",","total","configurations",")",";","int","[","]","texture","size","=","new","int","[","1","]",";","int","maximum","texture","size","=","0",";","/","/","iterate","through","all","the","configurations","to","located","the","maximum","texture","size","for","(","int","i","=","0",";","i","<","total","configurations","[","0","]",";","i","+","+",")","{","/","/","only","need","to","check","for","width","since","opengl","textures","are","always","squared","egl",".","egl","get","config","attrib","(","display",",","configurations","list","[","i","]",",","egl10",".","egl","max","pbuffer","width",",","texture","size",")",";","/","/","keep","track","of","the","maximum","texture","size","if","(","maximum","texture","size","<","texture","size","[","0","]",")","{","maximum","texture","size","=","texture","size","[","0","]",";","}","}","/","/","release","egl",".","egl","terminate","(","display",")",";","/","/","return","largest","texture","size","found",",","or","default","return","math",".","max","(","maximum","texture","size",",","image","max","bitmap","dimension",")",";","}","catch","(","exception","e",")","{","return","image","max","bitmap","dimension",";","}","}"],"func_name":"getMaxTextureSize","func_name_tokens":["get","max","texture","size"],"docstring":"          Get the max size of bitmap allowed to be rendered on the device.<br>","docstring_tokens":["get","the","max","size","of","bitmap","allowed","to","be","rendered","on","the","device",".","<","br",">"],"query":"HW accelerated activity - how to get OpenGL texture size limit?","query_tokens":["hw","accelerated","activity","-","how","to","get","open","gl","texture","size","limit","?"]}
{"query_id":"1030479","repo_name":"lenhard/jabref","zip_link":"/lenhard/jabref/archive/master.zip","code":"    public static int intValueOf(String str) {        int idx = 0;        int end;        boolean sign = false;        char ch;        if ((str == null) || ((end = str.length()) == 0) || ((((ch = str.charAt(0)) < '0') || (ch > '9')) && (!(sign = ch == '-') || (++idx == end) || ((ch = str.charAt(idx)) < '0') || (ch > '9')))) {            throw new NumberFormatException(str);        }        int ival = 0;        for (;; ival *= 10) {            ival += '0' - ch;            if (++idx == end) {                return sign ? ival : -ival;            }            if (((ch = str.charAt(idx)) < '0') || (ch > '9')) {                throw new NumberFormatException(str);            }        }    }","code_tokens":["public","static","int","int","value","of","(","string","str",")","{","int","idx","=","0",";","int","end",";","boolean","sign","=","false",";","char","ch",";","if","(","(","str","=","=","null",")","|","|","(","(","end","=","str",".","length","(",")",")","=","=","0",")","|","|","(","(","(","(","ch","=","str",".","char","at","(","0",")",")","<","'","0","'",")","|","|","(","ch",">","'","9","'",")",")","&","&","(","!","(","sign","=","ch","=","=","'","-","'",")","|","|","(","+","+","idx","=","=","end",")","|","|","(","(","ch","=","str",".","char","at","(","idx",")",")","<","'","0","'",")","|","|","(","ch",">","'","9","'",")",")",")",")","{","throw","new","number","format","exception","(","str",")",";","}","int","ival","=","0",";","for","(",";",";","ival","*","=","10",")","{","ival","+","=","'","0","'","-","ch",";","if","(","+","+","idx","=","=","end",")","{","return","sign","?","ival",":","-","ival",";","}","if","(","(","(","ch","=","str",".","char","at","(","idx",")",")","<","'","0","'",")","|","|","(","ch",">","'","9","'",")",")","{","throw","new","number","format","exception","(","str",")",";","}","}","}"],"func_name":"intValueOf","func_name_tokens":["int","value","of"],"docstring":"          Optimized method for converting a String into an Integer                @param str the String holding an Integer value      @throws NumberFormatException if str cannot be parsed to an int      @return the int value of str","docstring_tokens":["optimized","method","for","converting","a","string","into","an","integer"],"query":"Most efficient way of converting String to Integer in java","query_tokens":["most","efficient","way","of","converting","string","to","integer","in","java"]}
{"query_id":"987072","repo_name":"aikuma/aikuma","zip_link":"/aikuma/aikuma/archive/master.zip","code":"public class Aikuma extends android.app.Application {\tprivate static Aikuma instance;\tprivate static List<Language> languages;\tprivate static Map<String, String> languageCodeMap;\tprivate static SharedPreferences preferences;\t/**\t * The constructor.\t */\tpublic Aikuma() {\t\tinstance = this;\t}\t/**\t * Static method that provides a context when needed by code not bound to\t * any meaningful context.\t *\t * @return\tA Context\t */\tpublic static Context getContext() {\t\treturn instance;\t}\t/**\t * Gets the phone model name\t * \t * @return\tThe device name (manufacturer + model)\t */\tpublic static String getDeviceName() {\t\treturn Build.MANUFACTURER + \"-\" + Build.MODEL;\t}\t\t/**\t * Gets the android ID of the phone.\t *\t * @return\tThe android ID as a String.\t */\tpublic static String getAndroidID() {\t\treturn Secure.getString(\t\t\t\tgetContext().getContentResolver(), Secure.ANDROID_ID);\t}\t/**     * Checks whether the device is currently connected to a network     * @return\tboolean for status     */    public static boolean isDeviceOnline() {    \tif(preferences == null) {    \t\tpreferences =     \t\t\t\tPreferenceManager.getDefaultSharedPreferences(getContext());    \t\tAikumaSettings.isOnlyWifi =     \t\t\t\tpreferences.getBoolean(AikumaSettings.WIFI_MODE_KEY, true);    \t}    \t    \tConnectivityManager connMgr = (ConnectivityManager)                getContext().getSystemService(Context.CONNECTIVITY_SERVICE);    \tNetworkInfo networkInfo;    \tif(AikumaSettings.isNetwork){    \t\tnetworkInfo = connMgr.getActiveNetworkInfo();       \t} else if(AikumaSettings.isOnlyWifi) {    \t\tnetworkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);    \t} else {    \t\tnetworkInfo = null;    \t}    \t    \tif (networkInfo != null && networkInfo.isConnected()) {            return true;        }    \treturn false;    }        /**     * Checks if Wifi is enabled     * @return\ttrue if Wifi is enabled     */    public static boolean isWifiEnabled() {    \tWifiManager wifiMgr = (WifiManager) getContext().getSystemService(Context.WIFI_SERVICE);    \treturn wifiMgr.isWifiEnabled();    }        /**     * Check if the file is already archived/in the progress of archiving or not     *      * @param emailAccount\tOwner account of the file     * @param fm\t\t\tThe file's model     * @return\t\t\t\tboolean of the archive status     */    public static boolean isArchived(String emailAccount, FileModel fm) {    \t//TODO: needs to be changed to make a query to fusionindex (because, the file could be archived in the other device)    \t    \tString itemCloudId = fm.getCloudIdentifier(0);    \t    \tSet<String> approvedSet;    \tSet<String> archivedSet;    \tint archiveProgress = -1;    \t    \tSharedPreferences privatePreferences =     \t\t\tgetContext().getSharedPreferences(emailAccount, MODE_PRIVATE);    \tString fileType = fm.getFileType();    \tif(fileType.equals(\"source\") || fileType.equals(\"respeaking\")) {    \t\tapprovedSet = (HashSet<String>) privatePreferences.getStringSet(    \t\t\t\tAikumaSettings.APPROVED_RECORDING_KEY, new HashSet<String>());    \t\tarchivedSet = (HashSet<String>) privatePreferences.getStringSet(    \t\t\t\tAikumaSettings.ARCHIVED_RECORDING_KEY, new HashSet<String>());\t\t} else if(fileType.equals(\"speaker\")) {\t\t\tapprovedSet = (HashSet<String>) privatePreferences.getStringSet(    \t\t\t\tAikumaSettings.APPROVED_SPEAKERS_KEY, new HashSet<String>());\t\t\tarchivedSet = (HashSet<String>) privatePreferences.getStringSet(\t\t\t\t\tAikumaSettings.ARCHIVED_SPEAKERS_KEY, new HashSet<String>());\t\t} else {\t\t\tapprovedSet = (HashSet<String>) privatePreferences.getStringSet(    \t\t\t\tAikumaSettings.APPROVED_OTHERS_KEY, new HashSet<String>());\t\t\tarchivedSet = (HashSet<String>) privatePreferences.getStringSet(\t\t\t\t\tAikumaSettings.ARCHIVED_OTHERS_KEY, new HashSet<String>());\t\t}    \t    \tif(approvedSet.contains(itemCloudId)) {    \t\tString[] requestArchiveState = \t\t\t\t\tprivatePreferences.getString(itemCloudId, \"\").split(\"\\\\|\");\t\t\tarchiveProgress = \t\t\t\t\tInteger.parseInt(requestArchiveState[1]);    \t}    \treturn archivedSet.contains(itemCloudId) || (archiveProgress >= 0 && archiveProgress <= 3);    }        /**\t * Sync the device with Google-Cloud\t * \t * @param\tactivity\tThe activity which triggers sync\t * @param\tforceSync\tForce the cloud-sync\t */\tpublic static void syncRefresh(Activity activity, boolean forceSync) {\t\tif(forceSync) {\t\t\tif(!Aikuma.isDeviceOnline()) {\t\t\t\tAikuma.showAlertDialog(activity, \"Network needs to be connected\");\t\t\t\treturn;\t\t\t} else if(AikumaSettings.getCurrentUserToken() == null) {\t\t\t\tAikuma.showAlertDialog(activity, \t\t\t\t\t\t\"You need to connect to Google-Drive with your account\");\t\t\t\treturn;\t\t\t} else {\t\t\t\tIntent syncIntent = new Intent(activity, GoogleCloudService.class);\t\t\t\tsyncIntent.putExtra(GoogleCloudService.ACTION_KEY, \"sync\");\t\t\t\tsyncIntent.putExtra(GoogleCloudService.ACCOUNT_KEY, \t\t\t\t\t\tAikumaSettings.getCurrentUserId());\t\t\t\tsyncIntent.putExtra(GoogleCloudService.TOKEN_KEY, \t\t\t\t\t\tAikumaSettings.getCurrentUserToken());\t\t\t\tsyncIntent.putExtra(\"forceSync\", forceSync);\t\t\t\tactivity.startService(syncIntent);\t\t\t}\t\t} else {\t\t\tSharedPreferences settings = activity.getSharedPreferences(\t\t\t\t\tAikumaSettings.getCurrentUserId(), MODE_PRIVATE);\t\t\t\tint sz = 0;\t\t\tsz += settings.getStringSet(AikumaSettings.APPROVED_RECORDING_KEY, \t\t\t\t\tnew HashSet<String>()).size();\t\t\tsz += settings.getStringSet(AikumaSettings.APPROVED_SPEAKERS_KEY,\t\t\t\t\tnew HashSet<String>()).size();\t\t\tsz += settings.getStringSet(AikumaSettings.APPROVED_OTHERS_KEY,\t\t\t\t\tnew HashSet<String>()).size();\t\t\tsz += settings.getStringSet(AikumaSettings.DOWNLOAD_RECORDING_KEY, \t\t\t\t\tnew HashSet<String>()).size();\t\t\tsz += settings.getStringSet(AikumaSettings.DOWNLOAD_SPEAKERS_KEY,\t\t\t\t\tnew HashSet<String>()).size();\t\t\tsz += settings.getStringSet(AikumaSettings.DOWNLOAD_OTHERS_KEY,\t\t\t\t\tnew HashSet<String>()).size();\t\t\tif(sz > 0) {\t    \t\t// If there are items to be uploaded,\t\t\t\t// start the GoogleCloud upload service \t    \t\tIntent intent = new Intent(activity, \t    \t\t\t\tGoogleCloudService.class);\t    \t\tintent.putExtra(GoogleCloudService.ACTION_KEY, \"retry\");\t    \t\tintent.putExtra(GoogleCloudService.ACCOUNT_KEY, \t\t\t\t\t\tAikumaSettings.getCurrentUserId());\t\t\t\tintent.putExtra(GoogleCloudService.TOKEN_KEY, \t\t\t\t\t\tAikumaSettings.getCurrentUserToken());\t\t\t\tactivity.startService(intent);\t\t\t}\t\t}\t}            /**     * Return an arraylist of available google-accounts in a device     * @return\tArrayList of google-accounts     */    public static ArrayList<String> getGoogleAccounts() {    \tArrayList<String> accountList = new ArrayList<String>();    \t    \tAccount[] accounts =     \t\t\tAccountManager.get(getContext()).getAccountsByType(\"com.google\");    \tfor(Account ac : accounts) {    \t\taccountList.add(ac.name);    \t}    \t    \treturn accountList;    }            /**     * Show the warning dialog with the message     * @param activity\tThe activity where the message will be shown     * @param message\tthe message shown in the dialog     */    public static void showAlertDialog(Context activity, String message) {    \tnew AlertDialog.Builder(activity).setMessage(message).show();    }        /**     * Show the confirmation dialog with the message     * @param activity\tThe activity where the message will be shown     * @param message\tthe message shown in the dialog     * @param okListener\tThe callback interface when ok-button is pressed     */    public static void showConfirmationDialog(Context activity, String message,     \t\tDialogInterface.OnClickListener okListener) {    \tnew AlertDialog.Builder(activity)    \t\t.setMessage(message)    \t\t.setPositiveButton(\"OK\", okListener)    \t\t.setNegativeButton(\"Cancel\", null)    \t\t.show();    }\t\t/**\t * Returns the ISO 639-3 languages once they are loaded.\t * \t * @return\tthe languages\t */\tpublic static List<Language> getLanguages() {\t\tif (languages == null) {\t\t\tloadLanguages();\t\t\twhile (languages == null) {\t\t\t\t//Wait patiently.\t\t\t}\t\t}\t\treturn languages;\t}\t\t/**\t * Returns the ISO 639-3 language map (code - name)\t * \t * @return\tthe languageCodeMap\t */\tpublic static Map<String, String> getLanguageCodeMap() {\t\tif (languageCodeMap == null) {\t\t\tloadLanguages();\t\t\twhile (languageCodeMap == null) {\t\t\t\t//Wait patiently\t\t\t}\t\t}\t\treturn languageCodeMap;\t}\t\t\t/**\t * Loads the ISO 639-3 languages.\t */\tpublic static void loadLanguages() {\t\tif (languages == null) {\t\t\tlanguages = new ArrayList<Language>();\t\t\tlanguageCodeMap = new HashMap<String, String>();\t\t\t\t\t\tif (loadLangCodesThread == null || !loadLangCodesThread.isAlive()) {\t\t\t\tloadLangCodesThread = new Thread(new Runnable() {\t\t\t\t\tpublic void run() {\t\t\t\t\t\ttry {\t\t\t\t\t\t\tFileIO.readLangCodes(getContext().getResources(), \t\t\t\t\t\t\t\t\tlanguages, languageCodeMap);\t\t\t\t\t\t} catch (IOException e) {\t\t\t\t\t\t\t// This should never happen.\t\t\t\t\t\t\tthrow new RuntimeException(\"Cannot load languages\");\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t});\t\t\t\tloadLangCodesThread.start();\t\t\t}\t\t}\t}\t/**\t * The thread used to load the language codes without interrupting the\t * main thread.\t */\tpublic static Thread loadLangCodesThread;}","code_tokens":["public","class","aikuma","extends","android",".","app",".","application","{","private","static","aikuma","instance",";","private","static","list","<","language",">","languages",";","private","static","map","<","string",",","string",">","language","code","map",";","private","static","shared","preferences","preferences",";","public","aikuma","(",")","{","instance","=","this",";","}","public","static","context","get","context","(",")","{","return","instance",";","}","public","static","string","get","device","name","(",")","{","return","build",".","manufacturer","+","\"","-","\"","+","build",".","model",";","}","public","static","string","get","android","id","(",")","{","return","secure",".","get","string","(","get","context","(",")",".","get","content","resolver","(",")",",","secure",".","android","id",")",";","}","public","static","boolean","is","device","online","(",")","{","if","(","preferences","=","=","null",")","{","preferences","=","preference","manager",".","get","default","shared","preferences","(","get","context","(",")",")",";","aikuma","settings",".","is","only","wifi","=","preferences",".","get","boolean","(","aikuma","settings",".","wifi","mode","key",",","true",")",";","}","connectivity","manager","conn","mgr","=","(","connectivity","manager",")","get","context","(",")",".","get","system","service","(","context",".","connectivity","service",")",";","network","info","network","info",";","if","(","aikuma","settings",".","is","network",")","{","network","info","=","conn","mgr",".","get","active","network","info","(",")",";","}","else","if","(","aikuma","settings",".","is","only","wifi",")","{","network","info","=","conn","mgr",".","get","network","info","(","connectivity","manager",".","type","wifi",")",";","}","else","{","network","info","=","null",";","}","if","(","network","info","!","=","null","&","&","network","info",".","is","connected","(",")",")","{","return","true",";","}","return","false",";","}","public","static","boolean","is","wifi","enabled","(",")","{","wifi","manager","wifi","mgr","=","(","wifi","manager",")","get","context","(",")",".","get","system","service","(","context",".","wifi","service",")",";","return","wifi","mgr",".","is","wifi","enabled","(",")",";","}","public","static","boolean","is","archived","(","string","email","account",",","file","model","fm",")","{","/","/","todo",":","needs","to","be","changed","to","make","a","query","to","fusionindex","(","because",",","the","file","could","be","archived","in","the","other","device",")","string","item","cloud","id","=","fm",".","get","cloud","identifier","(","0",")",";","set","<","string",">","approved","set",";","set","<","string",">","archived","set",";","int","archive","progress","=","-","1",";","shared","preferences","private","preferences","=","get","context","(",")",".","get","shared","preferences","(","email","account",",","mode","private",")",";","string","file","type","=","fm",".","get","file","type","(",")",";","if","(","file","type",".","equals","(","\"","source","\"",")","|","|","file","type",".","equals","(","\"","respeaking","\"",")",")","{","approved","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","approved","recording","key",",","new","hash","set","<","string",">","(",")",")",";","archived","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","archived","recording","key",",","new","hash","set","<","string",">","(",")",")",";","}","else","if","(","file","type",".","equals","(","\"","speaker","\"",")",")","{","approved","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","approved","speakers","key",",","new","hash","set","<","string",">","(",")",")",";","archived","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","archived","speakers","key",",","new","hash","set","<","string",">","(",")",")",";","}","else","{","approved","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","approved","others","key",",","new","hash","set","<","string",">","(",")",")",";","archived","set","=","(","hash","set","<","string",">",")","private","preferences",".","get","string","set","(","aikuma","settings",".","archived","others","key",",","new","hash","set","<","string",">","(",")",")",";","}","if","(","approved","set",".","contains","(","item","cloud","id",")",")","{","string","[","]","request","archive","state","=","private","preferences",".","get","string","(","item","cloud","id",",","\"","\"",")",".","split","(","\"","\\","\\","|","\"",")",";","archive","progress","=","integer",".","parse","int","(","request","archive","state","[","1","]",")",";","}","return","archived","set",".","contains","(","item","cloud","id",")","|","|","(","archive","progress",">","=","0","&","&","archive","progress","<","=","3",")",";","}","public","static","void","sync","refresh","(","activity","activity",",","boolean","force","sync",")","{","if","(","force","sync",")","{","if","(","!","aikuma",".","is","device","online","(",")",")","{","aikuma",".","show","alert","dialog","(","activity",",","\"","network","needs","to","be","connected","\"",")",";","return",";","}","else","if","(","aikuma","settings",".","get","current","user","token","(",")","=","=","null",")","{","aikuma",".","show","alert","dialog","(","activity",",","\"","you","need","to","connect","to","google","-","drive","with","your","account","\"",")",";","return",";","}","else","{","intent","sync","intent","=","new","intent","(","activity",",","google","cloud","service",".","class",")",";","sync","intent",".","put","extra","(","google","cloud","service",".","action","key",",","\"","sync","\"",")",";","sync","intent",".","put","extra","(","google","cloud","service",".","account","key",",","aikuma","settings",".","get","current","user","id","(",")",")",";","sync","intent",".","put","extra","(","google","cloud","service",".","token","key",",","aikuma","settings",".","get","current","user","token","(",")",")",";","sync","intent",".","put","extra","(","\"","force","sync","\"",",","force","sync",")",";","activity",".","start","service","(","sync","intent",")",";","}","}","else","{","shared","preferences","settings","=","activity",".","get","shared","preferences","(","aikuma","settings",".","get","current","user","id","(",")",",","mode","private",")",";","int","sz","=","0",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","approved","recording","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","approved","speakers","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","approved","others","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","download","recording","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","download","speakers","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","sz","+","=","settings",".","get","string","set","(","aikuma","settings",".","download","others","key",",","new","hash","set","<","string",">","(",")",")",".","size","(",")",";","if","(","sz",">","0",")","{","/","/","if","there","are","items","to","be","uploaded",",","/","/","start","the","google","cloud","upload","service","intent","intent","=","new","intent","(","activity",",","google","cloud","service",".","class",")",";","intent",".","put","extra","(","google","cloud","service",".","action","key",",","\"","retry","\"",")",";","intent",".","put","extra","(","google","cloud","service",".","account","key",",","aikuma","settings",".","get","current","user","id","(",")",")",";","intent",".","put","extra","(","google","cloud","service",".","token","key",",","aikuma","settings",".","get","current","user","token","(",")",")",";","activity",".","start","service","(","intent",")",";","}","}","}","public","static","array","list","<","string",">","get","google","accounts","(",")","{","array","list","<","string",">","account","list","=","new","array","list","<","string",">","(",")",";","account","[","]","accounts","=","account","manager",".","get","(","get","context","(",")",")",".","get","accounts","by","type","(","\"","com",".","google","\"",")",";","for","(","account","ac",":","accounts",")","{","account","list",".","add","(","ac",".","name",")",";","}","return","account","list",";","}","public","static","void","show","alert","dialog","(","context","activity",",","string","message",")","{","new","alert","dialog",".","builder","(","activity",")",".","set","message","(","message",")",".","show","(",")",";","}","public","static","void","show","confirmation","dialog","(","context","activity",",","string","message",",","dialog","interface",".","on","click","listener","ok","listener",")","{","new","alert","dialog",".","builder","(","activity",")",".","set","message","(","message",")",".","set","positive","button","(","\"","ok","\"",",","ok","listener",")",".","set","negative","button","(","\"","cancel","\"",",","null",")",".","show","(",")",";","}","public","static","list","<","language",">","get","languages","(",")","{","if","(","languages","=","=","null",")","{","load","languages","(",")",";","while","(","languages","=","=","null",")","{","/","/","wait","patiently",".","}","}","return","languages",";","}","public","static","map","<","string",",","string",">","get","language","code","map","(",")","{","if","(","language","code","map","=","=","null",")","{","load","languages","(",")",";","while","(","language","code","map","=","=","null",")","{","/","/","wait","patiently","}","}","return","language","code","map",";","}","public","static","void","load","languages","(",")","{","if","(","languages","=","=","null",")","{","languages","=","new","array","list","<","language",">","(",")",";","language","code","map","=","new","hash","map","<","string",",","string",">","(",")",";","if","(","load","lang","codes","thread","=","=","null","|","|","!","load","lang","codes","thread",".","is","alive","(",")",")","{","load","lang","codes","thread","=","new","thread","(","new","runnable","(",")","{","public","void","run","(",")","{","try","{","file","io",".","read","lang","codes","(","get","context","(",")",".","get","resources","(",")",",","languages",",","language","code","map",")",";","}","catch","(","io","exception","e",")","{","/","/","this","should","never","happen",".","throw","new","runtime","exception","(","\"","cannot","load","languages","\"",")",";","}","}","}",")",";","load","lang","codes","thread",".","start","(",")",";","}","}","}","public","static","thread","load","lang","codes","thread",";","}"],"func_name":"Aikuma","func_name_tokens":["aikuma"],"docstring":"  Offers a collection of static methods that require a context independently  of an Activity.   Sources and caveats:  http://stackoverflow.com/questions/2002288/static-way-to-get-context-on-android    @author\tOliver Adams\t<oliver.adams@gmail.com>  @author\tFlorian Hanke\t<florian.hanke@gmail.com>","docstring_tokens":["offers","a","collection","of","static","methods","that","require","a","context","independently","of","an","activity",".","sources","and","caveats",":"],"query":"Using Application context everywhere?","query_tokens":["using","application","context","everywhere","?"]}
{"query_id":"4454630","repo_name":"Myrninvollo/Midgard-Server","zip_link":"/Myrninvollo/Midgard-Server/archive/master.zip","code":"public class TrigMath {    static final double sq2p1 = 2.414213562373095048802e0;    static final double sq2m1 = .414213562373095048802e0;    static final double p4 = .161536412982230228262e2;    static final double p3 = .26842548195503973794141e3;    static final double p2 = .11530293515404850115428136e4;    static final double p1 = .178040631643319697105464587e4;    static final double p0 = .89678597403663861959987488e3;    static final double q4 = .5895697050844462222791e2;    static final double q3 = .536265374031215315104235e3;    static final double q2 = .16667838148816337184521798e4;    static final double q1 = .207933497444540981287275926e4;    static final double q0 = .89678597403663861962481162e3;    static final double PIO2 = 1.5707963267948966135E0;    private static double mxatan(double arg) {        double argsq = arg * arg, value;        value = ((((p4 * argsq + p3) * argsq + p2) * argsq + p1) * argsq + p0);        value = value / (((((argsq + q4) * argsq + q3) * argsq + q2) * argsq + q1) * argsq + q0);        return value * arg;    }    private static double msatan(double arg) {        return arg < sq2m1 ? mxatan(arg)             : arg > sq2p1 ? PIO2 - mxatan(1 / arg)             : PIO2 / 2 + mxatan((arg - 1) / (arg + 1));    }    public static double atan(double arg) {        return arg > 0 ? msatan(arg) : -msatan(-arg);    }    public static double atan2(double arg1, double arg2) {        if (arg1 + arg2 == arg1)            return arg1 >= 0 ? PIO2 : -PIO2;        arg1 = atan(arg1 / arg2);        return arg2 < 0 ? arg1 <= 0 ? arg1 + Math.PI : arg1 - Math.PI : arg1;    }}","code_tokens":["public","class","trig","math","{","static","final","double","sq2p1","=","2",".","414213562373095048802e0",";","static","final","double","sq2m1","=",".","414213562373095048802e0",";","static","final","double","p4","=",".","161536412982230228262e2",";","static","final","double","p3","=",".","26842548195503973794141e3",";","static","final","double","p2","=",".","11530293515404850115428136e4",";","static","final","double","p1","=",".","178040631643319697105464587e4",";","static","final","double","p0","=",".","89678597403663861959987488e3",";","static","final","double","q4","=",".","5895697050844462222791e2",";","static","final","double","q3","=",".","536265374031215315104235e3",";","static","final","double","q2","=",".","16667838148816337184521798e4",";","static","final","double","q1","=",".","207933497444540981287275926e4",";","static","final","double","q0","=",".","89678597403663861962481162e3",";","static","final","double","pio2","=","1",".","5707963267948966135e0",";","private","static","double","mxatan","(","double","arg",")","{","double","argsq","=","arg","*","arg",",","value",";","value","=","(","(","(","(","p4","*","argsq","+","p3",")","*","argsq","+","p2",")","*","argsq","+","p1",")","*","argsq","+","p0",")",";","value","=","value","/","(","(","(","(","(","argsq","+","q4",")","*","argsq","+","q3",")","*","argsq","+","q2",")","*","argsq","+","q1",")","*","argsq","+","q0",")",";","return","value","*","arg",";","}","private","static","double","msatan","(","double","arg",")","{","return","arg","<","sq2m1","?","mxatan","(","arg",")",":","arg",">","sq2p1","?","pio2","-","mxatan","(","1","/","arg",")",":","pio2","/","2","+","mxatan","(","(","arg","-","1",")","/","(","arg","+","1",")",")",";","}","public","static","double","atan","(","double","arg",")","{","return","arg",">","0","?","msatan","(","arg",")",":","-","msatan","(","-","arg",")",";","}","public","static","double","atan2","(","double","arg1",",","double","arg2",")","{","if","(","arg1","+","arg2","=","=","arg1",")","return","arg1",">","=","0","?","pio2",":","-","pio2",";","arg1","=","atan","(","arg1","/","arg2",")",";","return","arg2","<","0","?","arg1","<","=","0","?","arg1","+","math",".","pi",":","arg1","-","math",".","pi",":","arg1",";","}","}"],"func_name":"TrigMath","func_name_tokens":["trig","math"],"docstring":"  Credits for this class goes to user aioobe on stackoverflow.com","docstring_tokens":["credits","for","this","class","goes","to","user","aioobe","on","stackoverflow",".","com"],"query":"J2ME - Calculate the distance between 2 latitude and longitude","query_tokens":["j2me","-","calculate","the","distance","between","2","latitude","and","longitude"]}
{"query_id":"52821421","repo_name":"mkl-public/testarea-pdfbox2","zip_link":"/mkl-public/testarea-pdfbox2/archive/master.zip","code":"public class BoundingBoxFinder extends PDFGraphicsStreamEngine {    public BoundingBoxFinder(PDPage page) {        super(page);    }    public Rectangle2D getBoundingBox() {        return rectangle;    }    //    // Text    //    @Override    protected void showGlyph(Matrix textRenderingMatrix, PDFont font, int code, String unicode, Vector displacement)            throws IOException {        super.showGlyph(textRenderingMatrix, font, code, unicode, displacement);        Shape shape = calculateGlyphBounds(textRenderingMatrix, font, code);        if (shape != null) {            Rectangle2D rect = shape.getBounds2D();            add(rect);        }    }    /**     * Copy of <code>org.apache.pdfbox.examples.util.DrawPrintTextLocations.calculateGlyphBounds(Matrix, PDFont, int)</code>.     */    private Shape calculateGlyphBounds(Matrix textRenderingMatrix, PDFont font, int code) throws IOException    {        GeneralPath path = null;        AffineTransform at = textRenderingMatrix.createAffineTransform();        at.concatenate(font.getFontMatrix().createAffineTransform());        if (font instanceof PDType3Font)        {            // It is difficult to calculate the real individual glyph bounds for type 3 fonts            // because these are not vector fonts, the content stream could contain almost anything            // that is found in page content streams.            PDType3Font t3Font = (PDType3Font) font;            PDType3CharProc charProc = t3Font.getCharProc(code);            if (charProc != null)            {                BoundingBox fontBBox = t3Font.getBoundingBox();                PDRectangle glyphBBox = charProc.getGlyphBBox();                if (glyphBBox != null)                {                    // PDFBOX-3850: glyph bbox could be larger than the font bbox                    glyphBBox.setLowerLeftX(Math.max(fontBBox.getLowerLeftX(), glyphBBox.getLowerLeftX()));                    glyphBBox.setLowerLeftY(Math.max(fontBBox.getLowerLeftY(), glyphBBox.getLowerLeftY()));                    glyphBBox.setUpperRightX(Math.min(fontBBox.getUpperRightX(), glyphBBox.getUpperRightX()));                    glyphBBox.setUpperRightY(Math.min(fontBBox.getUpperRightY(), glyphBBox.getUpperRightY()));                    path = glyphBBox.toGeneralPath();                }            }        }        else if (font instanceof PDVectorFont)        {            PDVectorFont vectorFont = (PDVectorFont) font;            path = vectorFont.getPath(code);            if (font instanceof PDTrueTypeFont)            {                PDTrueTypeFont ttFont = (PDTrueTypeFont) font;                int unitsPerEm = ttFont.getTrueTypeFont().getHeader().getUnitsPerEm();                at.scale(1000d / unitsPerEm, 1000d / unitsPerEm);            }            if (font instanceof PDType0Font)            {                PDType0Font t0font = (PDType0Font) font;                if (t0font.getDescendantFont() instanceof PDCIDFontType2)                {                    int unitsPerEm = ((PDCIDFontType2) t0font.getDescendantFont()).getTrueTypeFont().getHeader().getUnitsPerEm();                    at.scale(1000d / unitsPerEm, 1000d / unitsPerEm);                }            }        }        else if (font instanceof PDSimpleFont)        {            PDSimpleFont simpleFont = (PDSimpleFont) font;            // these two lines do not always work, e.g. for the TT fonts in file 032431.pdf            // which is why PDVectorFont is tried first.            String name = simpleFont.getEncoding().getName(code);            path = simpleFont.getPath(name);        }        else        {            // shouldn't happen, please open issue in JIRA            System.out.println(\"Unknown font class: \" + font.getClass());        }        if (path == null)        {            return null;        }        return at.createTransformedShape(path.getBounds2D());    }    //    // Bitmaps    //    @Override    public void drawImage(PDImage pdImage) throws IOException {        Matrix ctm = getGraphicsState().getCurrentTransformationMatrix();        for (int x = 0; x < 2; x++) {            for (int y = 0; y < 2; y++) {                add(ctm.transformPoint(x, y));            }        }    }    //    // Paths    //    @Override    public void appendRectangle(Point2D p0, Point2D p1, Point2D p2, Point2D p3) throws IOException {        addToPath(p0, p1, p2, p3);    }    @Override    public void clip(int windingRule) throws IOException {    }    @Override    public void moveTo(float x, float y) throws IOException {        addToPath(x, y);    }    @Override    public void lineTo(float x, float y) throws IOException {        addToPath(x, y);    }    @Override    public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3) throws IOException {        addToPath(x1, y1);        addToPath(x2, y2);        addToPath(x3, y3);    }    @Override    public Point2D getCurrentPoint() throws IOException {        return null;    }    @Override    public void closePath() throws IOException {    }    @Override    public void endPath() throws IOException {        rectanglePath = null;    }    @Override    public void strokePath() throws IOException {        addPath();    }    @Override    public void fillPath(int windingRule) throws IOException {        addPath();    }    @Override    public void fillAndStrokePath(int windingRule) throws IOException {        addPath();    }    @Override    public void shadingFill(COSName shadingName) throws IOException {    }    void addToPath(Point2D... points) {        Arrays.asList(points).forEach(p -> addToPath(p.getX(), p.getY()));    }    void addToPath(double newx, double newy) {        if (rectanglePath == null) {            rectanglePath = new Rectangle2D.Double(newx, newy, 0, 0);        } else {            rectanglePath.add(newx, newy);        }    }    void addPath() {        if (rectanglePath != null) {            add(rectanglePath);            rectanglePath = null;        }    }    void add(Rectangle2D rect) {        if (rectangle == null) {            rectangle = new Rectangle2D.Double();            rectangle.setRect(rect);        } else {            rectangle.add(rect);        }    }    void add(Point2D... points) {        for (Point2D point : points) {            add(point.getX(), point.getY());        }    }    void add(double newx, double newy) {        if (rectangle == null) {            rectangle = new Rectangle2D.Double(newx, newy, 0, 0);        } else {            rectangle.add(newx, newy);        }    }    Rectangle2D rectanglePath = null;    Rectangle2D rectangle = null;}","code_tokens":["public","class","bounding","box","finder","extends","pdf","graphics","stream","engine","{","public","bounding","box","finder","(","pd","page","page",")","{","super","(","page",")",";","}","public","rectangle2d","get","bounding","box","(",")","{","return","rectangle",";","}","/","/","/","/","text","/","/","@","override","protected","void","show","glyph","(","matrix","text","rendering","matrix",",","pd","font","font",",","int","code",",","string","unicode",",","vector","displacement",")","throws","io","exception","{","super",".","show","glyph","(","text","rendering","matrix",",","font",",","code",",","unicode",",","displacement",")",";","shape","shape","=","calculate","glyph","bounds","(","text","rendering","matrix",",","font",",","code",")",";","if","(","shape","!","=","null",")","{","rectangle2d","rect","=","shape",".","get","bounds2d","(",")",";","add","(","rect",")",";","}","}","private","shape","calculate","glyph","bounds","(","matrix","text","rendering","matrix",",","pd","font","font",",","int","code",")","throws","io","exception","{","general","path","path","=","null",";","affine","transform","at","=","text","rendering","matrix",".","create","affine","transform","(",")",";","at",".","concatenate","(","font",".","get","font","matrix","(",")",".","create","affine","transform","(",")",")",";","if","(","font","instanceof","pd","type3font",")","{","/","/","it","is","difficult","to","calculate","the","real","individual","glyph","bounds","for","type","3","fonts","/","/","because","these","are","not","vector","fonts",",","the","content","stream","could","contain","almost","anything","/","/","that","is","found","in","page","content","streams",".","pd","type3font","t3font","=","(","pd","type3font",")","font",";","pd","type3char","proc","char","proc","=","t3font",".","get","char","proc","(","code",")",";","if","(","char","proc","!","=","null",")","{","bounding","box","font","b","box","=","t3font",".","get","bounding","box","(",")",";","pd","rectangle","glyph","b","box","=","char","proc",".","get","glyph","b","box","(",")",";","if","(","glyph","b","box","!","=","null",")","{","/","/","pdfbox","-","3850",":","glyph","bbox","could","be","larger","than","the","font","bbox","glyph","b","box",".","set","lower","left","x","(","math",".","max","(","font","b","box",".","get","lower","left","x","(",")",",","glyph","b","box",".","get","lower","left","x","(",")",")",")",";","glyph","b","box",".","set","lower","left","y","(","math",".","max","(","font","b","box",".","get","lower","left","y","(",")",",","glyph","b","box",".","get","lower","left","y","(",")",")",")",";","glyph","b","box",".","set","upper","right","x","(","math",".","min","(","font","b","box",".","get","upper","right","x","(",")",",","glyph","b","box",".","get","upper","right","x","(",")",")",")",";","glyph","b","box",".","set","upper","right","y","(","math",".","min","(","font","b","box",".","get","upper","right","y","(",")",",","glyph","b","box",".","get","upper","right","y","(",")",")",")",";","path","=","glyph","b","box",".","to","general","path","(",")",";","}","}","}","else","if","(","font","instanceof","pd","vector","font",")","{","pd","vector","font","vector","font","=","(","pd","vector","font",")","font",";","path","=","vector","font",".","get","path","(","code",")",";","if","(","font","instanceof","pd","true","type","font",")","{","pd","true","type","font","tt","font","=","(","pd","true","type","font",")","font",";","int","units","per","em","=","tt","font",".","get","true","type","font","(",")",".","get","header","(",")",".","get","units","per","em","(",")",";","at",".","scale","(","1000d","/","units","per","em",",","1000d","/","units","per","em",")",";","}","if","(","font","instanceof","pd","type0font",")","{","pd","type0font","t0font","=","(","pd","type0font",")","font",";","if","(","t0font",".","get","descendant","font","(",")","instanceof","pdcid","font","type2",")","{","int","units","per","em","=","(","(","pdcid","font","type2",")","t0font",".","get","descendant","font","(",")",")",".","get","true","type","font","(",")",".","get","header","(",")",".","get","units","per","em","(",")",";","at",".","scale","(","1000d","/","units","per","em",",","1000d","/","units","per","em",")",";","}","}","}","else","if","(","font","instanceof","pd","simple","font",")","{","pd","simple","font","simple","font","=","(","pd","simple","font",")","font",";","/","/","these","two","lines","do","not","always","work",",","e",".","g",".","for","the","tt","fonts","in","file","032431",".","pdf","/","/","which","is","why","pd","vector","font","is","tried","first",".","string","name","=","simple","font",".","get","encoding","(",")",".","get","name","(","code",")",";","path","=","simple","font",".","get","path","(","name",")",";","}","else","{","/","/","shouldn","'","t","happen",",","please","open","issue","in","jira","system",".","out",".","println","(","\"","unknown","font","class",":","\"","+","font",".","get","class","(",")",")",";","}","if","(","path","=","=","null",")","{","return","null",";","}","return","at",".","create","transformed","shape","(","path",".","get","bounds2d","(",")",")",";","}","/","/","/","/","bitmaps","/","/","@","override","public","void","draw","image","(","pd","image","pd","image",")","throws","io","exception","{","matrix","ctm","=","get","graphics","state","(",")",".","get","current","transformation","matrix","(",")",";","for","(","int","x","=","0",";","x","<","2",";","x","+","+",")","{","for","(","int","y","=","0",";","y","<","2",";","y","+","+",")","{","add","(","ctm",".","transform","point","(","x",",","y",")",")",";","}","}","}","/","/","/","/","paths","/","/","@","override","public","void","append","rectangle","(","point2d","p0",",","point2d","p1",",","point2d","p2",",","point2d","p3",")","throws","io","exception","{","add","to","path","(","p0",",","p1",",","p2",",","p3",")",";","}","@","override","public","void","clip","(","int","winding","rule",")","throws","io","exception","{","}","@","override","public","void","move","to","(","float","x",",","float","y",")","throws","io","exception","{","add","to","path","(","x",",","y",")",";","}","@","override","public","void","line","to","(","float","x",",","float","y",")","throws","io","exception","{","add","to","path","(","x",",","y",")",";","}","@","override","public","void","curve","to","(","float","x1",",","float","y1",",","float","x2",",","float","y2",",","float","x3",",","float","y3",")","throws","io","exception","{","add","to","path","(","x1",",","y1",")",";","add","to","path","(","x2",",","y2",")",";","add","to","path","(","x3",",","y3",")",";","}","@","override","public","point2d","get","current","point","(",")","throws","io","exception","{","return","null",";","}","@","override","public","void","close","path","(",")","throws","io","exception","{","}","@","override","public","void","end","path","(",")","throws","io","exception","{","rectangle","path","=","null",";","}","@","override","public","void","stroke","path","(",")","throws","io","exception","{","add","path","(",")",";","}","@","override","public","void","fill","path","(","int","winding","rule",")","throws","io","exception","{","add","path","(",")",";","}","@","override","public","void","fill","and","stroke","path","(","int","winding","rule",")","throws","io","exception","{","add","path","(",")",";","}","@","override","public","void","shading","fill","(","cos","name","shading","name",")","throws","io","exception","{","}","void","add","to","path","(","point2d",".",".",".","points",")","{","arrays",".","as","list","(","points",")",".","for","each","(","p","-",">","add","to","path","(","p",".","get","x","(",")",",","p",".","get","y","(",")",")",")",";","}","void","add","to","path","(","double","newx",",","double","newy",")","{","if","(","rectangle","path","=","=","null",")","{","rectangle","path","=","new","rectangle2d",".","double","(","newx",",","newy",",","0",",","0",")",";","}","else","{","rectangle","path",".","add","(","newx",",","newy",")",";","}","}","void","add","path","(",")","{","if","(","rectangle","path","!","=","null",")","{","add","(","rectangle","path",")",";","rectangle","path","=","null",";","}","}","void","add","(","rectangle2d","rect",")","{","if","(","rectangle","=","=","null",")","{","rectangle","=","new","rectangle2d",".","double","(",")",";","rectangle",".","set","rect","(","rect",")",";","}","else","{","rectangle",".","add","(","rect",")",";","}","}","void","add","(","point2d",".",".",".","points",")","{","for","(","point2d","point",":","points",")","{","add","(","point",".","get","x","(",")",",","point",".","get","y","(",")",")",";","}","}","void","add","(","double","newx",",","double","newy",")","{","if","(","rectangle","=","=","null",")","{","rectangle","=","new","rectangle2d",".","double","(","newx",",","newy",",","0",",","0",")",";","}","else","{","rectangle",".","add","(","newx",",","newy",")",";","}","}","rectangle2d","rectangle","path","=","null",";","rectangle2d","rectangle","=","null",";","}"],"func_name":"BoundingBoxFinder","func_name_tokens":["bounding","box","finder"],"docstring":"  How do determine location of actual PDF content with PDFBox?  </a>  <p>  This stream engine determines the bounding box of the static content  of a page. Beware, it is not very sophisticated; in particular it  does not ignore invisible content like a white background rectangle,  text drawn in rendering mode \"invisible\", arbitrary content covered  by a white filled path, white parts of bitmap images, ... Furthermore,  it ignores clip paths.  </p>    @author mklink","docstring_tokens":["how","do","determine","location","of","actual","pdf","content","with","pdf","box","?","<","/","a",">","<","p",">","this","stream","engine","determines","the","bounding","box","of","the","static","content","of","a","page",".","beware",",","it","is","not","very","sophisticated",";","in","particular","it","does","not","ignore","invisible","content","like","a","white","background","rectangle",",","text","drawn","in","rendering","mode","\"","invisible","\"",",","arbitrary","content","covered","by","a","white","filled","path",",","white","parts","of","bitmap","images",",",".",".",".","furthermore",",","it","ignores","clip","paths",".","<","/","p",">"],"query":"How do determine location of actual PDF content with PDFBox?","query_tokens":["how","do","determine","location","of","actual","pdf","content","with","pdf","box","?"]}
{"query_id":"1302072","repo_name":"SerPenTeHoK/BroadleafCommerce","zip_link":"/SerPenTeHoK/BroadleafCommerce/archive/BroadleafCommerce-4.0.x.zip","code":"public class StatusExposingServletResponse extends HttpServletResponseWrapper {    private int httpStatus=200;    public StatusExposingServletResponse(HttpServletResponse response) {        super(response);    }    @Override    public void sendError(int sc) throws IOException {        httpStatus = sc;        super.sendError(sc);    }    @Override    public void sendError(int sc, String msg) throws IOException {        httpStatus = sc;        super.sendError(sc, msg);    }    @Override    public void setStatus(int sc) {        httpStatus = sc;        super.setStatus(sc);    }    @Override    public void reset() {        super.reset();        this.httpStatus = SC_OK;    }    @Override    public void setStatus(int status, String string) {        super.setStatus(status, string);        this.httpStatus = status;    }    public int getStatus() {        return httpStatus;    }}","code_tokens":["public","class","status","exposing","servlet","response","extends","http","servlet","response","wrapper","{","private","int","http","status","=","200",";","public","status","exposing","servlet","response","(","http","servlet","response","response",")","{","super","(","response",")",";","}","@","override","public","void","send","error","(","int","sc",")","throws","io","exception","{","http","status","=","sc",";","super",".","send","error","(","sc",")",";","}","@","override","public","void","send","error","(","int","sc",",","string","msg",")","throws","io","exception","{","http","status","=","sc",";","super",".","send","error","(","sc",",","msg",")",";","}","@","override","public","void","set","status","(","int","sc",")","{","http","status","=","sc",";","super",".","set","status","(","sc",")",";","}","@","override","public","void","reset","(",")","{","super",".","reset","(",")",";","this",".","http","status","=","sc","ok",";","}","@","override","public","void","set","status","(","int","status",",","string","string",")","{","super",".","set","status","(","status",",","string",")",";","this",".","http","status","=","status",";","}","public","int","get","status","(",")","{","return","http","status",";","}","}"],"func_name":"StatusExposingServletResponse","func_name_tokens":["status","exposing","servlet","response"],"docstring":"  Code is largely copied from StackOverflow post made by David Rabinowitz with contributions  by others in the same thread.   Overrides all status setting methods and retains the status.  <br><br>    This won't be needed with Servlet 3.0.<br><br>   Addeded by bpolster.","docstring_tokens":["code","is","largely","copied","from","stack","overflow","post","made","by","david","rabinowitz","with","contributions","by","others","in","the","same","thread",".","overrides","all","status","setting","methods","and","retains","the","status",".","<","br",">","<","br",">","this","won","'","t","be","needed","with","servlet","3",".","0",".","<","br",">","<","br",">","addeded","by","bpolster","."],"query":"How can I get the HTTP status code out of a ServletResponse in a ServletFilter?","query_tokens":["how","can","i","get","the","http","status","code","out","of","a","servlet","response","in","a","servlet","filter","?"]}
{"query_id":"12066696","repo_name":"syncany/syncany-plugin-s3","zip_link":"/syncany/syncany-plugin-s3/archive/develop.zip","code":"\tprivate static int getProcessPidImpl2() throws Exception {\t\tRuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\t\tField jvmField = runtimeMXBean.getClass().getDeclaredField(\"jvm\");\t\tjvmField.setAccessible(true);\t\t\t\t// The returned object is of the type 'sun.management.VMManagement', but since we\t\t// don't need the exact type here and we don't want to reference it in the\t\t// imports, we'll just hope it's there.\t\t\t\tObject vmManagement = jvmField.get(runtimeMXBean); \t\tMethod getProcessIdMethod = vmManagement.getClass().getDeclaredMethod(\"getProcessId\");\t\t\t\tgetProcessIdMethod.setAccessible(true);\t\tint processPid = (Integer) getProcessIdMethod.invoke(vmManagement);\t\t\t\tlogger.log(Level.INFO, \"Java Process PID is \" + processPid);\t\treturn processPid;\t}","code_tokens":["private","static","int","get","process","pid","impl2","(",")","throws","exception","{","runtime","mx","bean","runtime","mx","bean","=","management","factory",".","get","runtime","mx","bean","(",")",";","field","jvm","field","=","runtime","mx","bean",".","get","class","(",")",".","get","declared","field","(","\"","jvm","\"",")",";","jvm","field",".","set","accessible","(","true",")",";","/","/","the","returned","object","is","of","the","type","'","sun",".","management",".","vm","management","'",",","but","since","we","/","/","don","'","t","need","the","exact","type","here","and","we","don","'","t","want","to","reference","it","in","the","/","/","imports",",","we","'","ll","just","hope","it","'","s","there",".","object","vm","management","=","jvm","field",".","get","(","runtime","mx","bean",")",";","method","get","process","id","method","=","vm","management",".","get","class","(",")",".","get","declared","method","(","\"","get","process","id","\"",")",";","get","process","id","method",".","set","accessible","(","true",")",";","int","process","pid","=","(","integer",")","get","process","id","method",".","invoke","(","vm","management",")",";","logger",".","log","(","level",".","info",",","\"","java","process","pid","is","\"","+","process","pid",")",";","return","process","pid",";","}"],"func_name":"getProcessPidImpl2","func_name_tokens":["get","process","pid","impl2"],"docstring":"\t\t  Uses the private method <tt>VMManagement.getProcessId()</tt> of Sun's <tt>sun.management.VMManagement</tt>\t  class to determine the PID (using reflection to make the relevant fields visible).\t  ","docstring_tokens":["uses","the","private","method","<","tt",">","vm","management",".","get","process","id","(",")","<","/","tt",">","of","sun","'","s","<","tt",">","sun",".","management",".","vm","management","<","/","tt",">","class","to","determine","the","pid","(","using","reflection","to","make","the","relevant","fields","visible",")","."],"query":"How can a Java program get its own process ID?","query_tokens":["how","can","a","java","program","get","its","own","process","id","?"]}
{"query_id":"5626340","repo_name":"conde2/DC-UFSCar-ES2-201701-BoxTesters","zip_link":"/conde2/DC-UFSCar-ES2-201701-BoxTesters/archive/master.zip","code":"public class FileNameCleaner {    /**     * MUST ALWAYS BE A SORTED ARRAY because it is used in a binary search     */    // @formatter:off    private static final int[] ILLEGAL_CHARS = {            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,            10, 11, 12, 13, 14, 15, 16, 17, 18, 19,            20, 21, 22, 23, 24, 25, 26, 27, 28, 29,            30, 31, 34,            42, 47,            58,            60, 62, 63,            92,            124    };    // @formatter:on    private FileNameCleaner() {    }    /**     * Replaces illegal characters in given fileName by '_'     *     * @param badFileName the fileName to clean     * @return a clean filename     */    public static String cleanFileName(String badFileName) {        StringBuilder cleanName = new StringBuilder(badFileName.length());        for (int i = 0; i < badFileName.length(); i++) {            char c = badFileName.charAt(i);            if (FileNameCleaner.isCharLegal(c)) {                cleanName.append(c);            } else {                cleanName.append('_');            }        }        return cleanName.toString().trim();    }    private static boolean isCharLegal(char c) {        return Arrays.binarySearch(FileNameCleaner.ILLEGAL_CHARS, c) < 0;    }}","code_tokens":["public","class","file","name","cleaner","{","/","/","@","formatter",":","off","private","static","final","int","[","]","illegal","chars","=","{","0",",","1",",","2",",","3",",","4",",","5",",","6",",","7",",","8",",","9",",","10",",","11",",","12",",","13",",","14",",","15",",","16",",","17",",","18",",","19",",","20",",","21",",","22",",","23",",","24",",","25",",","26",",","27",",","28",",","29",",","30",",","31",",","34",",","42",",","47",",","58",",","60",",","62",",","63",",","92",",","124","}",";","/","/","@","formatter",":","on","private","file","name","cleaner","(",")","{","}","public","static","string","clean","file","name","(","string","bad","file","name",")","{","string","builder","clean","name","=","new","string","builder","(","bad","file","name",".","length","(",")",")",";","for","(","int","i","=","0",";","i","<","bad","file","name",".","length","(",")",";","i","+","+",")","{","char","c","=","bad","file","name",".","char","at","(","i",")",";","if","(","file","name","cleaner",".","is","char","legal","(","c",")",")","{","clean","name",".","append","(","c",")",";","}","else","{","clean","name",".","append","(","'","'",")",";","}","}","return","clean","name",".","to","string","(",")",".","trim","(",")",";","}","private","static","boolean","is","char","legal","(","char","c",")","{","return","arrays",".","binary","search","(","file","name","cleaner",".","illegal","chars",",","c",")","<","0",";","}","}"],"func_name":"FileNameCleaner","func_name_tokens":["file","name","cleaner"],"docstring":"   Replaces illegal characters in given file paths.","docstring_tokens":["replaces","illegal","characters","in","given","file","paths","."],"query":"Is there a cross-platform Java method to remove filename special chars?","query_tokens":["is","there","a","cross","-","platform","java","method","to","remove","filename","special","chars","?"]}
{"query_id":"12424633","repo_name":"johspaeth/soot-infoflow","zip_link":"/johspaeth/soot-infoflow/archive/develop.zip","code":"public class AtomicBitSet {    private final AtomicIntegerArray array;    public AtomicBitSet(int length) {        int intLength = (length + 31) / 32;        array = new AtomicIntegerArray(intLength);    }    public boolean set(long n) {        int bit = 1 << n;        int idx = (int) (n >>> 5);        while (true) {            int num = array.get(idx);            int num2 = num | bit;                        // If the bit is already set in the current value, we are too late            if (num == num2)            \treturn false;                        if (array.compareAndSet(idx, num, num2))                return true;        }    }        public int size() {    \treturn array.length();    }    public boolean get(long n) {        int bit = 1 << n;        int idx = (int) (n >>> 5);        int num = array.get(idx);        return (num & bit) != 0;    }}","code_tokens":["public","class","atomic","bit","set","{","private","final","atomic","integer","array","array",";","public","atomic","bit","set","(","int","length",")","{","int","int","length","=","(","length","+","31",")","/","32",";","array","=","new","atomic","integer","array","(","int","length",")",";","}","public","boolean","set","(","long","n",")","{","int","bit","=","1","<","<","n",";","int","idx","=","(","int",")","(","n",">",">",">","5",")",";","while","(","true",")","{","int","num","=","array",".","get","(","idx",")",";","int","num2","=","num","|","bit",";","/","/","if","the","bit","is","already","set","in","the","current","value",",","we","are","too","late","if","(","num","=","=","num2",")","return","false",";","if","(","array",".","compare","and","set","(","idx",",","num",",","num2",")",")","return","true",";","}","}","public","int","size","(",")","{","return","array",".","length","(",")",";","}","public","boolean","get","(","long","n",")","{","int","bit","=","1","<","<","n",";","int","idx","=","(","int",")","(","n",">",">",">","5",")",";","int","num","=","array",".","get","(","idx",")",";","return","(","num","&","bit",")","!","=","0",";","}","}"],"func_name":"AtomicBitSet","func_name_tokens":["atomic","bit","set"],"docstring":"  Atomic and concurrent implementation of a BitSet. Original implementation  taken from:    @author Steven Arzt ","docstring_tokens":["atomic","and","concurrent","implementation","of","a","bit","set",".","original","implementation","taken","from",":"],"query":"AtomicBitSet implementation for java","query_tokens":["atomic","bit","set","implementation","for","java"]}
{"query_id":"139076","repo_name":"mariuszs/assertj-core","zip_link":"/mariuszs/assertj-core/archive/master.zip","code":"public class XmlStringPrettyFormatter {  private static final String FORMAT_ERROR = \"Unable to format XML string\";  public static String xmlPrettyFormat(String xmlStringToFormat) {    if (xmlStringToFormat == null)      throw new IllegalArgumentException(\"Expecting XML String not to be null\");    // convert String to an XML Document and then back to String but prettily formatted.    return prettyFormat(toXmlDocument(xmlStringToFormat), xmlStringToFormat.startsWith(\"<?xml\"));  }  private static String prettyFormat(Document document, boolean keepXmlDeclaration) {    try {      DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();      DOMImplementationLS domImplementation = (DOMImplementationLS) registry.getDOMImplementation(\"LS\");      Writer stringWriter = new StringWriter();      LSOutput formattedOutput = domImplementation.createLSOutput();      formattedOutput.setCharacterStream(stringWriter);      LSSerializer domSerializer = domImplementation.createLSSerializer();      domSerializer.getDomConfig().setParameter(\"format-pretty-print\", true);      // Set this to true if the declaration is needed to be in the output.      domSerializer.getDomConfig().setParameter(\"xml-declaration\", keepXmlDeclaration);      domSerializer.write(document, formattedOutput);      return stringWriter.toString();    } catch (Exception e) {      throw new RuntimeException(FORMAT_ERROR, e);    }  }  private static Document toXmlDocument(String xmlString) {    try {      InputSource xmlInputSource = new InputSource(new StringReader(xmlString));      DocumentBuilder xmlDocumentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();      return xmlDocumentBuilder.parse(xmlInputSource);    } catch (Exception e) {      throw new RuntimeException(FORMAT_ERROR, e);    }  }  private XmlStringPrettyFormatter() {    // utility class  }}","code_tokens":["public","class","xml","string","pretty","formatter","{","private","static","final","string","format","error","=","\"","unable","to","format","xml","string","\"",";","public","static","string","xml","pretty","format","(","string","xml","string","to","format",")","{","if","(","xml","string","to","format","=","=","null",")","throw","new","illegal","argument","exception","(","\"","expecting","xml","string","not","to","be","null","\"",")",";","/","/","convert","string","to","an","xml","document","and","then","back","to","string","but","prettily","formatted",".","return","pretty","format","(","to","xml","document","(","xml","string","to","format",")",",","xml","string","to","format",".","starts","with","(","\"","<","?","xml","\"",")",")",";","}","private","static","string","pretty","format","(","document","document",",","boolean","keep","xml","declaration",")","{","try","{","dom","implementation","registry","registry","=","dom","implementation","registry",".","new","instance","(",")",";","dom","implementation","ls","dom","implementation","=","(","dom","implementation","ls",")","registry",".","get","dom","implementation","(","\"","ls","\"",")",";","writer","string","writer","=","new","string","writer","(",")",";","ls","output","formatted","output","=","dom","implementation",".","create","ls","output","(",")",";","formatted","output",".","set","character","stream","(","string","writer",")",";","ls","serializer","dom","serializer","=","dom","implementation",".","create","ls","serializer","(",")",";","dom","serializer",".","get","dom","config","(",")",".","set","parameter","(","\"","format","-","pretty","-","print","\"",",","true",")",";","/","/","set","this","to","true","if","the","declaration","is","needed","to","be","in","the","output",".","dom","serializer",".","get","dom","config","(",")",".","set","parameter","(","\"","xml","-","declaration","\"",",","keep","xml","declaration",")",";","dom","serializer",".","write","(","document",",","formatted","output",")",";","return","string","writer",".","to","string","(",")",";","}","catch","(","exception","e",")","{","throw","new","runtime","exception","(","format","error",",","e",")",";","}","}","private","static","document","to","xml","document","(","string","xml","string",")","{","try","{","input","source","xml","input","source","=","new","input","source","(","new","string","reader","(","xml","string",")",")",";","document","builder","xml","document","builder","=","document","builder","factory",".","new","instance","(",")",".","new","document","builder","(",")",";","return","xml","document","builder",".","parse","(","xml","input","source",")",";","}","catch","(","exception","e",")","{","throw","new","runtime","exception","(","format","error",",","e",")",";","}","}","private","xml","string","pretty","formatter","(",")","{","/","/","utility","class","}","}"],"func_name":"XmlStringPrettyFormatter","func_name_tokens":["xml","string","pretty","formatter"],"docstring":"  Format an XML String with indent = 2 space.  <p>  http://pastebin.com/XL7932aC  </p>","docstring_tokens":["format","an","xml","string","with","indent","=","2","space",".","<","p",">","<","/","p",">"],"query":"How to pretty print XML from Java?","query_tokens":["how","to","pretty","print","xml","from","java","?"]}
{"query_id":"2835179","repo_name":"PeerWeb/peerweb-tester","zip_link":"/PeerWeb/peerweb-tester/archive/master.zip","code":"public class BrowserTest {    private static enum IterationStrategy {        ADDITIVE,        EXPONENTIAL,        SLOW    }    private static class ChromeWrapper implements Runnable {        private final String name;        private final Integer minStartWait;        private final Integer maxStartWait;        private final Integer minLinger;        private final Integer maxLinger;        private final String visitUrl;        private final CyclicBarrier startBarrier;        private final URL hubUrl;        private WebDriver driver;        private final Random random;        public ChromeWrapper(final String name,                             final Integer minStartWait,                             final Integer maxStartWait,                             final Integer minLinger,                             final Integer maxLinger,                             final String hubUrl,                             final String visitUrl,                             final CyclicBarrier startBarrier) {            this.name = name;            this.minStartWait = minStartWait;            this.maxStartWait = maxStartWait;            try {                this.hubUrl = new URL(hubUrl + \"/wd/hub\");            } catch (final MalformedURLException ex) {                throw new RuntimeException(ex);            }            this.minLinger = minLinger;            this.maxLinger = maxLinger;            this.visitUrl = visitUrl;            this.startBarrier = startBarrier;            this.random = new SecureRandom();        }        private void waitForStart() {            // wait until all the drivers are ready            try {                startBarrier.await();            } catch (final InterruptedException ex) {                ex.printStackTrace(); // ignore            } catch (final BrokenBarrierException ex) {                ex.printStackTrace(); // ignore            }        }        private void waitQuietly(final long forMs) {            try {                Thread.sleep(forMs);            } catch (final InterruptedException ex) {                System.err.println(\"Sleep was interrupted; continuing...\");                ex.printStackTrace();            }        }        private void waitForPageComplete() {            WebDriverWait waitForPageComplete = new WebDriverWait(driver, 30000);            waitForPageComplete.until(ExpectedConditions.presenceOfElementLocated(By.id(\"peerweb_page_complete\")));        }        private void randomWait(Integer minSecInc, Integer maxSecIncl) {            // http://stackoverflow.com/a/6029518            Integer waitForSecs = random.nextInt(maxSecIncl - minSecInc + 1) + minSecInc;            // http://stackoverflow.com/q/12858972            waitQuietly(waitForSecs * 1000);        }        public void run() {            // http://stackoverflow.com/a/3294313            String visitUrlWithHash = visitUrl + '#' + name;            DesiredCapabilities capabilities = DesiredCapabilities.chrome();            {                ChromeOptions options = new ChromeOptions();                options.addArguments(\"test-type\");                options.addArguments(\"incognito\");                capabilities.setCapability(ChromeOptions.CAPABILITY, options);            }            driver = new RemoteWebDriver(hubUrl, capabilities);            waitForStart();            /*             * The test involves a series of three web pages. After a page has loaded, the client will wait for a             * random amount of time between 5 and 30 seconds before \"clicking\" a link to go to the next page.             *             * First, we wait for a random amount of time, allowing us to stretch visits over a long time (specify a             * higher max) or quickly (specify a low max, or 0 for all instantaneously).             */            randomWait(minStartWait, maxStartWait);            driver.get(visitUrlWithHash);            waitForPageComplete();            randomWait(minLinger, maxLinger);            while (true) {                WebElement next;                try {                    next = driver.findElement(By.id(\"next\"));                } catch (final NoSuchElementException none) {                    break;                }                next.click();                waitForPageComplete();                randomWait(minLinger, maxLinger);            }            driver.quit();            System.out.println(String.format(\"Instance %s COMPLETE!\", name));        }    }    public static void main(final String[] args) throws MalformedURLException, ParseException {        // https://commons.apache.org/proper/commons-cli/usage.html        // https://code.google.com/p/selenium/wiki/Grid2        Options options = new Options();        options.addOption(\"hub\", true, \"Selenium Grid hub URL\");        options.addOption(\"visit\", true, \"URL each instance should visit\");        options.addOption(\"initial\", true, \"number of instances to create in initial iteration\");        options.addOption(\"iterations\", true, \"number of iterations (each spawns (last)^2 instances)\");        options.addOption(\"spacing\", true, \"spacing (in seconds) between instances\");        options.addOption(\"maxWait\", true, \"maximum amount of time (in seconds) an instance can wait to start\");        options.addOption(\"strategy\", true, \"strategy for traffic increase ('additive' or 'exponential')\");        options.addOption(\"minLinger\", true, \"minimum amount of time (in seconds) to wait after a page has loaded\");        options.addOption(\"maxLinger\", true, \"maximum amount of time (in seconds) to wait after a page has loaded\");        CommandLineParser parser = new BasicParser();        CommandLine cli = parser.parse(options, args);        String hub = cli.getOptionValue(\"hub\");        String visit = cli.getOptionValue(\"visit\");        Integer initial = Integer.parseInt(cli.getOptionValue(\"initial\", \"1\"));        Integer iterations = Integer.parseInt(cli.getOptionValue(\"iterations\", \"1\"));        Integer spacing = Integer.parseInt(cli.getOptionValue(\"spacing\", \"0\"));        Integer maxWait = Integer.parseInt(cli.getOptionValue(\"maxWait\", \"0\"));        IterationStrategy strategy = IterationStrategy.valueOf(cli.getOptionValue(\"strategy\", \"additive\").toUpperCase());        Integer minLinger = Integer.parseInt(cli.getOptionValue(\"minLinger\", \"0\"));        Integer maxLinger = Integer.parseInt(cli.getOptionValue(\"maxLinger\", \"0\"));        for (int iteration = 0; iteration < iterations; iteration++) {            Integer instances;            switch (strategy) {                case ADDITIVE:                    instances = initial + iteration;                    break;                case EXPONENTIAL:                    instances = new Double(Math.pow(initial, iteration)).intValue();                    break;                case SLOW:                    instances = initial;                    break;                default:                    throw new RuntimeException();            }            CyclicBarrier startBarrier = new CyclicBarrier(instances);            Integer startTime = iteration * spacing;            Integer endTime = startTime + maxWait;            System.out.println(String.format(\"---- Iteration #%d (%d Instances) ----\", iteration, instances));            for (int instance = 0; instance < instances; instance++) {                String name = iteration + \".\" + instance;                System.out.println(String.format(\"Instance( instance = %d, startTime = %d, endTime = %d )\", instance, startTime, endTime));                new Thread(new ChromeWrapper(name, startTime, endTime, minLinger, maxLinger, hub, visit, startBarrier)).start();            }        }    }}","code_tokens":["public","class","browser","test","{","private","static","enum","iteration","strategy","{","additive",",","exponential",",","slow","}","private","static","class","chrome","wrapper","implements","runnable","{","private","final","string","name",";","private","final","integer","min","start","wait",";","private","final","integer","max","start","wait",";","private","final","integer","min","linger",";","private","final","integer","max","linger",";","private","final","string","visit","url",";","private","final","cyclic","barrier","start","barrier",";","private","final","url","hub","url",";","private","web","driver","driver",";","private","final","random","random",";","public","chrome","wrapper","(","final","string","name",",","final","integer","min","start","wait",",","final","integer","max","start","wait",",","final","integer","min","linger",",","final","integer","max","linger",",","final","string","hub","url",",","final","string","visit","url",",","final","cyclic","barrier","start","barrier",")","{","this",".","name","=","name",";","this",".","min","start","wait","=","min","start","wait",";","this",".","max","start","wait","=","max","start","wait",";","try","{","this",".","hub","url","=","new","url","(","hub","url","+","\"","/","wd","/","hub","\"",")",";","}","catch","(","final","malformed","url","exception","ex",")","{","throw","new","runtime","exception","(","ex",")",";","}","this",".","min","linger","=","min","linger",";","this",".","max","linger","=","max","linger",";","this",".","visit","url","=","visit","url",";","this",".","start","barrier","=","start","barrier",";","this",".","random","=","new","secure","random","(",")",";","}","private","void","wait","for","start","(",")","{","/","/","wait","until","all","the","drivers","are","ready","try","{","start","barrier",".","await","(",")",";","}","catch","(","final","interrupted","exception","ex",")","{","ex",".","print","stack","trace","(",")",";","/","/","ignore","}","catch","(","final","broken","barrier","exception","ex",")","{","ex",".","print","stack","trace","(",")",";","/","/","ignore","}","}","private","void","wait","quietly","(","final","long","for","ms",")","{","try","{","thread",".","sleep","(","for","ms",")",";","}","catch","(","final","interrupted","exception","ex",")","{","system",".","err",".","println","(","\"","sleep","was","interrupted",";","continuing",".",".",".","\"",")",";","ex",".","print","stack","trace","(",")",";","}","}","private","void","wait","for","page","complete","(",")","{","web","driver","wait","wait","for","page","complete","=","new","web","driver","wait","(","driver",",","30000",")",";","wait","for","page","complete",".","until","(","expected","conditions",".","presence","of","element","located","(","by",".","id","(","\"","peerweb","page","complete","\"",")",")",")",";","}","private","void","random","wait","(","integer","min","sec","inc",",","integer","max","sec","incl",")","{","/","/","integer","wait","for","secs","=","random",".","next","int","(","max","sec","incl","-","min","sec","inc","+","1",")","+","min","sec","inc",";","/","/","wait","quietly","(","wait","for","secs","*","1000",")",";","}","public","void","run","(",")","{","/","/","string","visit","url","with","hash","=","visit","url","+","'","#","'","+","name",";","desired","capabilities","capabilities","=","desired","capabilities",".","chrome","(",")",";","{","chrome","options","options","=","new","chrome","options","(",")",";","options",".","add","arguments","(","\"","test","-","type","\"",")",";","options",".","add","arguments","(","\"","incognito","\"",")",";","capabilities",".","set","capability","(","chrome","options",".","capability",",","options",")",";","}","driver","=","new","remote","web","driver","(","hub","url",",","capabilities",")",";","wait","for","start","(",")",";","random","wait","(","min","start","wait",",","max","start","wait",")",";","driver",".","get","(","visit","url","with","hash",")",";","wait","for","page","complete","(",")",";","random","wait","(","min","linger",",","max","linger",")",";","while","(","true",")","{","web","element","next",";","try","{","next","=","driver",".","find","element","(","by",".","id","(","\"","next","\"",")",")",";","}","catch","(","final","no","such","element","exception","none",")","{","break",";","}","next",".","click","(",")",";","wait","for","page","complete","(",")",";","random","wait","(","min","linger",",","max","linger",")",";","}","driver",".","quit","(",")",";","system",".","out",".","println","(","string",".","format","(","\"","instance","%","s","complete","!","\"",",","name",")",")",";","}","}","public","static","void","main","(","final","string","[","]","args",")","throws","malformed","url","exception",",","parse","exception","{","/","/","/","/","options","options","=","new","options","(",")",";","options",".","add","option","(","\"","hub","\"",",","true",",","\"","selenium","grid","hub","url","\"",")",";","options",".","add","option","(","\"","visit","\"",",","true",",","\"","url","each","instance","should","visit","\"",")",";","options",".","add","option","(","\"","initial","\"",",","true",",","\"","number","of","instances","to","create","in","initial","iteration","\"",")",";","options",".","add","option","(","\"","iterations","\"",",","true",",","\"","number","of","iterations","(","each","spawns","(","last",")","^","2","instances",")","\"",")",";","options",".","add","option","(","\"","spacing","\"",",","true",",","\"","spacing","(","in","seconds",")","between","instances","\"",")",";","options",".","add","option","(","\"","max","wait","\"",",","true",",","\"","maximum","amount","of","time","(","in","seconds",")","an","instance","can","wait","to","start","\"",")",";","options",".","add","option","(","\"","strategy","\"",",","true",",","\"","strategy","for","traffic","increase","(","'","additive","'","or","'","exponential","'",")","\"",")",";","options",".","add","option","(","\"","min","linger","\"",",","true",",","\"","minimum","amount","of","time","(","in","seconds",")","to","wait","after","a","page","has","loaded","\"",")",";","options",".","add","option","(","\"","max","linger","\"",",","true",",","\"","maximum","amount","of","time","(","in","seconds",")","to","wait","after","a","page","has","loaded","\"",")",";","command","line","parser","parser","=","new","basic","parser","(",")",";","command","line","cli","=","parser",".","parse","(","options",",","args",")",";","string","hub","=","cli",".","get","option","value","(","\"","hub","\"",")",";","string","visit","=","cli",".","get","option","value","(","\"","visit","\"",")",";","integer","initial","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","initial","\"",",","\"","1","\"",")",")",";","integer","iterations","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","iterations","\"",",","\"","1","\"",")",")",";","integer","spacing","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","spacing","\"",",","\"","0","\"",")",")",";","integer","max","wait","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","max","wait","\"",",","\"","0","\"",")",")",";","iteration","strategy","strategy","=","iteration","strategy",".","value","of","(","cli",".","get","option","value","(","\"","strategy","\"",",","\"","additive","\"",")",".","to","upper","case","(",")",")",";","integer","min","linger","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","min","linger","\"",",","\"","0","\"",")",")",";","integer","max","linger","=","integer",".","parse","int","(","cli",".","get","option","value","(","\"","max","linger","\"",",","\"","0","\"",")",")",";","for","(","int","iteration","=","0",";","iteration","<","iterations",";","iteration","+","+",")","{","integer","instances",";","switch","(","strategy",")","{","case","additive",":","instances","=","initial","+","iteration",";","break",";","case","exponential",":","instances","=","new","double","(","math",".","pow","(","initial",",","iteration",")",")",".","int","value","(",")",";","break",";","case","slow",":","instances","=","initial",";","break",";","default",":","throw","new","runtime","exception","(",")",";","}","cyclic","barrier","start","barrier","=","new","cyclic","barrier","(","instances",")",";","integer","start","time","=","iteration","*","spacing",";","integer","end","time","=","start","time","+","max","wait",";","system",".","out",".","println","(","string",".","format","(","\"","-","-","-","-","iteration","#","%","d","(","%","d","instances",")","-","-","-","-","\"",",","iteration",",","instances",")",")",";","for","(","int","instance","=","0",";","instance","<","instances",";","instance","+","+",")","{","string","name","=","iteration","+","\"",".","\"","+","instance",";","system",".","out",".","println","(","string",".","format","(","\"","instance","(","instance","=","%","d",",","start","time","=","%","d",",","end","time","=","%","d",")","\"",",","instance",",","start","time",",","end","time",")",")",";","new","thread","(","new","chrome","wrapper","(","name",",","start","time",",","end","time",",","min","linger",",","max","linger",",","hub",",","visit",",","start","barrier",")",")",".","start","(",")",";","}","}","}","}"],"func_name":"BrowserTest","func_name_tokens":["browser","test"],"docstring":"  PeerWeb tester using Selenium grid to load one or more test websites.   References  ----------   - https://stackoverflow.com/questions/13724778/how-to-run-selenium-webdriver-test-cases-in-chrome   - https://sites.google.com/a/chromium.org/chromedriver/getting-started   - https://code.google.com/p/chromedriver/issues/detail?id=799   - https://stackoverflow.com/questions/19026295/run-chrome-browser-in-inconginto-mode-in-selenium   - http://itsallabtamil.blogspot.com/2013/02/setting-up-chrome-firefox-ec2-selenium-java.html   - https://groups.google.com/forum/#!topic/selenium-users/ybksxVkadds   - http://docs.seleniumhq.org/docs/04_webdriver_advanced.jsp   - https://stackoverflow.com/questions/9567682/how-to-set-up-selenium-with-chromedriver-on-jenkins-hosted-grid","docstring_tokens":["peer","web","tester","using","selenium","grid","to","load","one","or","more","test","websites",".","references","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","!","topic","/","selenium","-","users","/","ybksx","vkadds","-","-"],"query":"How to get selenium to wait for ajax response?","query_tokens":["how","to","get","selenium","to","wait","for","ajax","response","?"]}
{"query_id":"22607791","repo_name":"lidox/nccn-distress-thermometer","zip_link":"/lidox/nccn-distress-thermometer/archive/master.zip","code":"    public static String encrypt(String stringToEncrypt) {        try {            Key key = new SecretKeySpec(Security.key, \"AES\");            Cipher c = Cipher.getInstance(\"AES\");            c.init(Cipher.ENCRYPT_MODE, key);            byte[] encVal = c.doFinal(stringToEncrypt.getBytes());            String encryptedValue = Base64.encodeToString(encVal, Base64.DEFAULT);            return encryptedValue;        } catch (Exception e) {            Log.e(CLASS_NAME, \"Could not encrypt: '\" + stringToEncrypt + \"'\");        }        return \"-\";    }","code_tokens":["public","static","string","encrypt","(","string","string","to","encrypt",")","{","try","{","key","key","=","new","secret","key","spec","(","security",".","key",",","\"","aes","\"",")",";","cipher","c","=","cipher",".","get","instance","(","\"","aes","\"",")",";","c",".","init","(","cipher",".","encrypt","mode",",","key",")",";","byte","[","]","enc","val","=","c",".","do","final","(","string","to","encrypt",".","get","bytes","(",")",")",";","string","encrypted","value","=","base64",".","encode","to","string","(","enc","val",",","base64",".","default",")",";","return","encrypted","value",";","}","catch","(","exception","e",")","{","log",".","e","(","class","name",",","\"","could","not","encrypt",":","'","\"","+","string","to","encrypt","+","\"","'","\"",")",";","}","return","\"","-","\"",";","}"],"func_name":"encrypt","func_name_tokens":["encrypt"],"docstring":"          Encrypts a string using AES 128 Bit           @param stringToEncrypt the string to encrypt      @return the encrypted string","docstring_tokens":["encrypts","a","string","using","aes","128","bit"],"query":"AES encryption using Java and decryption using Javascript","query_tokens":["aes","encryption","using","java","and","decryption","using","javascript"]}
{"query_id":"27581","repo_name":"marcjansen/shogun2","zip_link":"/marcjansen/shogun2/archive/master.zip","code":"    public int hashCode() {        // two randomly chosen prime numbers        return new HashCodeBuilder(11, 19).            appendSuper(super.hashCode()).            toHashCode();    }","code_tokens":["public","int","hash","code","(",")","{","/","/","two","randomly","chosen","prime","numbers","return","new","hash","code","builder","(","11",",","19",")",".","append","super","(","super",".","hash","code","(",")",")",".","to","hash","code","(",")",";","}"],"func_name":"hashCode","func_name_tokens":["hash","code"],"docstring":"          @see java.lang.Object#hashCode()      <p>      According to      -and-hashcode-in-java it is recommended only to use getter-methods      when using ORM like Hibernate","docstring_tokens":["@","see","java",".","lang",".","object","#","hash","code","(",")","<","p",">","according","to","-","and","-","hashcode","-","in","-","java","it","is","recommended","only","to","use","getter","-","methods","when","using","orm","like","hibernate"],"query":"What issues should be considered when overriding equals and hashCode in Java?","query_tokens":["what","issues","should","be","considered","when","overriding","equals","and","hash","code","in","java","?"]}
{"query_id":"1399126","repo_name":"brubo1/MinecraftForge","zip_link":"/brubo1/MinecraftForge/archive/master.zip","code":"public class ZipperUtil {    public static void zip(File directory, File zipfile) throws IOException    {        URI base = directory.toURI();        Deque<File> queue = new LinkedList<File>();        queue.push(directory);        OutputStream out = new FileOutputStream(zipfile);        Closeable res = null;        try        {            ZipOutputStream zout = new ZipOutputStream(out);            res = zout;            while (!queue.isEmpty())            {                directory = queue.pop();                for (File kid : directory.listFiles())                {                    String name = base.relativize(kid.toURI()).getPath();                    if (kid.isDirectory())                    {                        queue.push(kid);                        name = name.endsWith(\"/\") ? name : name + \"/\";                        zout.putNextEntry(new ZipEntry(name));                    } else                    {                        zout.putNextEntry(new ZipEntry(name));                        Files.copy(kid, zout);                        zout.closeEntry();                    }                }            }        } finally        {            res.close();        }    }    public static void backupWorld() throws IOException    {        String dirName = FMLCommonHandler.instance().getMinecraftServerInstance().getFolderName();        backupWorld(dirName);    }    @Deprecated    public static void backupWorld(String dirName, String saveName) throws IOException    {        backupWorld(dirName);    }    public static void backupWorld(String dirName) throws IOException    {        File dstFolder = FMLCommonHandler.instance().getSavesDirectory();        File zip = new File(dstFolder, String.format(\"%s-%2$tY%2$tm%2$td-%2$tH%2$tM%2$tS.zip\", dirName, System.currentTimeMillis()));        try        {            ZipperUtil.zip(new File(dstFolder, dirName), zip);        }        catch (IOException e)        {            FMLLog.log(Level.WARN, e, \"World backup failed.\");            throw e;        }        FMLLog.info(\"World backup created at %s.\", zip.getCanonicalPath());    }}","code_tokens":["public","class","zipper","util","{","public","static","void","zip","(","file","directory",",","file","zipfile",")","throws","io","exception","{","uri","base","=","directory",".","to","uri","(",")",";","deque","<","file",">","queue","=","new","linked","list","<","file",">","(",")",";","queue",".","push","(","directory",")",";","output","stream","out","=","new","file","output","stream","(","zipfile",")",";","closeable","res","=","null",";","try","{","zip","output","stream","zout","=","new","zip","output","stream","(","out",")",";","res","=","zout",";","while","(","!","queue",".","is","empty","(",")",")","{","directory","=","queue",".","pop","(",")",";","for","(","file","kid",":","directory",".","list","files","(",")",")","{","string","name","=","base",".","relativize","(","kid",".","to","uri","(",")",")",".","get","path","(",")",";","if","(","kid",".","is","directory","(",")",")","{","queue",".","push","(","kid",")",";","name","=","name",".","ends","with","(","\"","/","\"",")","?","name",":","name","+","\"","/","\"",";","zout",".","put","next","entry","(","new","zip","entry","(","name",")",")",";","}","else","{","zout",".","put","next","entry","(","new","zip","entry","(","name",")",")",";","files",".","copy","(","kid",",","zout",")",";","zout",".","close","entry","(",")",";","}","}","}","}","finally","{","res",".","close","(",")",";","}","}","public","static","void","backup","world","(",")","throws","io","exception","{","string","dir","name","=","fml","common","handler",".","instance","(",")",".","get","minecraft","server","instance","(",")",".","get","folder","name","(",")",";","backup","world","(","dir","name",")",";","}","@","deprecated","public","static","void","backup","world","(","string","dir","name",",","string","save","name",")","throws","io","exception","{","backup","world","(","dir","name",")",";","}","public","static","void","backup","world","(","string","dir","name",")","throws","io","exception","{","file","dst","folder","=","fml","common","handler",".","instance","(",")",".","get","saves","directory","(",")",";","file","zip","=","new","file","(","dst","folder",",","string",".","format","(","\"","%","s","-","%","2","$","t","y","%","2","$","tm","%","2","$","td","-","%","2","$","t","h","%","2","$","t","m","%","2","$","t","s",".","zip","\"",",","dir","name",",","system",".","current","time","millis","(",")",")",")",";","try","{","zipper","util",".","zip","(","new","file","(","dst","folder",",","dir","name",")",",","zip",")",";","}","catch","(","io","exception","e",")","{","fml","log",".","log","(","level",".","warn",",","e",",","\"","world","backup","failed",".","\"",")",";","throw","e",";","}","fml","log",".","info","(","\"","world","backup","created","at","%","s",".","\"",",","zip",".","get","canonical","path","(",")",")",";","}","}"],"func_name":"ZipperUtil","func_name_tokens":["zipper","util"],"docstring":"  because the code looked very tidy and neat. Thanks, McDowell!   @author McDowell ","docstring_tokens":["because","the","code","looked","very","tidy","and","neat",".","thanks",",","mc","dowell","!"],"query":"java.util.zip - Recreating directory structure","query_tokens":["java",".","util",".","zip","-","recreating","directory","structure"]}
{"query_id":"4826122","repo_name":"jintoga/vk-android-sdk","zip_link":"/jintoga/vk-android-sdk/archive/master.zip","code":"    public static String getHost(String url){        if(url == null || url.length() == 0)            return \"\";        int doubleslash = url.indexOf(\"//\");        if(doubleslash == -1)            doubleslash = 0;        else            doubleslash += 2;        int end = url.indexOf('/', doubleslash);        end = end >= 0 ? end : url.length();        int port = url.indexOf(':', doubleslash);        end = (port > 0 && port < end) ? port : end;        return url.substring(doubleslash, end);    }","code_tokens":["public","static","string","get","host","(","string","url",")","{","if","(","url","=","=","null","|","|","url",".","length","(",")","=","=","0",")","return","\"","\"",";","int","doubleslash","=","url",".","index","of","(","\"","/","/","\"",")",";","if","(","doubleslash","=","=","-","1",")","doubleslash","=","0",";","else","doubleslash","+","=","2",";","int","end","=","url",".","index","of","(","'","/","'",",","doubleslash",")",";","end","=","end",">","=","0","?","end",":","url",".","length","(",")",";","int","port","=","url",".","index","of","(","'",":","'",",","doubleslash",")",";","end","=","(","port",">","0","&","&","port","<","end",")","?","port",":","end",";","return","url",".","substring","(","doubleslash",",","end",")",";","}"],"func_name":"getHost","func_name_tokens":["get","host"],"docstring":"          Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com           @param url url need to find host      @return host name of given url","docstring_tokens":["will","take","a","url","such","as","and","return"],"query":"What is the fastest way to get the domain/host name from a URL?","query_tokens":["what","is","the","fastest","way","to","get","the","domain","/","host","name","from","a","url","?"]}
{"query_id":"1529611","repo_name":"llaith/toolkit","zip_link":"/llaith/toolkit/archive/master.zip","code":"    public static void extractJar(final File jarFile, final String destPath) throws IOException {        final java.util.jar.JarFile jar = new java.util.jar.JarFile(jarFile);        final java.util.Enumeration<java.util.jar.JarEntry> en = jar.entries();        while (en.hasMoreElements()) {            final java.util.jar.JarEntry file = en.nextElement();            final java.io.File f = new java.io.File(destPath + java.io.File.separator + file.getName());            if (file.isDirectory()) {                f.mkdir();                continue;            }            final java.io.InputStream is = jar.getInputStream(file);            final java.io.FileOutputStream fos = new java.io.FileOutputStream(f);            while (is.available() > 0) {                fos.write(is.read());            }            fos.close();            is.close();        }    }","code_tokens":["public","static","void","extract","jar","(","final","file","jar","file",",","final","string","dest","path",")","throws","io","exception","{","final","java",".","util",".","jar",".","jar","file","jar","=","new","java",".","util",".","jar",".","jar","file","(","jar","file",")",";","final","java",".","util",".","enumeration","<","java",".","util",".","jar",".","jar","entry",">","en","=","jar",".","entries","(",")",";","while","(","en",".","has","more","elements","(",")",")","{","final","java",".","util",".","jar",".","jar","entry","file","=","en",".","next","element","(",")",";","final","java",".","io",".","file","f","=","new","java",".","io",".","file","(","dest","path","+","java",".","io",".","file",".","separator","+","file",".","get","name","(",")",")",";","if","(","file",".","is","directory","(",")",")","{","f",".","mkdir","(",")",";","continue",";","}","final","java",".","io",".","input","stream","is","=","jar",".","get","input","stream","(","file",")",";","final","java",".","io",".","file","output","stream","fos","=","new","java",".","io",".","file","output","stream","(","f",")",";","while","(","is",".","available","(",")",">","0",")","{","fos",".","write","(","is",".","read","(",")",")",";","}","fos",".","close","(",")",";","is",".","close","(",")",";","}","}"],"func_name":"extractJar","func_name_tokens":["extract","jar"],"docstring":"    /      which-can-extract-a-jar-file-and-stores-its-data-in-spe","docstring_tokens":["/","which","-","can","-","extract","-","a","-","jar","-","file","-","and","-","stores","-","its","-","data","-","in","-","spe"],"query":"How to write a Java program which can extract a JAR file and store its data in specified directory (location)?","query_tokens":["how","to","write","a","java","program","which","can","extract","a","jar","file","and","store","its","data","in","specified","directory","(","location",")","?"]}
{"query_id":"29395324","repo_name":"zhangminglei/flink","zip_link":"/rice904/flink/archive/master.zip","code":"public class OptionalConsumer<T> {\tprivate final Optional<T> optional;\tprivate OptionalConsumer(Optional<T> optional) {\t\tthis.optional = Preconditions.checkNotNull(optional);\t}\tpublic static <T> OptionalConsumer<T> of(Optional<T> optional) {\t\treturn new OptionalConsumer<>(optional);\t}\tpublic OptionalConsumer<T> ifPresent(Consumer<T> c) {\t\toptional.ifPresent(c);\t\treturn this;\t}\tpublic OptionalConsumer<T> ifNotPresent(Runnable r) {\t\tif (!optional.isPresent()) {\t\t\tr.run();\t\t}\t\treturn this;\t}}","code_tokens":["public","class","optional","consumer","<","t",">","{","private","final","optional","<","t",">","optional",";","private","optional","consumer","(","optional","<","t",">","optional",")","{","this",".","optional","=","preconditions",".","check","not","null","(","optional",")",";","}","public","static","<","t",">","optional","consumer","<","t",">","of","(","optional","<","t",">","optional",")","{","return","new","optional","consumer","<",">","(","optional",")",";","}","public","optional","consumer","<","t",">","if","present","(","consumer","<","t",">","c",")","{","optional",".","if","present","(","c",")",";","return","this",";","}","public","optional","consumer","<","t",">","if","not","present","(","runnable","r",")","{","if","(","!","optional",".","is","present","(",")",")","{","r",".","run","(",")",";","}","return","this",";","}","}"],"func_name":"OptionalConsumer","func_name_tokens":["optional","consumer"],"docstring":"  Utility class which allows to run code depending on whether the  optional has a value or is empty.    @param <T> type of the optional","docstring_tokens":["utility","class","which","allows","to","run","code","depending","on","whether","the","optional","has","a","value","or","is","empty","."],"query":"Functional style of Java 8's Optional.ifPresent and if-not-Present?","query_tokens":["functional","style","of","java","8","'","s","optional",".","if","present","and","if","-","not","-","present","?"]}
{"query_id":"521171","repo_name":"deepstupid/sphinx5","zip_link":"/deepstupid/sphinx5/archive/master.zip","code":"public class Pair<L, R> {    // The left element    private L left;    // The right element    private R right;    /*     * Constructor specifying the left and right elements of the Pair.     */    public Pair(L left, R right) {        this.left = left;        this.right = right;    }    public void setLeft(L left) {        this.left = left;    }    public void setRight(R right) {        this.right = right;    }    public L getLeft() {        return left;    }    public R getRight() {        return right;    }    @Override    public int hashCode() {        final int prime = 31;        int result = 1;        result = prime * result + left.hashCode();        result = prime * result + right.hashCode();        return result;    }    @Override    public boolean equals(Object obj) {        if (this == obj)            return true;        if (obj == null)            return false;        @SuppressWarnings(\"unchecked\")        Pair<L,R> other = (Pair<L,R>) obj;        if (!left.equals(other.left))            return false;        return right.equals(other.right);    }    /*     * (non-Javadoc)     *      * @see java.lang.Object#toString()     */    @Override    public String toString() {        return \"(\" + left + \", \" + right + ')';    }}","code_tokens":["public","class","pair","<","l",",","r",">","{","/","/","the","left","element","private","l","left",";","/","/","the","right","element","private","r","right",";","public","pair","(","l","left",",","r","right",")","{","this",".","left","=","left",";","this",".","right","=","right",";","}","public","void","set","left","(","l","left",")","{","this",".","left","=","left",";","}","public","void","set","right","(","r","right",")","{","this",".","right","=","right",";","}","public","l","get","left","(",")","{","return","left",";","}","public","r","get","right","(",")","{","return","right",";","}","@","override","public","int","hash","code","(",")","{","final","int","prime","=","31",";","int","result","=","1",";","result","=","prime","*","result","+","left",".","hash","code","(",")",";","result","=","prime","*","result","+","right",".","hash","code","(",")",";","return","result",";","}","@","override","public","boolean","equals","(","object","obj",")","{","if","(","this","=","=","obj",")","return","true",";","if","(","obj","=","=","null",")","return","false",";","@","suppress","warnings","(","\"","unchecked","\"",")","pair","<","l",",","r",">","other","=","(","pair","<","l",",","r",">",")","obj",";","if","(","!","left",".","equals","(","other",".","left",")",")","return","false",";","return","right",".","equals","(","other",".","right",")",";","}","@","override","public","string","to","string","(",")","{","return","\"","(","\"","+","left","+","\"",",","\"","+","right","+","'",")","'",";","}","}"],"func_name":"Pair","func_name_tokens":["pair"],"docstring":"  Pairs two elements    Original code obtained by  -pairs-tuples    @author John Salatas  ","docstring_tokens":["pairs","two","elements","original","code","obtained","by","-","pairs","-","tuples"],"query":"A Java collection of value pairs? (tuples?)","query_tokens":["a","java","collection","of","value","pairs","?","(","tuples","?",")"]}
{"query_id":"2912007","repo_name":"icza/sc2gears","zip_link":"/icza/sc2gears/archive/master.zip","code":"public class JNAScreenshot extends ScreenshotProducer {\r\t\r\tprivate final HDC        windowDC;\r\tprivate final HBITMAP    outputBitmap;\r\tprivate final HDC        blitDC;\r\tprivate final BITMAPINFO bi;\r\t\r\tprivate ColorModel       cm;\r\tprivate DataBuffer       buffer;\r\tprivate WritableRaster   raster;\r\tprivate BufferedImage    resultBufferedImage;\r\t\r    /**\r     * Creates a new JNAScreenshot.\r     * @param screen area to create screen capture from\r     */\r    public JNAScreenshot( final Rectangle screenArea ) {\r    \tsuper( screenArea );\r    \t\r\t\twindowDC     = GDI.GetDC( USER.GetDesktopWindow() );\r\t\toutputBitmap = GDI.CreateCompatibleBitmap( windowDC, screenArea.width, screenArea.height );\r\t\tblitDC       = GDI.CreateCompatibleDC( windowDC );\r\t\t\r    \tbi = new BITMAPINFO( 40 );\r\t\tbi.bmiHeader.biSize = 40;\r    }\r\t\r    @Override\r\tpublic BufferedImage getScreenshot() {\r\t\tfinal HANDLE oldBitmap = GDI.SelectObject( blitDC, outputBitmap );\r\t\ttry {\r\t\t\tGDI.BitBlt( blitDC, 0, 0, screenArea.width, screenArea.height, windowDC, screenArea.x, screenArea.y, GDI32.SRCCOPY );\r\t\t} finally {\r\t\t\tGDI.SelectObject( blitDC, oldBitmap );\r\t\t}\r\t\t\r\t\tfinal boolean ok = GDI.GetDIBits( blitDC, outputBitmap, 0, screenArea.height, (byte[]) null, bi, WinGDI.DIB_RGB_COLORS );\r\t\t\r\t\tif ( ok ) {\r\t\t\tfinal BITMAPINFOHEADER bih = bi.bmiHeader;\r\t\t\tbih.biHeight      = -Math.abs( bih.biHeight );\r\t\t\tbih.biCompression = 0;\r\t\t\t\r\t\t\treturn bufferedImageFromBitmap( blitDC, outputBitmap );\r\t\t}\r\t\telse\r\t\t\treturn null;\r\t}\r\t\r\tprivate BufferedImage bufferedImageFromBitmap( final HDC blitDC, final HBITMAP outputBitmap ) {\r\t\tfinal BITMAPINFOHEADER bih   = bi.bmiHeader;\r\t\t\r\t\tfinal int height             = Math.abs( bih.biHeight );\r\t\tfinal int strideBits         = ( bih.biWidth * bih.biBitCount );\r\t\tfinal int strideBytesAligned = ( ( ( strideBits - 1 ) | 0x1F ) + 1 ) >> 3;\r\t\tfinal int strideElementsAligned;\r\t\t\r\t\tswitch ( bih.biBitCount ) {\r\t\tcase 16:\r\t\t\tstrideElementsAligned = strideBytesAligned / 2;\r\t\t\tif ( buffer == null ) {\r\t\t\t\tcm     = new DirectColorModel( 16, 0x7C00, 0x3E0, 0x1F );\r    \t\t\tbuffer = new DataBufferUShort( strideElementsAligned * height );\r    \t\t\traster = Raster.createPackedRaster( buffer, bih.biWidth, height, strideElementsAligned, ( (DirectColorModel) cm ).getMasks(), null );\r\t\t\t}\r\t\t\tbreak;\r\t\tcase 32:\r\t\t\tstrideElementsAligned = strideBytesAligned / 4;\r\t\t\tif ( buffer == null ) {\r\t\t\t\tcm     = new DirectColorModel( 32, 0xFF0000, 0xFF00, 0xFF );\r    \t\t\tbuffer = new DataBufferInt( strideElementsAligned * height );\r    \t\t\traster = Raster.createPackedRaster( buffer, bih.biWidth, height, strideElementsAligned, ( (DirectColorModel) cm ).getMasks(), null );\r\t\t\t}\r\t\t\tbreak;\r\t\tdefault:\r\t\t\tthrow new IllegalArgumentException( \"Unsupported bit count: \" + bih.biBitCount );\r\t\t}\r\t\t\r\t\tfinal boolean ok;\r\t\tswitch ( buffer.getDataType() ) {\r\t\tcase DataBuffer.TYPE_INT : {\r\t\t\tfinal int[] pixels = ( (DataBufferInt) buffer ).getData();\r\t\t\tok = GDI.GetDIBits( blitDC, outputBitmap, 0, raster.getHeight(), pixels, bi, 0 );\r\t\t\tbreak;\r\t\t}\r\t\tcase DataBuffer.TYPE_USHORT : {\r\t\t\tfinal short[] pixels = ( (DataBufferUShort) buffer ).getData();\r\t\t\tok = GDI.GetDIBits( blitDC, outputBitmap, 0, raster.getHeight(), pixels, bi, 0 );\r\t\t\tbreak;\r\t\t}\r\t\tdefault:\r\t\t\tthrow new AssertionError( \"Unexpected buffer element type: \" + buffer.getDataType() );\r\t\t}\r\t\t\r\t\tif ( ok ) {\r\t\t\tif ( resultBufferedImage == null )\r\t\t\t\tresultBufferedImage = new BufferedImage( cm, raster, false, null );\r\t\t\treturn resultBufferedImage;\r\t\t}\r\t\telse\r\t\t\treturn null;\r\t}\r\t\r\t@Override\r\tpublic void close() {\r\t\tif ( outputBitmap != null )\r\t\t\tGDI.DeleteObject( outputBitmap );\r\t\tif ( blitDC != null )\r\t\t\tGDI.DeleteObject( blitDC );\r\t}\r\t\r\tprivate static final User32 USER = User32.INSTANCE;\r\tprivate static final GDI32  GDI  = GDI32 .INSTANCE;\r\t\r}\r","code_tokens":["public","class","jna","screenshot","extends","screenshot","producer","{","private","final","hdc","window","dc",";","private","final","hbitmap","output","bitmap",";","private","final","hdc","blit","dc",";","private","final","bitmapinfo","bi",";","private","color","model","cm",";","private","data","buffer","buffer",";","private","writable","raster","raster",";","private","buffered","image","result","buffered","image",";","public","jna","screenshot","(","final","rectangle","screen","area",")","{","super","(","screen","area",")",";","window","dc","=","gdi",".","get","dc","(","user",".","get","desktop","window","(",")",")",";","output","bitmap","=","gdi",".","create","compatible","bitmap","(","window","dc",",","screen","area",".","width",",","screen","area",".","height",")",";","blit","dc","=","gdi",".","create","compatible","dc","(","window","dc",")",";","bi","=","new","bitmapinfo","(","40",")",";","bi",".","bmi","header",".","bi","size","=","40",";","}","@","override","public","buffered","image","get","screenshot","(",")","{","final","handle","old","bitmap","=","gdi",".","select","object","(","blit","dc",",","output","bitmap",")",";","try","{","gdi",".","bit","blt","(","blit","dc",",","0",",","0",",","screen","area",".","width",",","screen","area",".","height",",","window","dc",",","screen","area",".","x",",","screen","area",".","y",",","gdi32",".","srccopy",")",";","}","finally","{","gdi",".","select","object","(","blit","dc",",","old","bitmap",")",";","}","final","boolean","ok","=","gdi",".","get","di","bits","(","blit","dc",",","output","bitmap",",","0",",","screen","area",".","height",",","(","byte","[","]",")","null",",","bi",",","win","gdi",".","dib","rgb","colors",")",";","if","(","ok",")","{","final","bitmapinfoheader","bih","=","bi",".","bmi","header",";","bih",".","bi","height","=","-","math",".","abs","(","bih",".","bi","height",")",";","bih",".","bi","compression","=","0",";","return","buffered","image","from","bitmap","(","blit","dc",",","output","bitmap",")",";","}","else","return","null",";","}","private","buffered","image","buffered","image","from","bitmap","(","final","hdc","blit","dc",",","final","hbitmap","output","bitmap",")","{","final","bitmapinfoheader","bih","=","bi",".","bmi","header",";","final","int","height","=","math",".","abs","(","bih",".","bi","height",")",";","final","int","stride","bits","=","(","bih",".","bi","width","*","bih",".","bi","bit","count",")",";","final","int","stride","bytes","aligned","=","(","(","(","stride","bits","-","1",")","|","0x1f",")","+","1",")",">",">","3",";","final","int","stride","elements","aligned",";","switch","(","bih",".","bi","bit","count",")","{","case","16",":","stride","elements","aligned","=","stride","bytes","aligned","/","2",";","if","(","buffer","=","=","null",")","{","cm","=","new","direct","color","model","(","16",",","0x7c00",",","0x3e0",",","0x1f",")",";","buffer","=","new","data","buffer","u","short","(","stride","elements","aligned","*","height",")",";","raster","=","raster",".","create","packed","raster","(","buffer",",","bih",".","bi","width",",","height",",","stride","elements","aligned",",","(","(","direct","color","model",")","cm",")",".","get","masks","(",")",",","null",")",";","}","break",";","case","32",":","stride","elements","aligned","=","stride","bytes","aligned","/","4",";","if","(","buffer","=","=","null",")","{","cm","=","new","direct","color","model","(","32",",","0x","ff0000",",","0x","ff00",",","0x","ff",")",";","buffer","=","new","data","buffer","int","(","stride","elements","aligned","*","height",")",";","raster","=","raster",".","create","packed","raster","(","buffer",",","bih",".","bi","width",",","height",",","stride","elements","aligned",",","(","(","direct","color","model",")","cm",")",".","get","masks","(",")",",","null",")",";","}","break",";","default",":","throw","new","illegal","argument","exception","(","\"","unsupported","bit","count",":","\"","+","bih",".","bi","bit","count",")",";","}","final","boolean","ok",";","switch","(","buffer",".","get","data","type","(",")",")","{","case","data","buffer",".","type","int",":","{","final","int","[","]","pixels","=","(","(","data","buffer","int",")","buffer",")",".","get","data","(",")",";","ok","=","gdi",".","get","di","bits","(","blit","dc",",","output","bitmap",",","0",",","raster",".","get","height","(",")",",","pixels",",","bi",",","0",")",";","break",";","}","case","data","buffer",".","type","ushort",":","{","final","short","[","]","pixels","=","(","(","data","buffer","u","short",")","buffer",")",".","get","data","(",")",";","ok","=","gdi",".","get","di","bits","(","blit","dc",",","output","bitmap",",","0",",","raster",".","get","height","(",")",",","pixels",",","bi",",","0",")",";","break",";","}","default",":","throw","new","assertion","error","(","\"","unexpected","buffer","element","type",":","\"","+","buffer",".","get","data","type","(",")",")",";","}","if","(","ok",")","{","if","(","result","buffered","image","=","=","null",")","result","buffered","image","=","new","buffered","image","(","cm",",","raster",",","false",",","null",")",";","return","result","buffered","image",";","}","else","return","null",";","}","@","override","public","void","close","(",")","{","if","(","output","bitmap","!","=","null",")","gdi",".","delete","object","(","output","bitmap",")",";","if","(","blit","dc","!","=","null",")","gdi",".","delete","object","(","blit","dc",")",";","}","private","static","final","user32","user","=","user32",".","instance",";","private","static","final","gdi32","gdi","=","gdi32",".","instance",";","}"],"func_name":"JNAScreenshot","func_name_tokens":["jna","screenshot"],"docstring":"\r  Windows specific screen capture using JNA.\r  \r  \r  @author Andras Belicza\r","docstring_tokens":["windows","specific","screen","capture","using","jna","."],"query":"How to take screenshots fast in Java?","query_tokens":["how","to","take","screenshots","fast","in","java","?"]}
{"query_id":"15725601","repo_name":"SSEHUB/EASyProducer","zip_link":"/SSEHUB/EASyProducer/archive/master.zip","code":"    private static String determineJDKDir() {        // Try to resolve JDK path via JAVA_HOME system variable (should be the fastest method, but not reliable        String jdkPath = System.getenv(\"JAVA_HOME\");                //checkstyle: stop exception type check         try {            if (jdkPath == null || !(new File(jdkPath).exists())) {                //\"where\" on Windows and \"whereis\" on Linux/Mac                if (Environment.isWinOS()) {                    String path = getCommandOutput(\"where javac\");                    if (path != null && !path.isEmpty()) {                        //Response will be the path including \"javac.exe\" so need to                        //Get the two directories above that                        File javacFile = new File(path);                        File jdkInstallationDir = javacFile.getParentFile().getParentFile();                        jdkPath = jdkInstallationDir.getAbsolutePath();                    }                } else {                    // whereis may return more than one result separated by a whitespace                    String response = getCommandOutput(\"which javac\");                    if (response != null) {                        //The response will be \"javac:  /usr ... \"                        //so parse from the \"/\" - if no \"/\" then there was an error with the command                        int pathStartIndex = response.indexOf('/');                        if (pathStartIndex != -1) {                            //Else get the directory that is two above the javac.exe file                            String path = response.substring(pathStartIndex, response.length());                            File javacFile;                            try {                                javacFile = UnixOperations.resolveSymbolicLink(new File(path));                                File jdkInstallationDir = javacFile.getParentFile().getParentFile();                                jdkPath = jdkInstallationDir.getAbsolutePath();                            } catch (IOException e) {                                /*                                  * Should not occur since we already tested that this will                                 * only be executed on not Windows machines.                                 */                                EASyLoggerFactory.INSTANCE.getLogger(JavaUtilities.class, Bundle.ID).exception(e);                            }                        }                    }                }            }        } catch (Exception e) {            /*             * In case of any errors, JDK_PATH shall return null instead of crashing the OSGI environment of EASy.             */            EASyLoggerFactory.INSTANCE.getLogger(JavaUtilities.class, Bundle.ID).exception(e);        }                //checkstyle: resume exception type check                 return jdkPath;    }","code_tokens":["private","static","string","determine","jdk","dir","(",")","{","/","/","try","to","resolve","jdk","path","via","java","home","system","variable","(","should","be","the","fastest","method",",","but","not","reliable","string","jdk","path","=","system",".","getenv","(","\"","java","home","\"",")",";","/","/","checkstyle",":","stop","exception","type","check","try","{","if","(","jdk","path","=","=","null","|","|","!","(","new","file","(","jdk","path",")",".","exists","(",")",")",")","{","/","/","\"","where","\"","on","windows","and","\"","whereis","\"","on","linux","/","mac","if","(","environment",".","is","win","os","(",")",")","{","string","path","=","get","command","output","(","\"","where","javac","\"",")",";","if","(","path","!","=","null","&","&","!","path",".","is","empty","(",")",")","{","/","/","response","will","be","the","path","including","\"","javac",".","exe","\"","so","need","to","/","/","get","the","two","directories","above","that","file","javac","file","=","new","file","(","path",")",";","file","jdk","installation","dir","=","javac","file",".","get","parent","file","(",")",".","get","parent","file","(",")",";","jdk","path","=","jdk","installation","dir",".","get","absolute","path","(",")",";","}","}","else","{","/","/","whereis","may","return","more","than","one","result","separated","by","a","whitespace","string","response","=","get","command","output","(","\"","which","javac","\"",")",";","if","(","response","!","=","null",")","{","/","/","the","response","will","be","\"","javac",":","/","usr",".",".",".","\"","/","/","so","parse","from","the","\"","/","\"","-","if","no","\"","/","\"","then","there","was","an","error","with","the","command","int","path","start","index","=","response",".","index","of","(","'","/","'",")",";","if","(","path","start","index","!","=","-","1",")","{","/","/","else","get","the","directory","that","is","two","above","the","javac",".","exe","file","string","path","=","response",".","substring","(","path","start","index",",","response",".","length","(",")",")",";","file","javac","file",";","try","{","javac","file","=","unix","operations",".","resolve","symbolic","link","(","new","file","(","path",")",")",";","file","jdk","installation","dir","=","javac","file",".","get","parent","file","(",")",".","get","parent","file","(",")",";","jdk","path","=","jdk","installation","dir",".","get","absolute","path","(",")",";","}","catch","(","io","exception","e",")","{","ea","sy","logger","factory",".","instance",".","get","logger","(","java","utilities",".","class",",","bundle",".","id",")",".","exception","(","e",")",";","}","}","}","}","}","}","catch","(","exception","e",")","{","ea","sy","logger","factory",".","instance",".","get","logger","(","java","utilities",".","class",",","bundle",".","id",")",".","exception","(","e",")",";","}","/","/","checkstyle",":","resume","exception","type","check","return","jdk","path",";","}"],"func_name":"determineJDKDir","func_name_tokens":["determine","jdk","dir"],"docstring":"          Determines the PATH (root folder) of the installed and most used JDK installation.      This algorithm will try the following things to detect the JDK installation:      <ol>          <li>Find the JDK via the <tt>JAVA_HOME</tt> system variable</li>          <li>Find the JDK via the command <tt>where/whereis javac</tt></li>      </ol>      @return The location of a JDK (top folder) or <tt>null</tt> if it could not be found.      @see <a href=\"http://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html\">      JAVA_HOME system variable</a>      Source of the used algorithm</a>","docstring_tokens":["determines","the","path","(","root","folder",")","of","the","installed","and","most","used","jdk","installation",".","this","algorithm","will","try","the","following","things","to","detect","the","jdk","installation",":","<","ol",">","<","li",">","find","the","jdk","via","the","<","tt",">","java","home","<","/","tt",">","system","variable","<","/","li",">","<","li",">","find","the","jdk","via","the","command","<","tt",">","where","/","whereis","javac","<","/","tt",">","<","/","li",">","<","/","ol",">"],"query":"Finding JDK path and storing it as a string in Java","query_tokens":["finding","jdk","path","and","storing","it","as","a","string","in","java"]}
{"query_id":"600207","repo_name":"servalproject/MeshMSGateway","zip_link":"/servalproject/MeshMSGateway/archive/master.zip","code":"\tprivate boolean isMyServiceRunning() {\t    ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);\t    for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {\t        if (org.servalproject.meshms.gateway.services.CoreService.class.getName().equals(service.service.getClassName())) {\t            return true;\t        }\t    }\t    return false;\t}","code_tokens":["private","boolean","is","my","service","running","(",")","{","activity","manager","manager","=","(","activity","manager",")","get","system","service","(","activity","service",")",";","for","(","running","service","info","service",":","manager",".","get","running","services","(","integer",".","max","value",")",")","{","if","(","org",".","servalproject",".","meshms",".","gateway",".","services",".","core","service",".","class",".","get","name","(",")",".","equals","(","service",".","service",".","get","class","name","(",")",")",")","{","return","true",";","}","}","return","false",";","}"],"func_name":"isMyServiceRunning","func_name_tokens":["is","my","service","running"],"docstring":"\t/\t  check to see if the service is running\t  this code is based on the code available at the URL below\t  which is considered to be in the public domain","docstring_tokens":["/","check","to","see","if","the","service","is","running","this","code","is","based","on","the","code","available","at","the","url","below","which","is","considered","to","be","in","the","public","domain"],"query":"How to check if a service is running on Android?","query_tokens":["how","to","check","if","a","service","is","running","on","android","?"]}
{"query_id":"18004150","repo_name":"viniciusfbarbosa/DC-UFSCar-ES2-201601-Grupo-AMTV-","zip_link":"/viniciusfbarbosa/DC-UFSCar-ES2-201601-Grupo-AMTV-/archive/master.zip","code":"public class JabRefDesktop {    private static final NativeDesktop NATIVE_DESKTOP = getNativeDesktop();    private static final Log LOGGER = LogFactory.getLog(JabRefDesktop.class);    private static final Pattern REMOTE_LINK_PATTERN = Pattern.compile(\"[a-z]+://.*\");    private static final String ARXIV_LOOKUP_PREFIX = \"http://arxiv.org/abs/\";    /**     * Open a http/pdf/ps viewer for the given link string.     */    public static void openExternalViewer(BibDatabaseContext databaseContext, String initialLink,            String initialFieldName) throws IOException {        String link = initialLink;        String fieldName = initialFieldName;        if (\"ps\".equals(fieldName) || \"pdf\".equals(fieldName)) {            // Find the default directory for this field type:            List<String> dir = databaseContext.getFileDirectory(fieldName);            Optional<File> file = FileUtil.expandFilename(link, dir);            // Check that the file exists:            if (!file.isPresent() || !file.get().exists()) {                throw new IOException(\"File not found (\" + fieldName + \"): '\" + link + \"'.\");            }            link = file.get().getCanonicalPath();            // Use the correct viewer even if pdf and ps are mixed up:            String[] split = file.get().getName().split(\"\\\\.\");            if (split.length >= 2) {                if (\"pdf\".equalsIgnoreCase(split[split.length - 1])) {                    fieldName = \"pdf\";                } else if (\"ps\".equalsIgnoreCase(split[split.length - 1])                        || ((split.length >= 3) && \"ps\".equalsIgnoreCase(split[split.length - 2]))) {                    fieldName = \"ps\";                }            }        } else if (\"doi\".equals(fieldName)) {            Optional<DOI> doiUrl = DOI.build(link);            if (doiUrl.isPresent()) {                link = doiUrl.get().getURLAsASCIIString();            }            // should be opened in browser            fieldName = \"url\";        } else if (\"eprint\".equals(fieldName)) {            fieldName = \"url\";            // Check to see if link field already contains a well formated URL            if (!link.startsWith(\"http://\")) {                link = ARXIV_LOOKUP_PREFIX + link;            }        }        if (\"url\".equals(fieldName)) { // html            try {                openBrowser(link);            } catch (IOException e) {                LOGGER.error(\"Error opening file '\" + link + \"'\", e);                // TODO: should we rethrow the exception?                // In BasePanel.java, the exception is catched and a text output to the frame                // throw e;            }        } else if (\"ps\".equals(fieldName)) {            try {                NATIVE_DESKTOP.openFile(link, \"ps\");            } catch (IOException e) {                LOGGER.error(\"An error occured on the command: \" + link, e);            }        } else if (\"pdf\".equals(fieldName)) {            try {                NATIVE_DESKTOP.openFile(link, \"pdf\");            } catch (IOException e) {                LOGGER.error(\"An error occured on the command: \" + link, e);            }        } else {            LOGGER.info(\"Message: currently only PDF, PS and HTML files can be opened by double clicking\");        }    }    /**     * Open an external file, attempting to use the correct viewer for it.     *     * @param databaseContext     *            The database this file belongs to.     * @param link     *            The filename.     * @return false if the link couldn't be resolved, true otherwise.     */    public static boolean openExternalFileAnyFormat(final BibDatabaseContext databaseContext, String link,            final Optional<ExternalFileType> type) throws IOException {        boolean httpLink = false;        if (REMOTE_LINK_PATTERN.matcher(link.toLowerCase()).matches()) {            httpLink = true;        }        // For other platforms we'll try to find the file type:        File file = new File(link);        if (!httpLink) {            Optional<File> tmp = FileUtil.expandFilename(databaseContext, link);            if (tmp.isPresent()) {                file = tmp.get();            }        }        // Check if we have arrived at a file type, and either an http link or an existing file:        if ((httpLink || file.exists()) && (type.isPresent())) {            // Open the file:            String filePath = httpLink ? link : file.getPath();            openExternalFilePlatformIndependent(type, filePath);            return true;        } else {            // No file matched the name, or we didn't know the file type.            return false;        }    }    private static void openExternalFilePlatformIndependent(Optional<ExternalFileType> fileType, String filePath)            throws IOException {        if (fileType.isPresent()) {            String application = fileType.get().getOpenWithApplication();            if (application.isEmpty()) {                NATIVE_DESKTOP.openFile(filePath, fileType.get().getExtension());            } else {                NATIVE_DESKTOP.openFileWithApplication(filePath, application);            }        }    }    public static boolean openExternalFileUnknown(JabRefFrame frame, BibEntry entry, BibDatabaseContext databaseContext,            String link, UnknownExternalFileType fileType) throws IOException {        String cancelMessage = Localization.lang(\"Unable to open file.\");        String[] options = new String[] {Localization.lang(\"Define '%0'\", fileType.getName()),                Localization.lang(\"Change file type\"), Localization.lang(\"Cancel\")};        String defOption = options[0];        int answer = JOptionPane.showOptionDialog(frame,                Localization.lang(\"This external link is of the type '%0', which is undefined. What do you want to do?\",                        fileType.getName()),                Localization.lang(\"Undefined file type\"), JOptionPane.YES_NO_CANCEL_OPTION,                JOptionPane.QUESTION_MESSAGE, null, options, defOption);        if (answer == JOptionPane.CANCEL_OPTION) {            frame.output(cancelMessage);            return false;        } else if (answer == JOptionPane.YES_OPTION) {            // User wants to define the new file type. Show the dialog:            ExternalFileType newType = new ExternalFileType(fileType.getName(), \"\", \"\", \"\", \"new\",                    IconTheme.JabRefIcon.FILE.getSmallIcon());            ExternalFileTypeEntryEditor editor = new ExternalFileTypeEntryEditor(frame, newType);            editor.setVisible(true);            if (editor.okPressed()) {                // Get the old list of types, add this one, and update the list in prefs:                List<ExternalFileType> fileTypes = new ArrayList<>(                        ExternalFileTypes.getInstance().getExternalFileTypeSelection());                fileTypes.add(newType);                Collections.sort(fileTypes);                ExternalFileTypes.getInstance().setExternalFileTypes(fileTypes);                // Finally, open the file:                return openExternalFileAnyFormat(databaseContext, link, Optional.of(newType));            } else {                // Canceled:                frame.output(cancelMessage);                return false;            }        } else {            // User wants to change the type of this link.            // First get a model of all file links for this entry:            FileListTableModel tModel = new FileListTableModel();            String oldValue = entry.getField(Globals.FILE_FIELD);            tModel.setContent(oldValue);            FileListEntry flEntry = null;            // Then find which one we are looking at:            for (int i = 0; i < tModel.getRowCount(); i++) {                FileListEntry iEntry = tModel.getEntry(i);                if (iEntry.link.equals(link)) {                    flEntry = iEntry;                    break;                }            }            if (flEntry == null) {                // This shouldn't happen, so I'm not sure what to put in here:                throw new RuntimeException(\"Could not find the file list entry \" + link + \" in \" + entry);            }            FileListEntryEditor editor = new FileListEntryEditor(frame, flEntry, false, true, databaseContext);            editor.setVisible(true, false);            if (editor.okPressed()) {                // Store the changes and add an undo edit:                String newValue = tModel.getStringRepresentation();                UndoableFieldChange ce = new UndoableFieldChange(entry, Globals.FILE_FIELD, oldValue, newValue);                entry.setField(Globals.FILE_FIELD, newValue);                frame.getCurrentBasePanel().undoManager.addEdit(ce);                frame.getCurrentBasePanel().markBaseChanged();                // Finally, open the link:                return openExternalFileAnyFormat(databaseContext, flEntry.link, flEntry.type);            } else {                // Canceled:                frame.output(cancelMessage);                return false;            }        }    }    /**     * Opens a file browser of the folder of the given file. If possible, the file is selected     * @param fileLink the location of the file     * @throws IOException     */    public static void openFolderAndSelectFile(String fileLink) throws IOException {        NATIVE_DESKTOP.openFolderAndSelectFile(fileLink);    }    /**     * Opens the given URL using the system browser     *     * @param url the URL to open     * @throws IOException     */    public static void openBrowser(String url) throws IOException {        Optional<ExternalFileType> fileType = ExternalFileTypes.getInstance().getExternalFileTypeByExt(\"html\");        openExternalFilePlatformIndependent(fileType, url);    }    public static void openConsole(File file) throws IOException {        if (file == null) {            return;        }        String absolutePath = file.toPath().toAbsolutePath().getParent().toString();        NATIVE_DESKTOP.openConsole(absolutePath);    }    // TODO: Move to OS.java    public static NativeDesktop getNativeDesktop() {        if (OS.WINDOWS) {            return new Windows();        } else if (OS.OS_X) {            return new OSX();        } else if (OS.LINUX) {            return new Linux();        }        return new DefaultDesktop();    }}","code_tokens":["public","class","jab","ref","desktop","{","private","static","final","native","desktop","native","desktop","=","get","native","desktop","(",")",";","private","static","final","log","logger","=","log","factory",".","get","log","(","jab","ref","desktop",".","class",")",";","private","static","final","pattern","remote","link","pattern","=","pattern",".","compile","(","\"","[","a","-","z","]","+",":","/","/",".","*","\"",")",";","private","static","final","string","arxiv","lookup","prefix","=","\"","\"",";","public","static","void","open","external","viewer","(","bib","database","context","database","context",",","string","initial","link",",","string","initial","field","name",")","throws","io","exception","{","string","link","=","initial","link",";","string","field","name","=","initial","field","name",";","if","(","\"","ps","\"",".","equals","(","field","name",")","|","|","\"","pdf","\"",".","equals","(","field","name",")",")","{","/","/","find","the","default","directory","for","this","field","type",":","list","<","string",">","dir","=","database","context",".","get","file","directory","(","field","name",")",";","optional","<","file",">","file","=","file","util",".","expand","filename","(","link",",","dir",")",";","/","/","check","that","the","file","exists",":","if","(","!","file",".","is","present","(",")","|","|","!","file",".","get","(",")",".","exists","(",")",")","{","throw","new","io","exception","(","\"","file","not","found","(","\"","+","field","name","+","\"",")",":","'","\"","+","link","+","\"","'",".","\"",")",";","}","link","=","file",".","get","(",")",".","get","canonical","path","(",")",";","/","/","use","the","correct","viewer","even","if","pdf","and","ps","are","mixed","up",":","string","[","]","split","=","file",".","get","(",")",".","get","name","(",")",".","split","(","\"","\\","\\",".","\"",")",";","if","(","split",".","length",">","=","2",")","{","if","(","\"","pdf","\"",".","equals","ignore","case","(","split","[","split",".","length","-","1","]",")",")","{","field","name","=","\"","pdf","\"",";","}","else","if","(","\"","ps","\"",".","equals","ignore","case","(","split","[","split",".","length","-","1","]",")","|","|","(","(","split",".","length",">","=","3",")","&","&","\"","ps","\"",".","equals","ignore","case","(","split","[","split",".","length","-","2","]",")",")",")","{","field","name","=","\"","ps","\"",";","}","}","}","else","if","(","\"","doi","\"",".","equals","(","field","name",")",")","{","optional","<","doi",">","doi","url","=","doi",".","build","(","link",")",";","if","(","doi","url",".","is","present","(",")",")","{","link","=","doi","url",".","get","(",")",".","get","url","as","ascii","string","(",")",";","}","/","/","should","be","opened","in","browser","field","name","=","\"","url","\"",";","}","else","if","(","\"","eprint","\"",".","equals","(","field","name",")",")","{","field","name","=","\"","url","\"",";","/","/","check","to","see","if","link","field","already","contains","a","well","formated","url","if","(","!","link",".","starts","with","(","\"","http",":","/","/","\"",")",")","{","link","=","arxiv","lookup","prefix","+","link",";","}","}","if","(","\"","url","\"",".","equals","(","field","name",")",")","{","/","/","html","try","{","open","browser","(","link",")",";","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","error","opening","file","'","\"","+","link","+","\"","'","\"",",","e",")",";","/","/","todo",":","should","we","rethrow","the","exception","?","/","/","in","base","panel",".","java",",","the","exception","is","catched","and","a","text","output","to","the","frame","/","/","throw","e",";","}","}","else","if","(","\"","ps","\"",".","equals","(","field","name",")",")","{","try","{","native","desktop",".","open","file","(","link",",","\"","ps","\"",")",";","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","an","error","occured","on","the","command",":","\"","+","link",",","e",")",";","}","}","else","if","(","\"","pdf","\"",".","equals","(","field","name",")",")","{","try","{","native","desktop",".","open","file","(","link",",","\"","pdf","\"",")",";","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","an","error","occured","on","the","command",":","\"","+","link",",","e",")",";","}","}","else","{","logger",".","info","(","\"","message",":","currently","only","pdf",",","ps","and","html","files","can","be","opened","by","double","clicking","\"",")",";","}","}","public","static","boolean","open","external","file","any","format","(","final","bib","database","context","database","context",",","string","link",",","final","optional","<","external","file","type",">","type",")","throws","io","exception","{","boolean","http","link","=","false",";","if","(","remote","link","pattern",".","matcher","(","link",".","to","lower","case","(",")",")",".","matches","(",")",")","{","http","link","=","true",";","}","/","/","for","other","platforms","we","'","ll","try","to","find","the","file","type",":","file","file","=","new","file","(","link",")",";","if","(","!","http","link",")","{","optional","<","file",">","tmp","=","file","util",".","expand","filename","(","database","context",",","link",")",";","if","(","tmp",".","is","present","(",")",")","{","file","=","tmp",".","get","(",")",";","}","}","/","/","check","if","we","have","arrived","at","a","file","type",",","and","either","an","http","link","or","an","existing","file",":","if","(","(","http","link","|","|","file",".","exists","(",")",")","&","&","(","type",".","is","present","(",")",")",")","{","/","/","open","the","file",":","string","file","path","=","http","link","?","link",":","file",".","get","path","(",")",";","open","external","file","platform","independent","(","type",",","file","path",")",";","return","true",";","}","else","{","/","/","no","file","matched","the","name",",","or","we","didn","'","t","know","the","file","type",".","return","false",";","}","}","private","static","void","open","external","file","platform","independent","(","optional","<","external","file","type",">","file","type",",","string","file","path",")","throws","io","exception","{","if","(","file","type",".","is","present","(",")",")","{","string","application","=","file","type",".","get","(",")",".","get","open","with","application","(",")",";","if","(","application",".","is","empty","(",")",")","{","native","desktop",".","open","file","(","file","path",",","file","type",".","get","(",")",".","get","extension","(",")",")",";","}","else","{","native","desktop",".","open","file","with","application","(","file","path",",","application",")",";","}","}","}","public","static","boolean","open","external","file","unknown","(","jab","ref","frame","frame",",","bib","entry","entry",",","bib","database","context","database","context",",","string","link",",","unknown","external","file","type","file","type",")","throws","io","exception","{","string","cancel","message","=","localization",".","lang","(","\"","unable","to","open","file",".","\"",")",";","string","[","]","options","=","new","string","[","]","{","localization",".","lang","(","\"","define","'","%","0","'","\"",",","file","type",".","get","name","(",")",")",",","localization",".","lang","(","\"","change","file","type","\"",")",",","localization",".","lang","(","\"","cancel","\"",")","}",";","string","def","option","=","options","[","0","]",";","int","answer","=","j","option","pane",".","show","option","dialog","(","frame",",","localization",".","lang","(","\"","this","external","link","is","of","the","type","'","%","0","'",",","which","is","undefined",".","what","do","you","want","to","do","?","\"",",","file","type",".","get","name","(",")",")",",","localization",".","lang","(","\"","undefined","file","type","\"",")",",","j","option","pane",".","yes","no","cancel","option",",","j","option","pane",".","question","message",",","null",",","options",",","def","option",")",";","if","(","answer","=","=","j","option","pane",".","cancel","option",")","{","frame",".","output","(","cancel","message",")",";","return","false",";","}","else","if","(","answer","=","=","j","option","pane",".","yes","option",")","{","/","/","user","wants","to","define","the","new","file","type",".","show","the","dialog",":","external","file","type","new","type","=","new","external","file","type","(","file","type",".","get","name","(",")",",","\"","\"",",","\"","\"",",","\"","\"",",","\"","new","\"",",","icon","theme",".","jab","ref","icon",".","file",".","get","small","icon","(",")",")",";","external","file","type","entry","editor","editor","=","new","external","file","type","entry","editor","(","frame",",","new","type",")",";","editor",".","set","visible","(","true",")",";","if","(","editor",".","ok","pressed","(",")",")","{","/","/","get","the","old","list","of","types",",","add","this","one",",","and","update","the","list","in","prefs",":","list","<","external","file","type",">","file","types","=","new","array","list","<",">","(","external","file","types",".","get","instance","(",")",".","get","external","file","type","selection","(",")",")",";","file","types",".","add","(","new","type",")",";","collections",".","sort","(","file","types",")",";","external","file","types",".","get","instance","(",")",".","set","external","file","types","(","file","types",")",";","/","/","finally",",","open","the","file",":","return","open","external","file","any","format","(","database","context",",","link",",","optional",".","of","(","new","type",")",")",";","}","else","{","/","/","canceled",":","frame",".","output","(","cancel","message",")",";","return","false",";","}","}","else","{","/","/","user","wants","to","change","the","type","of","this","link",".","/","/","first","get","a","model","of","all","file","links","for","this","entry",":","file","list","table","model","t","model","=","new","file","list","table","model","(",")",";","string","old","value","=","entry",".","get","field","(","globals",".","file","field",")",";","t","model",".","set","content","(","old","value",")",";","file","list","entry","fl","entry","=","null",";","/","/","then","find","which","one","we","are","looking","at",":","for","(","int","i","=","0",";","i","<","t","model",".","get","row","count","(",")",";","i","+","+",")","{","file","list","entry","i","entry","=","t","model",".","get","entry","(","i",")",";","if","(","i","entry",".","link",".","equals","(","link",")",")","{","fl","entry","=","i","entry",";","break",";","}","}","if","(","fl","entry","=","=","null",")","{","/","/","this","shouldn","'","t","happen",",","so","i","'","m","not","sure","what","to","put","in","here",":","throw","new","runtime","exception","(","\"","could","not","find","the","file","list","entry","\"","+","link","+","\"","in","\"","+","entry",")",";","}","file","list","entry","editor","editor","=","new","file","list","entry","editor","(","frame",",","fl","entry",",","false",",","true",",","database","context",")",";","editor",".","set","visible","(","true",",","false",")",";","if","(","editor",".","ok","pressed","(",")",")","{","/","/","store","the","changes","and","add","an","undo","edit",":","string","new","value","=","t","model",".","get","string","representation","(",")",";","undoable","field","change","ce","=","new","undoable","field","change","(","entry",",","globals",".","file","field",",","old","value",",","new","value",")",";","entry",".","set","field","(","globals",".","file","field",",","new","value",")",";","frame",".","get","current","base","panel","(",")",".","undo","manager",".","add","edit","(","ce",")",";","frame",".","get","current","base","panel","(",")",".","mark","base","changed","(",")",";","/","/","finally",",","open","the","link",":","return","open","external","file","any","format","(","database","context",",","fl","entry",".","link",",","fl","entry",".","type",")",";","}","else","{","/","/","canceled",":","frame",".","output","(","cancel","message",")",";","return","false",";","}","}","}","public","static","void","open","folder","and","select","file","(","string","file","link",")","throws","io","exception","{","native","desktop",".","open","folder","and","select","file","(","file","link",")",";","}","public","static","void","open","browser","(","string","url",")","throws","io","exception","{","optional","<","external","file","type",">","file","type","=","external","file","types",".","get","instance","(",")",".","get","external","file","type","by","ext","(","\"","html","\"",")",";","open","external","file","platform","independent","(","file","type",",","url",")",";","}","public","static","void","open","console","(","file","file",")","throws","io","exception","{","if","(","file","=","=","null",")","{","return",";","}","string","absolute","path","=","file",".","to","path","(",")",".","to","absolute","path","(",")",".","get","parent","(",")",".","to","string","(",")",";","native","desktop",".","open","console","(","absolute","path",")",";","}","/","/","todo",":","move","to","os",".","java","public","static","native","desktop","get","native","desktop","(",")","{","if","(","os",".","windows",")","{","return","new","windows","(",")",";","}","else","if","(","os",".","os","x",")","{","return","new","osx","(",")",";","}","else","if","(","os",".","linux",")","{","return","new","linux","(",")",";","}","return","new","default","desktop","(",")",";","}","}"],"func_name":"JabRefDesktop","func_name_tokens":["jab","ref","desktop"],"docstring":"  TODO: Replace by http://docs.oracle.com/javase/7/docs/api/java/awt/Desktop.html","docstring_tokens":["todo",":","replace","by"],"query":"Desktop API is not supported on the current platform","query_tokens":["desktop","api","is","not","supported","on","the","current","platform"]}
{"query_id":"19028908","repo_name":"jfree/jfreechart","zip_link":"/jfree/jfreechart/archive/master.zip","code":"public class HMSNumberFormat extends NumberFormat {    private NumberFormat formatter = new DecimalFormat(\"00\");        /**     * Creates a new instance.     */    public HMSNumberFormat() {        // nothing to do    }    /**     * Formats the specified number as a string of the form HH:MM:SS.  The      * decimal fraction is ignored.     *     * @param number  the number to format.     * @param toAppendTo  the buffer to append to (ignored here).     * @param pos  the field position (ignored here).     *     * @return The string buffer.     */    @Override    public StringBuffer format(double number, StringBuffer toAppendTo,            FieldPosition pos) {        return format((long) number, toAppendTo, pos);    }    /**     * Formats the specified number as a string of the form HH:MM:SS.     *     * @param number  the number to format.     * @param toAppendTo  the buffer to append to (ignored here).     * @param pos  the field position (ignored here).     *     * @return The string buffer.     */    @Override    public StringBuffer format(long number, StringBuffer toAppendTo,            FieldPosition pos) {        StringBuffer sb = new StringBuffer();        long hours = number / 3600;        sb.append(this.formatter.format(hours)).append(\":\");        long remaining = number - (hours * 3600);        long minutes = remaining / 60;        sb.append(this.formatter.format(minutes)).append(\":\");        long seconds = remaining - (minutes * 60);        sb.append(this.formatter.format(seconds));        return sb;    }    /**     * Parsing is not implemented, so this method always returns     * {@code null}.     *     * @param source  ignored.     * @param parsePosition  ignored.     *     * @return Always {@code null}.     */    @Override    public Number parse (String source, ParsePosition parsePosition) {        return null; // don't bother with parsing    }}","code_tokens":["public","class","hms","number","format","extends","number","format","{","private","number","format","formatter","=","new","decimal","format","(","\"","00","\"",")",";","public","hms","number","format","(",")","{","/","/","nothing","to","do","}","@","override","public","string","buffer","format","(","double","number",",","string","buffer","to","append","to",",","field","position","pos",")","{","return","format","(","(","long",")","number",",","to","append","to",",","pos",")",";","}","@","override","public","string","buffer","format","(","long","number",",","string","buffer","to","append","to",",","field","position","pos",")","{","string","buffer","sb","=","new","string","buffer","(",")",";","long","hours","=","number","/","3600",";","sb",".","append","(","this",".","formatter",".","format","(","hours",")",")",".","append","(","\"",":","\"",")",";","long","remaining","=","number","-","(","hours","*","3600",")",";","long","minutes","=","remaining","/","60",";","sb",".","append","(","this",".","formatter",".","format","(","minutes",")",")",".","append","(","\"",":","\"",")",";","long","seconds","=","remaining","-","(","minutes","*","60",")",";","sb",".","append","(","this",".","formatter",".","format","(","seconds",")",")",";","return","sb",";","}","@","override","public","number","parse","(","string","source",",","parse","position","parse","position",")","{","return","null",";","/","/","don","'","t","bother","with","parsing","}","}"],"func_name":"HMSNumberFormat","func_name_tokens":["hms","number","format"],"docstring":"  A custom number formatter that formats numbers (in seconds) as HH:MM:SS.  Created in response to:      @since 1.0.17","docstring_tokens":["a","custom","number","formatter","that","formats","numbers","(","in","seconds",")","as","hh",":","mm",":","ss",".","created","in","response","to",":","@","since","1",".","0",".","17"],"query":"jfreechart need to customize Y axis just for printing","query_tokens":["jfreechart","need","to","customize","y","axis","just","for","printing"]}
{"query_id":"10621553","repo_name":"thanksmister/BitcoinBlue","zip_link":"/thanksmister/BitcoinBlue/archive/master.zip","code":"public final class ISO8601 {    /**     * Transform Calendar to ISO 8601 string.     */    @SuppressLint(\"SimpleDateFormat\")    public static String fromCalendar(final Calendar calendar) {        Date date = calendar.getTime();        String formatted = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\")                .format(date);        return formatted.substring(0, 22) + \":\" + formatted.substring(22);    }    /**     * Get current date and time formatted as ISO 8601 string.     */    public static String now() {        return fromCalendar(GregorianCalendar.getInstance());    }    /**     * Transform ISO 8601 string to Calendar.     */    @SuppressLint(\"SimpleDateFormat\")    public static Calendar toCalendar(final String iso8601string)            throws ParseException {        Calendar calendar = GregorianCalendar.getInstance();        String s = iso8601string.replace(\"Z\", \"+00:00\");        try {            s = s.substring(0, 22) + s.substring(23);        } catch (IndexOutOfBoundsException e) {            throw new ParseException(\"Invalid length\", 0);        }        Date date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").parse(s);        calendar.setTime(date);        return calendar;    }}","code_tokens":["public","final","class","iso8601","{","@","suppress","lint","(","\"","simple","date","format","\"",")","public","static","string","from","calendar","(","final","calendar","calendar",")","{","date","date","=","calendar",".","get","time","(",")",";","string","formatted","=","new","simple","date","format","(","\"","yyyy","-","mm","-","dd","'","t","'","hh",":","mm",":","ss","z","\"",")",".","format","(","date",")",";","return","formatted",".","substring","(","0",",","22",")","+","\"",":","\"","+","formatted",".","substring","(","22",")",";","}","public","static","string","now","(",")","{","return","from","calendar","(","gregorian","calendar",".","get","instance","(",")",")",";","}","@","suppress","lint","(","\"","simple","date","format","\"",")","public","static","calendar","to","calendar","(","final","string","iso8601string",")","throws","parse","exception","{","calendar","calendar","=","gregorian","calendar",".","get","instance","(",")",";","string","s","=","iso8601string",".","replace","(","\"","z","\"",",","\"","+","00",":","00","\"",")",";","try","{","s","=","s",".","substring","(","0",",","22",")","+","s",".","substring","(","23",")",";","}","catch","(","index","out","of","bounds","exception","e",")","{","throw","new","parse","exception","(","\"","invalid","length","\"",",","0",")",";","}","date","date","=","new","simple","date","format","(","\"","yyyy","-","mm","-","dd","'","t","'","hh",":","mm",":","ss","z","\"",")",".","parse","(","s",")",";","calendar",".","set","time","(","date",")",";","return","calendar",";","}","}"],"func_name":"ISO8601","func_name_tokens":["iso8601"],"docstring":"  <p>  Helper class for handling ISO 8601 strings of the following format:  \"2008-03-01T13:00:00+01:00\". It also supports parsing the \"Z\" timezone.","docstring_tokens":["<","p",">","helper","class","for","handling","iso","8601","strings","of","the","following","format",":","\"","2008","-","03","-","01t13",":","00",":","00","+","01",":","00","\"",".","it","also","supports","parsing","the","\"","z","\"","timezone","."],"query":"Converting ISO 8601-compliant String to java.util.Date","query_tokens":["converting","iso","8601","-","compliant","string","to","java",".","util",".","date"]}
{"query_id":"21020347","repo_name":"mylog00/flink","zip_link":"/mylog00/flink/archive/master.zip","code":"\tpublic void runBigRecordTestTopology() throws Exception {\t\tfinal String topic = \"bigRecordTestTopic\";\t\tfinal int parallelism = 1; // otherwise, the kafka mini clusters may run out of heap space\t\tcreateTestTopic(topic, parallelism, 1);\t\tfinal TypeInformation<Tuple2<Long, byte[]>> longBytesInfo =\t\t\t\tTypeInformation.of(new TypeHint<Tuple2<Long, byte[]>>(){});\t\tfinal TypeInformationSerializationSchema<Tuple2<Long, byte[]>> serSchema =\t\t\t\tnew TypeInformationSerializationSchema<>(longBytesInfo, new ExecutionConfig());\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\t\tenv.getConfig().disableSysoutLogging();\t\tenv.enableCheckpointing(100);\t\tenv.setParallelism(parallelism);\t\t// add consuming topology:\t\tProperties consumerProps = new Properties();\t\tconsumerProps.putAll(standardProps);\t\tconsumerProps.setProperty(\"fetch.message.max.bytes\", Integer.toString(1024 * 1024 * 14));\t\tconsumerProps.setProperty(\"max.partition.fetch.bytes\", Integer.toString(1024 * 1024 * 14)); // for the new fetcher\t\tconsumerProps.setProperty(\"queued.max.message.chunks\", \"1\");\t\tconsumerProps.putAll(secureProps);\t\tFlinkKafkaConsumerBase<Tuple2<Long, byte[]>> source = kafkaServer.getConsumer(topic, serSchema, consumerProps);\t\tDataStreamSource<Tuple2<Long, byte[]>> consuming = env.addSource(source);\t\tconsuming.addSink(new SinkFunction<Tuple2<Long, byte[]>>() {\t\t\tprivate int elCnt = 0;\t\t\t@Override\t\t\tpublic void invoke(Tuple2<Long, byte[]> value) throws Exception {\t\t\t\telCnt++;\t\t\t\tif (value.f0 == -1) {\t\t\t\t\t// we should have seen 11 elements now.\t\t\t\t\tif (elCnt == 11) {\t\t\t\t\t\tthrow new SuccessException();\t\t\t\t\t} else {\t\t\t\t\t\tthrow new RuntimeException(\"There have been \" + elCnt + \" elements\");\t\t\t\t\t}\t\t\t\t}\t\t\t\tif (elCnt > 10) {\t\t\t\t\tthrow new RuntimeException(\"More than 10 elements seen: \" + elCnt);\t\t\t\t}\t\t\t}\t\t});\t\t// add producing topology\t\tProperties producerProps = new Properties();\t\tproducerProps.setProperty(\"max.request.size\", Integer.toString(1024 * 1024 * 15));\t\tproducerProps.setProperty(\"retries\", \"3\");\t\tproducerProps.putAll(secureProps);\t\tproducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);\t\tDataStream<Tuple2<Long, byte[]>> stream = env.addSource(new RichSourceFunction<Tuple2<Long, byte[]>>() {\t\t\tprivate boolean running;\t\t\t@Override\t\t\tpublic void open(Configuration parameters) throws Exception {\t\t\t\tsuper.open(parameters);\t\t\t\trunning = true;\t\t\t}\t\t\t@Override\t\t\tpublic void run(SourceContext<Tuple2<Long, byte[]>> ctx) throws Exception {\t\t\t\tRandom rnd = new Random();\t\t\t\tlong cnt = 0;\t\t\t\tint sevenMb = 1024 * 1024 * 7;\t\t\t\twhile (running) {\t\t\t\t\tbyte[] wl = new byte[sevenMb + rnd.nextInt(sevenMb)];\t\t\t\t\tctx.collect(new Tuple2<>(cnt++, wl));\t\t\t\t\tThread.sleep(100);\t\t\t\t\tif (cnt == 10) {\t\t\t\t\t\t// signal end\t\t\t\t\t\tctx.collect(new Tuple2<>(-1L, new byte[]{1}));\t\t\t\t\t\tbreak;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t@Override\t\t\tpublic void cancel() {\t\t\t\trunning = false;\t\t\t}\t\t});\t\tkafkaServer.produceIntoKafka(stream, topic, new KeyedSerializationSchemaWrapper<>(serSchema), producerProps, null);\t\ttryExecute(env, \"big topology test\");\t\tdeleteTestTopic(topic);\t}","code_tokens":["public","void","run","big","record","test","topology","(",")","throws","exception","{","final","string","topic","=","\"","big","record","test","topic","\"",";","final","int","parallelism","=","1",";","/","/","otherwise",",","the","kafka","mini","clusters","may","run","out","of","heap","space","create","test","topic","(","topic",",","parallelism",",","1",")",";","final","type","information","<","tuple2","<","long",",","byte","[","]",">",">","long","bytes","info","=","type","information",".","of","(","new","type","hint","<","tuple2","<","long",",","byte","[","]",">",">","(",")","{","}",")",";","final","type","information","serialization","schema","<","tuple2","<","long",",","byte","[","]",">",">","ser","schema","=","new","type","information","serialization","schema","<",">","(","long","bytes","info",",","new","execution","config","(",")",")",";","final","stream","execution","environment","env","=","stream","execution","environment",".","get","execution","environment","(",")",";","env",".","set","restart","strategy","(","restart","strategies",".","no","restart","(",")",")",";","env",".","get","config","(",")",".","disable","sysout","logging","(",")",";","env",".","enable","checkpointing","(","100",")",";","env",".","set","parallelism","(","parallelism",")",";","/","/","add","consuming","topology",":","properties","consumer","props","=","new","properties","(",")",";","consumer","props",".","put","all","(","standard","props",")",";","consumer","props",".","set","property","(","\"","fetch",".","message",".","max",".","bytes","\"",",","integer",".","to","string","(","1024","*","1024","*","14",")",")",";","consumer","props",".","set","property","(","\"","max",".","partition",".","fetch",".","bytes","\"",",","integer",".","to","string","(","1024","*","1024","*","14",")",")",";","/","/","for","the","new","fetcher","consumer","props",".","set","property","(","\"","queued",".","max",".","message",".","chunks","\"",",","\"","1","\"",")",";","consumer","props",".","put","all","(","secure","props",")",";","flink","kafka","consumer","base","<","tuple2","<","long",",","byte","[","]",">",">","source","=","kafka","server",".","get","consumer","(","topic",",","ser","schema",",","consumer","props",")",";","data","stream","source","<","tuple2","<","long",",","byte","[","]",">",">","consuming","=","env",".","add","source","(","source",")",";","consuming",".","add","sink","(","new","sink","function","<","tuple2","<","long",",","byte","[","]",">",">","(",")","{","private","int","el","cnt","=","0",";","@","override","public","void","invoke","(","tuple2","<","long",",","byte","[","]",">","value",")","throws","exception","{","el","cnt","+","+",";","if","(","value",".","f0","=","=","-","1",")","{","/","/","we","should","have","seen","11","elements","now",".","if","(","el","cnt","=","=","11",")","{","throw","new","success","exception","(",")",";","}","else","{","throw","new","runtime","exception","(","\"","there","have","been","\"","+","el","cnt","+","\"","elements","\"",")",";","}","}","if","(","el","cnt",">","10",")","{","throw","new","runtime","exception","(","\"","more","than","10","elements","seen",":","\"","+","el","cnt",")",";","}","}","}",")",";","/","/","add","producing","topology","properties","producer","props","=","new","properties","(",")",";","producer","props",".","set","property","(","\"","max",".","request",".","size","\"",",","integer",".","to","string","(","1024","*","1024","*","15",")",")",";","producer","props",".","set","property","(","\"","retries","\"",",","\"","3","\"",")",";","producer","props",".","put","all","(","secure","props",")",";","producer","props",".","set","property","(","producer","config",".","bootstrap","servers","config",",","broker","connection","strings",")",";","data","stream","<","tuple2","<","long",",","byte","[","]",">",">","stream","=","env",".","add","source","(","new","rich","source","function","<","tuple2","<","long",",","byte","[","]",">",">","(",")","{","private","boolean","running",";","@","override","public","void","open","(","configuration","parameters",")","throws","exception","{","super",".","open","(","parameters",")",";","running","=","true",";","}","@","override","public","void","run","(","source","context","<","tuple2","<","long",",","byte","[","]",">",">","ctx",")","throws","exception","{","random","rnd","=","new","random","(",")",";","long","cnt","=","0",";","int","seven","mb","=","1024","*","1024","*","7",";","while","(","running",")","{","byte","[","]","wl","=","new","byte","[","seven","mb","+","rnd",".","next","int","(","seven","mb",")","]",";","ctx",".","collect","(","new","tuple2","<",">","(","cnt","+","+",",","wl",")",")",";","thread",".","sleep","(","100",")",";","if","(","cnt","=","=","10",")","{","/","/","signal","end","ctx",".","collect","(","new","tuple2","<",">","(","-","1l",",","new","byte","[","]","{","1","}",")",")",";","break",";","}","}","}","@","override","public","void","cancel","(",")","{","running","=","false",";","}","}",")",";","kafka","server",".","produce","into","kafka","(","stream",",","topic",",","new","keyed","serialization","schema","wrapper","<",">","(","ser","schema",")",",","producer","props",",","null",")",";","try","execute","(","env",",","\"","big","topology","test","\"",")",";","delete","test","topic","(","topic",")",";","}"],"func_name":"runBigRecordTestTopology","func_name_tokens":["run","big","record","test","topology"],"docstring":"\t\t  Test Flink's Kafka integration also with very big records (30MB).\t \t ","docstring_tokens":["test","flink","'","s","kafka","integration","also","with","very","big","records","(","30mb",")","."],"query":"How can I send large messages with Kafka (over 15MB)?","query_tokens":["how","can","i","send","large","messages","with","kafka","(","over","15mb",")","?"]}
{"query_id":"22370051","repo_name":"tran-d/SLogo","zip_link":"/tran-d/SLogo/archive/master.zip","code":"\tpublic static void addToKnown(String file) {\t\ttry {\t\t\tProperties prop = new Properties();\t\t\tFileInputStream in = new FileInputStream(KNOWN_FILES);\t\t\tprop.load(in);\t\t\tin.close();\t\t\tprop.put(file, \"Added by Program\");\t\t\tFileOutputStream out = new FileOutputStream(KNOWN_FILES);\t\t\tprop.store(out, null);\t\t\tout.close();\t\t} catch (IOException e) {\t\t\tthrow new SLogoException(\"KnownFiles\");\t\t}\t}","code_tokens":["public","static","void","add","to","known","(","string","file",")","{","try","{","properties","prop","=","new","properties","(",")",";","file","input","stream","in","=","new","file","input","stream","(","known","files",")",";","prop",".","load","(","in",")",";","in",".","close","(",")",";","prop",".","put","(","file",",","\"","added","by","program","\"",")",";","file","output","stream","out","=","new","file","output","stream","(","known","files",")",";","prop",".","store","(","out",",","null",")",";","out",".","close","(",")",";","}","catch","(","io","exception","e",")","{","throw","new","s","logo","exception","(","\"","known","files","\"",")",";","}","}"],"func_name":"addToKnown","func_name_tokens":["add","to","known"],"docstring":"\t\t  Modified from\t  Updates a specific properties file to include file in its keyset.","docstring_tokens":["modified","from","updates","a","specific","properties","file","to","include","file","in","its","keyset","."],"query":"How to write values in a properties file through java code","query_tokens":["how","to","write","values","in","a","properties","file","through","java","code"]}
{"query_id":"4024544","repo_name":"tschechlovdev/jabref","zip_link":"/tschechlovdev/jabref/archive/master.zip","code":"    private Optional<TemporalAccessor> tryParseDate(String dateString) {        List<String> formatStrings = Arrays.asList(\"uuuu-M-d\", \"uuuu-M\", \"M/uu\", \"M/uuuu\", \"MMMM d, uuuu\", \"MMMM, uuuu\",                \"d.M.uuuu\", \"uuuu.M.d\");        for (String formatString : formatStrings) {            try {                return Optional.of(DateTimeFormatter.ofPattern(formatString).parse(dateString));            } catch (DateTimeParseException ignored) {                // Ignored            }        }        return Optional.empty();    }","code_tokens":["private","optional","<","temporal","accessor",">","try","parse","date","(","string","date","string",")","{","list","<","string",">","format","strings","=","arrays",".","as","list","(","\"","uuuu","-","m","-","d","\"",",","\"","uuuu","-","m","\"",",","\"","m","/","uu","\"",",","\"","m","/","uuuu","\"",",","\"","mmmm","d",",","uuuu","\"",",","\"","mmmm",",","uuuu","\"",",","\"","d",".","m",".","uuuu","\"",",","\"","uuuu",".","m",".","d","\"",")",";","for","(","string","format","string",":","format","strings",")","{","try","{","return","optional",".","of","(","date","time","formatter",".","of","pattern","(","format","string",")",".","parse","(","date","string",")",")",";","}","catch","(","date","time","parse","exception","ignored",")","{","/","/","ignored","}","}","return","optional",".","empty","(",")",";","}"],"func_name":"tryParseDate","func_name_tokens":["try","parse","date"],"docstring":"    /      Try to parse the following formats       \"M/y\" (covers 9/15, 9/2015, and 09/2015)       \"MMMM (dd), yyyy\" (covers September 1, 2015 and September, 2015)       \"yyyy-MM-dd\" (covers 2009-1-15)       \"d.M.uuuu\" (covers 15.1.2015)       \"uuuu.M.d\" (covers 2015.1.15)","docstring_tokens":["/","try","to","parse","the","following","formats","\"","m","/","y","\"","(","covers","9","/","15",",","9","/","2015",",","and","09","/","2015",")","\"","mmmm","(","dd",")",",","yyyy","\"","(","covers","september","1",",","2015","and","september",",","2015",")","\"","yyyy","-","mm","-","dd","\"","(","covers","2009","-","1","-","15",")","\"","d",".","m",".","uuuu","\"","(","covers","15",".","1",".","2015",")","\"","uuuu",".","m",".","d","\"","(","covers","2015",".","1",".","15",")"],"query":"How to parse dates in multiple formats using SimpleDateFormat","query_tokens":["how","to","parse","dates","in","multiple","formats","using","simple","date","format"]}
{"query_id":"3382954","repo_name":"adveres/Speech-Over-IP","zip_link":"/adveres/Speech-Over-IP/archive/master.zip","code":"    public void measureAverageRunTime() {        long start = 0;        int runs = 10000; // enough to run for 2-10 seconds.        for (int i = -10000; i < runs; i++) {            if (i == 0) {                start = System.nanoTime();            }            // TODO: Maybe delete this whole Benchmark class            // byte[] speechOnly = Algorithms.removeSilence(rawSoundBytes,            // measurements);        }        long time = System.nanoTime() - start;        System.out.printf(\"Each silence removal run took an average of %,d ns%n\", time / runs);    }","code_tokens":["public","void","measure","average","run","time","(",")","{","long","start","=","0",";","int","runs","=","10000",";","/","/","enough","to","run","for","2","-","10","seconds",".","for","(","int","i","=","-","10000",";","i","<","runs",";","i","+","+",")","{","if","(","i","=","=","0",")","{","start","=","system",".","nano","time","(",")",";","}","/","/","todo",":","maybe","delete","this","whole","benchmark","class","/","/","byte","[","]","speech","only","=","algorithms",".","remove","silence","(","raw","sound","bytes",",","/","/","measurements",")",";","}","long","time","=","system",".","nano","time","(",")","-","start",";","system",".","out",".","printf","(","\"","each","silence","removal","run","took","an","average","of","%",",","d","ns","%","n","\"",",","time","/","runs",")",";","}"],"func_name":"measureAverageRunTime","func_name_tokens":["measure","average","run","time"],"docstring":"          Run the algorithm 10K times to make the JVM work, then do another 10K      times and take the average.            java-method","docstring_tokens":["run","the","algorithm","10k","times","to","make","the","jvm","work",",","then","do","another","10k","times","and","take","the","average",".","java","-","method"],"query":"Measure execution time for a Java method [duplicate]","query_tokens":["measure","execution","time","for","a","java","method","[","duplicate","]"]}
{"query_id":"13375811","repo_name":"0359xiaodong/desktopclient-java","zip_link":"/0359xiaodong/desktopclient-java/archive/master.zip","code":"    private static class WrapEditorKit extends StyledEditorKit {        ViewFactory defaultFactory = new WrapColumnFactory();        @Override        public ViewFactory getViewFactory() {            return defaultFactory;        }        private static class WrapColumnFactory implements ViewFactory {            @Override            public javax.swing.text.View create(Element elem) {                String kind = elem.getName();                if (kind != null) {                    switch (kind) {                        case AbstractDocument.ContentElementName:                            return new WrapLabelView(elem);                        case AbstractDocument.ParagraphElementName:                            return new ParagraphView(elem);                        case AbstractDocument.SectionElementName:                            return new BoxView(elem, javax.swing.text.View.Y_AXIS);                        case StyleConstants.ComponentElementName:                            return new ComponentView(elem);                        case StyleConstants.IconElementName:                            return new IconView(elem);                    }                }                // default to text display                return new LabelView(elem);            }        }        private static class WrapLabelView extends LabelView {            public WrapLabelView(Element elem) {                super(elem);            }            @Override            public float getMinimumSpan(int axis) {                switch (axis) {                    case javax.swing.text.View.X_AXIS:                        return 0;                    case javax.swing.text.View.Y_AXIS:                        return super.getMinimumSpan(axis);                    default:                        throw new IllegalArgumentException(\"Invalid axis: \" + axis);                }            }        }    }","code_tokens":["private","static","class","wrap","editor","kit","extends","styled","editor","kit","{","view","factory","default","factory","=","new","wrap","column","factory","(",")",";","@","override","public","view","factory","get","view","factory","(",")","{","return","default","factory",";","}","private","static","class","wrap","column","factory","implements","view","factory","{","@","override","public","javax",".","swing",".","text",".","view","create","(","element","elem",")","{","string","kind","=","elem",".","get","name","(",")",";","if","(","kind","!","=","null",")","{","switch","(","kind",")","{","case","abstract","document",".","content","element","name",":","return","new","wrap","label","view","(","elem",")",";","case","abstract","document",".","paragraph","element","name",":","return","new","paragraph","view","(","elem",")",";","case","abstract","document",".","section","element","name",":","return","new","box","view","(","elem",",","javax",".","swing",".","text",".","view",".","y","axis",")",";","case","style","constants",".","component","element","name",":","return","new","component","view","(","elem",")",";","case","style","constants",".","icon","element","name",":","return","new","icon","view","(","elem",")",";","}","}","/","/","default","to","text","display","return","new","label","view","(","elem",")",";","}","}","private","static","class","wrap","label","view","extends","label","view","{","public","wrap","label","view","(","element","elem",")","{","super","(","elem",")",";","}","@","override","public","float","get","minimum","span","(","int","axis",")","{","switch","(","axis",")","{","case","javax",".","swing",".","text",".","view",".","x","axis",":","return","0",";","case","javax",".","swing",".","text",".","view",".","y","axis",":","return","super",".","get","minimum","span","(","axis",")",";","default",":","throw","new","illegal","argument","exception","(","\"","invalid","axis",":","\"","+","axis",")",";","}","}","}","}"],"func_name":"WrapEditorKit","func_name_tokens":["wrap","editor","kit"],"docstring":"          Fix for the infamous \"Wrap long words\" problem in Java 7+.","docstring_tokens":["fix","for","the","infamous","\"","wrap","long","words","\"","problem","in","java","7","+","."],"query":"Wrap long words in JTextPane (Java 7)","query_tokens":["wrap","long","words","in","j","text","pane","(","java","7",")"]}
{"query_id":"3301635","repo_name":"jOOQ/jOOR","zip_link":"/jOOQ/jOOR/archive/master.zip","code":"    public Reflect set(String name, Object value) throws ReflectException {        try {            Field field = field0(name);            if ((field.getModifiers() & Modifier.FINAL) == Modifier.FINAL) {                try {                    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");                    modifiersField.setAccessible(true);                    modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);                }                // [#48] E.g. Android doesn't have this field                catch (NoSuchFieldException ignore) {}            }            field.set(object, unwrap(value));            return this;        }        catch (Exception e) {            throw new ReflectException(e);        }    }","code_tokens":["public","reflect","set","(","string","name",",","object","value",")","throws","reflect","exception","{","try","{","field","field","=","field0","(","name",")",";","if","(","(","field",".","get","modifiers","(",")","&","modifier",".","final",")","=","=","modifier",".","final",")","{","try","{","field","modifiers","field","=","field",".","class",".","get","declared","field","(","\"","modifiers","\"",")",";","modifiers","field",".","set","accessible","(","true",")",";","modifiers","field",".","set","int","(","field",",","field",".","get","modifiers","(",")","&","~","modifier",".","final",")",";","}","/","/","[","#","48","]","e",".","g",".","android","doesn","'","t","have","this","field","catch","(","no","such","field","exception","ignore",")","{","}","}","field",".","set","(","object",",","unwrap","(","value",")",")",";","return","this",";","}","catch","(","exception","e",")","{","throw","new","reflect","exception","(","e",")",";","}","}"],"func_name":"set","func_name_tokens":["set"],"docstring":"          Set a field value.      <p>      This is roughly equivalent to {@link Field#set(Object, Object)}. If the      wrapped object is a {@link Class}, then this will set a value to a static      member field. If the wrapped object is any other {@link Object}, then      this will set a value to an instance member field.      <p>      This method is also capable of setting the value of (static) final      fields. This may be convenient in situations where no      {@link SecurityManager} is expected to prevent this, but do note that      (especially static) final fields may already have been inlined by the      javac and/or JIT and relevant code deleted from the runtime verison of      your program, so setting these fields might not have any effect on your      execution.      <p>      For restrictions of usage regarding setting values on final fields check:      <a href=      ... and <a href=      \"http://pveentjer.blogspot.co.at/2017/01/final-static-boolean-jit.html\">http://pveentjer.blogspot.co.at/2017/01/final-static-boolean-jit.html</a>           @param name The field name      @param value The new field value      @return The same wrapped object, to be used for further reflection.      @throws ReflectException If any reflection exception occurred.","docstring_tokens":["set","a","field","value",".","<","p",">","this","is","roughly","equivalent","to","{","field","#","set","(","object",",","object",")","}",".","if","the","wrapped","object","is","a","{","class","}",",","then","this","will","set","a","value","to","a","static","member","field",".","if","the","wrapped","object","is","any","other","{","object","}",",","then","this","will","set","a","value","to","an","instance","member","field",".","<","p",">","this","method","is","also","capable","of","setting","the","value","of","(","static",")","final","fields",".","this","may","be","convenient","in","situations","where","no","{","security","manager","}","is","expected","to","prevent","this",",","but","do","note","that","(","especially","static",")","final","fields","may","already","have","been","inlined","by","the","javac","and","/","or","jit","and","relevant","code","deleted","from","the","runtime","verison","of","your","program",",","so","setting","these","fields","might","not","have","any","effect","on","your","execution",".","<","p",">","for","restrictions","of","usage","regarding","setting","values","on","final","fields","check",":","<","a","href","=",".",".",".","and","<","a","href","=","\"","\"",">","<","/","a",">"],"query":"Change private static final field using Java reflection","query_tokens":["change","private","static","final","field","using","java","reflection"]}
{"query_id":"54637141","repo_name":"mkl-public/testarea-pdfbox2","zip_link":"/mkl-public/testarea-pdfbox2/archive/master.zip","code":"public class PdfToTextInfoConverter extends PDFTextStripper {    private int rotation = 0;    private float lowerLeftX = 0;    private float lowerLeftY = 0;    private PDPage page = null;    private GeneralPath linePath;    private Map<GeneralPath, PDColor> filledPaths;    private Map<TextPosition, PDColor> nonStrokingColors;    public PdfToTextInfoConverter(PDDocument pddfDoc) throws IOException {        addOperator(new SetStrokingColorSpace());        addOperator(new SetNonStrokingColorSpace());        addOperator(new SetNonStrokingColorN());        addOperator(new SetStrokingColor());        addOperator(new SetNonStrokingColor());        addOperator(new SetStrokingDeviceGrayColor());        addOperator(new SetNonStrokingDeviceGrayColor());        addOperator(new SetStrokingDeviceRGBColor());        addOperator(new SetNonStrokingDeviceRGBColor());        addOperator(new SetStrokingDeviceCMYKColor());        addOperator(new SetNonStrokingDeviceCMYKColor());        addOperator(new AppendRectangleToPath());        addOperator(new ClipEvenOddRule());        addOperator(new ClipNonZeroRule());        addOperator(new ClosePath());        addOperator(new CurveTo());        addOperator(new CurveToReplicateFinalPoint());        addOperator(new CurveToReplicateInitialPoint());        addOperator(new EndPath());        addOperator(new FillEvenOddAndStrokePath());        addOperator(new FillEvenOddRule());        addOperator(new FillNonZeroAndStrokePath());        addOperator(new FillNonZeroRule());        addOperator(new LineTo());        addOperator(new MoveTo());        addOperator(new StrokePath());        document = pddfDoc;    }    public void stripPage(int pageNum, int resolution) throws IOException {        this.setStartPage(pageNum + 1);        this.setEndPage(pageNum + 1);        page = document.getPage(pageNum);        rotation = page.getRotation();        linePath = new GeneralPath();        filledPaths = new LinkedHashMap<>();        nonStrokingColors = new HashMap<>();            Writer dummy = new OutputStreamWriter(new ByteArrayOutputStream());        writeText(document, dummy); // This call starts the parsing process and calls writeString repeatedly.    }    @Override    public void processPage(PDPage page) throws IOException {        PDRectangle pageSize = page.getCropBox();        lowerLeftX = pageSize.getLowerLeftX();        lowerLeftY = pageSize.getLowerLeftY();        super.processPage(page);    }    private Integer getCharacterBackgroundColor(TextPosition text) {        Integer fillColorRgb = null;        try {                       for (Map.Entry<GeneralPath, PDColor> filledPath : filledPaths.entrySet()) {                Vector center = getTextPositionCenterPoint(text);                if (filledPath.getKey().contains(lowerLeftX + center.getX(), lowerLeftY + center.getY())) {                    fillColorRgb = filledPath.getValue().toRGB();                                   }            }        } catch (IOException e) {            logger.error(\"Could not convert color to RGB\", e);        }        return fillColorRgb;    }    private int getCharacterColor(TextPosition text) {        int colorRgb = 0; // assume it's black even if we could not convert to RGB        try {            colorRgb = nonStrokingColors.get(text).toRGB();                 } catch (IOException e) {            logger.error(\"Could not convert color to RGB\", e);        }        return colorRgb;    }    @Override    protected void processTextPosition(TextPosition text) {        PDGraphicsState gs = getGraphicsState();        // check opacity for stroke and fill text         if (gs.getAlphaConstant() < Constants.EPSILON && gs.getNonStrokeAlphaConstant() < Constants.EPSILON) {            return;        }                               Vector center = getTextPositionCenterPoint(text);        Area area = gs.getCurrentClippingPath();        if (area == null || area.contains(lowerLeftX + center.getX(), lowerLeftY + center.getY())) {                        nonStrokingColors.put(text, gs.getNonStrokingColor());            super.processTextPosition(text);        }    }    @Override    protected void writeString(String string, List<TextPosition> textPositions) throws IOException {        for (TextPosition text : textPositions) {                       Integer characterColor = getCharacterColor(text);            Integer characterBackgroundColor = getCharacterBackgroundColor(text);            if ((characterColor != null && characterColor.equals(characterBackgroundColor)) || characterColor == characterBackgroundColor) {                logger.info(String.format(\"Color and background coincide for '%s' at %3.2f, %3.2f : %h\", text.getUnicode(), text.getX(), text.getY(), characterColor));            }        }    }    private Vector getTextPositionCenterPoint(TextPosition text) {        Matrix textMatrix = text.getTextMatrix();        Vector start = textMatrix.transform(new Vector(0, 0));        Vector center = null;        switch (rotation) {        case 0:            center = new Vector(start.getX() + text.getWidth()/2, start.getY());             break;        case 90:            center = new Vector(start.getX(), start.getY() + text.getWidth()/2);            break;        case 180:            center = new Vector(start.getX() - text.getWidth()/2, start.getY());            break;        case 270:            center = new Vector(start.getX(), start.getY() - text.getWidth()/2);            break;        default:            center = new Vector(start.getX() + text.getWidth()/2, start.getY());            break;        }        return center;    }    void addFillPath(PDColor color) {        filledPaths.put((GeneralPath)linePath.clone(), color);    }    public final class AppendRectangleToPath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 4) {                throw new MissingOperandException(operator, operands);            }            if (!checkArrayTypesClass(operands, COSNumber.class)) {                return;            }            COSNumber x = (COSNumber) operands.get(0);            COSNumber y = (COSNumber) operands.get(1);            COSNumber w = (COSNumber) operands.get(2);            COSNumber h = (COSNumber) operands.get(3);            float x1 = x.floatValue();            float y1 = y.floatValue();            // create a pair of coordinates for the transformation            float x2 = w.floatValue() + x1;            float y2 = h.floatValue() + y1;            Point2D p0 = context.transformedPoint(x1, y1);            Point2D p1 = context.transformedPoint(x2, y1);            Point2D p2 = context.transformedPoint(x2, y2);            Point2D p3 = context.transformedPoint(x1, y2);            // to ensure that the path is created in the right direction, we have to create            // it by combining single lines instead of creating a simple rectangle            linePath.moveTo((float) p0.getX(), (float) p0.getY());            linePath.lineTo((float) p1.getX(), (float) p1.getY());            linePath.lineTo((float) p2.getX(), (float) p2.getY());            linePath.lineTo((float) p3.getX(), (float) p3.getY());            // close the subpath instead of adding the last line so that a possible set line            // cap style isn't taken into account at the \"beginning\" of the rectangle            linePath.closePath();        }        @Override        public String getName() {            return \"re\";        }    }    public final class StrokePath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            linePath.reset();        }        @Override        public String getName() {            return \"S\";        }    }    public final class FillEvenOddRule extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            PDGraphicsState gs = getGraphicsState();            linePath.setWindingRule(GeneralPath.WIND_EVEN_ODD);            addFillPath(gs.getNonStrokingColor());            linePath.reset();        }        @Override        public String getName() {            return \"f*\";        }    }            public class FillNonZeroRule extends OperatorProcessor {        @Override        public final void process(Operator operator, List<COSBase> operands) throws IOException {            PDGraphicsState gs = getGraphicsState();                linePath.setWindingRule(GeneralPath.WIND_NON_ZERO);            addFillPath(gs.getNonStrokingColor());            linePath.reset();        }        @Override        public String getName() {            return \"f\";        }    }    public class LegacyFillNonZeroRule extends FillNonZeroRule {        @Override        public String getName() {            return \"F\";        }    }    public final class FillEvenOddAndStrokePath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            PDGraphicsState gs = getGraphicsState();            linePath.setWindingRule(GeneralPath.WIND_EVEN_ODD);            addFillPath(gs.getNonStrokingColor());            linePath.reset();        }        @Override        public String getName() {            return \"B*\";        }    }    public class FillNonZeroAndStrokePath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            PDGraphicsState gs = getGraphicsState();            linePath.setWindingRule(GeneralPath.WIND_NON_ZERO);            addFillPath(gs.getNonStrokingColor());            linePath.reset();        }        @Override        public String getName() {            return \"B\";        }    }    public final class ClipEvenOddRule extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            linePath.setWindingRule(GeneralPath.WIND_EVEN_ODD);            getGraphicsState().intersectClippingPath(linePath);        }        @Override        public String getName() {            return \"W*\";        }    }    public class ClipNonZeroRule extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            linePath.setWindingRule(GeneralPath.WIND_NON_ZERO);            getGraphicsState().intersectClippingPath(linePath);        }        @Override        public String getName() {            return \"W\";        }    }    public final class MoveTo extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 2) {                throw new MissingOperandException(operator, operands);            }            COSBase base0 = operands.get(0);            if (!(base0 instanceof COSNumber)) {                return;            }            COSBase base1 = operands.get(1);            if (!(base1 instanceof COSNumber)) {                return;            }            COSNumber x = (COSNumber) base0;            COSNumber y = (COSNumber) base1;            Point2D.Float pos = context.transformedPoint(x.floatValue(), y.floatValue());            linePath.moveTo(pos.x, pos.y);        }        @Override        public String getName() {            return \"m\";        }    }    public class LineTo extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 2) {                throw new MissingOperandException(operator, operands);            }            COSBase base0 = operands.get(0);            if (!(base0 instanceof COSNumber)) {                return;            }            COSBase base1 = operands.get(1);            if (!(base1 instanceof COSNumber)) {                return;            }            // append straight line segment from the current point to the point            COSNumber x = (COSNumber) base0;            COSNumber y = (COSNumber) base1;            Point2D.Float pos = context.transformedPoint(x.floatValue(), y.floatValue());            linePath.lineTo(pos.x, pos.y);        }        @Override        public String getName() {            return \"l\";        }    }    public class CurveTo extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 6) {                throw new MissingOperandException(operator, operands);            }            if (!checkArrayTypesClass(operands, COSNumber.class)) {                return;            }            COSNumber x1 = (COSNumber) operands.get(0);            COSNumber y1 = (COSNumber) operands.get(1);            COSNumber x2 = (COSNumber) operands.get(2);            COSNumber y2 = (COSNumber) operands.get(3);            COSNumber x3 = (COSNumber) operands.get(4);            COSNumber y3 = (COSNumber) operands.get(5);            Point2D.Float point1 = context.transformedPoint(x1.floatValue(), y1.floatValue());            Point2D.Float point2 = context.transformedPoint(x2.floatValue(), y2.floatValue());            Point2D.Float point3 = context.transformedPoint(x3.floatValue(), y3.floatValue());            linePath.curveTo(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y);        }        @Override        public String getName() {            return \"c\";        }    }    public final class CurveToReplicateFinalPoint extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 4) {                throw new MissingOperandException(operator, operands);            }            if (!checkArrayTypesClass(operands, COSNumber.class)) {                return;            }            COSNumber x1 = (COSNumber) operands.get(0);            COSNumber y1 = (COSNumber) operands.get(1);            COSNumber x3 = (COSNumber) operands.get(2);            COSNumber y3 = (COSNumber) operands.get(3);            Point2D.Float point1 = context.transformedPoint(x1.floatValue(), y1.floatValue());            Point2D.Float point3 = context.transformedPoint(x3.floatValue(), y3.floatValue());            linePath.curveTo(point1.x, point1.y, point3.x, point3.y, point3.x, point3.y);        }        @Override        public String getName() {            return \"y\";        }    }    public class CurveToReplicateInitialPoint extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            if (operands.size() < 4) {                throw new MissingOperandException(operator, operands);            }            if (!checkArrayTypesClass(operands, COSNumber.class)) {                return;            }            COSNumber x2 = (COSNumber) operands.get(0);            COSNumber y2 = (COSNumber) operands.get(1);            COSNumber x3 = (COSNumber) operands.get(2);            COSNumber y3 = (COSNumber) operands.get(3);            Point2D currentPoint = linePath.getCurrentPoint();            Point2D.Float point2 = context.transformedPoint(x2.floatValue(), y2.floatValue());            Point2D.Float point3 = context.transformedPoint(x3.floatValue(), y3.floatValue());            linePath.curveTo((float) currentPoint.getX(), (float) currentPoint.getY(), point2.x, point2.y, point3.x, point3.y);        }        @Override        public String getName() {            return \"v\";        }    }    public final class ClosePath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            linePath.closePath();        }        @Override        public String getName() {            return \"h\";        }    }    public final class EndPath extends OperatorProcessor {        @Override        public void process(Operator operator, List<COSBase> operands) throws IOException {            linePath.reset();        }        @Override        public String getName() {            return \"n\";        }    }    Logger logger = LoggerFactory.getLogger(PdfToTextInfoConverter.class);    interface Constants {        float EPSILON = 0.01f;    }}","code_tokens":["public","class","pdf","to","text","info","converter","extends","pdf","text","stripper","{","private","int","rotation","=","0",";","private","float","lower","left","x","=","0",";","private","float","lower","left","y","=","0",";","private","pd","page","page","=","null",";","private","general","path","line","path",";","private","map","<","general","path",",","pd","color",">","filled","paths",";","private","map","<","text","position",",","pd","color",">","non","stroking","colors",";","public","pdf","to","text","info","converter","(","pd","document","pddf","doc",")","throws","io","exception","{","add","operator","(","new","set","stroking","color","space","(",")",")",";","add","operator","(","new","set","non","stroking","color","space","(",")",")",";","add","operator","(","new","set","non","stroking","color","n","(",")",")",";","add","operator","(","new","set","stroking","color","(",")",")",";","add","operator","(","new","set","non","stroking","color","(",")",")",";","add","operator","(","new","set","stroking","device","gray","color","(",")",")",";","add","operator","(","new","set","non","stroking","device","gray","color","(",")",")",";","add","operator","(","new","set","stroking","device","rgb","color","(",")",")",";","add","operator","(","new","set","non","stroking","device","rgb","color","(",")",")",";","add","operator","(","new","set","stroking","device","cmyk","color","(",")",")",";","add","operator","(","new","set","non","stroking","device","cmyk","color","(",")",")",";","add","operator","(","new","append","rectangle","to","path","(",")",")",";","add","operator","(","new","clip","even","odd","rule","(",")",")",";","add","operator","(","new","clip","non","zero","rule","(",")",")",";","add","operator","(","new","close","path","(",")",")",";","add","operator","(","new","curve","to","(",")",")",";","add","operator","(","new","curve","to","replicate","final","point","(",")",")",";","add","operator","(","new","curve","to","replicate","initial","point","(",")",")",";","add","operator","(","new","end","path","(",")",")",";","add","operator","(","new","fill","even","odd","and","stroke","path","(",")",")",";","add","operator","(","new","fill","even","odd","rule","(",")",")",";","add","operator","(","new","fill","non","zero","and","stroke","path","(",")",")",";","add","operator","(","new","fill","non","zero","rule","(",")",")",";","add","operator","(","new","line","to","(",")",")",";","add","operator","(","new","move","to","(",")",")",";","add","operator","(","new","stroke","path","(",")",")",";","document","=","pddf","doc",";","}","public","void","strip","page","(","int","page","num",",","int","resolution",")","throws","io","exception","{","this",".","set","start","page","(","page","num","+","1",")",";","this",".","set","end","page","(","page","num","+","1",")",";","page","=","document",".","get","page","(","page","num",")",";","rotation","=","page",".","get","rotation","(",")",";","line","path","=","new","general","path","(",")",";","filled","paths","=","new","linked","hash","map","<",">","(",")",";","non","stroking","colors","=","new","hash","map","<",">","(",")",";","writer","dummy","=","new","output","stream","writer","(","new","byte","array","output","stream","(",")",")",";","write","text","(","document",",","dummy",")",";","/","/","this","call","starts","the","parsing","process","and","calls","write","string","repeatedly",".","}","@","override","public","void","process","page","(","pd","page","page",")","throws","io","exception","{","pd","rectangle","page","size","=","page",".","get","crop","box","(",")",";","lower","left","x","=","page","size",".","get","lower","left","x","(",")",";","lower","left","y","=","page","size",".","get","lower","left","y","(",")",";","super",".","process","page","(","page",")",";","}","private","integer","get","character","background","color","(","text","position","text",")","{","integer","fill","color","rgb","=","null",";","try","{","for","(","map",".","entry","<","general","path",",","pd","color",">","filled","path",":","filled","paths",".","entry","set","(",")",")","{","vector","center","=","get","text","position","center","point","(","text",")",";","if","(","filled","path",".","get","key","(",")",".","contains","(","lower","left","x","+","center",".","get","x","(",")",",","lower","left","y","+","center",".","get","y","(",")",")",")","{","fill","color","rgb","=","filled","path",".","get","value","(",")",".","to","rgb","(",")",";","}","}","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","could","not","convert","color","to","rgb","\"",",","e",")",";","}","return","fill","color","rgb",";","}","private","int","get","character","color","(","text","position","text",")","{","int","color","rgb","=","0",";","/","/","assume","it","'","s","black","even","if","we","could","not","convert","to","rgb","try","{","color","rgb","=","non","stroking","colors",".","get","(","text",")",".","to","rgb","(",")",";","}","catch","(","io","exception","e",")","{","logger",".","error","(","\"","could","not","convert","color","to","rgb","\"",",","e",")",";","}","return","color","rgb",";","}","@","override","protected","void","process","text","position","(","text","position","text",")","{","pd","graphics","state","gs","=","get","graphics","state","(",")",";","/","/","check","opacity","for","stroke","and","fill","text","if","(","gs",".","get","alpha","constant","(",")","<","constants",".","epsilon","&","&","gs",".","get","non","stroke","alpha","constant","(",")","<","constants",".","epsilon",")","{","return",";","}","vector","center","=","get","text","position","center","point","(","text",")",";","area","area","=","gs",".","get","current","clipping","path","(",")",";","if","(","area","=","=","null","|","|","area",".","contains","(","lower","left","x","+","center",".","get","x","(",")",",","lower","left","y","+","center",".","get","y","(",")",")",")","{","non","stroking","colors",".","put","(","text",",","gs",".","get","non","stroking","color","(",")",")",";","super",".","process","text","position","(","text",")",";","}","}","@","override","protected","void","write","string","(","string","string",",","list","<","text","position",">","text","positions",")","throws","io","exception","{","for","(","text","position","text",":","text","positions",")","{","integer","character","color","=","get","character","color","(","text",")",";","integer","character","background","color","=","get","character","background","color","(","text",")",";","if","(","(","character","color","!","=","null","&","&","character","color",".","equals","(","character","background","color",")",")","|","|","character","color","=","=","character","background","color",")","{","logger",".","info","(","string",".","format","(","\"","color","and","background","coincide","for","'","%","s","'","at","%","3",".","2f",",","%","3",".","2f",":","%","h","\"",",","text",".","get","unicode","(",")",",","text",".","get","x","(",")",",","text",".","get","y","(",")",",","character","color",")",")",";","}","}","}","private","vector","get","text","position","center","point","(","text","position","text",")","{","matrix","text","matrix","=","text",".","get","text","matrix","(",")",";","vector","start","=","text","matrix",".","transform","(","new","vector","(","0",",","0",")",")",";","vector","center","=","null",";","switch","(","rotation",")","{","case","0",":","center","=","new","vector","(","start",".","get","x","(",")","+","text",".","get","width","(",")","/","2",",","start",".","get","y","(",")",")",";","break",";","case","90",":","center","=","new","vector","(","start",".","get","x","(",")",",","start",".","get","y","(",")","+","text",".","get","width","(",")","/","2",")",";","break",";","case","180",":","center","=","new","vector","(","start",".","get","x","(",")","-","text",".","get","width","(",")","/","2",",","start",".","get","y","(",")",")",";","break",";","case","270",":","center","=","new","vector","(","start",".","get","x","(",")",",","start",".","get","y","(",")","-","text",".","get","width","(",")","/","2",")",";","break",";","default",":","center","=","new","vector","(","start",".","get","x","(",")","+","text",".","get","width","(",")","/","2",",","start",".","get","y","(",")",")",";","break",";","}","return","center",";","}","void","add","fill","path","(","pd","color","color",")","{","filled","paths",".","put","(","(","general","path",")","line","path",".","clone","(",")",",","color",")",";","}","public","final","class","append","rectangle","to","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","4",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","if","(","!","check","array","types","class","(","operands",",","cos","number",".","class",")",")","{","return",";","}","cos","number","x","=","(","cos","number",")","operands",".","get","(","0",")",";","cos","number","y","=","(","cos","number",")","operands",".","get","(","1",")",";","cos","number","w","=","(","cos","number",")","operands",".","get","(","2",")",";","cos","number","h","=","(","cos","number",")","operands",".","get","(","3",")",";","float","x1","=","x",".","float","value","(",")",";","float","y1","=","y",".","float","value","(",")",";","/","/","create","a","pair","of","coordinates","for","the","transformation","float","x2","=","w",".","float","value","(",")","+","x1",";","float","y2","=","h",".","float","value","(",")","+","y1",";","point2d","p0","=","context",".","transformed","point","(","x1",",","y1",")",";","point2d","p1","=","context",".","transformed","point","(","x2",",","y1",")",";","point2d","p2","=","context",".","transformed","point","(","x2",",","y2",")",";","point2d","p3","=","context",".","transformed","point","(","x1",",","y2",")",";","/","/","to","ensure","that","the","path","is","created","in","the","right","direction",",","we","have","to","create","/","/","it","by","combining","single","lines","instead","of","creating","a","simple","rectangle","line","path",".","move","to","(","(","float",")","p0",".","get","x","(",")",",","(","float",")","p0",".","get","y","(",")",")",";","line","path",".","line","to","(","(","float",")","p1",".","get","x","(",")",",","(","float",")","p1",".","get","y","(",")",")",";","line","path",".","line","to","(","(","float",")","p2",".","get","x","(",")",",","(","float",")","p2",".","get","y","(",")",")",";","line","path",".","line","to","(","(","float",")","p3",".","get","x","(",")",",","(","float",")","p3",".","get","y","(",")",")",";","/","/","close","the","subpath","instead","of","adding","the","last","line","so","that","a","possible","set","line","/","/","cap","style","isn","'","t","taken","into","account","at","the","\"","beginning","\"","of","the","rectangle","line","path",".","close","path","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","re","\"",";","}","}","public","final","class","stroke","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","s","\"",";","}","}","public","final","class","fill","even","odd","rule","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","pd","graphics","state","gs","=","get","graphics","state","(",")",";","line","path",".","set","winding","rule","(","general","path",".","wind","even","odd",")",";","add","fill","path","(","gs",".","get","non","stroking","color","(",")",")",";","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","f","*","\"",";","}","}","public","class","fill","non","zero","rule","extends","operator","processor","{","@","override","public","final","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","pd","graphics","state","gs","=","get","graphics","state","(",")",";","line","path",".","set","winding","rule","(","general","path",".","wind","non","zero",")",";","add","fill","path","(","gs",".","get","non","stroking","color","(",")",")",";","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","f","\"",";","}","}","public","class","legacy","fill","non","zero","rule","extends","fill","non","zero","rule","{","@","override","public","string","get","name","(",")","{","return","\"","f","\"",";","}","}","public","final","class","fill","even","odd","and","stroke","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","pd","graphics","state","gs","=","get","graphics","state","(",")",";","line","path",".","set","winding","rule","(","general","path",".","wind","even","odd",")",";","add","fill","path","(","gs",".","get","non","stroking","color","(",")",")",";","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","b","*","\"",";","}","}","public","class","fill","non","zero","and","stroke","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","pd","graphics","state","gs","=","get","graphics","state","(",")",";","line","path",".","set","winding","rule","(","general","path",".","wind","non","zero",")",";","add","fill","path","(","gs",".","get","non","stroking","color","(",")",")",";","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","b","\"",";","}","}","public","final","class","clip","even","odd","rule","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","line","path",".","set","winding","rule","(","general","path",".","wind","even","odd",")",";","get","graphics","state","(",")",".","intersect","clipping","path","(","line","path",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","w","*","\"",";","}","}","public","class","clip","non","zero","rule","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","line","path",".","set","winding","rule","(","general","path",".","wind","non","zero",")",";","get","graphics","state","(",")",".","intersect","clipping","path","(","line","path",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","w","\"",";","}","}","public","final","class","move","to","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","2",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","cos","base","base0","=","operands",".","get","(","0",")",";","if","(","!","(","base0","instanceof","cos","number",")",")","{","return",";","}","cos","base","base1","=","operands",".","get","(","1",")",";","if","(","!","(","base1","instanceof","cos","number",")",")","{","return",";","}","cos","number","x","=","(","cos","number",")","base0",";","cos","number","y","=","(","cos","number",")","base1",";","point2d",".","float","pos","=","context",".","transformed","point","(","x",".","float","value","(",")",",","y",".","float","value","(",")",")",";","line","path",".","move","to","(","pos",".","x",",","pos",".","y",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","m","\"",";","}","}","public","class","line","to","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","2",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","cos","base","base0","=","operands",".","get","(","0",")",";","if","(","!","(","base0","instanceof","cos","number",")",")","{","return",";","}","cos","base","base1","=","operands",".","get","(","1",")",";","if","(","!","(","base1","instanceof","cos","number",")",")","{","return",";","}","/","/","append","straight","line","segment","from","the","current","point","to","the","point","cos","number","x","=","(","cos","number",")","base0",";","cos","number","y","=","(","cos","number",")","base1",";","point2d",".","float","pos","=","context",".","transformed","point","(","x",".","float","value","(",")",",","y",".","float","value","(",")",")",";","line","path",".","line","to","(","pos",".","x",",","pos",".","y",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","l","\"",";","}","}","public","class","curve","to","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","6",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","if","(","!","check","array","types","class","(","operands",",","cos","number",".","class",")",")","{","return",";","}","cos","number","x1","=","(","cos","number",")","operands",".","get","(","0",")",";","cos","number","y1","=","(","cos","number",")","operands",".","get","(","1",")",";","cos","number","x2","=","(","cos","number",")","operands",".","get","(","2",")",";","cos","number","y2","=","(","cos","number",")","operands",".","get","(","3",")",";","cos","number","x3","=","(","cos","number",")","operands",".","get","(","4",")",";","cos","number","y3","=","(","cos","number",")","operands",".","get","(","5",")",";","point2d",".","float","point1","=","context",".","transformed","point","(","x1",".","float","value","(",")",",","y1",".","float","value","(",")",")",";","point2d",".","float","point2","=","context",".","transformed","point","(","x2",".","float","value","(",")",",","y2",".","float","value","(",")",")",";","point2d",".","float","point3","=","context",".","transformed","point","(","x3",".","float","value","(",")",",","y3",".","float","value","(",")",")",";","line","path",".","curve","to","(","point1",".","x",",","point1",".","y",",","point2",".","x",",","point2",".","y",",","point3",".","x",",","point3",".","y",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","c","\"",";","}","}","public","final","class","curve","to","replicate","final","point","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","4",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","if","(","!","check","array","types","class","(","operands",",","cos","number",".","class",")",")","{","return",";","}","cos","number","x1","=","(","cos","number",")","operands",".","get","(","0",")",";","cos","number","y1","=","(","cos","number",")","operands",".","get","(","1",")",";","cos","number","x3","=","(","cos","number",")","operands",".","get","(","2",")",";","cos","number","y3","=","(","cos","number",")","operands",".","get","(","3",")",";","point2d",".","float","point1","=","context",".","transformed","point","(","x1",".","float","value","(",")",",","y1",".","float","value","(",")",")",";","point2d",".","float","point3","=","context",".","transformed","point","(","x3",".","float","value","(",")",",","y3",".","float","value","(",")",")",";","line","path",".","curve","to","(","point1",".","x",",","point1",".","y",",","point3",".","x",",","point3",".","y",",","point3",".","x",",","point3",".","y",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","y","\"",";","}","}","public","class","curve","to","replicate","initial","point","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","if","(","operands",".","size","(",")","<","4",")","{","throw","new","missing","operand","exception","(","operator",",","operands",")",";","}","if","(","!","check","array","types","class","(","operands",",","cos","number",".","class",")",")","{","return",";","}","cos","number","x2","=","(","cos","number",")","operands",".","get","(","0",")",";","cos","number","y2","=","(","cos","number",")","operands",".","get","(","1",")",";","cos","number","x3","=","(","cos","number",")","operands",".","get","(","2",")",";","cos","number","y3","=","(","cos","number",")","operands",".","get","(","3",")",";","point2d","current","point","=","line","path",".","get","current","point","(",")",";","point2d",".","float","point2","=","context",".","transformed","point","(","x2",".","float","value","(",")",",","y2",".","float","value","(",")",")",";","point2d",".","float","point3","=","context",".","transformed","point","(","x3",".","float","value","(",")",",","y3",".","float","value","(",")",")",";","line","path",".","curve","to","(","(","float",")","current","point",".","get","x","(",")",",","(","float",")","current","point",".","get","y","(",")",",","point2",".","x",",","point2",".","y",",","point3",".","x",",","point3",".","y",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","v","\"",";","}","}","public","final","class","close","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","line","path",".","close","path","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","h","\"",";","}","}","public","final","class","end","path","extends","operator","processor","{","@","override","public","void","process","(","operator","operator",",","list","<","cos","base",">","operands",")","throws","io","exception","{","line","path",".","reset","(",")",";","}","@","override","public","string","get","name","(",")","{","return","\"","n","\"",";","}","}","logger","logger","=","logger","factory",".","get","logger","(","pdf","to","text","info","converter",".","class",")",";","interface","constants","{","float","epsilon","=","0",".","01f",";","}","}"],"func_name":"PdfToTextInfoConverter","func_name_tokens":["pdf","to","text","info","converter"],"docstring":"  Background color is incorrect on first page for some reason  </a>  <p>  This is the OP's class skeleton for a text extractor that recognizes  text drawn in the same color as its background. The problem is, though,  that a bug in PDFBox' {@link org.apache.pdfbox.pdmodel.common.function.PDFunctionType0#eval(float[])}  changes its underlying data. But there also is an unrelated bug here  which doesn't play a role in the question at hand, though.  </p>    @author Dmitry K","docstring_tokens":["background","color","is","incorrect","on","first","page","for","some","reason","<","/","a",">","<","p",">","this","is","the","op","'","s","class","skeleton","for","a","text","extractor","that","recognizes","text","drawn","in","the","same","color","as","its","background",".","the","problem","is",",","though",",","that","a","bug","in","pdf","box","'","{","org",".","apache",".","pdfbox",".","pdmodel",".","common",".","function",".","pd","function","type0","#","eval","(","float","[","]",")","}","changes","its","underlying","data",".","but","there","also","is","an","unrelated","bug","here","which","doesn","'","t","play","a","role","in","the","question","at","hand",",","though",".","<","/","p",">"],"query":"Background color is incorrect on first page for some reason","query_tokens":["background","color","is","incorrect","on","first","page","for","some","reason"]}
{"query_id":"44859328","repo_name":"rsudev/c-geo-opensource","zip_link":"/rsudev/c-geo-opensource/archive/master.zip","code":"    private class CoordDigitLongClickListener implements View.OnLongClickListener {        @Override        public boolean onLongClick(final View view) {            return handleLongClick();        }    }","code_tokens":["private","class","coord","digit","long","click","listener","implements","view",".","on","long","click","listener","{","@","override","public","boolean","on","long","click","(","final","view","view",")","{","return","handle","long","click","(",")",";","}","}"],"func_name":"CoordDigitLongClickListener","func_name_tokens":["coord","digit","long","click","listener"],"docstring":"          This implementation was obtained from 'Adithya' via the stack overflow question 'Long-press on Button to Change Text':","docstring_tokens":["this","implementation","was","obtained","from","'","adithya","'","via","the","stack","overflow","question","'","long","-","press","on","button","to","change","text","'",":"],"query":"Long-press on Button to Change Text","query_tokens":["long","-","press","on","button","to","change","text"]}
{"query_id":"29374160","repo_name":"labertasch/sling","zip_link":"/labertasch/sling/archive/trunk.zip","code":"    public static final class MessageDialogWithLinkSection extends MessageDialog {        private final String linkText;        public MessageDialogWithLinkSection(Shell parentShell, String dialogTitle, Image dialogTitleImage,                String dialogMessage, int dialogImageType, String[] dialogButtonLabels, int defaultIndex,                String linkText) {            super(parentShell, dialogTitle, dialogTitleImage, dialogMessage, dialogImageType, dialogButtonLabels,                    defaultIndex);            this.linkText = linkText;        }        public static boolean openInformationWithLink(Shell parent, String title, String message, String link) {            MessageDialogWithLinkSection dialog = new MessageDialogWithLinkSection(parent, title, null, message,                    INFORMATION, new String[] { IDialogConstants.OK_LABEL }, 0, link);            return dialog.open() == 0;        }        @Override        protected Control createCustomArea(Composite parent) {            Link link = new Link(parent, SWT.WRAP);            link.setText(linkText);            link.addSelectionListener(new SelectionAdapter() {                @Override                public void widgetSelected(SelectionEvent e) {                    try {                        // Open default external browser                        PlatformUI.getWorkbench().getBrowserSupport().getExternalBrowser().openURL(new URL(e.text));                    } catch (PartInitException ex) {                        Activator.getDefault().getPluginLogger()                                .error(\"Could not open external browser for link '\" + e.text + \"'\", ex);                    } catch (MalformedURLException ex) {                        Activator.getDefault().getPluginLogger().error(\"Invalid link detected '\" + e.text + \"'\", ex);                    }                }            });            return link;        }    }","code_tokens":["public","static","final","class","message","dialog","with","link","section","extends","message","dialog","{","private","final","string","link","text",";","public","message","dialog","with","link","section","(","shell","parent","shell",",","string","dialog","title",",","image","dialog","title","image",",","string","dialog","message",",","int","dialog","image","type",",","string","[","]","dialog","button","labels",",","int","default","index",",","string","link","text",")","{","super","(","parent","shell",",","dialog","title",",","dialog","title","image",",","dialog","message",",","dialog","image","type",",","dialog","button","labels",",","default","index",")",";","this",".","link","text","=","link","text",";","}","public","static","boolean","open","information","with","link","(","shell","parent",",","string","title",",","string","message",",","string","link",")","{","message","dialog","with","link","section","dialog","=","new","message","dialog","with","link","section","(","parent",",","title",",","null",",","message",",","information",",","new","string","[","]","{","i","dialog","constants",".","ok","label","}",",","0",",","link",")",";","return","dialog",".","open","(",")","=","=","0",";","}","@","override","protected","control","create","custom","area","(","composite","parent",")","{","link","link","=","new","link","(","parent",",","swt",".","wrap",")",";","link",".","set","text","(","link","text",")",";","link",".","add","selection","listener","(","new","selection","adapter","(",")","{","@","override","public","void","widget","selected","(","selection","event","e",")","{","try","{","/","/","open","default","external","browser","platform","ui",".","get","workbench","(",")",".","get","browser","support","(",")",".","get","external","browser","(",")",".","open","url","(","new","url","(","e",".","text",")",")",";","}","catch","(","part","init","exception","ex",")","{","activator",".","get","default","(",")",".","get","plugin","logger","(",")",".","error","(","\"","could","not","open","external","browser","for","link","'","\"","+","e",".","text","+","\"","'","\"",",","ex",")",";","}","catch","(","malformed","url","exception","ex",")","{","activator",".","get","default","(",")",".","get","plugin","logger","(",")",".","error","(","\"","invalid","link","detected","'","\"","+","e",".","text","+","\"","'","\"",",","ex",")",";","}","}","}",")",";","return","link",";","}","}"],"func_name":"MessageDialogWithLinkSection","func_name_tokens":["message","dialog","with","link","section"],"docstring":"          Similar to {@link MessageDialog} but with an additional area above the buttons which contain links.            Unfortunately such a functionality is not yet part of Eclipse, but requested in      <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=484347\">bug 484347</a>.                 .com/questions/29374160/add-link-to-messagedialog-message<a>      @see <a href=\"http://stackoverflow.com/questions/3968620/how-can-i-add-a-hyperlink-to-a-jface-dialog\">http://stackoverflow.com/questions/3968620/how-can-i-add-a-hyperlink-to-a-jface-dialog</a>            ","docstring_tokens":["similar","to","{","message","dialog","}","but","with","an","additional","area","above","the","buttons","which","contain","links",".","unfortunately","such","a","functionality","is","not","yet","part","of","eclipse",",","but","requested","in","<","a","href","=","\"","\"",">","bug","484347","<","/","a",">",".",".","com","/","questions","/","29374160","/","add","-","link","-","to","-","messagedialog","-","message","<","a",">","@","see","<","a","href","=","\"","\"",">","<","/","a",">"],"query":"Add link to MessageDialog message","query_tokens":["add","link","to","message","dialog","message"]}
{"query_id":"1323408","repo_name":"lbeurerkellner/n4js","zip_link":"/lbeurerkellner/n4js/archive/master.zip","code":"\tpublic static String getThreadsInfo(String descriptionToken) {\t\tStringBuilder info = new StringBuilder();\t\tSet<Thread> threadSet = Thread.getAllStackTraces().keySet();\t\tSet<Thread> equinoxThreads = new HashSet<>();\t\tinfo.append(\"threads\").append(NL);\t\tfor (Iterator<Thread> iterator = threadSet.iterator(); iterator.hasNext();) {\t\t\tThread next = iterator.next();\t\t\tString threadDesc = next.toString();\t\t\tif (containsToken(threadDesc, descriptionToken)) {\t\t\t\tequinoxThreads.add(next);\t\t\t} else {\t\t\t\tinfo.append(\" thread :: \" + next.getId() + \" : \" + next.toString()).append(NL);\t\t\t}\t\t}\t\tinfo.append(\"threads described by \" + descriptionToken).append(NL);\t\tfor (Iterator<Thread> iterator = equinoxThreads.iterator(); iterator.hasNext();) {\t\t\tThread next = iterator.next();\t\t\tinfo.append(\" thread :: \" + next.getId() + \" : \" + next.toString()).append(NL);\t\t}\t\tinfo.append(NL);\t\treturn info.toString();\t}","code_tokens":["public","static","string","get","threads","info","(","string","description","token",")","{","string","builder","info","=","new","string","builder","(",")",";","set","<","thread",">","thread","set","=","thread",".","get","all","stack","traces","(",")",".","key","set","(",")",";","set","<","thread",">","equinox","threads","=","new","hash","set","<",">","(",")",";","info",".","append","(","\"","threads","\"",")",".","append","(","nl",")",";","for","(","iterator","<","thread",">","iterator","=","thread","set",".","iterator","(",")",";","iterator",".","has","next","(",")",";",")","{","thread","next","=","iterator",".","next","(",")",";","string","thread","desc","=","next",".","to","string","(",")",";","if","(","contains","token","(","thread","desc",",","description","token",")",")","{","equinox","threads",".","add","(","next",")",";","}","else","{","info",".","append","(","\"","thread",":",":","\"","+","next",".","get","id","(",")","+","\"",":","\"","+","next",".","to","string","(",")",")",".","append","(","nl",")",";","}","}","info",".","append","(","\"","threads","described","by","\"","+","description","token",")",".","append","(","nl",")",";","for","(","iterator","<","thread",">","iterator","=","equinox","threads",".","iterator","(",")",";","iterator",".","has","next","(",")",";",")","{","thread","next","=","iterator",".","next","(",")",";","info",".","append","(","\"","thread",":",":","\"","+","next",".","get","id","(",")","+","\"",":","\"","+","next",".","to","string","(",")",")",".","append","(","nl",")",";","}","info",".","append","(","nl",")",";","return","info",".","to","string","(",")",";","}"],"func_name":"getThreadsInfo","func_name_tokens":["get","threads","info"],"docstring":"\t\t  Returns information about currently running threads. Information is formatted in a way that allows to see threads\t  whose description contains provided token.\t \t  Clean but slow.\t \t  @see <a href=\t       of current threads</a>","docstring_tokens":["returns","information","about","currently","running","threads",".","information","is","formatted","in","a","way","that","allows","to","see","threads","whose","description","contains","provided","token",".","clean","but","slow",".","@","see","<","a","href","=","of","current","threads","<","/","a",">"],"query":"Get a list of all threads currently running in Java","query_tokens":["get","a","list","of","all","threads","currently","running","in","java"]}
{"query_id":"807223","repo_name":"jxauchengchao/robospice","zip_link":"/jxauchengchao/robospice/archive/release.zip","code":"public class PriorityFuture<T> extends FutureTask<T> implements Comparable<PriorityFuture<T>> {    private int priority;    public PriorityFuture(Runnable other, int priority, final T result) {        super(other, result);        this.priority = priority;    }    public int getPriority() {        return priority;    }    @Override    public int compareTo(PriorityFuture<T> other) {        return priority - other.priority;    }    @Override    public int hashCode() {        final int prime = 31;        int result = 1;        result = prime * result + priority;        return result;    }    @Override    public boolean equals(Object obj) {        if (this == obj) {            return true;        }        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        PriorityFuture<?> other = (PriorityFuture<?>) obj;        if (priority != other.priority) {            return false;        }        return true;    }}","code_tokens":["public","class","priority","future","<","t",">","extends","future","task","<","t",">","implements","comparable","<","priority","future","<","t",">",">","{","private","int","priority",";","public","priority","future","(","runnable","other",",","int","priority",",","final","t","result",")","{","super","(","other",",","result",")",";","this",".","priority","=","priority",";","}","public","int","get","priority","(",")","{","return","priority",";","}","@","override","public","int","compare","to","(","priority","future","<","t",">","other",")","{","return","priority","-","other",".","priority",";","}","@","override","public","int","hash","code","(",")","{","final","int","prime","=","31",";","int","result","=","1",";","result","=","prime","*","result","+","priority",";","return","result",";","}","@","override","public","boolean","equals","(","object","obj",")","{","if","(","this","=","=","obj",")","{","return","true",";","}","if","(","obj","=","=","null",")","{","return","false",";","}","if","(","get","class","(",")","!","=","obj",".","get","class","(",")",")","{","return","false",";","}","priority","future","<","?",">","other","=","(","priority","future","<","?",">",")","obj",";","if","(","priority","!","=","other",".","priority",")","{","return","false",";","}","return","true",";","}","}"],"func_name":"PriorityFuture","func_name_tokens":["priority","future"],"docstring":"  A future with priority, from <a href=  @author SNI  @param <T>             the type of the future's return.","docstring_tokens":["a","future","with","priority",",","from","<","a","href","="],"query":"How do I implement task prioritization using an ExecutorService in Java 5?","query_tokens":["how","do","i","implement","task","prioritization","using","an","executor","service","in","java","5","?"]}
{"query_id":"388476","repo_name":"indarium/imageGenEval","zip_link":"/indarium/imageGenEval/archive/master.zip","code":"public final class StringUtil {    private StringUtil() {    }    /**     * Pad right with character '0'. If the input string is as long (or longer) than the desired length the original     * string is returned.     *     * @param s not null; the string to pad right     * @param n desired length     * @return never null     */    public static String padRight(final String s, final int n) {        return padRight(s, n, '0');    }    /**     * Pad right with the specified paddingChar. If the input string is as long (or longer) than the desired length the original     * string is returned.     *     * @param s           not null; the string to pad right     * @param n           desired length     * @param paddingChar character to pad with     * @return never null     */    public static String padRight(final String s, final int n, final char paddingChar) {        if (s == null) throw new IllegalArgumentException(\"s may not be null\");        return String.format(\"%1$-\" + n + \"s\", s).replace(' ', paddingChar);    }    /**     * Pad left with character '0'. If the input string is as long (or longer) than the desired length the original     * string is returned.     *     * @param s not null; the string to pad left     * @param n desired length     * @return never null     */    public static String padLeft(final String s, final int n) {        return padLeft(s, n, '0');    }    /**     * Pad left with the specified paddingChar. If the input string is as long (or longer) than the desired length the original     * string is returned.     *     * @param s           not null; the string to pad left     * @param n           desired length     * @param paddingChar character to pad with     * @return never null     */    public static String padLeft(final String s, final int n, final char paddingChar) {        if (s == null) throw new IllegalArgumentException(\"s may not be null\");        return String.format(\"%1$\" + n + \"s\", s).replace(' ', paddingChar);    }}","code_tokens":["public","final","class","string","util","{","private","string","util","(",")","{","}","public","static","string","pad","right","(","final","string","s",",","final","int","n",")","{","return","pad","right","(","s",",","n",",","'","0","'",")",";","}","public","static","string","pad","right","(","final","string","s",",","final","int","n",",","final","char","padding","char",")","{","if","(","s","=","=","null",")","throw","new","illegal","argument","exception","(","\"","s","may","not","be","null","\"",")",";","return","string",".","format","(","\"","%","1","$","-","\"","+","n","+","\"","s","\"",",","s",")",".","replace","(","'","'",",","padding","char",")",";","}","public","static","string","pad","left","(","final","string","s",",","final","int","n",")","{","return","pad","left","(","s",",","n",",","'","0","'",")",";","}","public","static","string","pad","left","(","final","string","s",",","final","int","n",",","final","char","padding","char",")","{","if","(","s","=","=","null",")","throw","new","illegal","argument","exception","(","\"","s","may","not","be","null","\"",")",";","return","string",".","format","(","\"","%","1","$","\"","+","n","+","\"","s","\"",",","s",")",".","replace","(","'","'",",","padding","char",")",";","}","}"],"func_name":"StringUtil","func_name_tokens":["string","util"],"docstring":"  <p>  author: cvandrei  since: 2016-05-11","docstring_tokens":["<","p",">","author",":","cvandrei","since",":","2016","-","05","-","11"],"query":"How can I pad a String in Java?","query_tokens":["how","can","i","pad","a","string","in","java","?"]}
{"query_id":"26486046","repo_name":"rodriguezdevera/sakai","zip_link":"/rodriguezdevera/sakai/archive/master.zip","code":"    private Map<String, Object> stringToHashMap(String hashMapString){        Map<String, Object> map = new HashMap<String, Object>();        hashMapString = StringUtils.substringBetween(hashMapString, \"{\", \"}\");           //remove curly brackets        String[] keyValuePairs = hashMapString.split(\",\");              //split the string to create key-value pairs        for(String pair : keyValuePairs)                        //iterate over the pairs        {            String[] entry = pair.split(\"=\");                   //split the pairs to get key and value            String key = StringUtils.trim(entry[0]);            if(entry.length == 2) {                if (key.equals(\"assessmentGradingID\") || key.equals(\"publishedAssessmentID\")) {                    map.put(key, Long.valueOf(StringUtils.trim(entry[1])));                } else {                    map.put(key, String.valueOf(StringUtils.trim(entry[1])));          //add them to the hashmap and trim whitespaces                }            } else{                map.put(key, \"\");            }        }        return map;    }","code_tokens":["private","map","<","string",",","object",">","string","to","hash","map","(","string","hash","map","string",")","{","map","<","string",",","object",">","map","=","new","hash","map","<","string",",","object",">","(",")",";","hash","map","string","=","string","utils",".","substring","between","(","hash","map","string",",","\"","{","\"",",","\"","}","\"",")",";","/","/","remove","curly","brackets","string","[","]","key","value","pairs","=","hash","map","string",".","split","(","\"",",","\"",")",";","/","/","split","the","string","to","create","key","-","value","pairs","for","(","string","pair",":","key","value","pairs",")","/","/","iterate","over","the","pairs","{","string","[","]","entry","=","pair",".","split","(","\"","=","\"",")",";","/","/","split","the","pairs","to","get","key","and","value","string","key","=","string","utils",".","trim","(","entry","[","0","]",")",";","if","(","entry",".","length","=","=","2",")","{","if","(","key",".","equals","(","\"","assessment","grading","id","\"",")","|","|","key",".","equals","(","\"","published","assessment","id","\"",")",")","{","map",".","put","(","key",",","long",".","value","of","(","string","utils",".","trim","(","entry","[","1","]",")",")",")",";","}","else","{","map",".","put","(","key",",","string",".","value","of","(","string","utils",".","trim","(","entry","[","1","]",")",")",")",";","/","/","add","them","to","the","hashmap","and","trim","whitespaces","}","}","else","{","map",".","put","(","key",",","\"","\"",")",";","}","}","return","map",";","}"],"func_name":"stringToHashMap","func_name_tokens":["string","to","hash","map"],"docstring":"    /      stringToHashMap","docstring_tokens":["/","string","to","hash","map"],"query":"How to convert String into Hashmap in java","query_tokens":["how","to","convert","string","into","hashmap","in","java"]}
{"query_id":"15039728","repo_name":"gabuzomeu/geoPingProject","zip_link":"/gabuzomeu/geoPingProject/archive/master.zip","code":"public class ReSentSmsMessageReceiver extends BroadcastReceiver {    private static final String TAG = \"ReSentSmsMessageReceiver\";    static class TelephonyIntents {        public static final String SPN_STRINGS_UPDATED_ACTION = \"android.provider.Telephony.SPN_STRINGS_UPDATED\";        public static final String   EXTRA_PLMN = \"plmn\";        public static final String  EXTRA_SHOW_PLMN = \"showPlmn\";        public static final String  EXTRA_SHOW_SPN = \"showSpn\";        public static final String  EXTRA_SPN = \"spn\";        public static final String ACTION_SIGNAL_STRENGTH_CHANGED = \"android.intent.action.SIG_STR\";        public static final String EXTRA_SIGNAL_STRENGTH = \"GsmSignalStrength\";    }    @Override    public void onReceive(Context context, Intent intent) {        String action = intent.getAction();        Log.d(TAG, \"### ----------------------------------------- ###\");        Log.d(TAG, \"### Phone State Change To :  \" + action);     //   printExtras(intent.getExtras());        Log.d(TAG, \"### ----------------------------------------- ### \\\\n\");        if ( TelephonyIntents.ACTION_SIGNAL_STRENGTH_CHANGED.equals(action)) {            // int mSignalStrength = SignalStrength.newFromBundle(intent.getExtras());            Log.d(TAG, \"### onReceive Type : ACTION_SIGNAL_STRENGTH_CHANGED \" );            // GsmSignalStrength = 10            // isGsm = true            int signal = intent.getIntExtra(TelephonyIntents.EXTRA_SIGNAL_STRENGTH, -1);            if (signal>0) {                Log.d(TAG, \"### GsmSignalStrength > 0 : \" + signal + \" ==> Resent SMS\" );                resendSms(context);            }            //printExtras(intent.getExtras());            Log.d(TAG, \"### onReceive Type : ACTION_SIGNAL_STRENGTH_CHANGED (END)\" );        }//        else if (ConnectivityManager.CONNECTIVITY_ACTION.equals( action)) {//            boolean noConnectivity = intent.getBooleanExtra(  ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);//            if (!noConnectivity) {//                Bundle extras = intent.getExtras();//                NetworkInfo info = (NetworkInfo)extras.get(ConnectivityManager.EXTRA_NETWORK_INFO);//                Log.d(TAG, \"### NetworkInfo State :  \" +  info.getState() +  \" (connected \"+ info.isConnected()+\")\");//                if (ConnectivityManager.TYPE_MOBILE == info.getType()) {//                    Log.d(TAG, \"### NetworkInfo Type : TYPE_MOBILE \" );////                }//            }//        } else if ( TelephonyIntents.SPN_STRINGS_UPDATED_ACTION.equals(action)) {//            CharSequence  mTelephonyPlmn = getTelephonyPlmnFrom(intent);//            CharSequence  mTelephonySpn = getTelephonySpnFrom(intent);//            Log.d(TAG, \"### onReceive Type : SPN_STRINGS_UPDATED_ACTION \" );//          //  printExtras(intent.getExtras());//            Log.d(TAG, \"### onReceive Type : SPN_STRINGS_UPDATED_ACTION (END)\" );//        } else  if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action)) {//            // Log.d(TAG, \"onReceiveIntent: ACTION_PHONE_STATE_CHANGED, state=\"   + intent.getStringExtra(Phone.STATE_KEY));//            Log.d(TAG, \"### onReceive Type : ACTION_PHONE_STATE_CHANGED \" );//           // printExtras(intent.getExtras());//            Log.d(TAG, \"### onReceive Type : ACTION_PHONE_STATE_CHANGED (END)\" );//        }    }    /**     * @param intent The intent with action {@link TelephonyIntents#SPN_STRINGS_UPDATED_ACTION}     * @return The string to use for the plmn, or null if it should not be shown.     */    private CharSequence getTelephonyPlmnFrom(  Intent intent) {        if (intent.getBooleanExtra(TelephonyIntents.EXTRA_SHOW_PLMN, false)) {            final String plmn = intent.getStringExtra(TelephonyIntents.EXTRA_PLMN);            return (plmn != null) ? plmn : getDefaultPlmn( );        }        return null;    }    /**     * @return The default plmn (no service)     */    private CharSequence getDefaultPlmn() {//        return context.getResources().getText(R.string.lockscreen_carrier_default);        return \"no service\";    }    private CharSequence getTelephonySpnFrom(Intent intent) {        if (intent.getBooleanExtra(TelephonyIntents.EXTRA_SHOW_SPN, false)) {            final String spn = intent.getStringExtra(TelephonyIntents.EXTRA_SPN);            if (spn != null) {                return spn;            }        }        return null;    }    private void printExtras(Bundle extras) {        Intents.printExtras(TAG, extras);    }    private void resendSms(Context context) {        // Do the Resend        Uri searchUri = SmsLogProvider.Constants.getContentUriTypeStatus(SmsLogTypeEnum.SEND_ERROR);        String[] projection = null;        String selection = null; // String.format(\"%s >= ?\", SmsLogDatabase.SmsLogColumns.COL_TIME);        String[] selectionArgs = null; //new String[] { String.valueOf( new Date(2014-1900,1,01).getTime())};        int resendCount =  SmsSenderHelper.reSendSmsMessage(context, searchUri, selection, selectionArgs);        Log.d(TAG, \"### Resend done for : \" + resendCount + \" SMS Messages\" );        // Disable Services        ExtraFeatureHelper.enabledSettingReSentSmsMessageReceiver(context, Boolean.FALSE);        Log.d(TAG, \"### ACTION_SMS_SENT ERROR ==>  Disable ReSend Service\");    }}","code_tokens":["public","class","re","sent","sms","message","receiver","extends","broadcast","receiver","{","private","static","final","string","tag","=","\"","re","sent","sms","message","receiver","\"",";","static","class","telephony","intents","{","public","static","final","string","spn","strings","updated","action","=","\"","android",".","provider",".","telephony",".","spn","strings","updated","\"",";","public","static","final","string","extra","plmn","=","\"","plmn","\"",";","public","static","final","string","extra","show","plmn","=","\"","show","plmn","\"",";","public","static","final","string","extra","show","spn","=","\"","show","spn","\"",";","public","static","final","string","extra","spn","=","\"","spn","\"",";","public","static","final","string","action","signal","strength","changed","=","\"","android",".","intent",".","action",".","sig","str","\"",";","public","static","final","string","extra","signal","strength","=","\"","gsm","signal","strength","\"",";","}","@","override","public","void","on","receive","(","context","context",",","intent","intent",")","{","string","action","=","intent",".","get","action","(",")",";","log",".","d","(","tag",",","\"","#","#","#","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","#","#","#","\"",")",";","log",".","d","(","tag",",","\"","#","#","#","phone","state","change","to",":","\"","+","action",")",";","/","/","print","extras","(","intent",".","get","extras","(",")",")",";","log",".","d","(","tag",",","\"","#","#","#","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","#","#","#","\\","\\n","\"",")",";","if","(","telephony","intents",".","action","signal","strength","changed",".","equals","(","action",")",")","{","/","/","int","m","signal","strength","=","signal","strength",".","new","from","bundle","(","intent",".","get","extras","(",")",")",";","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","action","signal","strength","changed","\"",")",";","/","/","gsm","signal","strength","=","10","/","/","is","gsm","=","true","int","signal","=","intent",".","get","int","extra","(","telephony","intents",".","extra","signal","strength",",","-","1",")",";","if","(","signal",">","0",")","{","log",".","d","(","tag",",","\"","#","#","#","gsm","signal","strength",">","0",":","\"","+","signal","+","\"","=","=",">","resent","sms","\"",")",";","resend","sms","(","context",")",";","}","/","/","print","extras","(","intent",".","get","extras","(",")",")",";","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","action","signal","strength","changed","(","end",")","\"",")",";","}","/","/","else","if","(","connectivity","manager",".","connectivity","action",".","equals","(","action",")",")","{","/","/","boolean","no","connectivity","=","intent",".","get","boolean","extra","(","connectivity","manager",".","extra","no","connectivity",",","false",")",";","/","/","if","(","!","no","connectivity",")","{","/","/","bundle","extras","=","intent",".","get","extras","(",")",";","/","/","network","info","info","=","(","network","info",")","extras",".","get","(","connectivity","manager",".","extra","network","info",")",";","/","/","log",".","d","(","tag",",","\"","#","#","#","network","info","state",":","\"","+","info",".","get","state","(",")","+","\"","(","connected","\"","+","info",".","is","connected","(",")","+","\"",")","\"",")",";","/","/","if","(","connectivity","manager",".","type","mobile","=","=","info",".","get","type","(",")",")","{","/","/","log",".","d","(","tag",",","\"","#","#","#","network","info","type",":","type","mobile","\"",")",";","/","/","/","/","}","/","/","}","/","/","}","else","if","(","telephony","intents",".","spn","strings","updated","action",".","equals","(","action",")",")","{","/","/","char","sequence","m","telephony","plmn","=","get","telephony","plmn","from","(","intent",")",";","/","/","char","sequence","m","telephony","spn","=","get","telephony","spn","from","(","intent",")",";","/","/","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","spn","strings","updated","action","\"",")",";","/","/","/","/","print","extras","(","intent",".","get","extras","(",")",")",";","/","/","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","spn","strings","updated","action","(","end",")","\"",")",";","/","/","}","else","if","(","telephony","manager",".","action","phone","state","changed",".","equals","(","action",")",")","{","/","/","/","/","log",".","d","(","tag",",","\"","on","receive","intent",":","action","phone","state","changed",",","state","=","\"","+","intent",".","get","string","extra","(","phone",".","state","key",")",")",";","/","/","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","action","phone","state","changed","\"",")",";","/","/","/","/","print","extras","(","intent",".","get","extras","(",")",")",";","/","/","log",".","d","(","tag",",","\"","#","#","#","on","receive","type",":","action","phone","state","changed","(","end",")","\"",")",";","/","/","}","}","private","char","sequence","get","telephony","plmn","from","(","intent","intent",")","{","if","(","intent",".","get","boolean","extra","(","telephony","intents",".","extra","show","plmn",",","false",")",")","{","final","string","plmn","=","intent",".","get","string","extra","(","telephony","intents",".","extra","plmn",")",";","return","(","plmn","!","=","null",")","?","plmn",":","get","default","plmn","(",")",";","}","return","null",";","}","private","char","sequence","get","default","plmn","(",")","{","/","/","return","context",".","get","resources","(",")",".","get","text","(","r",".","string",".","lockscreen","carrier","default",")",";","return","\"","no","service","\"",";","}","private","char","sequence","get","telephony","spn","from","(","intent","intent",")","{","if","(","intent",".","get","boolean","extra","(","telephony","intents",".","extra","show","spn",",","false",")",")","{","final","string","spn","=","intent",".","get","string","extra","(","telephony","intents",".","extra","spn",")",";","if","(","spn","!","=","null",")","{","return","spn",";","}","}","return","null",";","}","private","void","print","extras","(","bundle","extras",")","{","intents",".","print","extras","(","tag",",","extras",")",";","}","private","void","resend","sms","(","context","context",")","{","/","/","do","the","resend","uri","search","uri","=","sms","log","provider",".","constants",".","get","content","uri","type","status","(","sms","log","type","enum",".","send","error",")",";","string","[","]","projection","=","null",";","string","selection","=","null",";","/","/","string",".","format","(","\"","%","s",">","=","?","\"",",","sms","log","database",".","sms","log","columns",".","col","time",")",";","string","[","]","selection","args","=","null",";","/","/","new","string","[","]","{","string",".","value","of","(","new","date","(","2014","-","1900",",","1",",","01",")",".","get","time","(",")",")","}",";","int","resend","count","=","sms","sender","helper",".","re","send","sms","message","(","context",",","search","uri",",","selection",",","selection","args",")",";","log",".","d","(","tag",",","\"","#","#","#","resend","done","for",":","\"","+","resend","count","+","\"","sms","messages","\"",")",";","/","/","disable","services","extra","feature","helper",".","enabled","setting","re","sent","sms","message","receiver","(","context",",","boolean",".","false",")",";","log",".","d","(","tag",",","\"","#","#","#","action","sms","sent","error","=","=",">","disable","re","send","service","\"",")",";","}","}"],"func_name":"ReSentSmsMessageReceiver","func_name_tokens":["re","sent","sms","message","receiver"],"docstring":"  platform_frameworks_base : com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor  Use http://developer.android.com/reference/android/telephony/SignalStrength.html ?  http://alvinalexander.com/java/jwarehouse/android/telephony/java/com/android/internal/telephony/PhoneStateIntentReceiver.java.shtml","docstring_tokens":["platform","frameworks","base",":","com",".","android",".","internal",".","policy",".","impl",".","keyguard",".","keyguard","update","monitor","use","?"],"query":"Listening to signalStrength when phone sleeps","query_tokens":["listening","to","signal","strength","when","phone","sleeps"]}
{"query_id":"12469730","repo_name":"st0ck53y/Sudoku_Solver","zip_link":"/st0ck53y/Sudoku_Solver/archive/Development.zip","code":"    public static void YUV_NV21_TO_RGB(int[] argb, byte[] yuv, int width, int height) {\r        final int frameSize = width * height;\r\r        final int ii = 0;\r        final int ij = 0;\r        final int di = +1;\r        final int dj = +1;\r\r        int a = 0;\r        for (int i = 0, ci = ii; i < height; ++i, ci += di) {\r            for (int j = 0, cj = ij; j < width; ++j, cj += dj) {\r                int y = (0xff & ((int) yuv[ci * width + cj]));\r                int v = (0xff & ((int) yuv[frameSize + (ci >> 1) * width + (cj & ~1) + 0]));\r                int u = (0xff & ((int) yuv[frameSize + (ci >> 1) * width + (cj & ~1) + 1]));\r                y = y < 16 ? 16 : y;\r\r                int r = (int) (1.164f * (y - 16) + 1.596f * (v - 128));\r                int g = (int) (1.164f * (y - 16) - 0.813f * (v - 128) - 0.391f * (u - 128));\r                int b = (int) (1.164f * (y - 16) + 2.018f * (u - 128));\r\r                r = r < 0 ? 0 : (r > 255 ? 255 : r);\r                g = g < 0 ? 0 : (g > 255 ? 255 : g);\r                b = b < 0 ? 0 : (b > 255 ? 255 : b);\r\r                argb[a++] = 0xff000000 | (r << 16) | (g << 8) | b;\r            }\r        }\r    }\r","code_tokens":["public","static","void","yuv","nv21","to","rgb","(","int","[","]","argb",",","byte","[","]","yuv",",","int","width",",","int","height",")","{","final","int","frame","size","=","width","*","height",";","final","int","ii","=","0",";","final","int","ij","=","0",";","final","int","di","=","+","1",";","final","int","dj","=","+","1",";","int","a","=","0",";","for","(","int","i","=","0",",","ci","=","ii",";","i","<","height",";","+","+","i",",","ci","+","=","di",")","{","for","(","int","j","=","0",",","cj","=","ij",";","j","<","width",";","+","+","j",",","cj","+","=","dj",")","{","int","y","=","(","0xff","&","(","(","int",")","yuv","[","ci","*","width","+","cj","]",")",")",";","int","v","=","(","0xff","&","(","(","int",")","yuv","[","frame","size","+","(","ci",">",">","1",")","*","width","+","(","cj","&","~","1",")","+","0","]",")",")",";","int","u","=","(","0xff","&","(","(","int",")","yuv","[","frame","size","+","(","ci",">",">","1",")","*","width","+","(","cj","&","~","1",")","+","1","]",")",")",";","y","=","y","<","16","?","16",":","y",";","int","r","=","(","int",")","(","1",".","164f","*","(","y","-","16",")","+","1",".","596f","*","(","v","-","128",")",")",";","int","g","=","(","int",")","(","1",".","164f","*","(","y","-","16",")","-","0",".","813f","*","(","v","-","128",")","-","0",".","391f","*","(","u","-","128",")",")",";","int","b","=","(","int",")","(","1",".","164f","*","(","y","-","16",")","+","2",".","018f","*","(","u","-","128",")",")",";","r","=","r","<","0","?","0",":","(","r",">","255","?","255",":","r",")",";","g","=","g","<","0","?","0",":","(","g",">","255","?","255",":","g",")",";","b","=","b","<","0","?","0",":","(","b",">","255","?","255",":","b",")",";","argb","[","a","+","+","]","=","0xff000000","|","(","r","<","<","16",")","|","(","g","<","<","8",")","|","b",";","}","}","}"],"func_name":"YUV_NV21_TO_RGB","func_name_tokens":["yuv","nv21","to","rgb"],"docstring":"    \r      because who knows how this works... ill figure it out at some point....\r","docstring_tokens":["because","who","knows","how","this","works",".",".",".","ill","figure","it","out","at","some","point",".",".",".","."],"query":"Confusion on YUV NV21 conversion to RGB","query_tokens":["confusion","on","yuv","nv21","conversion","to","rgb"]}
{"query_id":"53497","repo_name":"tOgg1/WS-Nu","zip_link":"/tOgg1/WS-Nu/archive/master.zip","code":"    public static boolean isValidIpv6Address(String address){        address = address.replaceAll(\"^https?://\", \"\");        address = address.split(\"/\")[0];        return address.matches(\"\\\\[?(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|\" +                \"([0-9a-fA-F]{1,4}:){1,7}:|\" +                \"([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|\" +                \"([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|\" +                \"([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\" +                \"([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|\" +                \"([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|\" +                \"[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|\" +                \":((:[0-9a-fA-F]{1,4}){1,7}|:)|\" +                \"fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|\" +                \"::(ffff(:0{1,4}){0,1}:){0,1}\" +                \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}\" +                \"(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\" +                \"|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\\\]?\");    }","code_tokens":["public","static","boolean","is","valid","ipv6address","(","string","address",")","{","address","=","address",".","replace","all","(","\"","^","https","?",":","/","/","\"",",","\"","\"",")",";","address","=","address",".","split","(","\"","/","\"",")","[","0","]",";","return","address",".","matches","(","\"","\\","\\","[","?","(","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","7",",","7","}","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","7","}",":","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","6","}",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","5","}","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","2","}","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","4","}","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","3","}","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","3","}","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","4","}","|","\"","+","\"","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","2","}","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","5","}","|","\"","+","\"","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":","(","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","6","}",")","|","\"","+","\"",":","(","(",":","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",")","{","1",",","7","}","|",":",")","|","\"","+","\"","fe80",":","(",":","[","0","-","9a","-","f","a","-","f","]","{","0",",","4","}",")","{","0",",","4","}","%","[","0","-","9a","-","z","a","-","z","]","{","1",",","}","|","\"","+","\"",":",":","(","ffff","(",":","0","{","1",",","4","}",")","{","0",",","1","}",":",")","{","0",",","1","}","\"","+","\"","(","(","25","[","0","-","5","]","|","(","2","[","0","-","4","]","|","1","{","0",",","1","}","[","0","-","9","]",")","{","0",",","1","}","[","0","-","9","]",")",".",")","{","3",",","3","}","\"","+","\"","(","25","[","0","-","5","]","|","(","2","[","0","-","4","]","|","1","{","0",",","1","}","[","0","-","9","]",")","{","0",",","1","}","[","0","-","9","]",")","\"","+","\"","|","(","[","0","-","9a","-","f","a","-","f","]","{","1",",","4","}",":",")","{","1",",","4","}",":","(","(","25","[","0","-","5","]","|","(","2","[","0","-","4","]","|","1","{","0",",","1","}","[","0","-","9","]",")","{","0",",","1","}","[","0","-","9","]",")",".",")","{","3",",","3","}","(","25","[","0","-","5","]","|","(","2","[","0","-","4","]","|","1","{","0",",","1","}","[","0","-","9","]",")","{","0",",","1","}","[","0","-","9","]",")",")","\\","\\","]","?","\"",")",";","}"],"func_name":"isValidIpv6Address","func_name_tokens":["is","valid","ipv6address"],"docstring":"          Checks if an address is a valid IPv6 address.      Note that the method will strip the address for any http-protocol or directory suffix.      E.g. http://2342:abcd:2342:abcd:2342:abcd:2342:abcd/lol will be evaluated after      http:// and /lol is stripped.      All credit to David M. Syzdek at StackOverflow:      @param address The address to be evaluated      @return True if the address is a valid IPv6 address","docstring_tokens":["checks","if","an","address","is","a","valid","i","pv6","address",".","note","that","the","method","will","strip","the","address","for","any","http","-","protocol","or","directory","suffix",".","e",".","g",".","http",":","/","/","2342",":","abcd",":","2342",":","abcd",":","2342",":","abcd",":","2342",":","abcd","/","lol","will","be","evaluated","after","http",":","/","/","and","/","lol","is","stripped",".","all","credit","to","david","m",".","syzdek","at","stack","overflow",":"],"query":"Regular expression that matches valid IPv6 addresses","query_tokens":["regular","expression","that","matches","valid","i","pv6","addresses"]}
{"query_id":"11783062","repo_name":"bonashen/ChatSecureAndroid","zip_link":"/bonashen/ChatSecureAndroid/archive/master.zip","code":"public class AES_256_CBC {    private static final int INDEX_KEY = 0;    private static final int INDEX_IV = 1;    private static final int ITERATIONS = 1;    private static final int SALT_OFFSET = 8;    private static final int SALT_SIZE = 8;    private static final int CIPHERTEXT_OFFSET = SALT_OFFSET + SALT_SIZE;    private static final int KEY_SIZE_BITS = 256;    /**     * Thanks go to Ola Bini for releasing this source on his blog. The source     * was obtained from <a     * href=\"http://olabini.com/blog/tag/evp_bytestokey/\">here</a> .     */    public static byte[][] EVP_BytesToKey(int key_len, int iv_len, MessageDigest md, byte[] salt,            byte[] data, int count) {        byte[][] both = new byte[2][];        byte[] key = new byte[key_len];        int key_ix = 0;        byte[] iv = new byte[iv_len];        int iv_ix = 0;        both[0] = key;        both[1] = iv;        byte[] md_buf = null;        int nkey = key_len;        int niv = iv_len;        int i = 0;        if (data == null) {            return both;        }        int addmd = 0;        for (;;) {            md.reset();            if (addmd++ > 0) {                md.update(md_buf);            }            md.update(data);            if (null != salt) {                md.update(salt, 0, 8);            }            md_buf = md.digest();            for (i = 1; i < count; i++) {                md.reset();                md.update(md_buf);                md_buf = md.digest();            }            i = 0;            if (nkey > 0) {                for (;;) {                    if (nkey == 0)                        break;                    if (i == md_buf.length)                        break;                    key[key_ix++] = md_buf[i];                    nkey--;                    i++;                }            }            if (niv > 0 && i != md_buf.length) {                for (;;) {                    if (niv == 0)                        break;                    if (i == md_buf.length)                        break;                    iv[iv_ix++] = md_buf[i];                    niv--;                    i++;                }            }            if (nkey == 0 && niv == 0) {                break;            }        }        for (i = 0; i < md_buf.length; i++) {            md_buf[i] = 0;        }        return both;    }    public static String decryptAscii(File f, String password) throws IOException {        byte[] headerSaltAndCipherText = null;        String raw = FileUtils.readFileToString(f);        headerSaltAndCipherText = Base64.decode(raw);        return decrypt(headerSaltAndCipherText, password);    }    public static String decryptBin(File f, String password) throws IOException {        return decrypt(FileUtils.readFileToByteArray(f), password);    }    public static String decrypt(File f, String password) throws IOException {        String raw = FileUtils.readFileToString(f);        if (raw.startsWith(\"Salted__\"))            return decryptBin(f, password);        else            return decryptAscii(f, password);    }    // cheap copy of Arrays.copyOfRange() since its not in Android until android-9    private static byte[] copyOfRange(byte[] in, int from, int to) {        int size = to - from;        byte[] out = new byte[size];        for (int i = 0; i < size; i++)            out[i] = in[from + i];        return out;    }    public static String decrypt(byte[] headerSaltAndCipherText, String password) {        try {            // --- extract salt & encrypted ---            // header is \"Salted__\", ASCII encoded, if salt is being used (the            // default)            byte[] salt = copyOfRange(headerSaltAndCipherText, SALT_OFFSET, SALT_OFFSET + SALT_SIZE);            byte[] encrypted = copyOfRange(headerSaltAndCipherText, CIPHERTEXT_OFFSET,                    headerSaltAndCipherText.length);            // --- specify cipher and digest for EVP_BytesToKey method ---            Cipher aesCBC = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");            // --- create key and IV ---            // the IV is useless, OpenSSL might as well have use zero's            final byte[][] keyAndIV = EVP_BytesToKey(KEY_SIZE_BITS / Byte.SIZE,                    aesCBC.getBlockSize(), md5, salt, password.getBytes(\"ASCII\"), ITERATIONS);            SecretKeySpec key = new SecretKeySpec(keyAndIV[INDEX_KEY], \"AES\");            IvParameterSpec iv = new IvParameterSpec(keyAndIV[INDEX_IV]);            // --- initialize cipher instance and decrypt ---            aesCBC.init(Cipher.DECRYPT_MODE, key, iv);            byte[] decrypted = aesCBC.doFinal(encrypted);            return new String(decrypted, \"ASCII\");        } catch (BadPaddingException e) {            // AKA \"something went wrong\"            throw new IllegalStateException(                    \"Bad password, algorithm, mode or padding;\"                            + \" no salt, wrong number of iterations or corrupted ciphertext.\");        } catch (IllegalBlockSizeException e) {            throw new IllegalStateException(                    \"Bad algorithm, mode or corrupted (resized) ciphertext.\");        } catch (GeneralSecurityException e) {            throw new IllegalStateException(e);        } catch (UnsupportedEncodingException e) {            throw new IllegalStateException(e);        }    }}","code_tokens":["public","class","aes","256","cbc","{","private","static","final","int","index","key","=","0",";","private","static","final","int","index","iv","=","1",";","private","static","final","int","iterations","=","1",";","private","static","final","int","salt","offset","=","8",";","private","static","final","int","salt","size","=","8",";","private","static","final","int","ciphertext","offset","=","salt","offset","+","salt","size",";","private","static","final","int","key","size","bits","=","256",";","public","static","byte","[","]","[","]","evp","bytes","to","key","(","int","key","len",",","int","iv","len",",","message","digest","md",",","byte","[","]","salt",",","byte","[","]","data",",","int","count",")","{","byte","[","]","[","]","both","=","new","byte","[","2","]","[","]",";","byte","[","]","key","=","new","byte","[","key","len","]",";","int","key","ix","=","0",";","byte","[","]","iv","=","new","byte","[","iv","len","]",";","int","iv","ix","=","0",";","both","[","0","]","=","key",";","both","[","1","]","=","iv",";","byte","[","]","md","buf","=","null",";","int","nkey","=","key","len",";","int","niv","=","iv","len",";","int","i","=","0",";","if","(","data","=","=","null",")","{","return","both",";","}","int","addmd","=","0",";","for","(",";",";",")","{","md",".","reset","(",")",";","if","(","addmd","+","+",">","0",")","{","md",".","update","(","md","buf",")",";","}","md",".","update","(","data",")",";","if","(","null","!","=","salt",")","{","md",".","update","(","salt",",","0",",","8",")",";","}","md","buf","=","md",".","digest","(",")",";","for","(","i","=","1",";","i","<","count",";","i","+","+",")","{","md",".","reset","(",")",";","md",".","update","(","md","buf",")",";","md","buf","=","md",".","digest","(",")",";","}","i","=","0",";","if","(","nkey",">","0",")","{","for","(",";",";",")","{","if","(","nkey","=","=","0",")","break",";","if","(","i","=","=","md","buf",".","length",")","break",";","key","[","key","ix","+","+","]","=","md","buf","[","i","]",";","nkey","-","-",";","i","+","+",";","}","}","if","(","niv",">","0","&","&","i","!","=","md","buf",".","length",")","{","for","(",";",";",")","{","if","(","niv","=","=","0",")","break",";","if","(","i","=","=","md","buf",".","length",")","break",";","iv","[","iv","ix","+","+","]","=","md","buf","[","i","]",";","niv","-","-",";","i","+","+",";","}","}","if","(","nkey","=","=","0","&","&","niv","=","=","0",")","{","break",";","}","}","for","(","i","=","0",";","i","<","md","buf",".","length",";","i","+","+",")","{","md","buf","[","i","]","=","0",";","}","return","both",";","}","public","static","string","decrypt","ascii","(","file","f",",","string","password",")","throws","io","exception","{","byte","[","]","header","salt","and","cipher","text","=","null",";","string","raw","=","file","utils",".","read","file","to","string","(","f",")",";","header","salt","and","cipher","text","=","base64",".","decode","(","raw",")",";","return","decrypt","(","header","salt","and","cipher","text",",","password",")",";","}","public","static","string","decrypt","bin","(","file","f",",","string","password",")","throws","io","exception","{","return","decrypt","(","file","utils",".","read","file","to","byte","array","(","f",")",",","password",")",";","}","public","static","string","decrypt","(","file","f",",","string","password",")","throws","io","exception","{","string","raw","=","file","utils",".","read","file","to","string","(","f",")",";","if","(","raw",".","starts","with","(","\"","salted","\"",")",")","return","decrypt","bin","(","f",",","password",")",";","else","return","decrypt","ascii","(","f",",","password",")",";","}","/","/","cheap","copy","of","arrays",".","copy","of","range","(",")","since","its","not","in","android","until","android","-","9","private","static","byte","[","]","copy","of","range","(","byte","[","]","in",",","int","from",",","int","to",")","{","int","size","=","to","-","from",";","byte","[","]","out","=","new","byte","[","size","]",";","for","(","int","i","=","0",";","i","<","size",";","i","+","+",")","out","[","i","]","=","in","[","from","+","i","]",";","return","out",";","}","public","static","string","decrypt","(","byte","[","]","header","salt","and","cipher","text",",","string","password",")","{","try","{","/","/","-","-","-","extract","salt","&","encrypted","-","-","-","/","/","header","is","\"","salted","\"",",","ascii","encoded",",","if","salt","is","being","used","(","the","/","/","default",")","byte","[","]","salt","=","copy","of","range","(","header","salt","and","cipher","text",",","salt","offset",",","salt","offset","+","salt","size",")",";","byte","[","]","encrypted","=","copy","of","range","(","header","salt","and","cipher","text",",","ciphertext","offset",",","header","salt","and","cipher","text",".","length",")",";","/","/","-","-","-","specify","cipher","and","digest","for","evp","bytes","to","key","method","-","-","-","cipher","aes","cbc","=","cipher",".","get","instance","(","\"","aes","/","cbc","/","pkcs5padding","\"",")",";","message","digest","md5","=","message","digest",".","get","instance","(","\"","md5","\"",")",";","/","/","-","-","-","create","key","and","iv","-","-","-","/","/","the","iv","is","useless",",","open","ssl","might","as","well","have","use","zero","'","s","final","byte","[","]","[","]","key","and","iv","=","evp","bytes","to","key","(","key","size","bits","/","byte",".","size",",","aes","cbc",".","get","block","size","(",")",",","md5",",","salt",",","password",".","get","bytes","(","\"","ascii","\"",")",",","iterations",")",";","secret","key","spec","key","=","new","secret","key","spec","(","key","and","iv","[","index","key","]",",","\"","aes","\"",")",";","iv","parameter","spec","iv","=","new","iv","parameter","spec","(","key","and","iv","[","index","iv","]",")",";","/","/","-","-","-","initialize","cipher","instance","and","decrypt","-","-","-","aes","cbc",".","init","(","cipher",".","decrypt","mode",",","key",",","iv",")",";","byte","[","]","decrypted","=","aes","cbc",".","do","final","(","encrypted",")",";","return","new","string","(","decrypted",",","\"","ascii","\"",")",";","}","catch","(","bad","padding","exception","e",")","{","/","/","aka","\"","something","went","wrong","\"","throw","new","illegal","state","exception","(","\"","bad","password",",","algorithm",",","mode","or","padding",";","\"","+","\"","no","salt",",","wrong","number","of","iterations","or","corrupted","ciphertext",".","\"",")",";","}","catch","(","illegal","block","size","exception","e",")","{","throw","new","illegal","state","exception","(","\"","bad","algorithm",",","mode","or","corrupted","(","resized",")","ciphertext",".","\"",")",";","}","catch","(","general","security","exception","e",")","{","throw","new","illegal","state","exception","(","e",")",";","}","catch","(","unsupported","encoding","exception","e",")","{","throw","new","illegal","state","exception","(","e",")",";","}","}","}"],"func_name":"AES_256_CBC","func_name_tokens":["aes","256","cbc"],"docstring":"  Class created for StackOverflow by owlstead. This is open source, you are  free to copy and use for any purpose.  /how-to-decrypt-an-encrypted-file-in-java-with-openssl-with-aes","docstring_tokens":["class","created","for","stack","overflow","by","owlstead",".","this","is","open","source",",","you","are","free","to","copy","and","use","for","any","purpose",".","/","how","-","to","-","decrypt","-","an","-","encrypted","-","file","-","in","-","java","-","with","-","openssl","-","with","-","aes"],"query":"How to decrypt file in Java encrypted with openssl command using AES?","query_tokens":["how","to","decrypt","file","in","java","encrypted","with","openssl","command","using","aes","?"]}
{"query_id":"2724725","repo_name":"SMD-Cassandra-391/project","zip_link":"/SMD-Cassandra-391/project/archive/master.zip","code":"public class Output {\t/** Application stores information entered at runtime */\tpublic static Application app;\t/** The data creation and data loading is ran in four threads */\tpublic static final int NTHREDS = 4;\tpublic static File[] files;\t\tpublic static void main(String[] args) throws Exception {\t\tapp = Application.getApp();\t\tif(args[0].equalsIgnoreCase(\"demo\")){\t\t\tApplication.RUN_TYPE = Application.DEMO;\t\t}\t\telse if(args[0].equalsIgnoreCase(\"project\")){\t\t\tApplication.RUN_TYPE = Application.PROJ;\t\t}\t\telse if(args[0].equalsIgnoreCase(\"mod_project\")){\t\t\tApplication.RUN_TYPE = Application.MOD_PROJ;\t\t}\t\telse if(args[0].equalsIgnoreCase(\"mod_demo\")){\t\t\tApplication.RUN_TYPE = Application.MOD_DEMO;\t\t}\t\telse{\t\t\tSystem.out.println(\"keyspace is neither demo, project, mod_demo or mod_project. System exiting.\");\t\t\tSystem.exit(-1);\t\t}\t\tApplication.NUM_ROWS = Integer.parseInt(args[1]);\t\tStream stream = new Stream();\t\t// duration ranges from 0 to 6000s in model\t\tstream.createT4(6000);\t\t// two hundred thousand phone numbers in model\t\tstream.createT5(200000);\t\tstream.runStream();\t\tSystem.exit(0);}\t\t\t\t\t}","code_tokens":["public","class","output","{","public","static","application","app",";","public","static","final","int","nthreds","=","4",";","public","static","file","[","]","files",";","public","static","void","main","(","string","[","]","args",")","throws","exception","{","app","=","application",".","get","app","(",")",";","if","(","args","[","0","]",".","equals","ignore","case","(","\"","demo","\"",")",")","{","application",".","run","type","=","application",".","demo",";","}","else","if","(","args","[","0","]",".","equals","ignore","case","(","\"","project","\"",")",")","{","application",".","run","type","=","application",".","proj",";","}","else","if","(","args","[","0","]",".","equals","ignore","case","(","\"","mod","project","\"",")",")","{","application",".","run","type","=","application",".","mod","proj",";","}","else","if","(","args","[","0","]",".","equals","ignore","case","(","\"","mod","demo","\"",")",")","{","application",".","run","type","=","application",".","mod","demo",";","}","else","{","system",".","out",".","println","(","\"","keyspace","is","neither","demo",",","project",",","mod","demo","or","mod","project",".","system","exiting",".","\"",")",";","system",".","exit","(","-","1",")",";","}","application",".","num","rows","=","integer",".","parse","int","(","args","[","1","]",")",";","stream","stream","=","new","stream","(",")",";","/","/","duration","ranges","from","0","to","6000s","in","model","stream",".","create","t4","(","6000",")",";","/","/","two","hundred","thousand","phone","numbers","in","model","stream",".","create","t5","(","200000",")",";","stream",".","run","stream","(",")",";","system",".","exit","(","0",")",";","}","}"],"func_name":"Output","func_name_tokens":["output"],"docstring":"  this is the entry point of the application. It will infinitely output newly created tables  and then load them into the Cassandra cluster.   invocation: sudo nohup java -jar DatabaseGenerator-1.0-SNAPSHOT.one-jar.jar  At this point one should record the pid of this process, because when you want to   stop generation you're going to go sudo kill <pidof this program>.  http://www.cyberciti.biz/tips/nohup-execute-commands-after-you-exit-from-a-shell-prompt.html  @author slmyers ","docstring_tokens":["this","is","the","entry","point","of","the","application",".","it","will","infinitely","output","newly","created","tables","and","then","load","them","into","the","cassandra","cluster",".","invocation",":","sudo","nohup","java","-","jar","database","generator","-","1",".","0","-","snapshot",".","one","-","jar",".","jar","at","this","point","one","should","record","the","pid","of","this","process",",","because","when","you","want","to","stop","generation","you","'","re","going","to","go","sudo","kill","<","pidof","this","program",">","."],"query":"Best way to daemonize Java application on Linux [closed]","query_tokens":["best","way","to","daemonize","java","application","on","linux","[","closed","]"]}
{"query_id":"7824620","repo_name":"coinspark/sparkbit","zip_link":"/coinspark/sparkbit/archive/master.zip","code":"public class LoggerStartupListener extends ContextAwareBase implements LoggerContextListener, LifeCycle {    private static final String JSONRPC_LOG_FILENAME_PROPERTY = \"jsonrpc_server_log_file\";    private static final String JSONRPC_LOG_FILENAME = \"jsonrpc.log\";    private boolean started = false;    @Override    public void start() {        if (started) return;\tApplicationDataDirectoryLocator applicationDataDirectoryLocator = new ApplicationDataDirectoryLocator();\tString filename = applicationDataDirectoryLocator.getApplicationDataDirectory() + File.separator                        + SparkBitInExecutableJar.OUTPUT_DIRECTORY + File.separator + JSONRPC_LOG_FILENAME;        Context context = getContext();        context.putProperty(JSONRPC_LOG_FILENAME_PROPERTY, filename);        started = true;    }    @Override    public void stop() {    }    @Override    public boolean isStarted() {        return started;    }    @Override    public boolean isResetResistant() {        return true;    }    @Override    public void onStart(LoggerContext context) {    }    @Override    public void onReset(LoggerContext context) {    }    @Override    public void onStop(LoggerContext context) {    }    @Override    public void onLevelChange(Logger logger, Level level) {    }    }","code_tokens":["public","class","logger","startup","listener","extends","context","aware","base","implements","logger","context","listener",",","life","cycle","{","private","static","final","string","jsonrpc","log","filename","property","=","\"","jsonrpc","server","log","file","\"",";","private","static","final","string","jsonrpc","log","filename","=","\"","jsonrpc",".","log","\"",";","private","boolean","started","=","false",";","@","override","public","void","start","(",")","{","if","(","started",")","return",";","application","data","directory","locator","application","data","directory","locator","=","new","application","data","directory","locator","(",")",";","string","filename","=","application","data","directory","locator",".","get","application","data","directory","(",")","+","file",".","separator","+","spark","bit","in","executable","jar",".","output","directory","+","file",".","separator","+","jsonrpc","log","filename",";","context","context","=","get","context","(",")",";","context",".","put","property","(","jsonrpc","log","filename","property",",","filename",")",";","started","=","true",";","}","@","override","public","void","stop","(",")","{","}","@","override","public","boolean","is","started","(",")","{","return","started",";","}","@","override","public","boolean","is","reset","resistant","(",")","{","return","true",";","}","@","override","public","void","on","start","(","logger","context","context",")","{","}","@","override","public","void","on","reset","(","logger","context","context",")","{","}","@","override","public","void","on","stop","(","logger","context","context",")","{","}","@","override","public","void","on","level","change","(","logger","logger",",","level","level",")","{","}","}"],"func_name":"LoggerStartupListener","func_name_tokens":["logger","startup","listener"],"docstring":"  Setting java system property did not work in dynamically setting log file location.  Using a listener to set the context property does work, as mentioned here:  http://stackoverflow.com/questions/1975939/read-environment-variables-from-logback-configuration-file?rq=1  Setting this programmatically without using configuration file did not work.  http://stackoverflow.com/questions/3803184/setting-logback-appender-path-programmatically  http://stackoverflow.com/questions/2011929/switch-from-log4j-to-logback  Java logging is painful.","docstring_tokens":["setting","java","system","property","did","not","work","in","dynamically","setting","log","file","location",".","using","a","listener","to","set","the","context","property","does","work",",","as","mentioned","here",":","setting","this","programmatically","without","using","configuration","file","did","not","work",".","java","logging","is","painful","."],"query":"Logback - set log file name programmatically","query_tokens":["logback","-","set","log","file","name","programmatically"]}
{"query_id":"30477554","repo_name":"Aeonitis/lh-and","zip_link":"/Aeonitis/GW-Android/archive/master.zip","code":"public class GeoUtil {    private static String TAG = LHConstants.SYMBOL_XI + \"GeoUtil\";    private static LocationManager locationManager;    private static LocationListener locationListener;    private static LocationRequest locationRequest;    private static Location lastKnownFusedLocation;    private static List<Location> listOfAllFoundLocations;     //All gathered locations are collected here for election    private static Location bestLocationPicked;                 //The elected location from all gathered locations    private static int timesToConsiderLocationChange;           //Amount of location updates allowed for further consideration    private static boolean isPermittedForLocation = false;      //Helps log permission on an app-scope level with the device, avoids first-time location request @OnConnected() to crash due to permission dialog (specifically Android M) NOTE: Just app permissions, not user settings changes    // Map Variables----------------------------------    private static TextView tv_ToUpdateWithLocation;            //TextView which will be updated with the current/best location    private static GoogleMap map_ToUpdateWithLocation;          //GoogleMap which will be updated with the current/best location    private static LatLng[] singleLatLngToMark;                //Used for map to avoid having multiple markers    //Service Variables    private static Geocoder geocoder;                           //Used to get country name from LatLng or even text, with even specific data about street addresses too    private static ArrayList<String> geocodeResult;    private static boolean currentLocationSettingState;         //Current status of both location providers (GPS/Network)    private static AlertDialog.Builder aldb_AskLocationSettings;        //AlertDialog from this builder used to ask user for Location Settings to be enabled    private static boolean flagReturningFromLocationSettings;           //Flag used to signify this activity is being started after returning from Location Settings    /**     * \"Where Am I Now?\", perhaps the most perplexing, profound, difficult, and exciting question we can pose to ourselves... (in terms of geography-_-)     * Gets the instant locations so user can start working with Locations, and starts second thinking the instant locations for newer updates as user spends time waiting in activity     * @param callingActivity     * @param googleApiClient     * @return     */    public static Location whereAmINow(Activity callingActivity, GoogleApiClient googleApiClient, TextView textViewToControl, GoogleMap googleMapToControl) {        //Reference views to update with new data        setMap_ToUpdateWithLocation(googleMapToControl);        setTv_ToUpdateWithLocation(textViewToControl);        //Get instant Locations list and pick one        Log.e(TAG, \"Where Am I Now?\");        if(requestLastFusedLocation(callingActivity, googleApiClient)==null) {            Log.e(TAG, \"whereAmINow - Null LastFused Location API\");        } else {            Log.e(TAG, \"whereAmINow - LastFused Location found, proceeding to search for optimal location\");        }        extractAllProviderLocations(callingActivity);        electOmegaLocation();        //Allow for a change of mind for a second thought with a 'locationChanged' update(s)        startSecondThoughtsOnLocation(callingActivity, googleApiClient, LHConstants.LOCREQ_MAX_LOCATION_CHANGES_ALLOWED_ONETIME, LHConstants.LOCREQ_3000_MILLISECONDS_PER_LOCATION_UPDATE);        if(bestLocationPicked!=null) {            //First Location update for TextView            Log.e(TAG, \"whereAmINow - ----------____________________---------bestLocationPicked!=null\");            updateMapWithNewBestLocation(callingActivity);            updateTextViewWithNewBestLocation();            //Dismiss after final location guess & map update            UXUtil.dismissLocationUpdateProgressDialog();            CrashUtil.logCustomUserEvent(\"User Location Completed\", \"\");        } else {            Log.e(TAG, \"whereAmINow - ----------____________________---------bestLocationPicked==null\");        }        return getBestLocationPicked();    }    /**     * A lighter check than 'mayRequestLocationPermissions' specifically for 'ACCESS_FINE_LOCATION'     * @param context     * @return     */    public static boolean checkForFineLocationPermission(Context context) {        // Register the listener with the Location Manager to receive location updates        if (ActivityCompat.checkSelfPermission(context, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {            return true;        } else {//            Log.i(TAG, \"checkForFineLocationPermission - false\");            return false;        }    }    /**     * Checks App permissions in any case scenarios for Location Permissions, returning results to 'onRequestPermissionsResult' function of callingActivity     * 1. Android version of device is < 23 (version No.) i.e. 'M' Marshmallow (6.0)     * 2. Permission has been granted already     * 3. Ask user to allow app-scope permission (Ask-once basis)     * @return     */    public static boolean mayRequestLocationPermissions(Activity callingActivity) {        Log.e(TAG, \"mayRequestLocations 1. Version: \" + Build.VERSION.SDK_INT);        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {            isPermittedForLocation = true;            return true;        }        if (ActivityCompat.checkSelfPermission(callingActivity, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {            Log.e(TAG, \"mayRequestLocations 2. PERMISSION_GRANTED\");            isPermittedForLocation = true;            return true;        }        // TODO: Should I show an explanation?        if (ActivityCompat.shouldShowRequestPermissionRationale(callingActivity, android.Manifest.permission.ACCESS_FINE_LOCATION)) {            Log.e(TAG, \"mayRequestLocations  3. shouldShowRequestPermissionRationale\");            /**             * Show an explanation to the user *asynchronously* -- don't block this thread waiting for             * the user's response! After the user sees the explanation, try again to request the permission.             */        } else {            Log.e(\"mayRequestLocations\", \"3. requestPermissions\");            ActivityCompat.requestPermissions(callingActivity, new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION}, LHConstants.PERM_REQUEST_CODE_FINE_LOCATION);        }        return false;    }    /**     * Prompt user to ensure their settings are enabled for GPS     * @param callingActivity     */    public static void askToTurnLocationSettingsOn(final Activity callingActivity, final GoogleApiClient googleApiClient) {        Log.w(TAG, \"Asking user to turn on location...\");        // 1. Instantiate an AlertDialog.Builder with its constructor        aldb_AskLocationSettings = new AlertDialog.Builder(callingActivity);        // 2. Chain together various setter methods to set the dialog characteristics        aldb_AskLocationSettings.setTitle(callingActivity.getString(R.string.dlg_title_gps_network_not_enabled));        aldb_AskLocationSettings.setMessage(callingActivity.getString(R.string.dlg_message_gps_network_not_enabled));        aldb_AskLocationSettings.setPositiveButton(callingActivity.getString(R.string.dlg_btn_open_location_settings), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface paramDialogInterface, int paramInt) {//                UXUtil.showAwaitingLocationUpdateProgressDialog(callingActivity, callingActivity.getString(R.string.pd_spinner_awaiting_location_update_title), callingActivity.getString(R.string.pd_spinner_awaiting_location_update_message));                startSecondThoughtsOnLocation(callingActivity, googleApiClient, LHConstants.LOCREQ_MAX_LOCATION_CHANGES_ALLOWED_FIVETIMES, LHConstants.LOCREQ_5000_MILLISECONDS_PER_LOCATION_UPDATE);                goToLocationSettings(callingActivity);                hideDialogToTurnOnLocationSettings();       //hide this dialog                setFlagReturningFromLocationSettings(true); //set to true to remind an activity that app is returning from settings            }        });        aldb_AskLocationSettings.setNegativeButton(callingActivity.getString(R.string.dlg_btn_Cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface paramDialogInterface, int paramInt) {                // TODO: Limit app on pessimism... improve 'no gps' hint for better UX-_-)                Log.w(TAG, \"User cancelled setting Location amendment - closing app\");                callingActivity.finish();            }        });        aldb_AskLocationSettings.show();    }    /**     * Hide the AlertDialog (can't call function 'dismiss' on Builder, hence calling show to dismiss specific 'AlertDialog' object)     */    public static void hideDialogToTurnOnLocationSettings() {        AlertDialog thisExtractedAlertDialogFromBuilder = aldb_AskLocationSettings.show();        if (thisExtractedAlertDialogFromBuilder != null) {            Log.e(TAG, \"HomeActivity DISMISSING thisExtractedAlertDialogFromBuilder++++++++++++++++++++++++++\");            thisExtractedAlertDialogFromBuilder.dismiss();   //rename above method too I guess?        }    }    /**     * Redirect user to device Location/GPS Settings     * @param callingActivity     */    public static void goToLocationSettings(Activity callingActivity) {        Log.e(TAG, \"User clicked For Settings\");        Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);        callingActivity.startActivity(intent);    }    /**     * Go To Login Activity     */    public static void goToLoginActivity(Activity callingActivity) {        Intent viewHistoryIntent = new Intent(callingActivity, LoginActivity.class);        LHUtil.imprintActivityAsOriginOfIntent(LHConstants.CLASS_NAME_HOME_ACTIVITY, viewHistoryIntent);        callingActivity.startActivity(viewHistoryIntent);    }    /**     * Requests last recorded location via the FusedApi     * @param context     * @param googleApiClient     * @return     */    public static Location requestLastFusedLocation(Context context, GoogleApiClient googleApiClient) {        checkForFineLocationPermission(context);        lastKnownFusedLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);        if (lastKnownFusedLocation != null) {            Log.d(TAG, \"requestLastFusedLocation: \" + lastKnownFusedLocation.toString());            addToFoundLocations(lastKnownFusedLocation);            return lastKnownFusedLocation;        } else {            Log.e(TAG, \"requestLastFusedLocation: NULL\");            return null;        }    }    /**     * Setup/Configuration of Location Updates i.e. frequency and accuracy level of location requests     * Android has two location request settings: {ACCESS_COARSE_LOCATION} and {ACCESS_FINE_LOCATION}, as defined in the AndroidManifest.xml     * These settings control the accuracy of the current location.     */    private static void setUpLocationRequest(int intervalForEachUpdateInMilliseconds, int fastestIntervalForEachUpdateInMilliseconds) {        locationRequest = LocationRequest.create();        /**         * Sets the desired interval for active location updates. This interval is inexact.         * You may not receive updates at all if no location sources are available, or you may receive them slower than requested.         * You may also receive updates faster than requested if other applications are requesting location at a faster interval.          */        locationRequest.setInterval(intervalForEachUpdateInMilliseconds);        // Sets the fastest rate for active location updates. This interval is exact, and the app will never receive updates faster than this value.        locationRequest.setFastestInterval(fastestIntervalForEachUpdateInMilliseconds);        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);    }    /**     * Starts listening a limited number of times to avoid wasting battery     * ??? Don't understand why activity needs to be final     * @param callingActivity     * @param googleApiClient     */    public static void startListening(final Activity callingActivity, final GoogleApiClient googleApiClient) {        Log.e(TAG, \"startListening...\");        locationListener = new LocationListener() {            @Override            public void onLocationChanged(Location changedLocation) {                Log.e(TAG, \"Location Changed: \" + changedLocation.getLatitude() + \"|\" + changedLocation.getLongitude() + \"|Accuracy:\" + changedLocation.getAccuracy() + \"%\");//                Toast.makeText(callingActivity, \"Location Changed: \" + changedLocation.getLatitude() + \"|\" + changedLocation.getLongitude() + \"|Accuracy:\" + changedLocation.getAccuracy() +\"%\", Toast.LENGTH_SHORT).show();                if(changedLocation!=null) {                    Log.e(TAG, \"|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|\");                    Log.e(TAG, \"|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|\");                    Log.e(TAG, \"|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|_*_|\");//                    GeoUtil.requestLastFusedLocation(callingActivity, googleApiClient);                    if(GeoUtil.getBestLocationPicked()!=null) {                        Log.e(TAG, \"YES YES YES\");                        if(GeoUtil.isFlagReturningFromLocationSettings()) {                            GeoUtil.setFlagReturningFromLocationSettings(false);    //Cease use of the flag since it has now already been triggered                        }                        GeoUtil.updateMapWithNewBestLocation(callingActivity);                        GeoUtil.updateTextViewWithNewBestLocation();                        UXUtil.dismissAwaitingLocationUpdateProgressDialog();                    } else {                        Log.e(TAG, \"Changed Location yet Null?\");                        CrashUtil.logCustomUserEvent(\"Changed Location yet Null?\", \"\");                        electOmegaLocation();                        GeoUtil.goToLoginActivity(callingActivity);     //restart the whole process, so that the UI is refreshed                    }                } else {                    Log.e(TAG, \"|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|\");                    Log.e(TAG, \"|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|\");                    Log.e(TAG, \"|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|_-_|\");                }                countDownLocationUpdateCounter();                stopLocationUpdatesIfCountIsZero(callingActivity, googleApiClient);                addToFoundLocations(changedLocation);            }        };        checkForFineLocationPermission(callingActivity);        LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, locationListener);    }    public static void resetLocationUpdateCounterLimit(int maxTimesToConsiderLocationChange) {        Log.i(TAG, \"Location Update Counter reset!\");        timesToConsiderLocationChange = maxTimesToConsiderLocationChange;    }    public static void countDownLocationUpdateCounter() {        Log.i(TAG, \"Location Update Counter count:\" + timesToConsiderLocationChange);        timesToConsiderLocationChange--;    }    /**     * Stops Location Updates if less than or equals to 0, and make second update to edittext for a more optimal location     * @param callingActivity     * @param googleApiClient     */    public static void stopLocationUpdatesIfCountIsZero(Activity callingActivity, GoogleApiClient googleApiClient) {        if(timesToConsiderLocationChange<=0) {            Log.i(TAG, \"|Reached Location Updates Limit|\");            stopLocationUpdates(googleApiClient);        }    }    public static void addToFoundLocations(Location foundLocation) {        if(listOfAllFoundLocations==null) {            Log.e(TAG, \"Adding first location, initialising list.\");            listOfAllFoundLocations = new ArrayList<>();        }        listOfAllFoundLocations.add(foundLocation);    }    /**     * Cleans past location history stored in List     */    public static void resetFoundLocations() {        setListOfAllFoundLocations(new ArrayList<Location>());    }    /**     * The logic of deciding when new fixes are no longer necessary-_-)     * A short gap between when the location is acquired and when the location is used, improves the accuracy of the estimate.     * It is a good practice to remove location requests when the activity is in a paused/stopped state     * Listening for a long time consumes a lot of battery power, so should stop listening for updates eventually     * Removes location updates from the FusedLocationApi.     */    public static void stopLocationUpdates(GoogleApiClient googleApiClient) {        Log.e(TAG, \"Stop location updates...\");        if (googleApiClient != null) {            if(locationListener!=null) {                Log.i(TAG, \"stopLocationUpdates - LOCATION LISTENER NOT NULL\");                LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, locationListener);            } else {                Log.e(TAG, \"stopLocationUpdates - LOCATION LISTENER IS NULL\");            }        }    }    /**     * Start listening for location updates for a certain amount of updates under certain intervals (in milliseconds)     * @param callingActivity     * @param googleApiClient     * @param maxAmountOfLocationUpdates     * @param timePerLocationUpdate     */    public static void startSecondThoughtsOnLocation(Activity callingActivity, GoogleApiClient googleApiClient, int maxAmountOfLocationUpdates, int timePerLocationUpdate) {        resetLocationUpdateCounterLimit(maxAmountOfLocationUpdates);        setUpLocationRequest(timePerLocationUpdate, timePerLocationUpdate);        startListening(callingActivity, googleApiClient);    }    /**     * Extracts locations from only the providers which are currently enabled for device i.e. default, GPS and Mobile Network     * @param context     */    public static void extractAllProviderLocations(Context context) {        checkForFineLocationPermission(context);        locationManager = (LocationManager)context.getApplicationContext().getSystemService(Context.LOCATION_SERVICE);        List<String> listOfProviders = locationManager.getProviders(true);        Log.i(TAG, \"getLastKnownLocation - Providers:\" + listOfProviders.toString());   //TODO: Figure out why fused provider is not showing on list , currently prints '[passive, gps, network]'        for (String eachProvider : listOfProviders) {            Location providerLocation = locationManager.getLastKnownLocation(eachProvider);            addToFoundLocations(providerLocation);        }    }    /**     * Returns true if there is an electable location available     * @return     */    public static boolean hasLocationAvailable() {        return (listOfAllFoundLocations.size()>0);    }    /**     * Picks the best location via weaker/shallow criteria from 'listOfAllFoundLocations' which has locations from providers, listeners updates, and FusedApi     */    public static void electAlphaLocation() {        Log.e(TAG, \"electAlphaLocation - Choosing from \" + getListOfAllFoundLocations().size() + \" locations...\");        bestLocationPicked = null;        for (Location eachLocation : listOfAllFoundLocations) {            if (eachLocation == null) {                Log.w(TAG, \"electAlphaLocation - A null location found!\");                continue;            }            if (bestLocationPicked == null || eachLocation.getAccuracy() < bestLocationPicked.getAccuracy()) {                Log.e(TAG, \"electAlphaLocation - Optimal location picked from source: \" + eachLocation.getProvider() + \" | \" + eachLocation.toString());                setBestLocationPicked(eachLocation);            }        }    }    /**     * Picks the best location via stronger/deep criteria from 'listOfAllFoundLocations' which has locations from providers, listeners updates, and FusedApi     */    public static void electOmegaLocation() {        Log.e(TAG, \"electOmegaLocation - Choosing from \" + getListOfAllFoundLocations().size() + \" locations...\");        bestLocationPicked = null;        for (Location eachLocation : listOfAllFoundLocations) {            if (eachLocation == null) {                Log.w(TAG, \"electOmegaLocation - A null location found!\");                continue;            }            if (isBetterLocation(eachLocation, bestLocationPicked)) {                setBestLocationPicked(eachLocation);            }        }        //Issue tracking code TODO: Remove once resolved        if( (bestLocationPicked==null) || (bestLocationPicked.getProvider()==null) )    {            if(bestLocationPicked==null) {                CrashUtil.logCustomUserEvent(\"Ξ LocationProvider = ∅\", \"bestLocationPicked is Null\");                Log.e(TAG, \"electOmegaLocation - LocationPicked is NULL!!\");            } else {                if(bestLocationPicked.getProvider()==null) {                    CrashUtil.logCustomUserEvent(\"Ξ LocationProvider = ∅\", \"bestLocationPicked.getProvider() is Null\");                    Log.e(TAG, \"electOmegaLocation - Provider is NULL!!\" + bestLocationPicked.getProvider() );                }            }        } else {            Log.i(TAG, \"electOmegaLocation - Optimal location picked from source: \" + bestLocationPicked.getProvider() + \" | \" + bestLocationPicked.toString());        }    }    /**     * Determines whether new Location reading is better than the current Location fix     * - Check if the location retrieved is significantly newer than the previous estimate.     * - Check if the accuracy claimed by the location is better or worse than the previous estimate.     * - Check which provider the new location is from and determine if you trust it more.     * @param newLocation  The new Location that you want to evaluate     * @param currentBestLocation  The current Location fix, to which you want to compare the new one     */    protected static boolean isBetterLocation(Location newLocation, Location currentBestLocation) {        if (currentBestLocation == null) {            // A new location is always better than no location            return true;        }        // Check whether the new location fix is newer or older        long timeDelta = newLocation.getTime() - currentBestLocation.getTime();        boolean isSignificantlyNewer = timeDelta > LHConstants.MILLISECONDS_FOR_TWO_MINUTES;        boolean isSignificantlyOlder = timeDelta < -LHConstants.MILLISECONDS_FOR_TWO_MINUTES;        boolean isNewer = timeDelta > 0;        // If it's been more than two minutes since the current location, use the new location        // because the user has likely moved        if (isSignificantlyNewer) {            return true;            // If the new location is more than two minutes older, it must be worse        } else if (isSignificantlyOlder) {            return false;        }        // Check whether the new location fix is more or less accurate        int accuracyDelta = (int) (newLocation.getAccuracy() - currentBestLocation.getAccuracy());        boolean isLessAccurate = accuracyDelta > 0;        boolean isMoreAccurate = accuracyDelta < 0;        boolean isSignificantlyLessAccurate = accuracyDelta > 200;        // Check if the old and new location are from the same provider        boolean isFromSameProvider = isSameProvider(newLocation.getProvider(),                currentBestLocation.getProvider());        // Determine location quality using a combination of timeliness and accuracy        if (isMoreAccurate) {            return true;        } else if (isNewer && !isLessAccurate) {            return true;        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {            return true;        }        return false;    }    /** Checks whether two providers are the same */    private static boolean isSameProvider(String provider1, String provider2) {        if (provider1 == null) {            return provider2 == null;        }        return provider1.equals(provider2);    }    /**     * Checks the device's current state of settings for GPS and Mobile network     * RESEARCH: ??? Still not sure why the device reports net as 'network_Enabled' in cases where GPS is on but all online settings are disabled, might be that network enabled GPS is always on with GPS or it is related to the 'passive' provider namespace     * @param context     * @return     */    public static boolean checkGPSNETSettings(Context context) {        locationManager = (LocationManager)context.getSystemService(Context.LOCATION_SERVICE);        boolean gps_Enabled = false;        //Current status of GPS        boolean network_Enabled = false;    //Current status of ...not sure_-)        try {            network_Enabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);            Log.i(TAG, \"NET_PROVIDER_ENABLED:\" + network_Enabled);        } catch(Exception ex) {}        try {            gps_Enabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);            Log.i(TAG, \"GPS_PROVIDER_ENABLED:\" + gps_Enabled);        } catch(Exception ex) {}        if(gps_Enabled==false && network_Enabled==false) {            currentLocationSettingState = false;        } else {            //All systems are go!            currentLocationSettingState = true;        }        Log.d(TAG, \"Location Settings State:\" + currentLocationSettingState);        return currentLocationSettingState;    }    public static boolean isCurrentLocationSettingState() {        return currentLocationSettingState;    }    public static void setCurrentLocationSettingState(boolean currentLocationSettingState) {        GeoUtil.currentLocationSettingState = currentLocationSettingState;    }    public static boolean isFlagReturningFromLocationSettings() {        return flagReturningFromLocationSettings;    }    public static void setFlagReturningFromLocationSettings(boolean flagReturningFromLocationSettings) {        GeoUtil.flagReturningFromLocationSettings = flagReturningFromLocationSettings;    }    public static Location getBestLocationPicked() {        return bestLocationPicked;    }    public static void setBestLocationPicked(Location bestLocationPicked) {        GeoUtil.bestLocationPicked = bestLocationPicked;    }    public static LatLng getBestLocationAsLatLng() {        return new LatLng(GeoUtil.getBestLocationPicked().getLatitude(), GeoUtil.getBestLocationPicked().getLongitude());    }    public static String getBestLocationAsLatLngSeparatedString() {        return GeoUtil.getBestLocationPicked().getLatitude() + \"#\" + GeoUtil.getBestLocationPicked().getLongitude();    }    public static List<Location> getListOfAllFoundLocations() {        return listOfAllFoundLocations;    }    public static void setListOfAllFoundLocations(List<Location> listOfAllFoundLocations) {        GeoUtil.listOfAllFoundLocations = listOfAllFoundLocations;    }    public static TextView getTv_ToUpdateWithLocation() {        return tv_ToUpdateWithLocation;    }    /**     * Updates text view for future location updates     * @param tv_ToUpdateWithLocation     */    public static void setTv_ToUpdateWithLocation(TextView tv_ToUpdateWithLocation) {        GeoUtil.tv_ToUpdateWithLocation = tv_ToUpdateWithLocation;    }    /**     * Updates TextView with new best location found     */    public static void updateTextViewWithNewBestLocation() {        String newBestLocation = translateLocationDEGtoDMSString(bestLocationPicked);        Log.e(TAG, \"updateTextViewWithNewBestLocation - TV updated with String '\" + newBestLocation + \"'\");        getTv_ToUpdateWithLocation().setText(newBestLocation);    }    /**     * Translates Location to String object of Latitude & Longitude degrees     * @param locationToTranslate     * @return     */    public static String translateLocationToLatLngString(Location locationToTranslate) {        return locationToTranslate.getLatitude() + \", \" + locationToTranslate.getLongitude();    }    /**     * Translates Location to String object of Latitude, Longitude, & Accuracy degrees     * @param locationToTranslate     * @return     */    public static String translateLocationToLatLngAccString(Location locationToTranslate) {        return \"|\" + locationToTranslate.getLatitude() + \", \" + locationToTranslate.getLongitude() + \"| \" + locationToTranslate.getAccuracy() + \"%\";    }    /**     * Translates Location to String object of Degrees, Minutes, & Seconds e.g. 40° 26′ 46″ N 79° 58′ 56″ W     * @param locationToTranslate     * @return     */    public static String translateLocationDEGtoDMSString(Location locationToTranslate) {        String strDMSNorth, strDMSWest;        strDMSNorth = locationToTranslate.convert(locationToTranslate.getLatitude(), locationToTranslate.FORMAT_SECONDS);        strDMSWest = locationToTranslate.convert(locationToTranslate.getLongitude(), locationToTranslate.FORMAT_SECONDS);        strDMSNorth = formatDMSSymbols(strDMSNorth) + \"N\";        strDMSWest = formatDMSSymbols(strDMSWest) + \"W\";        Log.e(TAG, \"LatLng-DMS: \" + strDMSNorth + strDMSWest);//        return strDMSNorth + \"  \" + strDMSWest + \" (\" + locationToTranslate.getAccuracy() + \"%)\";        return strDMSNorth + \"  \" + strDMSWest;    }    public static String formatDMSSymbols(String DMSwithColonSeparator) {        String[] DMS_Array = DMSwithColonSeparator.split(\":\");        int degrees, minutes;        double seconds;        degrees = Integer.parseInt(DMS_Array[0]);        minutes = Integer.parseInt(DMS_Array[1]);        seconds = Double.parseDouble(DMS_Array[2]);        return degrees + \"° \" + minutes + \"' \" + seconds + \"\\\" \";    }    public static boolean isPermittedForLocation() {        return isPermittedForLocation;    }    public static void setIsPermittedForLocation(boolean isPermittedForLocation) {        GeoUtil.isPermittedForLocation = isPermittedForLocation;    }    /**     * Follows user's intent to allow location permissions     */    public static void setAppToNowAllowLocationPermission() {        GeoUtil.setIsPermittedForLocation(true);    }// Map related functions below TODO: Move to MapUtil?-----------------------------------------------    /**     * Updates Map for future location updates     * @param map_ToUpdateWithLocation     */    public static void setMap_ToUpdateWithLocation(GoogleMap map_ToUpdateWithLocation) {        GeoUtil.map_ToUpdateWithLocation = map_ToUpdateWithLocation;    }    /**     * Updates TextView with new best location found     */    public static void updateMapWithNewBestLocation(Context context) {        Log.e(TAG, \"updateMapWithNewBestLocation - Map updated\");        MarkerOptions markerSetup;        Marker locationMarker;        LatLng latLng = getBestLocationAsLatLng();//        map_ToUpdateWithLocation.clear();        markerSetup = new MarkerOptions();                    //Configure marker in current location w/title        markerSetup.position(latLng);        markerSetup.title(context.getString(R.string.map_youarehere));        locationMarker = map_ToUpdateWithLocation.addMarker(markerSetup);        //setMapCamera(CameraUpdateFactory.newLatLng(latLng), 17.0f);        setMapCameraAtLocation(latLng, 17.0f);//        UXUtil.dismissAwaitingLocationUpdateProgressDialog();        locationMarker.showInfoWindow();                                    //Default action is to display title window w/o requiring user-click    }    /**     * Move the camera and zoom accordingly     * @param cameraUpdate     * @param zoomLevel     */    public static void setMapCamera(CameraUpdate cameraUpdate, float zoomLevel) {        map_ToUpdateWithLocation.moveCamera(cameraUpdate);    //Move the camera to focus        map_ToUpdateWithLocation.animateCamera(CameraUpdateFactory.zoomTo(zoomLevel) );    }    /**     * Move the camera and zoom accordingly     * Used this when     * Source: http://stackoverflow.com/questions/14074129/google-maps-v2-set-both-my-location-and-zoom-in     * @param latLngToView     * @param zoomLevel     */    public static void setMapCameraAtLocation(LatLng latLngToView, float zoomLevel) {        CameraPosition cameraPosition = new CameraPosition.Builder()                .target(latLngToView)       // Sets the center of the map to LatLng                .zoom(zoomLevel)            // Sets the zoom                .build();                   // Creates a CameraPosition from the builder        map_ToUpdateWithLocation.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));    }//--------------------------------------------------------------------------------------------------//SERVICES------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------    /**     * Service to get the country code via LatLng, using JSON read by dedicated package 'com.lh.ctrl.service.gcgm.googleGC'     * sample https://maps.googleapis.com/maps/api/geocode/json?latlng=53.406601,%20-6.393833     */    public static List <String> getReversedGeoCodeListFromLatLng(double lat, double lng) {        Log.i(TAG, \"getReversedGeoCodeListFromLatLng--------------------------------------\");        geocodeResult = new ArrayList<>();        String formatted_address = LHConstants.EMPTY;        String locality = LHConstants.EMPTY;        String countryName = LHConstants.EMPTY;        String countryCode = LHConstants.EMPTY;        Gson gson = new Gson();        GoogleReverseGeocode gGC = null;//        String myPlace = SampleJSON.myPlaceJSON;//        String myPlaceURL = executePost(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=53.406601,-6.393833\", null);        String myPlace = null;        try {            myPlace = new SimpleGMLocationPost().execute(String.valueOf(lat), String.valueOf(lng)).get();            if(myPlace!=null) {                Log.i(TAG, \"JSON--------------------------------------\" + myPlace.replaceAll(\"[\\r\\n]+\", \" \" ) );            }            gGC = gson.fromJson(myPlace, GoogleReverseGeocode.class);        } catch (InterruptedException e) {            CrashUtil.logCustomUserEvent(\"Ξ RG Interrupted Exception\", e.getMessage());            Log.e(TAG, \"Ξ RG Interrupted Exception\");            e.printStackTrace();        } catch (ExecutionException e) {            CrashUtil.logCustomUserEvent(\"Ξ RG Execution Exception\", e.getMessage());            Log.e(TAG, \"Ξ RG Execution Exception\");            e.printStackTrace();        } catch (NullPointerException e) {            CrashUtil.logCustomUserEvent(\"Ξ RG Null Pointer Exception\", e.getMessage());            Log.e(TAG, \"Ξ RG Null Pointer Exception\");            e.printStackTrace();        }        //GoogleReverseGeocode gGC = gson.fromJson(myPlace, GoogleReverseGeocode.class);        if(gGC==null) {            CrashUtil.logCustomUserEvent(\"Ξ Null Geocode\", \"\");            Log.e(TAG, \"Ξ Null Geocode\");        } else {            List<Result> allResults = gGC.getResults();            for(Result eachResult:allResults) {                List<AddressComponent> allAddressComponents = eachResult.getAddressComponents();                //Add formatted_address only first-time/once...                if(formatted_address.equals(LHConstants.EMPTY)) { formatted_address = eachResult.getFormattedAddress(); Log.i(TAG, \"FIRST-TIME ADD - formatted_address\"); }                Log.i(TAG, \"Address Components found:\" + allAddressComponents.size());                for(AddressComponent eachAddress:allAddressComponents) {                    if(eachAddress.getTypes().get(0).equals(\"locality\")) {                        if(locality.equals(LHConstants.EMPTY)) { locality = eachAddress.getShortName();  Log.i(TAG, \"FIRST-TIME ADD - locality\"); }   //Add locality only first-time/once...                    }                    if(eachAddress.getTypes().get(0).equals(\"country\")) {   //Add country data only first-time/once...                        if(countryName.equals(LHConstants.EMPTY)) { countryName = eachAddress.getLongName();   Log.i(TAG, \"FIRST-TIME ADD - countryName\"); }                        if(countryCode.equals(LHConstants.EMPTY)) { countryCode = eachAddress.getShortName();   Log.i(TAG, \"FIRST-TIME ADD - countryCode\"); }                    }                    //Add formatted address only first-time/once...                    if(!formatted_address.equals(LHConstants.EMPTY) && !locality.equals(LHConstants.EMPTY) && !countryCode.equals(LHConstants.EMPTY)) {                        Log.i(TAG, \"Retrieved data, escaping inner read loop...\");                        break;                    }                }                Log.i(TAG, \"Retrieved data, escaping outer read loop... End of data search.\");                break;            }        }        geocodeResult.add(formatted_address);        geocodeResult.add(locality);        geocodeResult.add(countryName);        geocodeResult.add(countryCode);        Log.e(TAG, geocodeResult.toString());       //TODO: Might store this full address for a mark        return geocodeResult;    }    public static List <String> getReversedGeoCodeListFromLocation(Context currentContext, Location location) {        Log.i(TAG, \"_-_-_Calling func getCountryFromLocation\");        geocodeResult = new ArrayList<>();        geocoder = new Geocoder(currentContext);        List<Address> addresses = null;        try {            addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);        } catch (IOException e) {            e.printStackTrace();        }        if (addresses!=null) {            Log.i(TAG, addresses.get(0).getCountryName() + \"(\"+addresses.get(0).getAddressLine(0)+\", \" +  addresses.get(0).getAddressLine(1)+\")\" + \"\\n\" + addresses.get(0).toString());            Address tempAddress = addresses.get(0);                 //Extract just first result            geocodeResult.add(tempAddress.getAddressLine(0));       //First Address Line e.g. 'Church Rd'            geocodeResult.add(tempAddress.getAddressLine(1));       //Second Address Line e.g. 'Dublin'            geocodeResult.add(tempAddress.getCountryName());        //Country name e.g. Ireland            geocodeResult.add(tempAddress.getCountryCode());        //Country Code e.g. 'IE'        } else {            Log.w(TAG, \"No results from GeoCoder...\");        }        return geocodeResult;    }}","code_tokens":["public","class","geo","util","{","private","static","string","tag","=","lh","constants",".","symbol","xi","+","\"","geo","util","\"",";","private","static","location","manager","location","manager",";","private","static","location","listener","location","listener",";","private","static","location","request","location","request",";","private","static","location","last","known","fused","location",";","private","static","list","<","location",">","list","of","all","found","locations",";","/","/","all","gathered","locations","are","collected","here","for","election","private","static","location","best","location","picked",";","/","/","the","elected","location","from","all","gathered","locations","private","static","int","times","to","consider","location","change",";","/","/","amount","of","location","updates","allowed","for","further","consideration","private","static","boolean","is","permitted","for","location","=","false",";","/","/","helps","log","permission","on","an","app","-","scope","level","with","the","device",",","avoids","first","-","time","location","request","@","on","connected","(",")","to","crash","due","to","permission","dialog","(","specifically","android","m",")","note",":","just","app","permissions",",","not","user","settings","changes","/","/","map","variables","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","private","static","text","view","tv","to","update","with","location",";","/","/","text","view","which","will","be","updated","with","the","current","/","best","location","private","static","google","map","map","to","update","with","location",";","/","/","google","map","which","will","be","updated","with","the","current","/","best","location","private","static","lat","lng","[","]","single","lat","lng","to","mark",";","/","/","used","for","map","to","avoid","having","multiple","markers","/","/","service","variables","private","static","geocoder","geocoder",";","/","/","used","to","get","country","name","from","lat","lng","or","even","text",",","with","even","specific","data","about","street","addresses","too","private","static","array","list","<","string",">","geocode","result",";","private","static","boolean","current","location","setting","state",";","/","/","current","status","of","both","location","providers","(","gps","/","network",")","private","static","alert","dialog",".","builder","aldb","ask","location","settings",";","/","/","alert","dialog","from","this","builder","used","to","ask","user","for","location","settings","to","be","enabled","private","static","boolean","flag","returning","from","location","settings",";","/","/","flag","used","to","signify","this","activity","is","being","started","after","returning","from","location","settings","public","static","location","where","am","i","now","(","activity","calling","activity",",","google","api","client","google","api","client",",","text","view","text","view","to","control",",","google","map","google","map","to","control",")","{","/","/","reference","views","to","update","with","new","data","set","map","to","update","with","location","(","google","map","to","control",")",";","set","tv","to","update","with","location","(","text","view","to","control",")",";","/","/","get","instant","locations","list","and","pick","one","log",".","e","(","tag",",","\"","where","am","i","now","?","\"",")",";","if","(","request","last","fused","location","(","calling","activity",",","google","api","client",")","=","=","null",")","{","log",".","e","(","tag",",","\"","where","am","i","now","-","null","last","fused","location","api","\"",")",";","}","else","{","log",".","e","(","tag",",","\"","where","am","i","now","-","last","fused","location","found",",","proceeding","to","search","for","optimal","location","\"",")",";","}","extract","all","provider","locations","(","calling","activity",")",";","elect","omega","location","(",")",";","/","/","allow","for","a","change","of","mind","for","a","second","thought","with","a","'","location","changed","'","update","(","s",")","start","second","thoughts","on","location","(","calling","activity",",","google","api","client",",","lh","constants",".","locreq","max","location","changes","allowed","onetime",",","lh","constants",".","locreq","3000","milliseconds","per","location","update",")",";","if","(","best","location","picked","!","=","null",")","{","/","/","first","location","update","for","text","view","log",".","e","(","tag",",","\"","where","am","i","now","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","best","location","picked","!","=","null","\"",")",";","update","map","with","new","best","location","(","calling","activity",")",";","update","text","view","with","new","best","location","(",")",";","/","/","dismiss","after","final","location","guess","&","map","update","ux","util",".","dismiss","location","update","progress","dialog","(",")",";","crash","util",".","log","custom","user","event","(","\"","user","location","completed","\"",",","\"","\"",")",";","}","else","{","log",".","e","(","tag",",","\"","where","am","i","now","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","best","location","picked","=","=","null","\"",")",";","}","return","get","best","location","picked","(",")",";","}","public","static","boolean","check","for","fine","location","permission","(","context","context",")","{","/","/","register","the","listener","with","the","location","manager","to","receive","location","updates","if","(","activity","compat",".","check","self","permission","(","context",",","android",".","manifest",".","permission",".","access","fine","location",")","=","=","package","manager",".","permission","granted",")","{","return","true",";","}","else","{","/","/","log",".","i","(","tag",",","\"","check","for","fine","location","permission","-","false","\"",")",";","return","false",";","}","}","public","static","boolean","may","request","location","permissions","(","activity","calling","activity",")","{","log",".","e","(","tag",",","\"","may","request","locations","1",".","version",":","\"","+","build",".","version",".","sdk","int",")",";","if","(","build",".","version",".","sdk","int","<","build",".","version","codes",".","m",")","{","is","permitted","for","location","=","true",";","return","true",";","}","if","(","activity","compat",".","check","self","permission","(","calling","activity",",","android",".","manifest",".","permission",".","access","fine","location",")","=","=","package","manager",".","permission","granted",")","{","log",".","e","(","tag",",","\"","may","request","locations","2",".","permission","granted","\"",")",";","is","permitted","for","location","=","true",";","return","true",";","}","/","/","todo",":","should","i","show","an","explanation","?","if","(","activity","compat",".","should","show","request","permission","rationale","(","calling","activity",",","android",".","manifest",".","permission",".","access","fine","location",")",")","{","log",".","e","(","tag",",","\"","may","request","locations","3",".","should","show","request","permission","rationale","\"",")",";","}","else","{","log",".","e","(","\"","may","request","locations","\"",",","\"","3",".","request","permissions","\"",")",";","activity","compat",".","request","permissions","(","calling","activity",",","new","string","[","]","{","android",".","manifest",".","permission",".","access","fine","location","}",",","lh","constants",".","perm","request","code","fine","location",")",";","}","return","false",";","}","public","static","void","ask","to","turn","location","settings","on","(","final","activity","calling","activity",",","final","google","api","client","google","api","client",")","{","log",".","w","(","tag",",","\"","asking","user","to","turn","on","location",".",".",".","\"",")",";","/","/","1",".","instantiate","an","alert","dialog",".","builder","with","its","constructor","aldb","ask","location","settings","=","new","alert","dialog",".","builder","(","calling","activity",")",";","/","/","2",".","chain","together","various","setter","methods","to","set","the","dialog","characteristics","aldb","ask","location","settings",".","set","title","(","calling","activity",".","get","string","(","r",".","string",".","dlg","title","gps","network","not","enabled",")",")",";","aldb","ask","location","settings",".","set","message","(","calling","activity",".","get","string","(","r",".","string",".","dlg","message","gps","network","not","enabled",")",")",";","aldb","ask","location","settings",".","set","positive","button","(","calling","activity",".","get","string","(","r",".","string",".","dlg","btn","open","location","settings",")",",","new","dialog","interface",".","on","click","listener","(",")","{","@","override","public","void","on","click","(","dialog","interface","param","dialog","interface",",","int","param","int",")","{","/","/","ux","util",".","show","awaiting","location","update","progress","dialog","(","calling","activity",",","calling","activity",".","get","string","(","r",".","string",".","pd","spinner","awaiting","location","update","title",")",",","calling","activity",".","get","string","(","r",".","string",".","pd","spinner","awaiting","location","update","message",")",")",";","start","second","thoughts","on","location","(","calling","activity",",","google","api","client",",","lh","constants",".","locreq","max","location","changes","allowed","fivetimes",",","lh","constants",".","locreq","5000","milliseconds","per","location","update",")",";","go","to","location","settings","(","calling","activity",")",";","hide","dialog","to","turn","on","location","settings","(",")",";","/","/","hide","this","dialog","set","flag","returning","from","location","settings","(","true",")",";","/","/","set","to","true","to","remind","an","activity","that","app","is","returning","from","settings","}","}",")",";","aldb","ask","location","settings",".","set","negative","button","(","calling","activity",".","get","string","(","r",".","string",".","dlg","btn","cancel",")",",","new","dialog","interface",".","on","click","listener","(",")","{","@","override","public","void","on","click","(","dialog","interface","param","dialog","interface",",","int","param","int",")","{","/","/","todo",":","limit","app","on","pessimism",".",".",".","improve","'","no","gps","'","hint","for","better","ux","-","-",")","log",".","w","(","tag",",","\"","user","cancelled","setting","location","amendment","-","closing","app","\"",")",";","calling","activity",".","finish","(",")",";","}","}",")",";","aldb","ask","location","settings",".","show","(",")",";","}","public","static","void","hide","dialog","to","turn","on","location","settings","(",")","{","alert","dialog","this","extracted","alert","dialog","from","builder","=","aldb","ask","location","settings",".","show","(",")",";","if","(","this","extracted","alert","dialog","from","builder","!","=","null",")","{","log",".","e","(","tag",",","\"","home","activity","dismissing","this","extracted","alert","dialog","from","builder","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","\"",")",";","this","extracted","alert","dialog","from","builder",".","dismiss","(",")",";","/","/","rename","above","method","too","i","guess","?","}","}","public","static","void","go","to","location","settings","(","activity","calling","activity",")","{","log",".","e","(","tag",",","\"","user","clicked","for","settings","\"",")",";","intent","intent","=","new","intent","(","settings",".","action","location","source","settings",")",";","calling","activity",".","start","activity","(","intent",")",";","}","public","static","void","go","to","login","activity","(","activity","calling","activity",")","{","intent","view","history","intent","=","new","intent","(","calling","activity",",","login","activity",".","class",")",";","lh","util",".","imprint","activity","as","origin","of","intent","(","lh","constants",".","class","name","home","activity",",","view","history","intent",")",";","calling","activity",".","start","activity","(","view","history","intent",")",";","}","public","static","location","request","last","fused","location","(","context","context",",","google","api","client","google","api","client",")","{","check","for","fine","location","permission","(","context",")",";","last","known","fused","location","=","location","services",".","fused","location","api",".","get","last","location","(","google","api","client",")",";","if","(","last","known","fused","location","!","=","null",")","{","log",".","d","(","tag",",","\"","request","last","fused","location",":","\"","+","last","known","fused","location",".","to","string","(",")",")",";","add","to","found","locations","(","last","known","fused","location",")",";","return","last","known","fused","location",";","}","else","{","log",".","e","(","tag",",","\"","request","last","fused","location",":","null","\"",")",";","return","null",";","}","}","private","static","void","set","up","location","request","(","int","interval","for","each","update","in","milliseconds",",","int","fastest","interval","for","each","update","in","milliseconds",")","{","location","request","=","location","request",".","create","(",")",";","location","request",".","set","interval","(","interval","for","each","update","in","milliseconds",")",";","/","/","sets","the","fastest","rate","for","active","location","updates",".","this","interval","is","exact",",","and","the","app","will","never","receive","updates","faster","than","this","value",".","location","request",".","set","fastest","interval","(","fastest","interval","for","each","update","in","milliseconds",")",";","location","request",".","set","priority","(","location","request",".","priority","high","accuracy",")",";","}","public","static","void","start","listening","(","final","activity","calling","activity",",","final","google","api","client","google","api","client",")","{","log",".","e","(","tag",",","\"","start","listening",".",".",".","\"",")",";","location","listener","=","new","location","listener","(",")","{","@","override","public","void","on","location","changed","(","location","changed","location",")","{","log",".","e","(","tag",",","\"","location","changed",":","\"","+","changed","location",".","get","latitude","(",")","+","\"","|","\"","+","changed","location",".","get","longitude","(",")","+","\"","|","accuracy",":","\"","+","changed","location",".","get","accuracy","(",")","+","\"","%","\"",")",";","/","/","toast",".","make","text","(","calling","activity",",","\"","location","changed",":","\"","+","changed","location",".","get","latitude","(",")","+","\"","|","\"","+","changed","location",".","get","longitude","(",")","+","\"","|","accuracy",":","\"","+","changed","location",".","get","accuracy","(",")","+","\"","%","\"",",","toast",".","length","short",")",".","show","(",")",";","if","(","changed","location","!","=","null",")","{","log",".","e","(","tag",",","\"","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","\"",")",";","log",".","e","(","tag",",","\"","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","\"",")",";","log",".","e","(","tag",",","\"","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","*","|","\"",")",";","/","/","geo","util",".","request","last","fused","location","(","calling","activity",",","google","api","client",")",";","if","(","geo","util",".","get","best","location","picked","(",")","!","=","null",")","{","log",".","e","(","tag",",","\"","yes","yes","yes","\"",")",";","if","(","geo","util",".","is","flag","returning","from","location","settings","(",")",")","{","geo","util",".","set","flag","returning","from","location","settings","(","false",")",";","/","/","cease","use","of","the","flag","since","it","has","now","already","been","triggered","}","geo","util",".","update","map","with","new","best","location","(","calling","activity",")",";","geo","util",".","update","text","view","with","new","best","location","(",")",";","ux","util",".","dismiss","awaiting","location","update","progress","dialog","(",")",";","}","else","{","log",".","e","(","tag",",","\"","changed","location","yet","null","?","\"",")",";","crash","util",".","log","custom","user","event","(","\"","changed","location","yet","null","?","\"",",","\"","\"",")",";","elect","omega","location","(",")",";","geo","util",".","go","to","login","activity","(","calling","activity",")",";","/","/","restart","the","whole","process",",","so","that","the","ui","is","refreshed","}","}","else","{","log",".","e","(","tag",",","\"","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","\"",")",";","log",".","e","(","tag",",","\"","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","\"",")",";","log",".","e","(","tag",",","\"","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","-","|","\"",")",";","}","count","down","location","update","counter","(",")",";","stop","location","updates","if","count","is","zero","(","calling","activity",",","google","api","client",")",";","add","to","found","locations","(","changed","location",")",";","}","}",";","check","for","fine","location","permission","(","calling","activity",")",";","location","services",".","fused","location","api",".","request","location","updates","(","google","api","client",",","location","request",",","location","listener",")",";","}","public","static","void","reset","location","update","counter","limit","(","int","max","times","to","consider","location","change",")","{","log",".","i","(","tag",",","\"","location","update","counter","reset","!","\"",")",";","times","to","consider","location","change","=","max","times","to","consider","location","change",";","}","public","static","void","count","down","location","update","counter","(",")","{","log",".","i","(","tag",",","\"","location","update","counter","count",":","\"","+","times","to","consider","location","change",")",";","times","to","consider","location","change","-","-",";","}","public","static","void","stop","location","updates","if","count","is","zero","(","activity","calling","activity",",","google","api","client","google","api","client",")","{","if","(","times","to","consider","location","change","<","=","0",")","{","log",".","i","(","tag",",","\"","|","reached","location","updates","limit","|","\"",")",";","stop","location","updates","(","google","api","client",")",";","}","}","public","static","void","add","to","found","locations","(","location","found","location",")","{","if","(","list","of","all","found","locations","=","=","null",")","{","log",".","e","(","tag",",","\"","adding","first","location",",","initialising","list",".","\"",")",";","list","of","all","found","locations","=","new","array","list","<",">","(",")",";","}","list","of","all","found","locations",".","add","(","found","location",")",";","}","public","static","void","reset","found","locations","(",")","{","set","list","of","all","found","locations","(","new","array","list","<","location",">","(",")",")",";","}","public","static","void","stop","location","updates","(","google","api","client","google","api","client",")","{","log",".","e","(","tag",",","\"","stop","location","updates",".",".",".","\"",")",";","if","(","google","api","client","!","=","null",")","{","if","(","location","listener","!","=","null",")","{","log",".","i","(","tag",",","\"","stop","location","updates","-","location","listener","not","null","\"",")",";","location","services",".","fused","location","api",".","remove","location","updates","(","google","api","client",",","location","listener",")",";","}","else","{","log",".","e","(","tag",",","\"","stop","location","updates","-","location","listener","is","null","\"",")",";","}","}","}","public","static","void","start","second","thoughts","on","location","(","activity","calling","activity",",","google","api","client","google","api","client",",","int","max","amount","of","location","updates",",","int","time","per","location","update",")","{","reset","location","update","counter","limit","(","max","amount","of","location","updates",")",";","set","up","location","request","(","time","per","location","update",",","time","per","location","update",")",";","start","listening","(","calling","activity",",","google","api","client",")",";","}","public","static","void","extract","all","provider","locations","(","context","context",")","{","check","for","fine","location","permission","(","context",")",";","location","manager","=","(","location","manager",")","context",".","get","application","context","(",")",".","get","system","service","(","context",".","location","service",")",";","list","<","string",">","list","of","providers","=","location","manager",".","get","providers","(","true",")",";","log",".","i","(","tag",",","\"","get","last","known","location","-","providers",":","\"","+","list","of","providers",".","to","string","(",")",")",";","/","/","todo",":","figure","out","why","fused","provider","is","not","showing","on","list",",","currently","prints","'","[","passive",",","gps",",","network","]","'","for","(","string","each","provider",":","list","of","providers",")","{","location","provider","location","=","location","manager",".","get","last","known","location","(","each","provider",")",";","add","to","found","locations","(","provider","location",")",";","}","}","public","static","boolean","has","location","available","(",")","{","return","(","list","of","all","found","locations",".","size","(",")",">","0",")",";","}","public","static","void","elect","alpha","location","(",")","{","log",".","e","(","tag",",","\"","elect","alpha","location","-","choosing","from","\"","+","get","list","of","all","found","locations","(",")",".","size","(",")","+","\"","locations",".",".",".","\"",")",";","best","location","picked","=","null",";","for","(","location","each","location",":","list","of","all","found","locations",")","{","if","(","each","location","=","=","null",")","{","log",".","w","(","tag",",","\"","elect","alpha","location","-","a","null","location","found","!","\"",")",";","continue",";","}","if","(","best","location","picked","=","=","null","|","|","each","location",".","get","accuracy","(",")","<","best","location","picked",".","get","accuracy","(",")",")","{","log",".","e","(","tag",",","\"","elect","alpha","location","-","optimal","location","picked","from","source",":","\"","+","each","location",".","get","provider","(",")","+","\"","|","\"","+","each","location",".","to","string","(",")",")",";","set","best","location","picked","(","each","location",")",";","}","}","}","public","static","void","elect","omega","location","(",")","{","log",".","e","(","tag",",","\"","elect","omega","location","-","choosing","from","\"","+","get","list","of","all","found","locations","(",")",".","size","(",")","+","\"","locations",".",".",".","\"",")",";","best","location","picked","=","null",";","for","(","location","each","location",":","list","of","all","found","locations",")","{","if","(","each","location","=","=","null",")","{","log",".","w","(","tag",",","\"","elect","omega","location","-","a","null","location","found","!","\"",")",";","continue",";","}","if","(","is","better","location","(","each","location",",","best","location","picked",")",")","{","set","best","location","picked","(","each","location",")",";","}","}","/","/","issue","tracking","code","todo",":","remove","once","resolved","if","(","(","best","location","picked","=","=","null",")","|","|","(","best","location","picked",".","get","provider","(",")","=","=","null",")",")","{","if","(","best","location","picked","=","=","null",")","{","crash","util",".","log","custom","user","event","(","\"","location","provider","=","∅","\"",",","\"","best","location","picked","is","null","\"",")",";","log",".","e","(","tag",",","\"","elect","omega","location","-","location","picked","is","null","!","!","\"",")",";","}","else","{","if","(","best","location","picked",".","get","provider","(",")","=","=","null",")","{","crash","util",".","log","custom","user","event","(","\"","location","provider","=","∅","\"",",","\"","best","location","picked",".","get","provider","(",")","is","null","\"",")",";","log",".","e","(","tag",",","\"","elect","omega","location","-","provider","is","null","!","!","\"","+","best","location","picked",".","get","provider","(",")",")",";","}","}","}","else","{","log",".","i","(","tag",",","\"","elect","omega","location","-","optimal","location","picked","from","source",":","\"","+","best","location","picked",".","get","provider","(",")","+","\"","|","\"","+","best","location","picked",".","to","string","(",")",")",";","}","}","protected","static","boolean","is","better","location","(","location","new","location",",","location","current","best","location",")","{","if","(","current","best","location","=","=","null",")","{","/","/","a","new","location","is","always","better","than","no","location","return","true",";","}","/","/","check","whether","the","new","location","fix","is","newer","or","older","long","time","delta","=","new","location",".","get","time","(",")","-","current","best","location",".","get","time","(",")",";","boolean","is","significantly","newer","=","time","delta",">","lh","constants",".","milliseconds","for","two","minutes",";","boolean","is","significantly","older","=","time","delta","<","-","lh","constants",".","milliseconds","for","two","minutes",";","boolean","is","newer","=","time","delta",">","0",";","/","/","if","it","'","s","been","more","than","two","minutes","since","the","current","location",",","use","the","new","location","/","/","because","the","user","has","likely","moved","if","(","is","significantly","newer",")","{","return","true",";","/","/","if","the","new","location","is","more","than","two","minutes","older",",","it","must","be","worse","}","else","if","(","is","significantly","older",")","{","return","false",";","}","/","/","check","whether","the","new","location","fix","is","more","or","less","accurate","int","accuracy","delta","=","(","int",")","(","new","location",".","get","accuracy","(",")","-","current","best","location",".","get","accuracy","(",")",")",";","boolean","is","less","accurate","=","accuracy","delta",">","0",";","boolean","is","more","accurate","=","accuracy","delta","<","0",";","boolean","is","significantly","less","accurate","=","accuracy","delta",">","200",";","/","/","check","if","the","old","and","new","location","are","from","the","same","provider","boolean","is","from","same","provider","=","is","same","provider","(","new","location",".","get","provider","(",")",",","current","best","location",".","get","provider","(",")",")",";","/","/","determine","location","quality","using","a","combination","of","timeliness","and","accuracy","if","(","is","more","accurate",")","{","return","true",";","}","else","if","(","is","newer","&","&","!","is","less","accurate",")","{","return","true",";","}","else","if","(","is","newer","&","&","!","is","significantly","less","accurate","&","&","is","from","same","provider",")","{","return","true",";","}","return","false",";","}","private","static","boolean","is","same","provider","(","string","provider1",",","string","provider2",")","{","if","(","provider1","=","=","null",")","{","return","provider2","=","=","null",";","}","return","provider1",".","equals","(","provider2",")",";","}","public","static","boolean","check","gpsnet","settings","(","context","context",")","{","location","manager","=","(","location","manager",")","context",".","get","system","service","(","context",".","location","service",")",";","boolean","gps","enabled","=","false",";","/","/","current","status","of","gps","boolean","network","enabled","=","false",";","/","/","current","status","of",".",".",".","not","sure","-",")","try","{","network","enabled","=","location","manager",".","is","provider","enabled","(","location","manager",".","network","provider",")",";","log",".","i","(","tag",",","\"","net","provider","enabled",":","\"","+","network","enabled",")",";","}","catch","(","exception","ex",")","{","}","try","{","gps","enabled","=","location","manager",".","is","provider","enabled","(","location","manager",".","gps","provider",")",";","log",".","i","(","tag",",","\"","gps","provider","enabled",":","\"","+","gps","enabled",")",";","}","catch","(","exception","ex",")","{","}","if","(","gps","enabled","=","=","false","&","&","network","enabled","=","=","false",")","{","current","location","setting","state","=","false",";","}","else","{","/","/","all","systems","are","go","!","current","location","setting","state","=","true",";","}","log",".","d","(","tag",",","\"","location","settings","state",":","\"","+","current","location","setting","state",")",";","return","current","location","setting","state",";","}","public","static","boolean","is","current","location","setting","state","(",")","{","return","current","location","setting","state",";","}","public","static","void","set","current","location","setting","state","(","boolean","current","location","setting","state",")","{","geo","util",".","current","location","setting","state","=","current","location","setting","state",";","}","public","static","boolean","is","flag","returning","from","location","settings","(",")","{","return","flag","returning","from","location","settings",";","}","public","static","void","set","flag","returning","from","location","settings","(","boolean","flag","returning","from","location","settings",")","{","geo","util",".","flag","returning","from","location","settings","=","flag","returning","from","location","settings",";","}","public","static","location","get","best","location","picked","(",")","{","return","best","location","picked",";","}","public","static","void","set","best","location","picked","(","location","best","location","picked",")","{","geo","util",".","best","location","picked","=","best","location","picked",";","}","public","static","lat","lng","get","best","location","as","lat","lng","(",")","{","return","new","lat","lng","(","geo","util",".","get","best","location","picked","(",")",".","get","latitude","(",")",",","geo","util",".","get","best","location","picked","(",")",".","get","longitude","(",")",")",";","}","public","static","string","get","best","location","as","lat","lng","separated","string","(",")","{","return","geo","util",".","get","best","location","picked","(",")",".","get","latitude","(",")","+","\"","#","\"","+","geo","util",".","get","best","location","picked","(",")",".","get","longitude","(",")",";","}","public","static","list","<","location",">","get","list","of","all","found","locations","(",")","{","return","list","of","all","found","locations",";","}","public","static","void","set","list","of","all","found","locations","(","list","<","location",">","list","of","all","found","locations",")","{","geo","util",".","list","of","all","found","locations","=","list","of","all","found","locations",";","}","public","static","text","view","get","tv","to","update","with","location","(",")","{","return","tv","to","update","with","location",";","}","public","static","void","set","tv","to","update","with","location","(","text","view","tv","to","update","with","location",")","{","geo","util",".","tv","to","update","with","location","=","tv","to","update","with","location",";","}","public","static","void","update","text","view","with","new","best","location","(",")","{","string","new","best","location","=","translate","location","de","gto","dms","string","(","best","location","picked",")",";","log",".","e","(","tag",",","\"","update","text","view","with","new","best","location","-","tv","updated","with","string","'","\"","+","new","best","location","+","\"","'","\"",")",";","get","tv","to","update","with","location","(",")",".","set","text","(","new","best","location",")",";","}","public","static","string","translate","location","to","lat","lng","string","(","location","location","to","translate",")","{","return","location","to","translate",".","get","latitude","(",")","+","\"",",","\"","+","location","to","translate",".","get","longitude","(",")",";","}","public","static","string","translate","location","to","lat","lng","acc","string","(","location","location","to","translate",")","{","return","\"","|","\"","+","location","to","translate",".","get","latitude","(",")","+","\"",",","\"","+","location","to","translate",".","get","longitude","(",")","+","\"","|","\"","+","location","to","translate",".","get","accuracy","(",")","+","\"","%","\"",";","}","public","static","string","translate","location","de","gto","dms","string","(","location","location","to","translate",")","{","string","str","dms","north",",","str","dms","west",";","str","dms","north","=","location","to","translate",".","convert","(","location","to","translate",".","get","latitude","(",")",",","location","to","translate",".","format","seconds",")",";","str","dms","west","=","location","to","translate",".","convert","(","location","to","translate",".","get","longitude","(",")",",","location","to","translate",".","format","seconds",")",";","str","dms","north","=","format","dms","symbols","(","str","dms","north",")","+","\"","n","\"",";","str","dms","west","=","format","dms","symbols","(","str","dms","west",")","+","\"","w","\"",";","log",".","e","(","tag",",","\"","lat","lng","-","dms",":","\"","+","str","dms","north","+","str","dms","west",")",";","/","/","return","str","dms","north","+","\"","\"","+","str","dms","west","+","\"","(","\"","+","location","to","translate",".","get","accuracy","(",")","+","\"","%",")","\"",";","return","str","dms","north","+","\"","\"","+","str","dms","west",";","}","public","static","string","format","dms","symbols","(","string","dm","swith","colon","separator",")","{","string","[","]","dms","array","=","dm","swith","colon","separator",".","split","(","\"",":","\"",")",";","int","degrees",",","minutes",";","double","seconds",";","degrees","=","integer",".","parse","int","(","dms","array","[","0","]",")",";","minutes","=","integer",".","parse","int","(","dms","array","[","1","]",")",";","seconds","=","double",".","parse","double","(","dms","array","[","2","]",")",";","return","degrees","+","\"","°","\"","+","minutes","+","\"","'","\"","+","seconds","+","\"","\\","\"","\"",";","}","public","static","boolean","is","permitted","for","location","(",")","{","return","is","permitted","for","location",";","}","public","static","void","set","is","permitted","for","location","(","boolean","is","permitted","for","location",")","{","geo","util",".","is","permitted","for","location","=","is","permitted","for","location",";","}","public","static","void","set","app","to","now","allow","location","permission","(",")","{","geo","util",".","set","is","permitted","for","location","(","true",")",";","}","/","/","map","related","functions","below","todo",":","move","to","map","util","?","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","void","set","map","to","update","with","location","(","google","map","map","to","update","with","location",")","{","geo","util",".","map","to","update","with","location","=","map","to","update","with","location",";","}","public","static","void","update","map","with","new","best","location","(","context","context",")","{","log",".","e","(","tag",",","\"","update","map","with","new","best","location","-","map","updated","\"",")",";","marker","options","marker","setup",";","marker","location","marker",";","lat","lng","lat","lng","=","get","best","location","as","lat","lng","(",")",";","/","/","map","to","update","with","location",".","clear","(",")",";","marker","setup","=","new","marker","options","(",")",";","/","/","configure","marker","in","current","location","w","/","title","marker","setup",".","position","(","lat","lng",")",";","marker","setup",".","title","(","context",".","get","string","(","r",".","string",".","map","youarehere",")",")",";","location","marker","=","map","to","update","with","location",".","add","marker","(","marker","setup",")",";","/","/","set","map","camera","(","camera","update","factory",".","new","lat","lng","(","lat","lng",")",",","17",".","0f",")",";","set","map","camera","at","location","(","lat","lng",",","17",".","0f",")",";","/","/","ux","util",".","dismiss","awaiting","location","update","progress","dialog","(",")",";","location","marker",".","show","info","window","(",")",";","/","/","default","action","is","to","display","title","window","w","/","o","requiring","user","-","click","}","public","static","void","set","map","camera","(","camera","update","camera","update",",","float","zoom","level",")","{","map","to","update","with","location",".","move","camera","(","camera","update",")",";","/","/","move","the","camera","to","focus","map","to","update","with","location",".","animate","camera","(","camera","update","factory",".","zoom","to","(","zoom","level",")",")",";","}","public","static","void","set","map","camera","at","location","(","lat","lng","lat","lng","to","view",",","float","zoom","level",")","{","camera","position","camera","position","=","new","camera","position",".","builder","(",")",".","target","(","lat","lng","to","view",")","/","/","sets","the","center","of","the","map","to","lat","lng",".","zoom","(","zoom","level",")","/","/","sets","the","zoom",".","build","(",")",";","/","/","creates","a","camera","position","from","the","builder","map","to","update","with","location",".","animate","camera","(","camera","update","factory",".","new","camera","position","(","camera","position",")",")",";","}","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","services","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","/","/","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","static","list","<","string",">","get","reversed","geo","code","list","from","lat","lng","(","double","lat",",","double","lng",")","{","log",".","i","(","tag",",","\"","get","reversed","geo","code","list","from","lat","lng","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","\"",")",";","geocode","result","=","new","array","list","<",">","(",")",";","string","formatted","address","=","lh","constants",".","empty",";","string","locality","=","lh","constants",".","empty",";","string","country","name","=","lh","constants",".","empty",";","string","country","code","=","lh","constants",".","empty",";","gson","gson","=","new","gson","(",")",";","google","reverse","geocode","g","gc","=","null",";","/","/","string","my","place","=","sample","json",".","my","place","json",";","/","/","string","my","place","url","=","execute","post","(","\"",",","-","6",".","393833","\"",",","null",")",";","string","my","place","=","null",";","try","{","my","place","=","new","simple","gm","location","post","(",")",".","execute","(","string",".","value","of","(","lat",")",",","string",".","value","of","(","lng",")",")",".","get","(",")",";","if","(","my","place","!","=","null",")","{","log",".","i","(","tag",",","\"","json","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","\"","+","my","place",".","replace","all","(","\"","[","\\r","\\n","]","+","\"",",","\"","\"",")",")",";","}","g","gc","=","gson",".","from","json","(","my","place",",","google","reverse","geocode",".","class",")",";","}","catch","(","interrupted","exception","e",")","{","crash","util",".","log","custom","user","event","(","\"","rg","interrupted","exception","\"",",","e",".","get","message","(",")",")",";","log",".","e","(","tag",",","\"","rg","interrupted","exception","\"",")",";","e",".","print","stack","trace","(",")",";","}","catch","(","execution","exception","e",")","{","crash","util",".","log","custom","user","event","(","\"","rg","execution","exception","\"",",","e",".","get","message","(",")",")",";","log",".","e","(","tag",",","\"","rg","execution","exception","\"",")",";","e",".","print","stack","trace","(",")",";","}","catch","(","null","pointer","exception","e",")","{","crash","util",".","log","custom","user","event","(","\"","rg","null","pointer","exception","\"",",","e",".","get","message","(",")",")",";","log",".","e","(","tag",",","\"","rg","null","pointer","exception","\"",")",";","e",".","print","stack","trace","(",")",";","}","/","/","google","reverse","geocode","g","gc","=","gson",".","from","json","(","my","place",",","google","reverse","geocode",".","class",")",";","if","(","g","gc","=","=","null",")","{","crash","util",".","log","custom","user","event","(","\"","null","geocode","\"",",","\"","\"",")",";","log",".","e","(","tag",",","\"","null","geocode","\"",")",";","}","else","{","list","<","result",">","all","results","=","g","gc",".","get","results","(",")",";","for","(","result","each","result",":","all","results",")","{","list","<","address","component",">","all","address","components","=","each","result",".","get","address","components","(",")",";","/","/","add","formatted","address","only","first","-","time","/","once",".",".",".","if","(","formatted","address",".","equals","(","lh","constants",".","empty",")",")","{","formatted","address","=","each","result",".","get","formatted","address","(",")",";","log",".","i","(","tag",",","\"","first","-","time","add","-","formatted","address","\"",")",";","}","log",".","i","(","tag",",","\"","address","components","found",":","\"","+","all","address","components",".","size","(",")",")",";","for","(","address","component","each","address",":","all","address","components",")","{","if","(","each","address",".","get","types","(",")",".","get","(","0",")",".","equals","(","\"","locality","\"",")",")","{","if","(","locality",".","equals","(","lh","constants",".","empty",")",")","{","locality","=","each","address",".","get","short","name","(",")",";","log",".","i","(","tag",",","\"","first","-","time","add","-","locality","\"",")",";","}","/","/","add","locality","only","first","-","time","/","once",".",".",".","}","if","(","each","address",".","get","types","(",")",".","get","(","0",")",".","equals","(","\"","country","\"",")",")","{","/","/","add","country","data","only","first","-","time","/","once",".",".",".","if","(","country","name",".","equals","(","lh","constants",".","empty",")",")","{","country","name","=","each","address",".","get","long","name","(",")",";","log",".","i","(","tag",",","\"","first","-","time","add","-","country","name","\"",")",";","}","if","(","country","code",".","equals","(","lh","constants",".","empty",")",")","{","country","code","=","each","address",".","get","short","name","(",")",";","log",".","i","(","tag",",","\"","first","-","time","add","-","country","code","\"",")",";","}","}","/","/","add","formatted","address","only","first","-","time","/","once",".",".",".","if","(","!","formatted","address",".","equals","(","lh","constants",".","empty",")","&","&","!","locality",".","equals","(","lh","constants",".","empty",")","&","&","!","country","code",".","equals","(","lh","constants",".","empty",")",")","{","log",".","i","(","tag",",","\"","retrieved","data",",","escaping","inner","read","loop",".",".",".","\"",")",";","break",";","}","}","log",".","i","(","tag",",","\"","retrieved","data",",","escaping","outer","read","loop",".",".",".","end","of","data","search",".","\"",")",";","break",";","}","}","geocode","result",".","add","(","formatted","address",")",";","geocode","result",".","add","(","locality",")",";","geocode","result",".","add","(","country","name",")",";","geocode","result",".","add","(","country","code",")",";","log",".","e","(","tag",",","geocode","result",".","to","string","(",")",")",";","/","/","todo",":","might","store","this","full","address","for","a","mark","return","geocode","result",";","}","public","static","list","<","string",">","get","reversed","geo","code","list","from","location","(","context","current","context",",","location","location",")","{","log",".","i","(","tag",",","\"","-","-","calling","func","get","country","from","location","\"",")",";","geocode","result","=","new","array","list","<",">","(",")",";","geocoder","=","new","geocoder","(","current","context",")",";","list","<","address",">","addresses","=","null",";","try","{","addresses","=","geocoder",".","get","from","location","(","location",".","get","latitude","(",")",",","location",".","get","longitude","(",")",",","1",")",";","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","if","(","addresses","!","=","null",")","{","log",".","i","(","tag",",","addresses",".","get","(","0",")",".","get","country","name","(",")","+","\"","(","\"","+","addresses",".","get","(","0",")",".","get","address","line","(","0",")","+","\"",",","\"","+","addresses",".","get","(","0",")",".","get","address","line","(","1",")","+","\"",")","\"","+","\"","\\n","\"","+","addresses",".","get","(","0",")",".","to","string","(",")",")",";","address","temp","address","=","addresses",".","get","(","0",")",";","/","/","extract","just","first","result","geocode","result",".","add","(","temp","address",".","get","address","line","(","0",")",")",";","/","/","first","address","line","e",".","g",".","'","church","rd","'","geocode","result",".","add","(","temp","address",".","get","address","line","(","1",")",")",";","/","/","second","address","line","e",".","g",".","'","dublin","'","geocode","result",".","add","(","temp","address",".","get","country","name","(",")",")",";","/","/","country","name","e",".","g",".","ireland","geocode","result",".","add","(","temp","address",".","get","country","code","(",")",")",";","/","/","country","code","e",".","g",".","'","ie","'","}","else","{","log",".","w","(","tag",",","\"","no","results","from","geo","coder",".",".",".","\"",")",";","}","return","geocode","result",";","}","}"],"func_name":"GeoUtil","func_name_tokens":["geo","util"],"docstring":"  Class which handles Geographical tasks e.g. device location permissions, selecting the best current location, and converting multiple geo-data types  Source: https://developer.android.com/guide/topics/location/strategies.html  Metadata ignored: Source of Optimal location i.e. fused, gps | Accuracy % of Location","docstring_tokens":["class","which","handles","geographical","tasks","e",".","g",".","device","location","permissions",",","selecting","the","best","current","location",",","and","converting","multiple","geo","-","data","types","source",":","metadata","ignored",":","source","of","optimal","location","i",".","e",".","fused",",","gps","|","accuracy","%","of","location"],"query":"Android Settings API turn on WiFi to improve location accuracy if GPS is already turned on","query_tokens":["android","settings","api","turn","on","wi","fi","to","improve","location","accuracy","if","gps","is","already","turned","on"]}
{"query_id":"1306727","repo_name":"AnastasiaStudent/Homeworks2","zip_link":"/AnastasiaStudent/Homeworks2/archive/master.zip","code":"\tpublic void setPin(int value4) throws WrongQuantityOfDigits {\t\t// wenn die lange der value4 gleich 4 ist\t\tint length = String.valueOf(value4).length();\t\tif (length == 4) {\t\t\t// dann speichere mir das\t\t\tthis.pin = value4;\t\t} else {\t\t\tthrow new WrongQuantityOfDigits();\t\t}\t}","code_tokens":["public","void","set","pin","(","int","value4",")","throws","wrong","quantity","of","digits","{","/","/","wenn","die","lange","der","value4","gleich","4","ist","int","length","=","string",".","value","of","(","value4",")",".","length","(",")",";","if","(","length","=","=","4",")","{","/","/","dann","speichere","mir","das","this",".","pin","=","value4",";","}","else","{","throw","new","wrong","quantity","of","digits","(",")",";","}","}"],"func_name":"setPin","func_name_tokens":["set","pin"],"docstring":"\t\t  -of-digits-in-an-int\t  \t  @param value4\t             PIN\t  @throws WrongQuantityOfDigits","docstring_tokens":["-","of","-","digits","-","in","-","an","-","int"],"query":"Way to get number of digits in an int?","query_tokens":["way","to","get","number","of","digits","in","an","int","?"]}
{"query_id":"27184877","repo_name":"bertramn/karaf-jaas-mongo-module","zip_link":"/bertramn/karaf-jaas-mongo-module/archive/master.zip","code":"public class MongoLoginModule extends AbstractKarafLoginModule {\tprivate final static Logger logger = LoggerFactory\t\t\t.getLogger(MongoLoginModule.class);\tprivate MongoConfigurationBuilder configBuilder;\t@Override\tpublic void initialize(Subject subject, CallbackHandler callbackHandler,\t\t\tMap<String, ?> sharedState, Map<String, ?> options) {\t\tsuper.initialize(subject, callbackHandler, options);\t\t// build the database configuration from options\t\tconfigBuilder = new MongoConfigurationBuilder(this.bundleContext,\t\t\t\toptions);\t}\t@Override\tpublic boolean login() throws LoginException {\t\tCallback[] callbacks = new Callback[2];\t\tcallbacks[0] = new NameCallback(\"Username: \");\t\tcallbacks[1] = new PasswordCallback(\"Password: \", false);\t\ttry {\t\t\tcallbackHandler.handle(callbacks);\t\t} catch (IOException ioe) {\t\t\tthrow new LoginException(ioe.getMessage());\t\t} catch (UnsupportedCallbackException uce) {\t\t\tthrow new LoginException(uce.getMessage()\t\t\t\t\t+ \" not available to obtain information from user\");\t\t}\t\t// get the username / identity identifier\t\tuser = ((NameCallback) callbacks[0]).getName();\t\tif (user == null || user.length() < 1) {\t\t\tlogger.debug(\"No valid user was not provided.\");\t\t\tthrow new LoginException(\"No valid user was not provided.\");\t\t}\t\t// get the provided password\t\tchar[] providedPwdChars = ((PasswordCallback) callbacks[1])\t\t\t\t.getPassword();\t\tif (providedPwdChars == null) {\t\t\tprovidedPwdChars = new char[0];\t\t}\t\tString providedPwd = new String(providedPwdChars);\t\t/**************************************************************************\t\t * \t\t * setup user detail service\t\t * \t\t **************************************************************************/\t\t// TODO check if mongo classes are available on the classpath\t\tMongoConfiguration config;\t\ttry {\t\t\tconfig = configBuilder.build();\t\t} catch (ConfigurationException e) {\t\t\tthrow new LoginException(\"Failed to configure login module: \"\t\t\t\t\t+ e.getMessage());\t\t}\t\tUserDetailService userSource = null;\t\ttry {\t\t\tuserSource = config.getUserDetailServiceImplementationClass()\t\t\t\t\t.newInstance();\t\t} catch (InstantiationException | IllegalAccessException e) {\t\t\tthrow new LoginException(\t\t\t\t\t\"Failed to load custom user detail service. \"\t\t\t\t\t\t\t+ e.getMessage());\t\t}\t\tuserSource.setConfiguration(config);\t\t/**************************************************************************\t\t * \t\t * get username and password from mongo collection\t\t * \t\t **************************************************************************/\t\tUserInfo userInfo = null;\t\ttry {\t\t\tuserInfo = userSource.getUserInfo(user);\t\t} catch (Exception e) {\t\t\tlogger.error(\"Failed to get user from mongodb.\", e);\t\t\tthrow new LoginException(\"Failed to retrieve user [\" + user\t\t\t\t\t+ \"] from mongo database.\" + e.getMessage());\t\t}\t\t// verify user exists\t\tif (userInfo == null) {\t\t\tthrow new LoginException(\"User [\" + user + \"] does not exist.\");\t\t}\t\t// TODO add password encryption\t\t// verify password matches\t\tif (!checkPassword(providedPwd, userInfo.getPassword())) {\t\t\tthrow new LoginException(\"User [\" + user\t\t\t\t\t+ \"] password does not match.\");\t\t}\t\t/**************************************************************************\t\t * \t\t * populate the final principal\t\t * \t\t **************************************************************************/\t\t// add the user principal to the security context\t\tprincipals.add(createUserPrincipal(userInfo));\t\t// populate roles\t\tfor (String role : userInfo.getGroups()) {\t\t\tprincipals.add(new GroupPrincipal(role));\t\t}\t\t// release mongo resources, could do this when querying initial user and\t\t// role as hashmaps ???\t\treturn true;\t}\t@Override\tpublic boolean abort() throws LoginException {\t\tif (debug) {\t\t\tlogger.debug(\"abort login\");\t\t}\t\treturn true;\t}\t@Override\tpublic boolean logout() throws LoginException {\t\tsubject.getPrincipals().removeAll(principals);\t\tprincipals.clear();\t\tif (debug) {\t\t\tlogger.debug(\"logout\");\t\t}\t\treturn true;\t}\t/**\t * @param userInfo\t *            the user info to be used to construct the\t *            {@link UserPrincipal}\t * \t * @return a principal for the supplied {@link UserInfo}\t */\tprivate UserPrincipal createUserPrincipal(UserInfo userInfo) {\t\tExtendedUserPrincipal p = new ExtendedUserPrincipal(userInfo.getName());\t\tif (!userInfo.getProperties().isEmpty()) {\t\t\tp.setProperties(userInfo.getProperties());\t\t}\t\treturn p;\t}}","code_tokens":["public","class","mongo","login","module","extends","abstract","karaf","login","module","{","private","final","static","logger","logger","=","logger","factory",".","get","logger","(","mongo","login","module",".","class",")",";","private","mongo","configuration","builder","config","builder",";","@","override","public","void","initialize","(","subject","subject",",","callback","handler","callback","handler",",","map","<","string",",","?",">","shared","state",",","map","<","string",",","?",">","options",")","{","super",".","initialize","(","subject",",","callback","handler",",","options",")",";","/","/","build","the","database","configuration","from","options","config","builder","=","new","mongo","configuration","builder","(","this",".","bundle","context",",","options",")",";","}","@","override","public","boolean","login","(",")","throws","login","exception","{","callback","[","]","callbacks","=","new","callback","[","2","]",";","callbacks","[","0","]","=","new","name","callback","(","\"","username",":","\"",")",";","callbacks","[","1","]","=","new","password","callback","(","\"","password",":","\"",",","false",")",";","try","{","callback","handler",".","handle","(","callbacks",")",";","}","catch","(","io","exception","ioe",")","{","throw","new","login","exception","(","ioe",".","get","message","(",")",")",";","}","catch","(","unsupported","callback","exception","uce",")","{","throw","new","login","exception","(","uce",".","get","message","(",")","+","\"","not","available","to","obtain","information","from","user","\"",")",";","}","/","/","get","the","username","/","identity","identifier","user","=","(","(","name","callback",")","callbacks","[","0","]",")",".","get","name","(",")",";","if","(","user","=","=","null","|","|","user",".","length","(",")","<","1",")","{","logger",".","debug","(","\"","no","valid","user","was","not","provided",".","\"",")",";","throw","new","login","exception","(","\"","no","valid","user","was","not","provided",".","\"",")",";","}","/","/","get","the","provided","password","char","[","]","provided","pwd","chars","=","(","(","password","callback",")","callbacks","[","1","]",")",".","get","password","(",")",";","if","(","provided","pwd","chars","=","=","null",")","{","provided","pwd","chars","=","new","char","[","0","]",";","}","string","provided","pwd","=","new","string","(","provided","pwd","chars",")",";","/","/","todo","check","if","mongo","classes","are","available","on","the","classpath","mongo","configuration","config",";","try","{","config","=","config","builder",".","build","(",")",";","}","catch","(","configuration","exception","e",")","{","throw","new","login","exception","(","\"","failed","to","configure","login","module",":","\"","+","e",".","get","message","(",")",")",";","}","user","detail","service","user","source","=","null",";","try","{","user","source","=","config",".","get","user","detail","service","implementation","class","(",")",".","new","instance","(",")",";","}","catch","(","instantiation","exception","|","illegal","access","exception","e",")","{","throw","new","login","exception","(","\"","failed","to","load","custom","user","detail","service",".","\"","+","e",".","get","message","(",")",")",";","}","user","source",".","set","configuration","(","config",")",";","user","info","user","info","=","null",";","try","{","user","info","=","user","source",".","get","user","info","(","user",")",";","}","catch","(","exception","e",")","{","logger",".","error","(","\"","failed","to","get","user","from","mongodb",".","\"",",","e",")",";","throw","new","login","exception","(","\"","failed","to","retrieve","user","[","\"","+","user","+","\"","]","from","mongo","database",".","\"","+","e",".","get","message","(",")",")",";","}","/","/","verify","user","exists","if","(","user","info","=","=","null",")","{","throw","new","login","exception","(","\"","user","[","\"","+","user","+","\"","]","does","not","exist",".","\"",")",";","}","/","/","todo","add","password","encryption","/","/","verify","password","matches","if","(","!","check","password","(","provided","pwd",",","user","info",".","get","password","(",")",")",")","{","throw","new","login","exception","(","\"","user","[","\"","+","user","+","\"","]","password","does","not","match",".","\"",")",";","}","/","/","add","the","user","principal","to","the","security","context","principals",".","add","(","create","user","principal","(","user","info",")",")",";","/","/","populate","roles","for","(","string","role",":","user","info",".","get","groups","(",")",")","{","principals",".","add","(","new","group","principal","(","role",")",")",";","}","/","/","release","mongo","resources",",","could","do","this","when","querying","initial","user","and","/","/","role","as","hashmaps","?","?","?","return","true",";","}","@","override","public","boolean","abort","(",")","throws","login","exception","{","if","(","debug",")","{","logger",".","debug","(","\"","abort","login","\"",")",";","}","return","true",";","}","@","override","public","boolean","logout","(",")","throws","login","exception","{","subject",".","get","principals","(",")",".","remove","all","(","principals",")",";","principals",".","clear","(",")",";","if","(","debug",")","{","logger",".","debug","(","\"","logout","\"",")",";","}","return","true",";","}","private","user","principal","create","user","principal","(","user","info","user","info",")","{","extended","user","principal","p","=","new","extended","user","principal","(","user","info",".","get","name","(",")",")",";","if","(","!","user","info",".","get","properties","(",")",".","is","empty","(",")",")","{","p",".","set","properties","(","user","info",".","get","properties","(",")",")",";","}","return","p",";","}","}"],"func_name":"MongoLoginModule","func_name_tokens":["mongo","login","module"],"docstring":"    A mongo database login module that can be used in the Karaf container.    TODO check out <a href=  >this</a>    @author Niels Bertram ","docstring_tokens":["a","mongo","database","login","module","that","can","be","used","in","the","karaf","container",".","todo","check","out","<","a","href","=",">","this","<","/","a",">"],"query":"How to add a custom LoginModule to Karaf Jaas security framework?","query_tokens":["how","to","add","a","custom","login","module","to","karaf","jaas","security","framework","?"]}
{"query_id":"19947835","repo_name":"PGMacDesign/PGMacUtilities","zip_link":"/PGMacDesign/PGMacTips/archive/master.zip","code":"public class CircleOverlayView extends LinearLayout {    private Bitmap bitmap;    private CircleOverlayParams overlayParams;    public CircleOverlayView(Context context, CircleOverlayParams overlayParams) {        super(context);        this.overlayParams = overlayParams;    }    public CircleOverlayView(Context context, AttributeSet attrs, CircleOverlayParams overlayParams) {        super(context, attrs);        this.overlayParams = overlayParams;    }    public CircleOverlayView(Context context, AttributeSet attrs, int defStyleAttr,                             CircleOverlayParams overlayParams) {        super(context, attrs, defStyleAttr);        this.overlayParams = overlayParams;    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    public CircleOverlayView(Context context, AttributeSet attrs, int defStyleAttr,                             int defStyleRes, CircleOverlayParams overlayParams) {        super(context, attrs, defStyleAttr, defStyleRes);        this.overlayParams = overlayParams;    }    @Override    protected void dispatchDraw(Canvas canvas) {        super.dispatchDraw(canvas);        if(overlayParams == null){            overlayParams = new CircleOverlayParams();        }        if (bitmap == null) {            createWindowFrame();        }        canvas.drawBitmap(bitmap, 0, 0, null);    }    protected void createWindowFrame() {        bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);        Canvas osCanvas = new Canvas(bitmap);        RectF outerRectangle = new RectF(0, 0, getWidth(), getHeight());        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);        int color = overlayParams.getColorToSet();        paint.setColor(color);        int alphaToSet = overlayParams.getAlphaToUse();        if(alphaToSet < 0 || alphaToSet > 100){            alphaToSet = 99;        }        paint.setAlpha(alphaToSet);        osCanvas.drawRect(outerRectangle, paint);        paint.setColor(Color.TRANSPARENT);        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));        float centerX = getWidth() / 2;        float centerY = getHeight() / 2;        //float radius = 50F;//getResources().getDimensionPixelSize(50);        float radius = overlayParams.getShapeRadius();        if(radius <= 0){            radius = 300F;        }        float xOffset = (radius);        float yOffset = (radius);        float left = centerX - xOffset;        float top = centerY - yOffset;        float right = centerX + xOffset;        float bottom = centerY + yOffset;        //Add 25% to elongate the oval a bit        float topOval = (float)(centerY - (1.25 * yOffset));        float bottomOval = (float)(centerY + (1.25 * yOffset));        CircleOverlayParams.ShapeTypes shapeTypes = overlayParams.getShapeType();        L.m(\"shape being set = \" + shapeTypes.toString());        switch (shapeTypes){            case CIRCLE:                osCanvas.drawCircle(centerX, centerY, radius, paint);                break;            case SQUARE:                osCanvas.drawRect(left, top, right, bottom, paint);                break;            case OVAL:            default:                RectF rect = new RectF(left,topOval,right,bottomOval);                osCanvas.drawOval(rect, paint);                break;        }        //    }    @Override    public boolean isInEditMode() {        return true;    }    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        super.onLayout(changed, l, t, r, b);        bitmap = null;    }    public static class CircleOverlayParams {        public static enum ShapeTypes {            CIRCLE, OVAL, SQUARE        }        private int colorToSet;        private ShapeTypes shapeType;        private float shapeRadius;        private int alphaToUse;        public CircleOverlayParams(){            colorToSet = ColorUtilities.parseMyColor(PGMacTipsConstants.COLOR_LIGHT_GRAY);            alphaToUse = 99;            shapeType = ShapeTypes.OVAL;        }        public float getShapeRadius() {            return shapeRadius;        }        public void setShapeRadius(float shapeRadius) {            this.shapeRadius = shapeRadius;        }        public int getColorToSet() {            return colorToSet;        }        public void setColorToSet(int colorToSet) {            this.colorToSet = colorToSet;        }        public ShapeTypes getShapeType() {            return shapeType;        }        public void setShapeType(ShapeTypes shapeType) {            this.shapeType = shapeType;        }        public int getAlphaToUse() {            return alphaToUse;        }        public void setAlphaToUse(int alphaToUse) {            this.alphaToUse = alphaToUse;        }    }}","code_tokens":["public","class","circle","overlay","view","extends","linear","layout","{","private","bitmap","bitmap",";","private","circle","overlay","params","overlay","params",";","public","circle","overlay","view","(","context","context",",","circle","overlay","params","overlay","params",")","{","super","(","context",")",";","this",".","overlay","params","=","overlay","params",";","}","public","circle","overlay","view","(","context","context",",","attribute","set","attrs",",","circle","overlay","params","overlay","params",")","{","super","(","context",",","attrs",")",";","this",".","overlay","params","=","overlay","params",";","}","public","circle","overlay","view","(","context","context",",","attribute","set","attrs",",","int","def","style","attr",",","circle","overlay","params","overlay","params",")","{","super","(","context",",","attrs",",","def","style","attr",")",";","this",".","overlay","params","=","overlay","params",";","}","@","target","api","(","build",".","version","codes",".","lollipop",")","public","circle","overlay","view","(","context","context",",","attribute","set","attrs",",","int","def","style","attr",",","int","def","style","res",",","circle","overlay","params","overlay","params",")","{","super","(","context",",","attrs",",","def","style","attr",",","def","style","res",")",";","this",".","overlay","params","=","overlay","params",";","}","@","override","protected","void","dispatch","draw","(","canvas","canvas",")","{","super",".","dispatch","draw","(","canvas",")",";","if","(","overlay","params","=","=","null",")","{","overlay","params","=","new","circle","overlay","params","(",")",";","}","if","(","bitmap","=","=","null",")","{","create","window","frame","(",")",";","}","canvas",".","draw","bitmap","(","bitmap",",","0",",","0",",","null",")",";","}","protected","void","create","window","frame","(",")","{","bitmap","=","bitmap",".","create","bitmap","(","get","width","(",")",",","get","height","(",")",",","bitmap",".","config",".","argb","8888",")",";","canvas","os","canvas","=","new","canvas","(","bitmap",")",";","rect","f","outer","rectangle","=","new","rect","f","(","0",",","0",",","get","width","(",")",",","get","height","(",")",")",";","paint","paint","=","new","paint","(","paint",".","anti","alias","flag",")",";","int","color","=","overlay","params",".","get","color","to","set","(",")",";","paint",".","set","color","(","color",")",";","int","alpha","to","set","=","overlay","params",".","get","alpha","to","use","(",")",";","if","(","alpha","to","set","<","0","|","|","alpha","to","set",">","100",")","{","alpha","to","set","=","99",";","}","paint",".","set","alpha","(","alpha","to","set",")",";","os","canvas",".","draw","rect","(","outer","rectangle",",","paint",")",";","paint",".","set","color","(","color",".","transparent",")",";","paint",".","set","xfermode","(","new","porter","duff","xfermode","(","porter","duff",".","mode",".","src","out",")",")",";","float","center","x","=","get","width","(",")","/","2",";","float","center","y","=","get","height","(",")","/","2",";","/","/","float","radius","=","50f",";","/","/","get","resources","(",")",".","get","dimension","pixel","size","(","50",")",";","float","radius","=","overlay","params",".","get","shape","radius","(",")",";","if","(","radius","<","=","0",")","{","radius","=","300f",";","}","float","x","offset","=","(","radius",")",";","float","y","offset","=","(","radius",")",";","float","left","=","center","x","-","x","offset",";","float","top","=","center","y","-","y","offset",";","float","right","=","center","x","+","x","offset",";","float","bottom","=","center","y","+","y","offset",";","/","/","add","25","%","to","elongate","the","oval","a","bit","float","top","oval","=","(","float",")","(","center","y","-","(","1",".","25","*","y","offset",")",")",";","float","bottom","oval","=","(","float",")","(","center","y","+","(","1",".","25","*","y","offset",")",")",";","circle","overlay","params",".","shape","types","shape","types","=","overlay","params",".","get","shape","type","(",")",";","l",".","m","(","\"","shape","being","set","=","\"","+","shape","types",".","to","string","(",")",")",";","switch","(","shape","types",")","{","case","circle",":","os","canvas",".","draw","circle","(","center","x",",","center","y",",","radius",",","paint",")",";","break",";","case","square",":","os","canvas",".","draw","rect","(","left",",","top",",","right",",","bottom",",","paint",")",";","break",";","case","oval",":","default",":","rect","f","rect","=","new","rect","f","(","left",",","top","oval",",","right",",","bottom","oval",")",";","os","canvas",".","draw","oval","(","rect",",","paint",")",";","break",";","}","/","/","}","@","override","public","boolean","is","in","edit","mode","(",")","{","return","true",";","}","@","override","protected","void","on","layout","(","boolean","changed",",","int","l",",","int","t",",","int","r",",","int","b",")","{","super",".","on","layout","(","changed",",","l",",","t",",","r",",","b",")",";","bitmap","=","null",";","}","public","static","class","circle","overlay","params","{","public","static","enum","shape","types","{","circle",",","oval",",","square","}","private","int","color","to","set",";","private","shape","types","shape","type",";","private","float","shape","radius",";","private","int","alpha","to","use",";","public","circle","overlay","params","(",")","{","color","to","set","=","color","utilities",".","parse","my","color","(","pg","mac","tips","constants",".","color","light","gray",")",";","alpha","to","use","=","99",";","shape","type","=","shape","types",".","oval",";","}","public","float","get","shape","radius","(",")","{","return","shape","radius",";","}","public","void","set","shape","radius","(","float","shape","radius",")","{","this",".","shape","radius","=","shape","radius",";","}","public","int","get","color","to","set","(",")","{","return","color","to","set",";","}","public","void","set","color","to","set","(","int","color","to","set",")","{","this",".","color","to","set","=","color","to","set",";","}","public","shape","types","get","shape","type","(",")","{","return","shape","type",";","}","public","void","set","shape","type","(","shape","types","shape","type",")","{","this",".","shape","type","=","shape","type",";","}","public","int","get","alpha","to","use","(",")","{","return","alpha","to","use",";","}","public","void","set","alpha","to","use","(","int","alpha","to","use",")","{","this",".","alpha","to","use","=","alpha","to","use",";","}","}","}"],"func_name":"CircleOverlayView","func_name_tokens":["circle","overlay","view"],"docstring":"  This class was created in response to a need for a circle / oval in the center of a photo.  See stackoverflow answer here for more details:  Created by pmacdowell on 9/21/2016.","docstring_tokens":["this","class","was","created","in","response","to","a","need","for","a","circle","/","oval","in","the","center","of","a","photo",".","see","stackoverflow","answer","here","for","more","details",":","created","by","pmacdowell","on","9","/","21","/","2016","."],"query":"Android canvas: draw transparent circle on image","query_tokens":["android","canvas",":","draw","transparent","circle","on","image"]}
{"query_id":"15111870","repo_name":"nigel-v-thomas/WWARN-Maps-Surveyor","zip_link":"/nigel-v-thomas/WWARN-Maps-Surveyor/archive/master.zip","code":"public class MarkerClickInfoWindowSingleton {    private static MarkerClickInfoWindowSingleton ourInstance = new MarkerClickInfoWindowSingleton();    public static MarkerClickInfoWindowSingleton getInstance() {        return ourInstance;    }    private final InfoWindow infoWindow;    private List<MapInfoWindowOpenCloseHandler> listeners = new ArrayList<MapInfoWindowOpenCloseHandler>();    public MarkerClickInfoWindowSingleton() {        InfoWindowOptions options = InfoWindowOptions.newInstance();        options.setMaxWidth(800);        infoWindow = InfoWindow.newInstance(options);        infoWindow.addCloseClickHandler(new CloseClickMapHandler() {            @Override            public void onEvent(CloseClickMapEvent event) {                for(MapInfoWindowOpenCloseHandler listener : listeners) {                    listener.onInfoWindowClose();                }            }        });    }    void display(Widget widget, MapWidget mapWidget, MVCObject<?> markerWidget) {        infoWindow.setContent(widget);        infoWindow.open(mapWidget, markerWidget);        for(MapInfoWindowOpenCloseHandler listener : listeners) {            listener.onInfoWindowOpen();        }    }    public void addInfoWindowOpenCloseHandler(MapInfoWindowOpenCloseHandler listener) {        listeners.add(listener);    }}","code_tokens":["public","class","marker","click","info","window","singleton","{","private","static","marker","click","info","window","singleton","our","instance","=","new","marker","click","info","window","singleton","(",")",";","public","static","marker","click","info","window","singleton","get","instance","(",")","{","return","our","instance",";","}","private","final","info","window","info","window",";","private","list","<","map","info","window","open","close","handler",">","listeners","=","new","array","list","<","map","info","window","open","close","handler",">","(",")",";","public","marker","click","info","window","singleton","(",")","{","info","window","options","options","=","info","window","options",".","new","instance","(",")",";","options",".","set","max","width","(","800",")",";","info","window","=","info","window",".","new","instance","(","options",")",";","info","window",".","add","close","click","handler","(","new","close","click","map","handler","(",")","{","@","override","public","void","on","event","(","close","click","map","event","event",")","{","for","(","map","info","window","open","close","handler","listener",":","listeners",")","{","listener",".","on","info","window","close","(",")",";","}","}","}",")",";","}","void","display","(","widget","widget",",","map","widget","map","widget",",","mvc","object","<","?",">","marker","widget",")","{","info","window",".","set","content","(","widget",")",";","info","window",".","open","(","map","widget",",","marker","widget",")",";","for","(","map","info","window","open","close","handler","listener",":","listeners",")","{","listener",".","on","info","window","open","(",")",";","}","}","public","void","add","info","window","open","close","handler","(","map","info","window","open","close","handler","listener",")","{","listeners",".","add","(","listener",")",";","}","}"],"func_name":"MarkerClickInfoWindowSingleton","func_name_tokens":["marker","click","info","window","singleton"],"docstring":"  Making basic marker a shared instance, this forces only a single popup window to appear on the display","docstring_tokens":["making","basic","marker","a","shared","instance",",","this","forces","only","a","single","popup","window","to","appear","on","the","display"],"query":"Google Maps API v3 (one infowindow open at a time)","query_tokens":["google","maps","api","v3","(","one","infowindow","open","at","a","time",")"]}
{"query_id":"6641977","repo_name":"danielabar/framegen","zip_link":"/danielabar/framegen/archive/master.zip","code":"public class ArcCalculatorImpl implements IArcCalculator {\t@Override\tpublic List<PointF> generateCurve(PointF pFrom, PointF pTo, float pRadius, float pMinDistance, boolean shortest, boolean side) {\t\tList<PointF> results = new ArrayList<PointF>();\t\tfloat distanceBetweenPoints = calculateDistanceBetweenPoints(pFrom, pTo);\t\trejectRequestIfRadiusTooSmall(pRadius, distanceBetweenPoints);\t\tPointF circleMiddlePoint = calculateMiddleOfArc(pFrom, pTo, pRadius, side);\t\t\t\tfloat angle1 = calculateReferenceAngle(pFrom, circleMiddlePoint);\t\tfloat angle2 = calculateReferenceAngle(pTo, circleMiddlePoint);\t\t// Swap angles if needed\t\tif (angle1 > angle2) {\t\t\tfloat temp = angle1;\t\t\tangle1 = angle2;\t\t\tangle2 = temp;\t\t}\t\tboolean flipped = false;\t\tif (!shortest) {\t\t\tif (angle2 - angle1 < Math.PI) {\t\t\t\tfloat temp = angle1;\t\t\t\tangle1 = angle2;\t\t\t\tangle2 = temp;\t\t\t\tangle2 += Math.PI * 2.0f;\t\t\t\tflipped = true;\t\t\t}\t\t}\t\t\t\tfloat step = calculateStep(pRadius, pMinDistance);\t\tfor (float f = angle1; f < angle2; f += step) {\t\t\tPointF p = calculateNextPointAlongArc(pRadius, circleMiddlePoint, f);\t\t\tresults.add(p);\t\t}\t\taddLastPoint(pFrom, pTo, side, results, flipped);\t\treturn results;\t}\tprotected void addLastPoint(PointF pFrom, PointF pTo, boolean side, List<PointF> results, boolean flipped) {\t\tif (flipped ^ side) {\t\t\tresults.add(pFrom);\t\t} else {\t\t\tresults.add(pTo);\t\t}\t}\tprotected PointF calculateNextPointAlongArc(float pRadius, PointF circleMiddlePoint, float f) {\t\tPointF p = new PointF((float) Math.cos(f) * pRadius\t\t\t\t+ circleMiddlePoint.getX(), (float) Math.sin(f) * pRadius\t\t\t\t+ circleMiddlePoint.getY());\t\treturn p;\t}\tprotected float calculateStep(float pRadius, float pMinDistance) {\t\tfloat step = pMinDistance / pRadius;\t\treturn step;\t}\tprotected float calculateReferenceAngle(PointF point, PointF circleMiddlePoint) {\t\treturn (float) Math.atan2(point.getY() - circleMiddlePoint.getY(), point.getX() - circleMiddlePoint.getX());\t}\tprotected void rejectRequestIfRadiusTooSmall(float pRadius, float distance) {\t\tif (pRadius * 2.0f < distance) {\t\t\tthrow new IllegalArgumentException(\"The radius is too small! The given points wont fall on the circle.\");\t\t}\t}\tprotected PointF calculateMiddleOfArc(PointF pFrom, PointF pTo, float pRadius, boolean side) {\t\tfloat factor = calculateFactor(pFrom, pTo, pRadius);\t\tPointF circleMiddlePoint = new PointF(0, 0);\t\tif (side) {\t\t\tcircleMiddlePoint.setX(0.5f * (pFrom.getX() + pTo.getX()) + factor * (pTo.getY() - pFrom.getY()));\t\t\tcircleMiddlePoint.setY(0.5f * (pFrom.getY() + pTo.getY()) + factor * (pFrom.getX() - pTo.getX()));\t\t} else {\t\t\tcircleMiddlePoint.setX(0.5f * (pFrom.getX() + pTo.getX()) - factor * (pTo.getY() - pFrom.getY()));\t\t\tcircleMiddlePoint.setY(0.5f * (pFrom.getY() + pTo.getY()) - factor * (pFrom.getX() - pTo.getX()));\t\t}\t\treturn circleMiddlePoint;\t}\tprotected float calculateFactor(PointF pFrom, PointF pTo, float pRadius) {\t\tfloat factor = (float) Math.sqrt((pRadius * pRadius)\t\t\t\t/ ((pTo.getX() - pFrom.getX()) * (pTo.getX() - pFrom.getX()) + (pTo.getY() - pFrom.getY())\t\t\t\t\t\t* (pTo.getY() - pFrom.getY())) - 0.25f);\t\treturn factor;\t}\tprotected float calculateDistanceBetweenPoints(PointF pFrom, PointF pTo) {\t\tfloat xDiff = pTo.getX() - pFrom.getX();\t\tfloat yDiff = pTo.getY() - pFrom.getY();\t\tfloat distance = (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\t\treturn distance;\t}\t}","code_tokens":["public","class","arc","calculator","impl","implements","i","arc","calculator","{","@","override","public","list","<","point","f",">","generate","curve","(","point","f","p","from",",","point","f","p","to",",","float","p","radius",",","float","p","min","distance",",","boolean","shortest",",","boolean","side",")","{","list","<","point","f",">","results","=","new","array","list","<","point","f",">","(",")",";","float","distance","between","points","=","calculate","distance","between","points","(","p","from",",","p","to",")",";","reject","request","if","radius","too","small","(","p","radius",",","distance","between","points",")",";","point","f","circle","middle","point","=","calculate","middle","of","arc","(","p","from",",","p","to",",","p","radius",",","side",")",";","float","angle1","=","calculate","reference","angle","(","p","from",",","circle","middle","point",")",";","float","angle2","=","calculate","reference","angle","(","p","to",",","circle","middle","point",")",";","/","/","swap","angles","if","needed","if","(","angle1",">","angle2",")","{","float","temp","=","angle1",";","angle1","=","angle2",";","angle2","=","temp",";","}","boolean","flipped","=","false",";","if","(","!","shortest",")","{","if","(","angle2","-","angle1","<","math",".","pi",")","{","float","temp","=","angle1",";","angle1","=","angle2",";","angle2","=","temp",";","angle2","+","=","math",".","pi","*","2",".","0f",";","flipped","=","true",";","}","}","float","step","=","calculate","step","(","p","radius",",","p","min","distance",")",";","for","(","float","f","=","angle1",";","f","<","angle2",";","f","+","=","step",")","{","point","f","p","=","calculate","next","point","along","arc","(","p","radius",",","circle","middle","point",",","f",")",";","results",".","add","(","p",")",";","}","add","last","point","(","p","from",",","p","to",",","side",",","results",",","flipped",")",";","return","results",";","}","protected","void","add","last","point","(","point","f","p","from",",","point","f","p","to",",","boolean","side",",","list","<","point","f",">","results",",","boolean","flipped",")","{","if","(","flipped","^","side",")","{","results",".","add","(","p","from",")",";","}","else","{","results",".","add","(","p","to",")",";","}","}","protected","point","f","calculate","next","point","along","arc","(","float","p","radius",",","point","f","circle","middle","point",",","float","f",")","{","point","f","p","=","new","point","f","(","(","float",")","math",".","cos","(","f",")","*","p","radius","+","circle","middle","point",".","get","x","(",")",",","(","float",")","math",".","sin","(","f",")","*","p","radius","+","circle","middle","point",".","get","y","(",")",")",";","return","p",";","}","protected","float","calculate","step","(","float","p","radius",",","float","p","min","distance",")","{","float","step","=","p","min","distance","/","p","radius",";","return","step",";","}","protected","float","calculate","reference","angle","(","point","f","point",",","point","f","circle","middle","point",")","{","return","(","float",")","math",".","atan2","(","point",".","get","y","(",")","-","circle","middle","point",".","get","y","(",")",",","point",".","get","x","(",")","-","circle","middle","point",".","get","x","(",")",")",";","}","protected","void","reject","request","if","radius","too","small","(","float","p","radius",",","float","distance",")","{","if","(","p","radius","*","2",".","0f","<","distance",")","{","throw","new","illegal","argument","exception","(","\"","the","radius","is","too","small","!","the","given","points","wont","fall","on","the","circle",".","\"",")",";","}","}","protected","point","f","calculate","middle","of","arc","(","point","f","p","from",",","point","f","p","to",",","float","p","radius",",","boolean","side",")","{","float","factor","=","calculate","factor","(","p","from",",","p","to",",","p","radius",")",";","point","f","circle","middle","point","=","new","point","f","(","0",",","0",")",";","if","(","side",")","{","circle","middle","point",".","set","x","(","0",".","5f","*","(","p","from",".","get","x","(",")","+","p","to",".","get","x","(",")",")","+","factor","*","(","p","to",".","get","y","(",")","-","p","from",".","get","y","(",")",")",")",";","circle","middle","point",".","set","y","(","0",".","5f","*","(","p","from",".","get","y","(",")","+","p","to",".","get","y","(",")",")","+","factor","*","(","p","from",".","get","x","(",")","-","p","to",".","get","x","(",")",")",")",";","}","else","{","circle","middle","point",".","set","x","(","0",".","5f","*","(","p","from",".","get","x","(",")","+","p","to",".","get","x","(",")",")","-","factor","*","(","p","to",".","get","y","(",")","-","p","from",".","get","y","(",")",")",")",";","circle","middle","point",".","set","y","(","0",".","5f","*","(","p","from",".","get","y","(",")","+","p","to",".","get","y","(",")",")","-","factor","*","(","p","from",".","get","x","(",")","-","p","to",".","get","x","(",")",")",")",";","}","return","circle","middle","point",";","}","protected","float","calculate","factor","(","point","f","p","from",",","point","f","p","to",",","float","p","radius",")","{","float","factor","=","(","float",")","math",".","sqrt","(","(","p","radius","*","p","radius",")","/","(","(","p","to",".","get","x","(",")","-","p","from",".","get","x","(",")",")","*","(","p","to",".","get","x","(",")","-","p","from",".","get","x","(",")",")","+","(","p","to",".","get","y","(",")","-","p","from",".","get","y","(",")",")","*","(","p","to",".","get","y","(",")","-","p","from",".","get","y","(",")",")",")","-","0",".","25f",")",";","return","factor",";","}","protected","float","calculate","distance","between","points","(","point","f","p","from",",","point","f","p","to",")","{","float","x","diff","=","p","to",".","get","x","(",")","-","p","from",".","get","x","(",")",";","float","y","diff","=","p","to",".","get","y","(",")","-","p","from",".","get","y","(",")",";","float","distance","=","(","float",")","math",".","sqrt","(","x","diff","*","x","diff","+","y","diff","*","y","diff",")",";","return","distance",";","}","}"],"func_name":"ArcCalculatorImpl","func_name_tokens":["arc","calculator","impl"],"docstring":"/","docstring_tokens":["/"],"query":"How to create a curve between 2 points in 2D and get back Points that makes that curve every d distance?","query_tokens":["how","to","create","a","curve","between","2","points","in","2d","and","get","back","points","that","makes","that","curve","every","d","distance","?"]}
{"query_id":"34436952","repo_name":"schernolyas/hibernate-ogm","zip_link":"/schernolyas/hibernate-ogm/archive/master.zip","code":"\tprivate static Object parseAsObject(String json) {\t\tif ( StringHelper.isNullOrEmptyString( json ) ) {\t\t\treturn null;\t\t}\t\tDocument object = Document.parse( \"{ 'json': \" + json + \"}\" );\t\treturn object.get( \"json\" );\t}","code_tokens":["private","static","object","parse","as","object","(","string","json",")","{","if","(","string","helper",".","is","null","or","empty","string","(","json",")",")","{","return","null",";","}","document","object","=","document",".","parse","(","\"","{","'","json","'",":","\"","+","json","+","\"","}","\"",")",";","return","object",".","get","(","\"","json","\"",")",";","}"],"func_name":"parseAsObject","func_name_tokens":["parse","as","object"],"docstring":"\t\t  parse JSON\t  @param json\t  @return","docstring_tokens":["parse","json"],"query":"JSON.parse() equivalent in mongo driver 3.x for Java","query_tokens":["json",".","parse","(",")","equivalent","in","mongo","driver","3",".","x","for","java"]}
{"query_id":"27617003","repo_name":"ChronixDB/chronix.benchmark","zip_link":"/ChronixDB/chronix.benchmark/archive/master.zip","code":"public class ChronixBoolean {    private static final ChronixBoolean FALSE = new ChronixBoolean(false);    private static final ChronixBoolean TRUE = new ChronixBoolean(true);    private boolean value;    public ChronixBoolean(boolean value) {        this.value = value;    }    public boolean getValue() {        return this.value;    }    public static ChronixBoolean valueOf(String s) {        switch (s.toLowerCase()) {            case \"true\":            case \"yes\":            case \"y\": {                return ChronixBoolean.TRUE;            }            default: {                return ChronixBoolean.FALSE;            }        }    }}","code_tokens":["public","class","chronix","boolean","{","private","static","final","chronix","boolean","false","=","new","chronix","boolean","(","false",")",";","private","static","final","chronix","boolean","true","=","new","chronix","boolean","(","true",")",";","private","boolean","value",";","public","chronix","boolean","(","boolean","value",")","{","this",".","value","=","value",";","}","public","boolean","get","value","(",")","{","return","this",".","value",";","}","public","static","chronix","boolean","value","of","(","string","s",")","{","switch","(","s",".","to","lower","case","(",")",")","{","case","\"","true","\"",":","case","\"","yes","\"",":","case","\"","y","\"",":","{","return","chronix","boolean",".","true",";","}","default",":","{","return","chronix","boolean",".","false",";","}","}","}","}"],"func_name":"ChronixBoolean","func_name_tokens":["chronix","boolean"],"docstring":"  Created by mcqueen666 on 25.06.16.   related to:","docstring_tokens":["created","by","mcqueen666","on","25",".","06",".","16",".","related","to",":"],"query":"Mapping Yes/no to Boolean in ReST API query parameter","query_tokens":["mapping","yes","/","no","to","boolean","in","re","st","api","query","parameter"]}
{"query_id":"724043","repo_name":"aledsage/legacy-brooklyn","zip_link":"/aledsage/legacy-brooklyn/archive/master.zip","code":"    public static String escapeHtmlFormUrl(String url) {        try {            return URLEncoder.encode(url, \"UTF-8\");        } catch (UnsupportedEncodingException e) {            throw Exceptions.propagate(e);        }    }","code_tokens":["public","static","string","escape","html","form","url","(","string","url",")","{","try","{","return","url","encoder",".","encode","(","url",",","\"","utf","-","8","\"",")",";","}","catch","(","unsupported","encoding","exception","e",")","{","throw","exceptions",".","propagate","(","e",")",";","}","}"],"func_name":"escapeHtmlFormUrl","func_name_tokens":["escape","html","form","url"],"docstring":"           Encodes a string suitable for use as a URL in an HTML form: space to +, and high-numbered chars assuming UTF-8.      However, it will also convert the first \"http://\" to \"http%3A%2F%2F\" so is not suitable for converting an       entire URL.            Also note that parameter-conversion doesn't work in way you'd expect when trying to create a \"normal\" url.            @see escapeUrlParam(String), and consider using that instead.","docstring_tokens":["encodes","a","string","suitable","for","use","as","a","url","in","an","html","form",":","space","to","+",",","and","high","-","numbered","chars","assuming","utf","-","8",".","however",",","it","will","also","convert","the","first","\"","http",":","/","/","\"","to","\"","http","%","3a","%","2f","%","2f","\"","so","is","not","suitable","for","converting","an","entire","url",".","also","note","that","parameter","-","conversion","doesn","'","t","work","in","way","you","'","d","expect","when","trying","to","create","a","\"","normal","\"","url",".","@","see","escape","url","param","(","string",")",",","and","consider","using","that","instead","."],"query":"HTTP URL Address Encoding in Java","query_tokens":["http","url","address","encoding","in","java"]}
{"query_id":"9108219","repo_name":"huy510cnt/MaterialDrawer","zip_link":"/huy510cnt/MaterialDrawer/archive/master.zip","code":"public class KeyboardUtil {    private View decorView;    private View contentView;    private float initialDpDiff = -1;    public KeyboardUtil(Activity act, View contentView) {        this.decorView = act.getWindow().getDecorView();        this.contentView = contentView;        //only required on newer android versions. it was working on API level 19        if (Build.VERSION.SDK_INT >= 19) {            decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);        }    }    public void enable() {        if (Build.VERSION.SDK_INT >= 19) {            decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);        }    }    public void disable() {        if (Build.VERSION.SDK_INT >= 19) {            decorView.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);        }    }    //a small helper to allow showing the editText focus    ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener = new ViewTreeObserver.OnGlobalLayoutListener() {        @Override        public void onGlobalLayout() {            Rect r = new Rect();            //r will be populated with the coordinates of your view that area still visible.            decorView.getWindowVisibleDisplayFrame(r);            //get the height diff as dp            float heightDiffDp = UIUtils.convertPixelsToDp(decorView.getRootView().getHeight() - (r.bottom - r.top), decorView.getContext());            //set the initialDpDiff at the beginning. (on my phone this was 73dp)            if (initialDpDiff == -1) {                initialDpDiff = heightDiffDp;            }            //if it could be a keyboard add the padding to the view            if (heightDiffDp - initialDpDiff > 100) { // if more than 100 pixels, its probably a keyboard...                //Toast.makeText(MainActivity.this, \"Hallo\", Toast.LENGTH_SHORT).show();                contentView.setPadding(0, 0, 0, (int) UIUtils.convertDpToPixel((heightDiffDp - initialDpDiff), decorView.getContext()));            } else {                contentView.setPadding(0, 0, 0, 0);            }        }    };    /**     * Helper to hide the keyboard     *     * @param act     */    public static void hideKeyboard(Activity act) {        if (act != null && act.getCurrentFocus() != null) {            InputMethodManager inputMethodManager = (InputMethodManager) act.getSystemService(Activity.INPUT_METHOD_SERVICE);            inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(), 0);        }    }}","code_tokens":["public","class","keyboard","util","{","private","view","decor","view",";","private","view","content","view",";","private","float","initial","dp","diff","=","-","1",";","public","keyboard","util","(","activity","act",",","view","content","view",")","{","this",".","decor","view","=","act",".","get","window","(",")",".","get","decor","view","(",")",";","this",".","content","view","=","content","view",";","/","/","only","required","on","newer","android","versions",".","it","was","working","on","api","level","19","if","(","build",".","version",".","sdk","int",">","=","19",")","{","decor","view",".","get","view","tree","observer","(",")",".","add","on","global","layout","listener","(","on","global","layout","listener",")",";","}","}","public","void","enable","(",")","{","if","(","build",".","version",".","sdk","int",">","=","19",")","{","decor","view",".","get","view","tree","observer","(",")",".","add","on","global","layout","listener","(","on","global","layout","listener",")",";","}","}","public","void","disable","(",")","{","if","(","build",".","version",".","sdk","int",">","=","19",")","{","decor","view",".","get","view","tree","observer","(",")",".","remove","on","global","layout","listener","(","on","global","layout","listener",")",";","}","}","/","/","a","small","helper","to","allow","showing","the","edit","text","focus","view","tree","observer",".","on","global","layout","listener","on","global","layout","listener","=","new","view","tree","observer",".","on","global","layout","listener","(",")","{","@","override","public","void","on","global","layout","(",")","{","rect","r","=","new","rect","(",")",";","/","/","r","will","be","populated","with","the","coordinates","of","your","view","that","area","still","visible",".","decor","view",".","get","window","visible","display","frame","(","r",")",";","/","/","get","the","height","diff","as","dp","float","height","diff","dp","=","ui","utils",".","convert","pixels","to","dp","(","decor","view",".","get","root","view","(",")",".","get","height","(",")","-","(","r",".","bottom","-","r",".","top",")",",","decor","view",".","get","context","(",")",")",";","/","/","set","the","initial","dp","diff","at","the","beginning",".","(","on","my","phone","this","was","73dp",")","if","(","initial","dp","diff","=","=","-","1",")","{","initial","dp","diff","=","height","diff","dp",";","}","/","/","if","it","could","be","a","keyboard","add","the","padding","to","the","view","if","(","height","diff","dp","-","initial","dp","diff",">","100",")","{","/","/","if","more","than","100","pixels",",","its","probably","a","keyboard",".",".",".","/","/","toast",".","make","text","(","main","activity",".","this",",","\"","hallo","\"",",","toast",".","length","short",")",".","show","(",")",";","content","view",".","set","padding","(","0",",","0",",","0",",","(","int",")","ui","utils",".","convert","dp","to","pixel","(","(","height","diff","dp","-","initial","dp","diff",")",",","decor","view",".","get","context","(",")",")",")",";","}","else","{","content","view",".","set","padding","(","0",",","0",",","0",",","0",")",";","}","}","}",";","public","static","void","hide","keyboard","(","activity","act",")","{","if","(","act","!","=","null","&","&","act",".","get","current","focus","(",")","!","=","null",")","{","input","method","manager","input","method","manager","=","(","input","method","manager",")","act",".","get","system","service","(","activity",".","input","method","service",")",";","input","method","manager",".","hide","soft","input","from","window","(","act",".","get","current","focus","(",")",".","get","window","token","(",")",",","0",")",";","}","}","}"],"func_name":"KeyboardUtil","func_name_tokens":["keyboard","util"],"docstring":"  Created by mikepenz on 14.03.15.  This class implements a hack to change the layout padding on bottom if the keyboard is shown  to allow long lists with editTextViews","docstring_tokens":["created","by","mikepenz","on","14",".","03",".","15",".","this","class","implements","a","hack","to","change","the","layout","padding","on","bottom","if","the","keyboard","is","shown","to","allow","long","lists","with","edit","text","views"],"query":"How to check visibility of software keyboard in Android?","query_tokens":["how","to","check","visibility","of","software","keyboard","in","android","?"]}
{"query_id":"25893030","repo_name":"ceaseless-prayer/CeaselessAndroid","zip_link":"/ceaseless-prayer/CeaselessAndroid/archive/master.zip","code":"public class DownloadFileAsyncTask extends AsyncTask<Void, Void, Void> {    private static final String TAG = DownloadFileAsyncTask.class.getSimpleName();    String url;    File output;    Context context;    public DownloadFileAsyncTask(Context context, String url, File output) {        this.context = context;        this.url = url;        this.output = output;    }    @Override    protected Void doInBackground(Void... params) {        Request request = new Request.Builder().url(url).build();        Response response;        try {            OkHttpClient okHttpClient = new OkHttpClient();            response = okHttpClient.newCall(request).execute();            BufferedSink sink = Okio.buffer(Okio.sink(this.output));            sink.writeAll(response.body().source());            sink.close();            Log.d(TAG, \"downloaded file \" + url + \" to \" + this.output);        } catch (IOException e) {            e.printStackTrace();            Log.e(TAG, \"failed to download file \" + url);        }        return null;    }    @Override    protected void onPostExecute(Void params) {        // noop for now.    }}","code_tokens":["public","class","download","file","async","task","extends","async","task","<","void",",","void",",","void",">","{","private","static","final","string","tag","=","download","file","async","task",".","class",".","get","simple","name","(",")",";","string","url",";","file","output",";","context","context",";","public","download","file","async","task","(","context","context",",","string","url",",","file","output",")","{","this",".","context","=","context",";","this",".","url","=","url",";","this",".","output","=","output",";","}","@","override","protected","void","do","in","background","(","void",".",".",".","params",")","{","request","request","=","new","request",".","builder","(",")",".","url","(","url",")",".","build","(",")",";","response","response",";","try","{","ok","http","client","ok","http","client","=","new","ok","http","client","(",")",";","response","=","ok","http","client",".","new","call","(","request",")",".","execute","(",")",";","buffered","sink","sink","=","okio",".","buffer","(","okio",".","sink","(","this",".","output",")",")",";","sink",".","write","all","(","response",".","body","(",")",".","source","(",")",")",";","sink",".","close","(",")",";","log",".","d","(","tag",",","\"","downloaded","file","\"","+","url","+","\"","to","\"","+","this",".","output",")",";","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","log",".","e","(","tag",",","\"","failed","to","download","file","\"","+","url",")",";","}","return","null",";","}","@","override","protected","void","on","post","execute","(","void","params",")","{","/","/","noop","for","now",".","}","}"],"func_name":"DownloadFileAsyncTask","func_name_tokens":["download","file","async","task"],"docstring":"  Downloads the response of a url and saves it to a file  Right now it is used to save the scripture image  Eventually if it accepted a request instead of a url we could have it do more.  Created by kirisu on 10/24/15.  and http://stackoverflow.com/questions/30277583/saving-image-from-url-using-picasso-without-change-in-size-using-bitmap-compres","docstring_tokens":["downloads","the","response","of","a","url","and","saves","it","to","a","file","right","now","it","is","used","to","save","the","scripture","image","eventually","if","it","accepted","a","request","instead","of","a","url","we","could","have","it","do","more",".","created","by","kirisu","on","10","/","24","/","15",".","and"],"query":"Download binary file from OKHTTP","query_tokens":["download","binary","file","from","okhttp"]}
{"query_id":"13868352","repo_name":"rosogon/SeaCloudsPlatform","zip_link":"/rosogon/SeaCloudsPlatform/archive/master.zip","code":"    public static class CompositeList<E> extends AbstractList<E> {        private final List<E> list1;        private final List<E> list2;        public CompositeList(List<E> list1, List<E> list2) {            this.list1 = list1;            this.list2 = list2;        }        @Override        public E get(int index) {            if (index < list1.size()) {                return list1.get(index);            }            return list2.get(index-list1.size());        }        @Override        public int size() {            return list1.size() + list2.size();        }    }","code_tokens":["public","static","class","composite","list","<","e",">","extends","abstract","list","<","e",">","{","private","final","list","<","e",">","list1",";","private","final","list","<","e",">","list2",";","public","composite","list","(","list","<","e",">","list1",",","list","<","e",">","list2",")","{","this",".","list1","=","list1",";","this",".","list2","=","list2",";","}","@","override","public","e","get","(","int","index",")","{","if","(","index","<","list1",".","size","(",")",")","{","return","list1",".","get","(","index",")",";","}","return","list2",".","get","(","index","-","list1",".","size","(",")",")",";","}","@","override","public","int","size","(",")","{","return","list1",".","size","(",")","+","list2",".","size","(",")",";","}","}"],"func_name":"CompositeList","func_name_tokens":["composite","list"],"docstring":"          Unmodifiable List wrapper over 2 lists.             There is no such wrapper in jdk. ","docstring_tokens":["unmodifiable","list","wrapper","over","2","lists",".","there","is","no","such","wrapper","in","jdk","."],"query":"How do I join two lists in Java?","query_tokens":["how","do","i","join","two","lists","in","java","?"]}
{"query_id":"6701948","repo_name":"mkolla01/repair","zip_link":"/mkolla01/repair/archive/master.zip","code":"  public static Integer versionCompare(String str1, String str2) throws ReaperException {    try {      str1 = str1.split(\" \")[0].replaceAll(\"[-_~]\", \".\");      str2 = str2.split(\" \")[0].replaceAll(\"[-_~]\", \".\");      String[] parts1 = str1.split(\"\\\\.\");      String[] parts2 = str2.split(\"\\\\.\");      int i = 0;      // set index to first non-equal ordinal or length of shortest version string      while (i < parts1.length && i < parts2.length) {        try {          Integer.parseInt(parts1[i]);          Integer.parseInt(parts2[i]);        } catch (NumberFormatException ex) {          if (i == 0) {            throw ex; // just comparing two non-version strings should fail          }          // first non integer part, so let's just stop comparison here and ignore the rest          i--;          break;        }        if (parts1[i].equals(parts2[i])) {          i++;          continue;        }        break;      }      // compare first non-equal ordinal number      if (i < parts1.length && i < parts2.length) {        int diff = Integer.valueOf(parts1[i]).compareTo(Integer.valueOf(parts2[i]));        return Integer.signum(diff);      }      // the strings are equal or one string is a substring of the other      // e.g. \"1.2.3\" = \"1.2.3\" or \"1.2.3\" < \"1.2.3.4\"      else {        return Integer.signum(parts1.length - parts2.length);      }    } catch (Exception ex) {      LOG.error(\"failed comparing strings for versions: '{}' '{}'\", str1, str2);      throw new ReaperException(ex);    }  }","code_tokens":["public","static","integer","version","compare","(","string","str1",",","string","str2",")","throws","reaper","exception","{","try","{","str1","=","str1",".","split","(","\"","\"",")","[","0","]",".","replace","all","(","\"","[","-","~","]","\"",",","\"",".","\"",")",";","str2","=","str2",".","split","(","\"","\"",")","[","0","]",".","replace","all","(","\"","[","-","~","]","\"",",","\"",".","\"",")",";","string","[","]","parts1","=","str1",".","split","(","\"","\\","\\",".","\"",")",";","string","[","]","parts2","=","str2",".","split","(","\"","\\","\\",".","\"",")",";","int","i","=","0",";","/","/","set","index","to","first","non","-","equal","ordinal","or","length","of","shortest","version","string","while","(","i","<","parts1",".","length","&","&","i","<","parts2",".","length",")","{","try","{","integer",".","parse","int","(","parts1","[","i","]",")",";","integer",".","parse","int","(","parts2","[","i","]",")",";","}","catch","(","number","format","exception","ex",")","{","if","(","i","=","=","0",")","{","throw","ex",";","/","/","just","comparing","two","non","-","version","strings","should","fail","}","/","/","first","non","integer","part",",","so","let","'","s","just","stop","comparison","here","and","ignore","the","rest","i","-","-",";","break",";","}","if","(","parts1","[","i","]",".","equals","(","parts2","[","i","]",")",")","{","i","+","+",";","continue",";","}","break",";","}","/","/","compare","first","non","-","equal","ordinal","number","if","(","i","<","parts1",".","length","&","&","i","<","parts2",".","length",")","{","int","diff","=","integer",".","value","of","(","parts1","[","i","]",")",".","compare","to","(","integer",".","value","of","(","parts2","[","i","]",")",")",";","return","integer",".","signum","(","diff",")",";","}","/","/","the","strings","are","equal","or","one","string","is","a","substring","of","the","other","/","/","e",".","g",".","\"","1",".","2",".","3","\"","=","\"","1",".","2",".","3","\"","or","\"","1",".","2",".","3","\"","<","\"","1",".","2",".","3",".","4","\"","else","{","return","integer",".","signum","(","parts1",".","length","-","parts2",".","length",")",";","}","}","catch","(","exception","ex",")","{","log",".","error","(","\"","failed","comparing","strings","for","versions",":","'","{","}","'","'","{","}","'","\"",",","str1",",","str2",")",";","throw","new","reaper","exception","(","ex",")",";","}","}"],"func_name":"versionCompare","func_name_tokens":["version","compare"],"docstring":"      NOTICE: This code is loosely based on StackOverflow answer:       Compares two version strings.       Use this instead of String.compareTo() for a non-lexicographical    comparison that works for version strings. e.g. \"1.10\".compareTo(\"1.6\").       @param str1 a string of ordinal numbers separated by decimal points.    @param str2 a string of ordinal numbers separated by decimal points.    @return The result is a negative integer if str1 is _numerically_ less than str2.    The result is a positive integer if str1 is _numerically_ greater than str2.    The result is zero if the strings are _numerically_ equal.    It does not work if \"1.10\" is supposed to be equal to \"1.10.0\".","docstring_tokens":["notice",":","this","code","is","loosely","based","on","stack","overflow","answer",":","compares","two","version","strings",".","use","this","instead","of","string",".","compare","to","(",")","for","a","non","-","lexicographical","comparison","that","works","for","version","strings",".","e",".","g",".","\"","1",".","10","\"",".","compare","to","(","\"","1",".","6","\"",")","."],"query":"Efficient way to compare version strings in Java [duplicate]","query_tokens":["efficient","way","to","compare","version","strings","in","java","[","duplicate","]"]}
{"query_id":"3145089","repo_name":"saintbyte/openbmap","zip_link":"/saintbyte/openbmap/archive/master.zip","code":"public class CurrentLocationHelper {\tprivate Timer mTimer;\tprivate LocationManager lmgr;\tprivate LocationResult locationResult;\tprivate boolean gps_enabled  = false;\tprivate boolean network_enabled  = false;\tpublic boolean getLocation(final Context context, final LocationResult result) {\t\t//I use LocationResult callback class to pass location value from CurrentLocationHelper to user code.\t\tlocationResult = result;\t\tif (lmgr ==  null)\t\t\tlmgr = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\t\t//exceptions will be thrown if provider is not permitted.\t\ttry {\t\t\tgps_enabled  = lmgr.isProviderEnabled(LocationManager.GPS_PROVIDER);\t\t} catch (final Exception ex) {\t\t}\t\ttry {\t\t\tnetwork_enabled = lmgr.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\t\t} catch(final Exception ex){\t\t}\t\t//don't start listeners if no provider is enabled\t\tif (!gps_enabled && !network_enabled)\t\t\treturn false;\t\tif (gps_enabled)\t\t\tlmgr.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);\t\tif (network_enabled)\t\t\tlmgr.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);\t\tmTimer = new Timer();\t\tmTimer.schedule(new GetLastLocation(), 20000);\t\treturn true;\t}\tLocationListener locationListenerGps = new LocationListener() {\t\tpublic void onLocationChanged(final Location location) {\t\t\tmTimer.cancel();\t\t\tlocationResult.gotLocation(location);\t\t\tlmgr.removeUpdates(this);\t\t\tlmgr.removeUpdates(locationListenerNetwork);\t\t}\t\tpublic void onProviderDisabled(final String provider) {}\t\tpublic void onProviderEnabled(final String provider) {}\t\tpublic void onStatusChanged(final String provider, final int status, final Bundle extras) {}\t};\tLocationListener locationListenerNetwork = new LocationListener() {\t\tpublic void onLocationChanged(final Location location) {\t\t\tmTimer.cancel();\t\t\tlocationResult.gotLocation(location);\t\t\tlmgr.removeUpdates(this);\t\t\tlmgr.removeUpdates(locationListenerGps);\t\t}\t\tpublic void onProviderDisabled(final String provider) {}\t\tpublic void onProviderEnabled(final String provider) {}\t\tpublic void onStatusChanged(final String provider, final int status, final Bundle extras) {}\t};\tclass GetLastLocation extends TimerTask {\t\t@Override\t\tpublic void run() {\t\t\tlmgr.removeUpdates(locationListenerGps);\t\t\tlmgr.removeUpdates(locationListenerNetwork);\t\t\tLocation net_loc  = null, gps_loc  = null;\t\t\tif (gps_enabled)\t\t\t\tgps_loc = lmgr.getLastKnownLocation(LocationManager.GPS_PROVIDER);\t\t\tif (network_enabled)\t\t\t\tnet_loc = lmgr.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\t\t\t//if there are both values use the latest one\t\t\tif (gps_loc != null && net_loc != null){\t\t\t\tif (gps_loc.getTime()>net_loc.getTime())\t\t\t\t\tlocationResult.gotLocation(gps_loc);\t\t\t\telse\t\t\t\t\tlocationResult.gotLocation(net_loc);\t\t\t\treturn;\t\t\t}\t\t\tif (gps_loc != null) {\t\t\t\tlocationResult.gotLocation(gps_loc);\t\t\t\treturn;\t\t\t}\t\t\t\t\t\tif (net_loc != null) {\t\t\t\tlocationResult.gotLocation(net_loc);\t\t\t\treturn;\t\t\t}\t\t\tlocationResult.gotLocation(null);\t\t}\t}\tpublic static abstract class LocationResult{\t\tpublic abstract void gotLocation(Location location);\t}}","code_tokens":["public","class","current","location","helper","{","private","timer","m","timer",";","private","location","manager","lmgr",";","private","location","result","location","result",";","private","boolean","gps","enabled","=","false",";","private","boolean","network","enabled","=","false",";","public","boolean","get","location","(","final","context","context",",","final","location","result","result",")","{","/","/","i","use","location","result","callback","class","to","pass","location","value","from","current","location","helper","to","user","code",".","location","result","=","result",";","if","(","lmgr","=","=","null",")","lmgr","=","(","location","manager",")","context",".","get","system","service","(","context",".","location","service",")",";","/","/","exceptions","will","be","thrown","if","provider","is","not","permitted",".","try","{","gps","enabled","=","lmgr",".","is","provider","enabled","(","location","manager",".","gps","provider",")",";","}","catch","(","final","exception","ex",")","{","}","try","{","network","enabled","=","lmgr",".","is","provider","enabled","(","location","manager",".","network","provider",")",";","}","catch","(","final","exception","ex",")","{","}","/","/","don","'","t","start","listeners","if","no","provider","is","enabled","if","(","!","gps","enabled","&","&","!","network","enabled",")","return","false",";","if","(","gps","enabled",")","lmgr",".","request","location","updates","(","location","manager",".","gps","provider",",","0",",","0",",","location","listener","gps",")",";","if","(","network","enabled",")","lmgr",".","request","location","updates","(","location","manager",".","network","provider",",","0",",","0",",","location","listener","network",")",";","m","timer","=","new","timer","(",")",";","m","timer",".","schedule","(","new","get","last","location","(",")",",","20000",")",";","return","true",";","}","location","listener","location","listener","gps","=","new","location","listener","(",")","{","public","void","on","location","changed","(","final","location","location",")","{","m","timer",".","cancel","(",")",";","location","result",".","got","location","(","location",")",";","lmgr",".","remove","updates","(","this",")",";","lmgr",".","remove","updates","(","location","listener","network",")",";","}","public","void","on","provider","disabled","(","final","string","provider",")","{","}","public","void","on","provider","enabled","(","final","string","provider",")","{","}","public","void","on","status","changed","(","final","string","provider",",","final","int","status",",","final","bundle","extras",")","{","}","}",";","location","listener","location","listener","network","=","new","location","listener","(",")","{","public","void","on","location","changed","(","final","location","location",")","{","m","timer",".","cancel","(",")",";","location","result",".","got","location","(","location",")",";","lmgr",".","remove","updates","(","this",")",";","lmgr",".","remove","updates","(","location","listener","gps",")",";","}","public","void","on","provider","disabled","(","final","string","provider",")","{","}","public","void","on","provider","enabled","(","final","string","provider",")","{","}","public","void","on","status","changed","(","final","string","provider",",","final","int","status",",","final","bundle","extras",")","{","}","}",";","class","get","last","location","extends","timer","task","{","@","override","public","void","run","(",")","{","lmgr",".","remove","updates","(","location","listener","gps",")",";","lmgr",".","remove","updates","(","location","listener","network",")",";","location","net","loc","=","null",",","gps","loc","=","null",";","if","(","gps","enabled",")","gps","loc","=","lmgr",".","get","last","known","location","(","location","manager",".","gps","provider",")",";","if","(","network","enabled",")","net","loc","=","lmgr",".","get","last","known","location","(","location","manager",".","network","provider",")",";","/","/","if","there","are","both","values","use","the","latest","one","if","(","gps","loc","!","=","null","&","&","net","loc","!","=","null",")","{","if","(","gps","loc",".","get","time","(",")",">","net","loc",".","get","time","(",")",")","location","result",".","got","location","(","gps","loc",")",";","else","location","result",".","got","location","(","net","loc",")",";","return",";","}","if","(","gps","loc","!","=","null",")","{","location","result",".","got","location","(","gps","loc",")",";","return",";","}","if","(","net","loc","!","=","null",")","{","location","result",".","got","location","(","net","loc",")",";","return",";","}","location","result",".","got","location","(","null",")",";","}","}","public","static","abstract","class","location","result","{","public","abstract","void","got","location","(","location","location",")",";","}","}"],"func_name":"CurrentLocationHelper","func_name_tokens":["current","location","helper"],"docstring":"  Helper for getting current location. ","docstring_tokens":["helper","for","getting","current","location","."],"query":"What is the simplest and most robust way to get the user's current location on Android?","query_tokens":["what","is","the","simplest","and","most","robust","way","to","get","the","user","'","s","current","location","on","android","?"]}
{"query_id":"20746429","repo_name":"fralalonde/iostream","zip_link":"/fralalonde/iostream/archive/master.zip","code":"    private static Spliterator.OfInt takeIntWhile(Spliterator.OfInt splitr, IntPredicate predicate) {        return new Spliterators.AbstractIntSpliterator(splitr.estimateSize(), 0) {            boolean stillGoing = true;            @Override            public boolean tryAdvance(IntConsumer consumer) {                if (stillGoing) {                    boolean hadNext = splitr.tryAdvance((int elem) -> {                        if (predicate.test(elem)) {                            consumer.accept(elem);                        } else {                            stillGoing = false;                        }                    });                    return hadNext && stillGoing;                }                return false;            }        };    }","code_tokens":["private","static","spliterator",".","of","int","take","int","while","(","spliterator",".","of","int","splitr",",","int","predicate","predicate",")","{","return","new","spliterators",".","abstract","int","spliterator","(","splitr",".","estimate","size","(",")",",","0",")","{","boolean","still","going","=","true",";","@","override","public","boolean","try","advance","(","int","consumer","consumer",")","{","if","(","still","going",")","{","boolean","had","next","=","splitr",".","try","advance","(","(","int","elem",")","-",">","{","if","(","predicate",".","test","(","elem",")",")","{","consumer",".","accept","(","elem",")",";","}","else","{","still","going","=","false",";","}","}",")",";","return","had","next","&","&","still","going",";","}","return","false",";","}","}",";","}"],"func_name":"takeIntWhile","func_name_tokens":["take","int","while"],"docstring":"          Adapted from StackOverflow {@linkplain so           @param splitr    the original Spliterator      @param predicate the predicate      @return a Spliterator.OfInt","docstring_tokens":["adapted","from","stack","overflow","{","plain","so"],"query":"Limit a stream by a predicate","query_tokens":["limit","a","stream","by","a","predicate"]}
{"query_id":"4407553","repo_name":"giorgioDonnie91/AndroidAgriPerizia","zip_link":"/giorgioDonnie91/AndroidAgriPerizia/archive/master.zip","code":"public class RadioButtonCenter extends RadioButton {\t/**\t * This is the radio button drawable.\t */\tprivate Drawable mButtonDrawable;\tpublic RadioButtonCenter(Context context) {\t\tsuper(context);\t}\tpublic RadioButtonCenter(Context context, AttributeSet attrs) {\t\tthis(context, attrs, 0);\t}\tpublic RadioButtonCenter(Context context, AttributeSet attrs, int defStyle) {\t\tsuper(context, attrs, defStyle);\t\tfinal TypedArray attributes = context.obtainStyledAttributes(attrs,\t\t\t\tR.styleable.RadioButtonCenter, defStyle, 0);\t\ttry {\t\t\tmButtonDrawable = attributes.getDrawable(R.styleable.RadioButtonCenter_android_button);\t\t} finally {\t\t\tattributes.recycle();\t\t}\t\tsetButtonDrawable(android.R.color.transparent);\t}\t@Override\tprotected void onDraw(Canvas canvas) {\t\tsuper.onDraw(canvas);\t\tif (mButtonDrawable != null) {\t\t\tmButtonDrawable.setState(getDrawableState());\t\t\tfinal int verticalGravity = getGravity() & Gravity.VERTICAL_GRAVITY_MASK;\t\t\tfinal int height = mButtonDrawable.getIntrinsicHeight();\t\t\tint y = 0;\t\t\tswitch (verticalGravity) {\t\t\tcase Gravity.BOTTOM:\t\t\t\ty = getHeight() - height;\t\t\t\tbreak;\t\t\tcase Gravity.CENTER_VERTICAL:\t\t\t\ty = (getHeight() - height) / 2;\t\t\t\tbreak;\t\t\t}\t\t\tint buttonWidth = mButtonDrawable.getIntrinsicWidth();\t\t\tint buttonLeft = (getWidth() - buttonWidth) / 2;\t\t\tmButtonDrawable.setBounds(buttonLeft, y, buttonLeft + buttonWidth, y + height);\t\t\tmButtonDrawable.draw(canvas);\t\t}\t}}","code_tokens":["public","class","radio","button","center","extends","radio","button","{","private","drawable","m","button","drawable",";","public","radio","button","center","(","context","context",")","{","super","(","context",")",";","}","public","radio","button","center","(","context","context",",","attribute","set","attrs",")","{","this","(","context",",","attrs",",","0",")",";","}","public","radio","button","center","(","context","context",",","attribute","set","attrs",",","int","def","style",")","{","super","(","context",",","attrs",",","def","style",")",";","final","typed","array","attributes","=","context",".","obtain","styled","attributes","(","attrs",",","r",".","styleable",".","radio","button","center",",","def","style",",","0",")",";","try","{","m","button","drawable","=","attributes",".","get","drawable","(","r",".","styleable",".","radio","button","center","android","button",")",";","}","finally","{","attributes",".","recycle","(",")",";","}","set","button","drawable","(","android",".","r",".","color",".","transparent",")",";","}","@","override","protected","void","on","draw","(","canvas","canvas",")","{","super",".","on","draw","(","canvas",")",";","if","(","m","button","drawable","!","=","null",")","{","m","button","drawable",".","set","state","(","get","drawable","state","(",")",")",";","final","int","vertical","gravity","=","get","gravity","(",")","&","gravity",".","vertical","gravity","mask",";","final","int","height","=","m","button","drawable",".","get","intrinsic","height","(",")",";","int","y","=","0",";","switch","(","vertical","gravity",")","{","case","gravity",".","bottom",":","y","=","get","height","(",")","-","height",";","break",";","case","gravity",".","center","vertical",":","y","=","(","get","height","(",")","-","height",")","/","2",";","break",";","}","int","button","width","=","m","button","drawable",".","get","intrinsic","width","(",")",";","int","button","left","=","(","get","width","(",")","-","button","width",")","/","2",";","m","button","drawable",".","set","bounds","(","button","left",",","y",",","button","left","+","button","width",",","y","+","height",")",";","m","button","drawable",".","draw","(","canvas",")",";","}","}","}"],"func_name":"RadioButtonCenter","func_name_tokens":["radio","button","center"],"docstring":"  This class implements a radio button with custom gravity. The api's version  is always left-aligned  -button-drawable -gravity/4407803#4407803).","docstring_tokens":["this","class","implements","a","radio","button","with","custom","gravity",".","the","api","'","s","version","is","always","left","-","aligned","-","button","-","drawable","-","gravity","/","4407803","#","4407803",")","."],"query":"android RadioButton button drawable gravity","query_tokens":["android","radio","button","button","drawable","gravity"]}
{"query_id":"32529","repo_name":"toyboxman/yummy-xml-UI","zip_link":"/toyboxman/yummy-xml-UI/archive/master.zip","code":"public class DefaultFileUploadAction extends DefaultBaseAction {\r\r    private final String filter;\r    private final String uploadPath;\r\r    public DefaultFileUploadAction(String filter, String uploadPath) {\r        this.filter = filter;\r        this.uploadPath = uploadPath;\r    }\r\r    @Override\r    protected void installButtonAction() {\r        JButton button = getBlock(id, JButton.class);\r        button.addActionListener(new ActionListener() {\r\r            @Override\r            public void actionPerformed(ActionEvent e) {\r                if (CommonUtil.usbDeviceConnected()) {\r                    final File usbDevice = CommonUtil.getUsbDevice();\r                    RestrictedFSView restrictedFSV = new RestrictedFSView(usbDevice);\r                    JFileChooser jfc = new JFileChooser(usbDevice, restrictedFSV);\r                    jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);\r                    jfc.setMultiSelectionEnabled(false);\r                    jfc.setAcceptAllFileFilterUsed(false);\r                    jfc.setFileFilter(new FileFilter() {\r\r                        @Override\r                        public boolean accept(File f) {\r                            return f.getName().endsWith(filter);\r                        }\r\r                        @Override\r                        public String getDescription() {\r                            return filter;\r                        }\r                    });\r                    int result = jfc.showDialog(CommonUtil.getCurrentView(),\r                            CommonUtil.getResourceMsg(\"button.text.import\"));\r                    if (result == JFileChooser.APPROVE_OPTION) {\r                        File selectedFile = jfc.getSelectedFile();\r                        String uploadUrl = null;\r                        //http://www.codejava.net/java-se/networking/ftp/upload-files-to-ftp-server-using-urlconnection-class\r                        if (uploadPath.endsWith(\"/\")) {\r                            uploadUrl = uploadPath + selectedFile.getName();\r                        } else {\r                            uploadUrl = uploadPath + '/' + selectedFile.getName();\r                        }\r                        CommonUtil.getLogger(DefaultFileUploadAction.class.getName()).log(Level.INFO, \"upload file to {0}\", uploadUrl);\r\r                        try {\r                            URL url = new URL(uploadUrl);\r                            URLConnection conn = url.openConnection();\r                            OutputStream outputStream = conn.getOutputStream();\r                            FileInputStream inputStream = new FileInputStream(selectedFile);\r\r                            byte[] buffer = new byte[4096];\r                            int bytesRead = -1;\r                            while ((bytesRead = inputStream.read(buffer)) != -1) {\r                                outputStream.write(buffer, 0, bytesRead);\r                            }\r\r                            inputStream.close();\r                            outputStream.close();\r\r                            CommonUtil.getLogger(DefaultFileUploadAction.class.getName()).log(Level.INFO, \"upload file to {0}\", uploadUrl);\r                        } catch (IOException ex) {\r                            ex.printStackTrace();\r                        }\r                    } else {\r                        CommonUtil.getLogger(DefaultFileUploadAction.class.getName()).log(Level.INFO,\r                                \"Give up importing file type {0}\", filter);\r                    }\r                } else {\r                    CommonUtil.showMsg(CommonUtil.getCurrentView(),\r                            CommonUtil.getResourceMsg(\"device.usb.disconnected.error\"));\r                }\r            }\r        });\r    }\r\r    static class RestrictedFSView extends FileSystemView {\r\r        private final File[] rootDirectories;\r\r        RestrictedFSView(File rootDirectory) {\r            this.rootDirectories = new File[]{rootDirectory};\r        }\r\r        RestrictedFSView(File[] rootDirectories) {\r            this.rootDirectories = rootDirectories;\r        }\r\r        @Override\r        public File createNewFolder(File containingDir) throws IOException {\r            CommonUtil.getLogger(DefaultFileUploadAction.class.getName()).log(Level.INFO,\r                                \"disallow to create new folder {0} in external disk\", containingDir.getPath());\r            return null;\r        }\r\r        @Override\r        public File[] getRoots() {\r            return rootDirectories;\r        }\r\r        @Override\r        public boolean isRoot(File file) {\r            for (File root : rootDirectories) {\r                if (root.equals(file)) {\r                    return true;\r                }\r            }\r            return false;\r        }\r    }\r}\r","code_tokens":["public","class","default","file","upload","action","extends","default","base","action","{","private","final","string","filter",";","private","final","string","upload","path",";","public","default","file","upload","action","(","string","filter",",","string","upload","path",")","{","this",".","filter","=","filter",";","this",".","upload","path","=","upload","path",";","}","@","override","protected","void","install","button","action","(",")","{","j","button","button","=","get","block","(","id",",","j","button",".","class",")",";","button",".","add","action","listener","(","new","action","listener","(",")","{","@","override","public","void","action","performed","(","action","event","e",")","{","if","(","common","util",".","usb","device","connected","(",")",")","{","final","file","usb","device","=","common","util",".","get","usb","device","(",")",";","restricted","fs","view","restricted","fsv","=","new","restricted","fs","view","(","usb","device",")",";","j","file","chooser","jfc","=","new","j","file","chooser","(","usb","device",",","restricted","fsv",")",";","jfc",".","set","file","selection","mode","(","j","file","chooser",".","files","only",")",";","jfc",".","set","multi","selection","enabled","(","false",")",";","jfc",".","set","accept","all","file","filter","used","(","false",")",";","jfc",".","set","file","filter","(","new","file","filter","(",")","{","@","override","public","boolean","accept","(","file","f",")","{","return","f",".","get","name","(",")",".","ends","with","(","filter",")",";","}","@","override","public","string","get","description","(",")","{","return","filter",";","}","}",")",";","int","result","=","jfc",".","show","dialog","(","common","util",".","get","current","view","(",")",",","common","util",".","get","resource","msg","(","\"","button",".","text",".","import","\"",")",")",";","if","(","result","=","=","j","file","chooser",".","approve","option",")","{","file","selected","file","=","jfc",".","get","selected","file","(",")",";","string","upload","url","=","null",";","/","/","if","(","upload","path",".","ends","with","(","\"","/","\"",")",")","{","upload","url","=","upload","path","+","selected","file",".","get","name","(",")",";","}","else","{","upload","url","=","upload","path","+","'","/","'","+","selected","file",".","get","name","(",")",";","}","common","util",".","get","logger","(","default","file","upload","action",".","class",".","get","name","(",")",")",".","log","(","level",".","info",",","\"","upload","file","to","{","0","}","\"",",","upload","url",")",";","try","{","url","url","=","new","url","(","upload","url",")",";","url","connection","conn","=","url",".","open","connection","(",")",";","output","stream","output","stream","=","conn",".","get","output","stream","(",")",";","file","input","stream","input","stream","=","new","file","input","stream","(","selected","file",")",";","byte","[","]","buffer","=","new","byte","[","4096","]",";","int","bytes","read","=","-","1",";","while","(","(","bytes","read","=","input","stream",".","read","(","buffer",")",")","!","=","-","1",")","{","output","stream",".","write","(","buffer",",","0",",","bytes","read",")",";","}","input","stream",".","close","(",")",";","output","stream",".","close","(",")",";","common","util",".","get","logger","(","default","file","upload","action",".","class",".","get","name","(",")",")",".","log","(","level",".","info",",","\"","upload","file","to","{","0","}","\"",",","upload","url",")",";","}","catch","(","io","exception","ex",")","{","ex",".","print","stack","trace","(",")",";","}","}","else","{","common","util",".","get","logger","(","default","file","upload","action",".","class",".","get","name","(",")",")",".","log","(","level",".","info",",","\"","give","up","importing","file","type","{","0","}","\"",",","filter",")",";","}","}","else","{","common","util",".","show","msg","(","common","util",".","get","current","view","(",")",",","common","util",".","get","resource","msg","(","\"","device",".","usb",".","disconnected",".","error","\"",")",")",";","}","}","}",")",";","}","static","class","restricted","fs","view","extends","file","system","view","{","private","final","file","[","]","root","directories",";","restricted","fs","view","(","file","root","directory",")","{","this",".","root","directories","=","new","file","[","]","{","root","directory","}",";","}","restricted","fs","view","(","file","[","]","root","directories",")","{","this",".","root","directories","=","root","directories",";","}","@","override","public","file","create","new","folder","(","file","containing","dir",")","throws","io","exception","{","common","util",".","get","logger","(","default","file","upload","action",".","class",".","get","name","(",")",")",".","log","(","level",".","info",",","\"","disallow","to","create","new","folder","{","0","}","in","external","disk","\"",",","containing","dir",".","get","path","(",")",")",";","return","null",";","}","@","override","public","file","[","]","get","roots","(",")","{","return","root","directories",";","}","@","override","public","boolean","is","root","(","file","file",")","{","for","(","file","root",":","root","directories",")","{","if","(","root",".","equals","(","file",")",")","{","return","true",";","}","}","return","false",";","}","}","}"],"func_name":"DefaultFileUploadAction","func_name_tokens":["default","file","upload","action"],"docstring":"\r  how to restrict JFileChooser to navigate to other folder and leak folder\r  privilege\r  http://stackoverflow.com/questions/8926146/jfilechooser-want-to-lock-it-to-one-directory\r \r  @author Administrator\r","docstring_tokens":["how","to","restrict","j","file","chooser","to","navigate","to","other","folder","and","leak","folder","privilege"],"query":"How do I restrict JFileChooser to a directory?","query_tokens":["how","do","i","restrict","j","file","chooser","to","a","directory","?"]}
{"query_id":"221525","repo_name":"OwlPlatform/java-owl-common","zip_link":"/OwlPlatform/java-owl-common/archive/master.zip","code":"public class LRUCache<K, V> extends LinkedHashMap<K, V> {\t\t/**\t * To be updated when the class members change.\t */  private static final long serialVersionUID = 5148706907508646895L;   /**\t * Maximum capacity of the cache.\t */\tprivate final int capacity;\t\t/**\t * Creates a new LRU cache with the specified capacity.\t * @param capacity the maximum capacity for this cache.\t */\tpublic LRUCache(int capacity)\t{\t\tsuper(capacity+1, 1.0f, true);\t\tthis.capacity = capacity;\t}\t@Override\tprotected boolean removeEldestEntry(final Map.Entry<K, V> entry)\t{\t\treturn super.size() > this.capacity;\t}}","code_tokens":["public","class","lru","cache","<","k",",","v",">","extends","linked","hash","map","<","k",",","v",">","{","private","static","final","long","serial","version","uid","=","5148706907508646895l",";","private","final","int","capacity",";","public","lru","cache","(","int","capacity",")","{","super","(","capacity","+","1",",","1",".","0f",",","true",")",";","this",".","capacity","=","capacity",";","}","@","override","protected","boolean","remove","eldest","entry","(","final","map",".","entry","<","k",",","v",">","entry",")","{","return","super",".","size","(",")",">","this",".","capacity",";","}","}"],"func_name":"LRUCache","func_name_tokens":["lru","cache"],"docstring":"  Simple implementation of an LRU cache based on LinkedHashMap.  Idea provided by Hank Gay on StackOverflow.com      @author <a href=\"http://stackoverflow.com/users/4203/hank-gay\">Hank Gay</a>  @author Robert Moore II   @param <K>   @param <V>","docstring_tokens":["simple","implementation","of","an","lru","cache","based","on","linked","hash","map",".","idea","provided","by","hank","gay","on","stack","overflow",".","com"],"query":"How would you implement an LRU cache in Java?","query_tokens":["how","would","you","implement","an","lru","cache","in","java","?"]}
{"query_id":"6035519","repo_name":"h819/spring-boot","zip_link":"/h819/spring-boot/archive/master.zip","code":"    private static int damerauLevenshteinDistance(String a, String b, int alphabetLength) {        final int INFINITY = a.length() + b.length();        int[][] H = new int[a.length() + 2][b.length() + 2];        H[0][0] = INFINITY;        for (int i = 0; i <= a.length(); i++) {            H[i + 1][1] = i;            H[i + 1][0] = INFINITY;        }        for (int j = 0; j <= b.length(); j++) {            H[1][j + 1] = j;            H[0][j + 1] = INFINITY;        }        int[] DA = new int[alphabetLength];        Arrays.fill(DA, 0);        for (int i = 1; i <= a.length(); i++) {            int DB = 0;            for (int j = 1; j <= b.length(); j++) {                int i1 = DA[b.charAt(j - 1)];                int j1 = DB;                int d = ((a.charAt(i - 1) == b.charAt(j - 1)) ? 0 : 1);                if (d == 0)                    DB = j;                H[i + 1][j + 1] = min(H[i][j] + d, H[i + 1][j] + 1, H[i][j + 1] + 1, H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));            }            DA[a.charAt(i - 1)] = i;        }        return H[a.length() + 1][b.length() + 1];    }","code_tokens":["private","static","int","damerau","levenshtein","distance","(","string","a",",","string","b",",","int","alphabet","length",")","{","final","int","infinity","=","a",".","length","(",")","+","b",".","length","(",")",";","int","[","]","[","]","h","=","new","int","[","a",".","length","(",")","+","2","]","[","b",".","length","(",")","+","2","]",";","h","[","0","]","[","0","]","=","infinity",";","for","(","int","i","=","0",";","i","<","=","a",".","length","(",")",";","i","+","+",")","{","h","[","i","+","1","]","[","1","]","=","i",";","h","[","i","+","1","]","[","0","]","=","infinity",";","}","for","(","int","j","=","0",";","j","<","=","b",".","length","(",")",";","j","+","+",")","{","h","[","1","]","[","j","+","1","]","=","j",";","h","[","0","]","[","j","+","1","]","=","infinity",";","}","int","[","]","da","=","new","int","[","alphabet","length","]",";","arrays",".","fill","(","da",",","0",")",";","for","(","int","i","=","1",";","i","<","=","a",".","length","(",")",";","i","+","+",")","{","int","db","=","0",";","for","(","int","j","=","1",";","j","<","=","b",".","length","(",")",";","j","+","+",")","{","int","i1","=","da","[","b",".","char","at","(","j","-","1",")","]",";","int","j1","=","db",";","int","d","=","(","(","a",".","char","at","(","i","-","1",")","=","=","b",".","char","at","(","j","-","1",")",")","?","0",":","1",")",";","if","(","d","=","=","0",")","db","=","j",";","h","[","i","+","1","]","[","j","+","1","]","=","min","(","h","[","i","]","[","j","]","+","d",",","h","[","i","+","1","]","[","j","]","+","1",",","h","[","i","]","[","j","+","1","]","+","1",",","h","[","i1","]","[","j1","]","+","(","i","-","i1","-","1",")","+","1","+","(","j","-","j1","-","1",")",")",";","}","da","[","a",".","char","at","(","i","-","1",")","]","=","i",";","}","return","h","[","a",".","length","(",")","+","1","]","[","b",".","length","(",")","+","1","]",";","}"],"func_name":"damerauLevenshteinDistance","func_name_tokens":["damerau","levenshtein","distance"],"docstring":"          Calculated the Damerau-Levenshtein-Distance.           @param a              input string one.      @param b              input string two.      @param alphabetLength the length of the alphabet.      @return the distance.","docstring_tokens":["calculated","the","damerau","-","levenshtein","-","distance","."],"query":"Levenshtein to Damerau-Levenshtein","query_tokens":["levenshtein","to","damerau","-","levenshtein"]}
{"query_id":"810284","repo_name":"onedanshow/Screen-Courter","zip_link":"/onedanshow/Screen-Courter/archive/master.zip","code":"     public static void copyFolderFromCurrentJar(String jarName, String folderName) {    \tif(jarName == null || folderName == null) return;    \t\t\ttry {\t\t\tZipFile z = new ZipFile(jarName);\t\t\tEnumeration<? extends ZipEntry> entries = z.entries();\t\t\t// make the folder first\t\t\t//File folder = new File(RFX_FOLDER.getAbsolutePath()+File.separator+folderName);\t\t\t//if( !folder.exists() ) folder.mkdir();\t\t\twhile (entries.hasMoreElements()) {\t\t\t\tZipEntry entry = (ZipEntry)entries.nextElement();\t\t\t\tif (entry.getName().contains(folderName)) {\t\t\t\t\tFile f = new File(BASE_FOLDER.getAbsolutePath()+File.separator+entry.getName());\t\t\t\t\tif (entry.isDirectory() && f.mkdir()) { \t\t\t\t\t\tlogger.info(\"Created folder \"+f.getAbsolutePath()+\" for \"+entry.getName());\t\t\t\t\t}\t\t\t\t\telse if (!f.exists()) {\t\t\t\t\t\tif (copyFileFromJar(entry.getName(), f)) {\t\t\t\t\t\t\tlogger.info(\"Copied file: \" + entry.getName());\t\t\t\t\t\t} else {\t\t\t\t\t\t\tlogger.error(\"Could not copy file: \"+entry.getName());\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tcatch (IOException e) {\t\t\te.printStackTrace();\t\t}\t}","code_tokens":["public","static","void","copy","folder","from","current","jar","(","string","jar","name",",","string","folder","name",")","{","if","(","jar","name","=","=","null","|","|","folder","name","=","=","null",")","return",";","try","{","zip","file","z","=","new","zip","file","(","jar","name",")",";","enumeration","<","?","extends","zip","entry",">","entries","=","z",".","entries","(",")",";","/","/","make","the","folder","first","/","/","file","folder","=","new","file","(","rfx","folder",".","get","absolute","path","(",")","+","file",".","separator","+","folder","name",")",";","/","/","if","(","!","folder",".","exists","(",")",")","folder",".","mkdir","(",")",";","while","(","entries",".","has","more","elements","(",")",")","{","zip","entry","entry","=","(","zip","entry",")","entries",".","next","element","(",")",";","if","(","entry",".","get","name","(",")",".","contains","(","folder","name",")",")","{","file","f","=","new","file","(","base","folder",".","get","absolute","path","(",")","+","file",".","separator","+","entry",".","get","name","(",")",")",";","if","(","entry",".","is","directory","(",")","&","&","f",".","mkdir","(",")",")","{","logger",".","info","(","\"","created","folder","\"","+","f",".","get","absolute","path","(",")","+","\"","for","\"","+","entry",".","get","name","(",")",")",";","}","else","if","(","!","f",".","exists","(",")",")","{","if","(","copy","file","from","jar","(","entry",".","get","name","(",")",",","f",")",")","{","logger",".","info","(","\"","copied","file",":","\"","+","entry",".","get","name","(",")",")",";","}","else","{","logger",".","error","(","\"","could","not","copy","file",":","\"","+","entry",".","get","name","(",")",")",";","}","}","}","}","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","}"],"func_name":"copyFolderFromCurrentJar","func_name_tokens":["copy","folder","from","current","jar"],"docstring":"\t \t  Copies an entire folder out of a jar to a physical location. \t  \t  Base code: http://forums.sun.com/thread.jspa?threadID=5154854\t  Helpful: http://mindprod.com/jgloss/getresourceasstream.html\t  \t  @param jarName     Path and name of the jar to extract from\t  @param folderName  Single name, not path, of the folder to pull from the root of the jar.","docstring_tokens":["copies","an","entire","folder","out","of","a","jar","to","a","physical","location",".","base","code",":","helpful",":"],"query":"Putting bat file inside a jar file","query_tokens":["putting","bat","file","inside","a","jar","file"]}
{"query_id":"20412598","repo_name":"terryturner/VRPinGMapFx","zip_link":"/terryturner/VRPinGMapFx/archive/master.zip","code":"public class BicycleMessenger {    /**     * Hard constraint: delivery of envelope must not take longer than 3*bestDirect (i.e. fastest messenger on direct delivery)     *     * @author stefan     */    static class ThreeTimesLessThanBestDirectRouteConstraint implements HardActivityConstraint {        private final VehicleRoutingTransportCosts routingCosts;        private final RouteAndActivityStateGetter stateManager;        //jobId map direct-distance by nearestMessenger        private final Map<String, Double> bestMessengers;        private final StateId latest_act_arrival_time_stateId;        public ThreeTimesLessThanBestDirectRouteConstraint(StateId latest_act_arrival_time, Map<String, Double> nearestMessengers, VehicleRoutingTransportCosts routingCosts, RouteAndActivityStateGetter stateManager) {            this.bestMessengers = nearestMessengers;            this.routingCosts = routingCosts;            this.stateManager = stateManager;            this.latest_act_arrival_time_stateId = latest_act_arrival_time;        }        @Override        public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {            //make sure vehicle can manage direct path            double arrTime_at_nextAct_onDirectRoute = prevActDepTime + routingCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());            Double latest_arrTime_at_nextAct = stateManager.getActivityState(nextAct, latest_act_arrival_time_stateId, Double.class);            if (latest_arrTime_at_nextAct == null)                latest_arrTime_at_nextAct = nextAct.getTheoreticalLatestOperationStartTime();            if (arrTime_at_nextAct_onDirectRoute > latest_arrTime_at_nextAct) {                //constraint can never be fulfilled anymore, thus .NOT_FULFILLED_BREAK                return ConstraintsStatus.NOT_FULFILLED_BREAK;            }            double arrTime_at_newAct = prevActDepTime + routingCosts.getTransportTime(prevAct.getLocation(), newAct.getLocation(), prevActDepTime, iFacts.getNewDriver(), iFacts.getNewVehicle());            //local impact            //no matter whether it is a pickupShipment or deliverShipment activities. both arrivalTimes must be < 3*best.            double directTimeOfNearestMessenger = bestMessengers.get(((JobActivity) newAct).getJob().getId());            if (arrTime_at_newAct > 3 * directTimeOfNearestMessenger) {                //not fulfilled AND it can never be fulfilled anymore by going forward in route, thus NOT_FULFILLED_BREAK                return ConstraintsStatus.NOT_FULFILLED_BREAK;            }            //impact on whole route, since insertion of newAct shifts all subsequent activities forward in time            double departureTime_at_newAct = arrTime_at_newAct + newAct.getOperationTime();            double latest_arrTime_at_newAct = latest_arrTime_at_nextAct - routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(), departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());            if (arrTime_at_newAct > latest_arrTime_at_newAct) {                return ConstraintsStatus.NOT_FULFILLED;            }            double arrTime_at_nextAct = departureTime_at_newAct + routingCosts.getTransportTime(newAct.getLocation(), nextAct.getLocation(), departureTime_at_newAct, iFacts.getNewDriver(), iFacts.getNewVehicle());            //here you need an activity state            if (arrTime_at_nextAct > latest_arrTime_at_nextAct) {                return ConstraintsStatus.NOT_FULFILLED;            }            return ConstraintsStatus.FULFILLED;        }    }    /**     * When inserting the activities of an envelope which are pickup and deliver envelope, this constraint makes insertion procedure to ignore messengers that are too far away to meet the 3*directTime-Constraint.     * <p>     * <p>one does not need this constraint. but it is faster. the earlier the solution-space can be constraint the better/faster.     *     * @author schroeder     */    static class IgnoreMessengerThatCanNeverMeetTimeRequirements implements HardRouteConstraint {        private final Map<String, Double> bestMessengers;        private final VehicleRoutingTransportCosts routingCosts;        public IgnoreMessengerThatCanNeverMeetTimeRequirements(Map<String, Double> bestMessengers, VehicleRoutingTransportCosts routingCosts) {            super();            this.bestMessengers = bestMessengers;            this.routingCosts = routingCosts;        }        @Override        public boolean fulfilled(JobInsertionContext insertionContext) {            double timeOfDirectRoute = getTimeOfDirectRoute(insertionContext.getJob(), insertionContext.getNewVehicle(), routingCosts);            double timeOfNearestMessenger = bestMessengers.get(insertionContext.getJob().getId());            return !(timeOfDirectRoute > 3 * timeOfNearestMessenger);        }    }    /**     * updates the state \"latest-activity-start-time\" (required above) once route/activity states changed, i.e. when removing or inserting an envelope-activity     * <p>     * <p>thus once either the insertion-procedure starts or an envelope has been inserted, this visitor runs through the route in reverse order (i.e. starting with the end of the route) and     * calculates the latest-activity-start-time (or latest-activity-arrival-time) which is the time to just meet the constraints of subsequent activities.     *     * @author schroeder     */    static class UpdateLatestActivityStartTimes implements StateUpdater, ReverseActivityVisitor {        private final StateManager stateManager;        private final VehicleRoutingTransportCosts routingCosts;        private final Map<String, Double> bestMessengers;        private VehicleRoute route;        private TourActivity prevAct;        private double latest_arrTime_at_prevAct;        private final StateId latest_act_arrival_time_stateId;        public UpdateLatestActivityStartTimes(StateId latest_act_arrival_time, StateManager stateManager, VehicleRoutingTransportCosts routingCosts, Map<String, Double> bestMessengers) {            super();            this.stateManager = stateManager;            this.routingCosts = routingCosts;            this.bestMessengers = bestMessengers;            this.latest_act_arrival_time_stateId = latest_act_arrival_time;        }        @Override        public void begin(VehicleRoute route) {            this.route = route;            latest_arrTime_at_prevAct = route.getEnd().getTheoreticalLatestOperationStartTime();            prevAct = route.getEnd();        }        @Override        public void visit(TourActivity currAct) {            double timeOfNearestMessenger = bestMessengers.get(((JobActivity) currAct).getJob().getId());            double potential_latest_arrTime_at_currAct =                latest_arrTime_at_prevAct - routingCosts.getBackwardTransportTime(currAct.getLocation(), prevAct.getLocation(), latest_arrTime_at_prevAct, route.getDriver(), route.getVehicle()) - currAct.getOperationTime();            double latest_arrTime_at_currAct = Math.min(3 * timeOfNearestMessenger, potential_latest_arrTime_at_currAct);            stateManager.putActivityState(currAct, latest_act_arrival_time_stateId, latest_arrTime_at_currAct);            assert currAct.getArrTime() <= latest_arrTime_at_currAct : \"this must not be since it breaks condition; actArrTime: \" + currAct.getArrTime() + \" latestArrTime: \" + latest_arrTime_at_currAct + \" vehicle: \" + route.getVehicle().getId();            latest_arrTime_at_prevAct = latest_arrTime_at_currAct;            prevAct = currAct;        }        @Override        public void finish() {        }    }    /**     * @throws IOException     */    public static void main(String[] args) throws IOException {        Examples.createOutputFolder();\t\t/*        build the problem\t\t */        VehicleRoutingProblem.Builder problemBuilder = VehicleRoutingProblem.Builder.newInstance();        problemBuilder.setFleetSize(FleetSize.FINITE);        readEnvelopes(problemBuilder);        readMessengers(problemBuilder);        //add constraints to problem        VehicleRoutingTransportCosts routingCosts = new CrowFlyCosts(problemBuilder.getLocations()); //which is the default VehicleRoutingTransportCosts in builder above        problemBuilder.setRoutingCost(routingCosts);        //finally build the problem//        problemBuilder.addPenaltyVehicles(20.0,50000);        VehicleRoutingProblem bicycleMessengerProblem = problemBuilder.build();        /*        define states and constraints         */        //map mapping nearest messengers, i.e. for each envelope the direct-delivery-time with the fastest messenger is stored here        Map<String, Double> nearestMessengers = getNearestMessengers(routingCosts, problemBuilder.getAddedJobs(), problemBuilder.getAddedVehicles());        //define stateManager to update the required activity-state: \"latest-activity-start-time\"        StateManager stateManager = new StateManager(bicycleMessengerProblem);        //create state        StateId latest_act_arrival_time_stateId = stateManager.createStateId(\"latest-act-arrival-time\");        //and make sure you update the activity-state \"latest-activity-start-time\" the way it is defined above        stateManager.addStateUpdater(new UpdateLatestActivityStartTimes(latest_act_arrival_time_stateId, stateManager, routingCosts, nearestMessengers));        stateManager.updateLoadStates();        ConstraintManager constraintManager = new ConstraintManager(bicycleMessengerProblem, stateManager);        constraintManager.addLoadConstraint();        constraintManager.addConstraint(new ThreeTimesLessThanBestDirectRouteConstraint(latest_act_arrival_time_stateId, nearestMessengers, routingCosts, stateManager), ConstraintManager.Priority.CRITICAL);        constraintManager.addConstraint(new IgnoreMessengerThatCanNeverMeetTimeRequirements(nearestMessengers, routingCosts));        VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(bicycleMessengerProblem)            .setStateAndConstraintManager(stateManager,constraintManager).buildAlgorithm();        algorithm.setMaxIterations(2000);//\t\tVehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(bicycleMessengerProblem)//\t\t\t\t.setStateAndConstraintManager(stateManager, constraintManager)//\t\t\t\t.setProperty(Jsprit.Parameter.THREADS.toString(), \"6\")////\t\t\t\t.setProperty(Jsprit.Strategy.RADIAL_BEST.toString(), \"0.25\")////\t\t\t\t.setProperty(Jsprit.Strategy.WORST_BEST.toString(), \"0.25\")////\t\t\t\t.setProperty(Jsprit.Strategy.CLUSTER_BEST.toString(), \"0.25\")////\t\t\t\t.setProperty(Jsprit.Strategy.RANDOM_BEST.toString(), \"0.\")////\t\t\t\t.setProperty(Jsprit.Strategy.RANDOM_REGRET.toString(), \"1.\")//\t\t\t\t.setProperty(Jsprit.Parameter.INSERTION_NOISE_LEVEL.toString(),\"0.01\")//\t\t\t\t.setProperty(Jsprit.Parameter.INSERTION_NOISE_PROB.toString(), \"0.2\")////\t\t\t\t.setProperty(Jsprit.Parameter.THRESHOLD_ALPHA.toString(),\"0.1\")//\t\t\t\t.buildAlgorithm();//\t\talgorithm.setMaxIterations(5000);//        VariationCoefficientTermination prematureAlgorithmTermination = new VariationCoefficientTermination(200, 0.001);//        algorithm.setPrematureAlgorithmTermination(prematureAlgorithmTermination);//        algorithm.addListener(prematureAlgorithmTermination);        algorithm.addListener(new AlgorithmSearchProgressChartListener(\"output/progress.png\"));        //search        Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();        //this is just to ensure that solution meet the above constraints        validateSolution(Solutions.bestOf(solutions), bicycleMessengerProblem, nearestMessengers);        SolutionPrinter.print(bicycleMessengerProblem, Solutions.bestOf(solutions), SolutionPrinter.Print.VERBOSE);        //you may want to plot the problem        Plotter plotter = new Plotter(bicycleMessengerProblem);//\t\tplotter.setBoundingBox(10000, 47500, 20000, 67500);        plotter.plotShipments(true);        plotter.plot(\"output/bicycleMessengerProblem.png\", \"bicycleMessenger\");        //and the problem as well as the solution        Plotter plotter1 = new Plotter(bicycleMessengerProblem, Solutions.bestOf(solutions));        plotter1.setLabel(Plotter.Label.ID);        plotter1.plotShipments(false);//\t\tplotter1.setBoundingBox(5000, 45500, 25000, 66500);        plotter1.plot(\"output/bicycleMessengerSolution.png\", \"bicycleMessenger\");        //and write out your solution in xml//\t\tnew VrpXMLWriter(bicycleMessengerProblem, solutions).write(\"output/bicycleMessenger.xml\");        new GraphStreamViewer(bicycleMessengerProblem).labelWith(Label.ID).setRenderShipments(true).setRenderDelay(150).display();//        new GraphStreamViewer(bicycleMessengerProblem, Solutions.bestOf(solutions)).setGraphStreamFrameScalingFactor(1.5).setCameraView(12500, 55000, 0.25).labelWith(Label.ACTIVITY).setRenderShipments(true).setRenderDelay(150).display();    }    //if you wanne run this enable assertion by putting an '-ea' in your vmargument list - Run As --> Run Configurations --> (x)=Arguments --> VM arguments: -ea    private static void validateSolution(VehicleRoutingProblemSolution bestOf, VehicleRoutingProblem bicycleMessengerProblem, Map<String, Double> nearestMessengers) {        for (VehicleRoute route : bestOf.getRoutes()) {            for (TourActivity act : route.getActivities()) {                if (act.getArrTime() > 3 * nearestMessengers.get(((JobActivity) act).getJob().getId())) {                    SolutionPrinter.print(bicycleMessengerProblem, bestOf, SolutionPrinter.Print.VERBOSE);                    throw new IllegalStateException(\"three times less than ... constraint broken. this must not be. act.getArrTime(): \" + act.getArrTime() + \" allowed: \" + 3 * nearestMessengers.get(((JobActivity) act).getJob().getId()));                }            }        }    }    static Map<String, Double> getNearestMessengers(VehicleRoutingTransportCosts routingCosts, Collection<Job> envelopes, Collection<Vehicle> messengers) {        Map<String, Double> nearestMessengers = new HashMap<String, Double>();        for (Job envelope : envelopes) {            double minDirect = Double.MAX_VALUE;            for (Vehicle m : messengers) {                double direct = getTimeOfDirectRoute(envelope, m, routingCosts);                if (direct < minDirect) {                    minDirect = direct;                }            }            nearestMessengers.put(envelope.getId(), minDirect);        }        return nearestMessengers;    }    static double getTimeOfDirectRoute(Job job, Vehicle v, VehicleRoutingTransportCosts routingCosts) {        Shipment envelope = (Shipment) job;        return routingCosts.getTransportTime(v.getStartLocation(), envelope.getPickupLocation(), 0.0, DriverImpl.noDriver(), v) +            routingCosts.getTransportTime(envelope.getPickupLocation(), envelope.getDeliveryLocation(), 0.0, DriverImpl.noDriver(), v);    }    private static void readEnvelopes(Builder problemBuilder) throws IOException {        BufferedReader reader = new BufferedReader(new FileReader(new File(\"input/bicycle_messenger_demand.txt\")));        String line;        boolean firstLine = true;        while ((line = reader.readLine()) != null) {            if (firstLine) {                firstLine = false;                continue;            }            String[] tokens = line.split(\"\\\\s+\");            //define your envelope which is basically a shipment from A to B            Shipment envelope = Shipment.Builder.newInstance(tokens[1]).addSizeDimension(0, 1)                .setPickupLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())                .setDeliveryLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]))).build()).build();            problemBuilder.addJob(envelope);        }        reader.close();    }    private static void readMessengers(Builder problemBuilder) throws IOException {        BufferedReader reader = new BufferedReader(new FileReader(new File(\"input/bicycle_messenger_supply.txt\")));        String line;        boolean firstLine = true;        VehicleType messengerType = VehicleTypeImpl.Builder.newInstance(\"messengerType\").addCapacityDimension(0, 15).setCostPerDistance(1).build();        /*         * the algo requires some time and space to search for a valid solution. if you ommit a penalty-type, it probably throws an Exception once it cannot insert an envelope anymore\t\t * thus, give it space by defining a penalty/shadow vehicle with higher variable and fixed costs to up the pressure to find solutions without penalty type\t\t *\t\t * it is important to give it the same typeId as the type you want to shadow\t\t */        while ((line = reader.readLine()) != null) {            if (firstLine) {                firstLine = false;                continue;            }            String[] tokens = line.split(\"\\\\s+\");            //build your vehicle            VehicleImpl vehicle = VehicleImpl.Builder.newInstance(tokens[1])                .setStartLocation(Location.Builder.newInstance().setCoordinate(Coordinate.newInstance(Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]))).build())                .setReturnToDepot(false).setType(messengerType).build();            problemBuilder.addVehicle(vehicle);        }        reader.close();    }}","code_tokens":["public","class","bicycle","messenger","{","static","class","three","times","less","than","best","direct","route","constraint","implements","hard","activity","constraint","{","private","final","vehicle","routing","transport","costs","routing","costs",";","private","final","route","and","activity","state","getter","state","manager",";","/","/","job","id","map","direct","-","distance","by","nearest","messenger","private","final","map","<","string",",","double",">","best","messengers",";","private","final","state","id","latest","act","arrival","time","state","id",";","public","three","times","less","than","best","direct","route","constraint","(","state","id","latest","act","arrival","time",",","map","<","string",",","double",">","nearest","messengers",",","vehicle","routing","transport","costs","routing","costs",",","route","and","activity","state","getter","state","manager",")","{","this",".","best","messengers","=","nearest","messengers",";","this",".","routing","costs","=","routing","costs",";","this",".","state","manager","=","state","manager",";","this",".","latest","act","arrival","time","state","id","=","latest","act","arrival","time",";","}","@","override","public","constraints","status","fulfilled","(","job","insertion","context","i","facts",",","tour","activity","prev","act",",","tour","activity","new","act",",","tour","activity","next","act",",","double","prev","act","dep","time",")","{","/","/","make","sure","vehicle","can","manage","direct","path","double","arr","time","at","next","act","on","direct","route","=","prev","act","dep","time","+","routing","costs",".","get","transport","time","(","prev","act",".","get","location","(",")",",","next","act",".","get","location","(",")",",","prev","act","dep","time",",","i","facts",".","get","new","driver","(",")",",","i","facts",".","get","new","vehicle","(",")",")",";","double","latest","arr","time","at","next","act","=","state","manager",".","get","activity","state","(","next","act",",","latest","act","arrival","time","state","id",",","double",".","class",")",";","if","(","latest","arr","time","at","next","act","=","=","null",")","latest","arr","time","at","next","act","=","next","act",".","get","theoretical","latest","operation","start","time","(",")",";","if","(","arr","time","at","next","act","on","direct","route",">","latest","arr","time","at","next","act",")","{","/","/","constraint","can","never","be","fulfilled","anymore",",","thus",".","not","fulfilled","break","return","constraints","status",".","not","fulfilled","break",";","}","double","arr","time","at","new","act","=","prev","act","dep","time","+","routing","costs",".","get","transport","time","(","prev","act",".","get","location","(",")",",","new","act",".","get","location","(",")",",","prev","act","dep","time",",","i","facts",".","get","new","driver","(",")",",","i","facts",".","get","new","vehicle","(",")",")",";","/","/","local","impact","/","/","no","matter","whether","it","is","a","pickup","shipment","or","deliver","shipment","activities",".","both","arrival","times","must","be","<","3","*","best",".","double","direct","time","of","nearest","messenger","=","best","messengers",".","get","(","(","(","job","activity",")","new","act",")",".","get","job","(",")",".","get","id","(",")",")",";","if","(","arr","time","at","new","act",">","3","*","direct","time","of","nearest","messenger",")","{","/","/","not","fulfilled","and","it","can","never","be","fulfilled","anymore","by","going","forward","in","route",",","thus","not","fulfilled","break","return","constraints","status",".","not","fulfilled","break",";","}","/","/","impact","on","whole","route",",","since","insertion","of","new","act","shifts","all","subsequent","activities","forward","in","time","double","departure","time","at","new","act","=","arr","time","at","new","act","+","new","act",".","get","operation","time","(",")",";","double","latest","arr","time","at","new","act","=","latest","arr","time","at","next","act","-","routing","costs",".","get","transport","time","(","new","act",".","get","location","(",")",",","next","act",".","get","location","(",")",",","departure","time","at","new","act",",","i","facts",".","get","new","driver","(",")",",","i","facts",".","get","new","vehicle","(",")",")",";","if","(","arr","time","at","new","act",">","latest","arr","time","at","new","act",")","{","return","constraints","status",".","not","fulfilled",";","}","double","arr","time","at","next","act","=","departure","time","at","new","act","+","routing","costs",".","get","transport","time","(","new","act",".","get","location","(",")",",","next","act",".","get","location","(",")",",","departure","time","at","new","act",",","i","facts",".","get","new","driver","(",")",",","i","facts",".","get","new","vehicle","(",")",")",";","/","/","here","you","need","an","activity","state","if","(","arr","time","at","next","act",">","latest","arr","time","at","next","act",")","{","return","constraints","status",".","not","fulfilled",";","}","return","constraints","status",".","fulfilled",";","}","}","static","class","ignore","messenger","that","can","never","meet","time","requirements","implements","hard","route","constraint","{","private","final","map","<","string",",","double",">","best","messengers",";","private","final","vehicle","routing","transport","costs","routing","costs",";","public","ignore","messenger","that","can","never","meet","time","requirements","(","map","<","string",",","double",">","best","messengers",",","vehicle","routing","transport","costs","routing","costs",")","{","super","(",")",";","this",".","best","messengers","=","best","messengers",";","this",".","routing","costs","=","routing","costs",";","}","@","override","public","boolean","fulfilled","(","job","insertion","context","insertion","context",")","{","double","time","of","direct","route","=","get","time","of","direct","route","(","insertion","context",".","get","job","(",")",",","insertion","context",".","get","new","vehicle","(",")",",","routing","costs",")",";","double","time","of","nearest","messenger","=","best","messengers",".","get","(","insertion","context",".","get","job","(",")",".","get","id","(",")",")",";","return","!","(","time","of","direct","route",">","3","*","time","of","nearest","messenger",")",";","}","}","static","class","update","latest","activity","start","times","implements","state","updater",",","reverse","activity","visitor","{","private","final","state","manager","state","manager",";","private","final","vehicle","routing","transport","costs","routing","costs",";","private","final","map","<","string",",","double",">","best","messengers",";","private","vehicle","route","route",";","private","tour","activity","prev","act",";","private","double","latest","arr","time","at","prev","act",";","private","final","state","id","latest","act","arrival","time","state","id",";","public","update","latest","activity","start","times","(","state","id","latest","act","arrival","time",",","state","manager","state","manager",",","vehicle","routing","transport","costs","routing","costs",",","map","<","string",",","double",">","best","messengers",")","{","super","(",")",";","this",".","state","manager","=","state","manager",";","this",".","routing","costs","=","routing","costs",";","this",".","best","messengers","=","best","messengers",";","this",".","latest","act","arrival","time","state","id","=","latest","act","arrival","time",";","}","@","override","public","void","begin","(","vehicle","route","route",")","{","this",".","route","=","route",";","latest","arr","time","at","prev","act","=","route",".","get","end","(",")",".","get","theoretical","latest","operation","start","time","(",")",";","prev","act","=","route",".","get","end","(",")",";","}","@","override","public","void","visit","(","tour","activity","curr","act",")","{","double","time","of","nearest","messenger","=","best","messengers",".","get","(","(","(","job","activity",")","curr","act",")",".","get","job","(",")",".","get","id","(",")",")",";","double","potential","latest","arr","time","at","curr","act","=","latest","arr","time","at","prev","act","-","routing","costs",".","get","backward","transport","time","(","curr","act",".","get","location","(",")",",","prev","act",".","get","location","(",")",",","latest","arr","time","at","prev","act",",","route",".","get","driver","(",")",",","route",".","get","vehicle","(",")",")","-","curr","act",".","get","operation","time","(",")",";","double","latest","arr","time","at","curr","act","=","math",".","min","(","3","*","time","of","nearest","messenger",",","potential","latest","arr","time","at","curr","act",")",";","state","manager",".","put","activity","state","(","curr","act",",","latest","act","arrival","time","state","id",",","latest","arr","time","at","curr","act",")",";","assert","curr","act",".","get","arr","time","(",")","<","=","latest","arr","time","at","curr","act",":","\"","this","must","not","be","since","it","breaks","condition",";","act","arr","time",":","\"","+","curr","act",".","get","arr","time","(",")","+","\"","latest","arr","time",":","\"","+","latest","arr","time","at","curr","act","+","\"","vehicle",":","\"","+","route",".","get","vehicle","(",")",".","get","id","(",")",";","latest","arr","time","at","prev","act","=","latest","arr","time","at","curr","act",";","prev","act","=","curr","act",";","}","@","override","public","void","finish","(",")","{","}","}","public","static","void","main","(","string","[","]","args",")","throws","io","exception","{","examples",".","create","output","folder","(",")",";","vehicle","routing","problem",".","builder","problem","builder","=","vehicle","routing","problem",".","builder",".","new","instance","(",")",";","problem","builder",".","set","fleet","size","(","fleet","size",".","finite",")",";","read","envelopes","(","problem","builder",")",";","read","messengers","(","problem","builder",")",";","/","/","add","constraints","to","problem","vehicle","routing","transport","costs","routing","costs","=","new","crow","fly","costs","(","problem","builder",".","get","locations","(",")",")",";","/","/","which","is","the","default","vehicle","routing","transport","costs","in","builder","above","problem","builder",".","set","routing","cost","(","routing","costs",")",";","/","/","finally","build","the","problem","/","/","problem","builder",".","add","penalty","vehicles","(","20",".","0",",","50000",")",";","vehicle","routing","problem","bicycle","messenger","problem","=","problem","builder",".","build","(",")",";","/","/","map","mapping","nearest","messengers",",","i",".","e",".","for","each","envelope","the","direct","-","delivery","-","time","with","the","fastest","messenger","is","stored","here","map","<","string",",","double",">","nearest","messengers","=","get","nearest","messengers","(","routing","costs",",","problem","builder",".","get","added","jobs","(",")",",","problem","builder",".","get","added","vehicles","(",")",")",";","/","/","define","state","manager","to","update","the","required","activity","-","state",":","\"","latest","-","activity","-","start","-","time","\"","state","manager","state","manager","=","new","state","manager","(","bicycle","messenger","problem",")",";","/","/","create","state","state","id","latest","act","arrival","time","state","id","=","state","manager",".","create","state","id","(","\"","latest","-","act","-","arrival","-","time","\"",")",";","/","/","and","make","sure","you","update","the","activity","-","state","\"","latest","-","activity","-","start","-","time","\"","the","way","it","is","defined","above","state","manager",".","add","state","updater","(","new","update","latest","activity","start","times","(","latest","act","arrival","time","state","id",",","state","manager",",","routing","costs",",","nearest","messengers",")",")",";","state","manager",".","update","load","states","(",")",";","constraint","manager","constraint","manager","=","new","constraint","manager","(","bicycle","messenger","problem",",","state","manager",")",";","constraint","manager",".","add","load","constraint","(",")",";","constraint","manager",".","add","constraint","(","new","three","times","less","than","best","direct","route","constraint","(","latest","act","arrival","time","state","id",",","nearest","messengers",",","routing","costs",",","state","manager",")",",","constraint","manager",".","priority",".","critical",")",";","constraint","manager",".","add","constraint","(","new","ignore","messenger","that","can","never","meet","time","requirements","(","nearest","messengers",",","routing","costs",")",")",";","vehicle","routing","algorithm","algorithm","=","jsprit",".","builder",".","new","instance","(","bicycle","messenger","problem",")",".","set","state","and","constraint","manager","(","state","manager",",","constraint","manager",")",".","build","algorithm","(",")",";","algorithm",".","set","max","iterations","(","2000",")",";","/","/","vehicle","routing","algorithm","algorithm","=","jsprit",".","builder",".","new","instance","(","bicycle","messenger","problem",")","/","/",".","set","state","and","constraint","manager","(","state","manager",",","constraint","manager",")","/","/",".","set","property","(","jsprit",".","parameter",".","threads",".","to","string","(",")",",","\"","6","\"",")","/","/","/","/",".","set","property","(","jsprit",".","strategy",".","radial","best",".","to","string","(",")",",","\"","0",".","25","\"",")","/","/","/","/",".","set","property","(","jsprit",".","strategy",".","worst","best",".","to","string","(",")",",","\"","0",".","25","\"",")","/","/","/","/",".","set","property","(","jsprit",".","strategy",".","cluster","best",".","to","string","(",")",",","\"","0",".","25","\"",")","/","/","/","/",".","set","property","(","jsprit",".","strategy",".","random","best",".","to","string","(",")",",","\"","0",".","\"",")","/","/","/","/",".","set","property","(","jsprit",".","strategy",".","random","regret",".","to","string","(",")",",","\"","1",".","\"",")","/","/",".","set","property","(","jsprit",".","parameter",".","insertion","noise","level",".","to","string","(",")",",","\"","0",".","01","\"",")","/","/",".","set","property","(","jsprit",".","parameter",".","insertion","noise","prob",".","to","string","(",")",",","\"","0",".","2","\"",")","/","/","/","/",".","set","property","(","jsprit",".","parameter",".","threshold","alpha",".","to","string","(",")",",","\"","0",".","1","\"",")","/","/",".","build","algorithm","(",")",";","/","/","algorithm",".","set","max","iterations","(","5000",")",";","/","/","variation","coefficient","termination","premature","algorithm","termination","=","new","variation","coefficient","termination","(","200",",","0",".","001",")",";","/","/","algorithm",".","set","premature","algorithm","termination","(","premature","algorithm","termination",")",";","/","/","algorithm",".","add","listener","(","premature","algorithm","termination",")",";","algorithm",".","add","listener","(","new","algorithm","search","progress","chart","listener","(","\"","output","/","progress",".","png","\"",")",")",";","/","/","search","collection","<","vehicle","routing","problem","solution",">","solutions","=","algorithm",".","search","solutions","(",")",";","/","/","this","is","just","to","ensure","that","solution","meet","the","above","constraints","validate","solution","(","solutions",".","best","of","(","solutions",")",",","bicycle","messenger","problem",",","nearest","messengers",")",";","solution","printer",".","print","(","bicycle","messenger","problem",",","solutions",".","best","of","(","solutions",")",",","solution","printer",".","print",".","verbose",")",";","/","/","you","may","want","to","plot","the","problem","plotter","plotter","=","new","plotter","(","bicycle","messenger","problem",")",";","/","/","plotter",".","set","bounding","box","(","10000",",","47500",",","20000",",","67500",")",";","plotter",".","plot","shipments","(","true",")",";","plotter",".","plot","(","\"","output","/","bicycle","messenger","problem",".","png","\"",",","\"","bicycle","messenger","\"",")",";","/","/","and","the","problem","as","well","as","the","solution","plotter","plotter1","=","new","plotter","(","bicycle","messenger","problem",",","solutions",".","best","of","(","solutions",")",")",";","plotter1",".","set","label","(","plotter",".","label",".","id",")",";","plotter1",".","plot","shipments","(","false",")",";","/","/","plotter1",".","set","bounding","box","(","5000",",","45500",",","25000",",","66500",")",";","plotter1",".","plot","(","\"","output","/","bicycle","messenger","solution",".","png","\"",",","\"","bicycle","messenger","\"",")",";","/","/","and","write","out","your","solution","in","xml","/","/","new","vrp","xml","writer","(","bicycle","messenger","problem",",","solutions",")",".","write","(","\"","output","/","bicycle","messenger",".","xml","\"",")",";","new","graph","stream","viewer","(","bicycle","messenger","problem",")",".","label","with","(","label",".","id",")",".","set","render","shipments","(","true",")",".","set","render","delay","(","150",")",".","display","(",")",";","/","/","new","graph","stream","viewer","(","bicycle","messenger","problem",",","solutions",".","best","of","(","solutions",")",")",".","set","graph","stream","frame","scaling","factor","(","1",".","5",")",".","set","camera","view","(","12500",",","55000",",","0",".","25",")",".","label","with","(","label",".","activity",")",".","set","render","shipments","(","true",")",".","set","render","delay","(","150",")",".","display","(",")",";","}","/","/","if","you","wanne","run","this","enable","assertion","by","putting","an","'","-","ea","'","in","your","vmargument","list","-","run","as","-","-",">","run","configurations","-","-",">","(","x",")","=","arguments","-","-",">","vm","arguments",":","-","ea","private","static","void","validate","solution","(","vehicle","routing","problem","solution","best","of",",","vehicle","routing","problem","bicycle","messenger","problem",",","map","<","string",",","double",">","nearest","messengers",")","{","for","(","vehicle","route","route",":","best","of",".","get","routes","(",")",")","{","for","(","tour","activity","act",":","route",".","get","activities","(",")",")","{","if","(","act",".","get","arr","time","(",")",">","3","*","nearest","messengers",".","get","(","(","(","job","activity",")","act",")",".","get","job","(",")",".","get","id","(",")",")",")","{","solution","printer",".","print","(","bicycle","messenger","problem",",","best","of",",","solution","printer",".","print",".","verbose",")",";","throw","new","illegal","state","exception","(","\"","three","times","less","than",".",".",".","constraint","broken",".","this","must","not","be",".","act",".","get","arr","time","(",")",":","\"","+","act",".","get","arr","time","(",")","+","\"","allowed",":","\"","+","3","*","nearest","messengers",".","get","(","(","(","job","activity",")","act",")",".","get","job","(",")",".","get","id","(",")",")",")",";","}","}","}","}","static","map","<","string",",","double",">","get","nearest","messengers","(","vehicle","routing","transport","costs","routing","costs",",","collection","<","job",">","envelopes",",","collection","<","vehicle",">","messengers",")","{","map","<","string",",","double",">","nearest","messengers","=","new","hash","map","<","string",",","double",">","(",")",";","for","(","job","envelope",":","envelopes",")","{","double","min","direct","=","double",".","max","value",";","for","(","vehicle","m",":","messengers",")","{","double","direct","=","get","time","of","direct","route","(","envelope",",","m",",","routing","costs",")",";","if","(","direct","<","min","direct",")","{","min","direct","=","direct",";","}","}","nearest","messengers",".","put","(","envelope",".","get","id","(",")",",","min","direct",")",";","}","return","nearest","messengers",";","}","static","double","get","time","of","direct","route","(","job","job",",","vehicle","v",",","vehicle","routing","transport","costs","routing","costs",")","{","shipment","envelope","=","(","shipment",")","job",";","return","routing","costs",".","get","transport","time","(","v",".","get","start","location","(",")",",","envelope",".","get","pickup","location","(",")",",","0",".","0",",","driver","impl",".","no","driver","(",")",",","v",")","+","routing","costs",".","get","transport","time","(","envelope",".","get","pickup","location","(",")",",","envelope",".","get","delivery","location","(",")",",","0",".","0",",","driver","impl",".","no","driver","(",")",",","v",")",";","}","private","static","void","read","envelopes","(","builder","problem","builder",")","throws","io","exception","{","buffered","reader","reader","=","new","buffered","reader","(","new","file","reader","(","new","file","(","\"","input","/","bicycle","messenger","demand",".","txt","\"",")",")",")",";","string","line",";","boolean","first","line","=","true",";","while","(","(","line","=","reader",".","read","line","(",")",")","!","=","null",")","{","if","(","first","line",")","{","first","line","=","false",";","continue",";","}","string","[","]","tokens","=","line",".","split","(","\"","\\","\\s","+","\"",")",";","/","/","define","your","envelope","which","is","basically","a","shipment","from","a","to","b","shipment","envelope","=","shipment",".","builder",".","new","instance","(","tokens","[","1","]",")",".","add","size","dimension","(","0",",","1",")",".","set","pickup","location","(","location",".","builder",".","new","instance","(",")",".","set","coordinate","(","coordinate",".","new","instance","(","double",".","parse","double","(","tokens","[","2","]",")",",","double",".","parse","double","(","tokens","[","3","]",")",")",")",".","build","(",")",")",".","set","delivery","location","(","location",".","builder",".","new","instance","(",")",".","set","coordinate","(","coordinate",".","new","instance","(","double",".","parse","double","(","tokens","[","4","]",")",",","double",".","parse","double","(","tokens","[","5","]",")",")",")",".","build","(",")",")",".","build","(",")",";","problem","builder",".","add","job","(","envelope",")",";","}","reader",".","close","(",")",";","}","private","static","void","read","messengers","(","builder","problem","builder",")","throws","io","exception","{","buffered","reader","reader","=","new","buffered","reader","(","new","file","reader","(","new","file","(","\"","input","/","bicycle","messenger","supply",".","txt","\"",")",")",")",";","string","line",";","boolean","first","line","=","true",";","vehicle","type","messenger","type","=","vehicle","type","impl",".","builder",".","new","instance","(","\"","messenger","type","\"",")",".","add","capacity","dimension","(","0",",","15",")",".","set","cost","per","distance","(","1",")",".","build","(",")",";","while","(","(","line","=","reader",".","read","line","(",")",")","!","=","null",")","{","if","(","first","line",")","{","first","line","=","false",";","continue",";","}","string","[","]","tokens","=","line",".","split","(","\"","\\","\\s","+","\"",")",";","/","/","build","your","vehicle","vehicle","impl","vehicle","=","vehicle","impl",".","builder",".","new","instance","(","tokens","[","1","]",")",".","set","start","location","(","location",".","builder",".","new","instance","(",")",".","set","coordinate","(","coordinate",".","new","instance","(","double",".","parse","double","(","tokens","[","2","]",")",",","double",".","parse","double","(","tokens","[","3","]",")",")",")",".","build","(",")",")",".","set","return","to","depot","(","false",")",".","set","type","(","messenger","type",")",".","build","(",")",";","problem","builder",".","add","vehicle","(","vehicle",")",";","}","reader",".","close","(",")",";","}","}"],"func_name":"BicycleMessenger","func_name_tokens":["bicycle","messenger"],"docstring":"  This class provides the/a solution to the following problem:  <p>  <p>  Optimize the routes for a bicycle messenger service!  Assume 5 messengers that have to pick up 30 envelopes distributed through the city. These 5 messengers are distributed through the city as well. Thus  there is no single depot and they do not need to go back to their original starting location.  <p>  Additional hard constraints:  1) Every messenger can carry up to fifteen envelopes  2) The way an evelopes travels should be less than three times the direct route (so delivery does not take too long)  <p>  Thus this problem is basically a Capacitated VRP with Pickups and Deliveries, Multiple Depots, Open Routes and Time Windows/Restrictions.   @author stefan schroeder","docstring_tokens":["this","class","provides","the","/","a","solution","to","the","following","problem",":","<","p",">","<","p",">","optimize","the","routes","for","a","bicycle","messenger","service","!","assume","5","messengers","that","have","to","pick","up","30","envelopes","distributed","through","the","city",".","these","5","messengers","are","distributed","through","the","city","as","well",".","thus","there","is","no","single","depot","and","they","do","not","need","to","go","back","to","their","original","starting","location",".","<","p",">","additional","hard","constraints",":","1",")","every","messenger","can","carry","up","to","fifteen","envelopes","2",")","the","way","an","evelopes","travels","should","be","less","than","three","times","the","direct","route","(","so","delivery","does","not","take","too","long",")","<","p",">","thus","this","problem","is","basically","a","capacitated","vrp","with","pickups","and","deliveries",",","multiple","depots",",","open","routes","and","time","windows","/","restrictions","."],"query":"Bicycle messenger / TSPPD with OptaPlanner","query_tokens":["bicycle","messenger","/","tsppd","with","opta","planner"]}
{"query_id":"9934970","repo_name":"icgc-dcc/dcc-storage","zip_link":"/overture-stack/score/archive/develop.zip","code":"  private void configureSystemHttpTimeouts() {    // These lines are ignored by SimpleClientHttpRequestFactory    System.setProperty(\"sun.net.client.defaultConnectTimeout\",        Long.toString(properties.getConnectTimeoutSeconds() * 1000));    System.setProperty(\"sun.net.client.defaultReadTimeout\",        Long.toString(properties.getReadTimeoutSeconds() * 1000));  }","code_tokens":["private","void","configure","system","http","timeouts","(",")","{","/","/","these","lines","are","ignored","by","simple","client","http","request","factory","system",".","set","property","(","\"","sun",".","net",".","client",".","default","connect","timeout","\"",",","long",".","to","string","(","properties",".","get","connect","timeout","seconds","(",")","*","1000",")",")",";","system",".","set","property","(","\"","sun",".","net",".","client",".","default","read","timeout","\"",",","long",".","to","string","(","properties",".","get","read","timeout","seconds","(",")","*","1000",")",")",";","}"],"func_name":"configureSystemHttpTimeouts","func_name_tokens":["configure","system","http","timeouts"],"docstring":"      Configure JVM wide timeouts of HTTP sockets.    <p>    May not be respected by all library implementors.    ","docstring_tokens":["configure","jvm","wide","timeouts","of","http","sockets",".","<","p",">","may","not","be","respected","by","all","library","implementors","."],"query":"Can I globally set the timeout of HTTP connections?","query_tokens":["can","i","globally","set","the","timeout","of","http","connections","?"]}
{"query_id":"596216","repo_name":"muntasirsyed/intellij-community","zip_link":"/muntasirsyed/intellij-community/archive/master.zip","code":"  public static boolean isDark(@NotNull final Color c) {    // based on perceptional luminosity, see    return (1 - (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue()) / 255) >= 0.5;  }","code_tokens":["public","static","boolean","is","dark","(","@","not","null","final","color","c",")","{","/","/","based","on","perceptional","luminosity",",","see","return","(","1","-","(","0",".","299","*","c",".","get","red","(",")","+","0",".","587","*","c",".","get","green","(",")","+","0",".","114","*","c",".","get","blue","(",")",")","/","255",")",">","=","0",".","5",";","}"],"func_name":"isDark","func_name_tokens":["is","dark"],"docstring":"      Checks whether color is dark or not based on perceptional luminosity       @param c color to check    @return dark or not","docstring_tokens":["checks","whether","color","is","dark","or","not","based","on","perceptional","luminosity"],"query":"Formula to determine brightness of RGB color","query_tokens":["formula","to","determine","brightness","of","rgb","color"]}
{"query_id":"4057470","repo_name":"ahmadassaf/CommaFeed-RSS-Reader","zip_link":"/ahmadassaf/commaFeed-RSS-reader/archive/master.zip","code":"public class URLCanonicalizer {\r\r\tpublic static String getCanonicalURL(String url) {\r\t\treturn getCanonicalURL(url, null);\r\t}\r\r\tpublic static String getCanonicalURL(String href, String context) {\r\r\t\ttry {\r\t\t\tURL canonicalURL = new URL(UrlResolver.resolveUrl(context == null ? \"\" : context, href));\r\r\t\t\tString host = canonicalURL.getHost().toLowerCase();\r\t\t\tif (StringUtils.isBlank(host)) {\r\t\t\t\t// This is an invalid Url.\r\t\t\t\treturn null;\r\t\t\t}\r\r\t\t\tString path = canonicalURL.getPath();\r\r\t\t\t/*\r\t\t\t * Normalize: no empty segments (i.e., \"//\"), no segments equal to\r\t\t\t * \".\", and no segments equal to \"..\" that are preceded by a segment\r\t\t\t * not equal to \"..\".\r\t\t\t */\r\t\t\tpath = new URI(path).normalize().toString();\r\r\t\t\t/*\r\t\t\t * Convert '//' -> '/'\r\t\t\t */\r\t\t\tint idx = path.indexOf(\"//\");\r\t\t\twhile (idx >= 0) {\r\t\t\t\tpath = path.replace(\"//\", \"/\");\r\t\t\t\tidx = path.indexOf(\"//\");\r\t\t\t}\r\r\t\t\t/*\r\t\t\t * Drop starting '/../'\r\t\t\t */\r\t\t\twhile (path.startsWith(\"/../\")) {\r\t\t\t\tpath = path.substring(3);\r\t\t\t}\r\r\t\t\t/*\r\t\t\t * Trim\r\t\t\t */\r\t\t\tpath = path.trim();\r\r\t\t\tfinal SortedMap<String, String> params = createParameterMap(canonicalURL.getQuery());\r\t\t\tfinal String queryString;\r\r\t\t\tif (params != null && params.size() > 0) {\r\t\t\t\tString canonicalParams = canonicalize(params);\r\t\t\t\tqueryString = (canonicalParams.isEmpty() ? \"\" : \"?\" + canonicalParams);\r\t\t\t} else {\r\t\t\t\tqueryString = \"\";\r\t\t\t}\r\r\t\t\t/*\r\t\t\t * Add starting slash if needed\r\t\t\t */\r\t\t\tif (path.length() == 0) {\r\t\t\t\tpath = \"/\" + path;\r\t\t\t}\r\r\t\t\t/*\r\t\t\t * Drop default port: example.com:80 -> example.com\r\t\t\t */\r\t\t\tint port = canonicalURL.getPort();\r\t\t\tif (port == canonicalURL.getDefaultPort()) {\r\t\t\t\tport = -1;\r\t\t\t}\r\r\t\t\tString protocol = canonicalURL.getProtocol().toLowerCase();\r\t\t\tString pathAndQueryString = normalizePath(path) + queryString;\r\r\t\t\tURL result = new URL(protocol, host, port, pathAndQueryString);\r\t\t\treturn result.toExternalForm();\r\r\t\t} catch (MalformedURLException ex) {\r\t\t\treturn null;\r\t\t} catch (URISyntaxException ex) {\r\t\t\treturn null;\r\t\t}\r\t}\r\r\t/**\r\t * Takes a query string, separates the constituent name-value pairs, and stores them in a SortedMap ordered by lexicographical order.\r\t * \r\t * @return Null if there is no query string.\r\t */\r\tprivate static SortedMap<String, String> createParameterMap(final String queryString) {\r\t\tif (queryString == null || queryString.isEmpty()) {\r\t\t\treturn null;\r\t\t}\r\r\t\tfinal String[] pairs = queryString.split(\"&\");\r\t\tfinal Map<String, String> params = new HashMap<String, String>(pairs.length);\r\r\t\tfor (final String pair : pairs) {\r\t\t\tif (pair.length() == 0) {\r\t\t\t\tcontinue;\r\t\t\t}\r\r\t\t\tString[] tokens = pair.split(\"=\", 2);\r\t\t\tswitch (tokens.length) {\r\t\t\tcase 1:\r\t\t\t\tif (pair.charAt(0) == '=') {\r\t\t\t\t\tparams.put(\"\", tokens[0]);\r\t\t\t\t} else {\r\t\t\t\t\tparams.put(tokens[0], \"\");\r\t\t\t\t}\r\t\t\t\tbreak;\r\t\t\tcase 2:\r\t\t\t\tparams.put(tokens[0], tokens[1]);\r\t\t\t\tbreak;\r\t\t\t}\r\t\t}\r\t\treturn new TreeMap<String, String>(params);\r\t}\r\r\t/**\r\t * Canonicalize the query string.\r\t * \r\t * @param sortedParamMap\r\t *            Parameter name-value pairs in lexicographical order.\r\t * @return Canonical form of query string.\r\t */\r\tprivate static String canonicalize(final SortedMap<String, String> sortedParamMap) {\r\t\tif (sortedParamMap == null || sortedParamMap.isEmpty()) {\r\t\t\treturn \"\";\r\t\t}\r\r\t\tfinal StringBuilder sb = new StringBuilder(100);\r\t\tfor (Map.Entry<String, String> pair : sortedParamMap.entrySet()) {\r\t\t\tfinal String key = pair.getKey().toLowerCase();\r\t\t\tif (key.equals(\"jsessionid\") || key.equals(\"phpsessid\") || key.equals(\"aspsessionid\")) {\r\t\t\t\tcontinue;\r\t\t\t}\r\t\t\tif (sb.length() > 0) {\r\t\t\t\tsb.append('&');\r\t\t\t}\r\t\t\tsb.append(percentEncodeRfc3986(pair.getKey()));\r\t\t\tif (!pair.getValue().isEmpty()) {\r\t\t\t\tsb.append('=');\r\t\t\t\tsb.append(percentEncodeRfc3986(pair.getValue()));\r\t\t\t}\r\t\t}\r\t\treturn sb.toString();\r\t}\r\r\t/**\r\t * Percent-encode values according the RFC 3986. The built-in Java URLEncoder does not encode according to the RFC, so we make the extra\r\t * replacements.\r\t * \r\t * @param string\r\t *            Decoded string.\r\t * @return Encoded string per RFC 3986.\r\t */\r\tprivate static String percentEncodeRfc3986(String string) {\r\t\ttry {\r\t\t\tstring = string.replace(\"+\", \"%2B\");\r\t\t\tstring = URLDecoder.decode(string, \"UTF-8\");\r\t\t\tstring = URLEncoder.encode(string, \"UTF-8\");\r\t\t\treturn string.replace(\"+\", \"%20\").replace(\"*\", \"%2A\").replace(\"%7E\", \"~\");\r\t\t} catch (Exception e) {\r\t\t\treturn string;\r\t\t}\r\t}\r\r\tprivate static String normalizePath(final String path) {\r\t\treturn path.replace(\"%7E\", \"~\").replace(\" \", \"%20\");\r\t}\r}\r","code_tokens":["public","class","url","canonicalizer","{","public","static","string","get","canonical","url","(","string","url",")","{","return","get","canonical","url","(","url",",","null",")",";","}","public","static","string","get","canonical","url","(","string","href",",","string","context",")","{","try","{","url","canonical","url","=","new","url","(","url","resolver",".","resolve","url","(","context","=","=","null","?","\"","\"",":","context",",","href",")",")",";","string","host","=","canonical","url",".","get","host","(",")",".","to","lower","case","(",")",";","if","(","string","utils",".","is","blank","(","host",")",")","{","/","/","this","is","an","invalid","url",".","return","null",";","}","string","path","=","canonical","url",".","get","path","(",")",";","path","=","new","uri","(","path",")",".","normalize","(",")",".","to","string","(",")",";","int","idx","=","path",".","index","of","(","\"","/","/","\"",")",";","while","(","idx",">","=","0",")","{","path","=","path",".","replace","(","\"","/","/","\"",",","\"","/","\"",")",";","idx","=","path",".","index","of","(","\"","/","/","\"",")",";","}","while","(","path",".","starts","with","(","\"","/",".",".","/","\"",")",")","{","path","=","path",".","substring","(","3",")",";","}","path","=","path",".","trim","(",")",";","final","sorted","map","<","string",",","string",">","params","=","create","parameter","map","(","canonical","url",".","get","query","(",")",")",";","final","string","query","string",";","if","(","params","!","=","null","&","&","params",".","size","(",")",">","0",")","{","string","canonical","params","=","canonicalize","(","params",")",";","query","string","=","(","canonical","params",".","is","empty","(",")","?","\"","\"",":","\"","?","\"","+","canonical","params",")",";","}","else","{","query","string","=","\"","\"",";","}","if","(","path",".","length","(",")","=","=","0",")","{","path","=","\"","/","\"","+","path",";","}","int","port","=","canonical","url",".","get","port","(",")",";","if","(","port","=","=","canonical","url",".","get","default","port","(",")",")","{","port","=","-","1",";","}","string","protocol","=","canonical","url",".","get","protocol","(",")",".","to","lower","case","(",")",";","string","path","and","query","string","=","normalize","path","(","path",")","+","query","string",";","url","result","=","new","url","(","protocol",",","host",",","port",",","path","and","query","string",")",";","return","result",".","to","external","form","(",")",";","}","catch","(","malformed","url","exception","ex",")","{","return","null",";","}","catch","(","uri","syntax","exception","ex",")","{","return","null",";","}","}","private","static","sorted","map","<","string",",","string",">","create","parameter","map","(","final","string","query","string",")","{","if","(","query","string","=","=","null","|","|","query","string",".","is","empty","(",")",")","{","return","null",";","}","final","string","[","]","pairs","=","query","string",".","split","(","\"","&","\"",")",";","final","map","<","string",",","string",">","params","=","new","hash","map","<","string",",","string",">","(","pairs",".","length",")",";","for","(","final","string","pair",":","pairs",")","{","if","(","pair",".","length","(",")","=","=","0",")","{","continue",";","}","string","[","]","tokens","=","pair",".","split","(","\"","=","\"",",","2",")",";","switch","(","tokens",".","length",")","{","case","1",":","if","(","pair",".","char","at","(","0",")","=","=","'","=","'",")","{","params",".","put","(","\"","\"",",","tokens","[","0","]",")",";","}","else","{","params",".","put","(","tokens","[","0","]",",","\"","\"",")",";","}","break",";","case","2",":","params",".","put","(","tokens","[","0","]",",","tokens","[","1","]",")",";","break",";","}","}","return","new","tree","map","<","string",",","string",">","(","params",")",";","}","private","static","string","canonicalize","(","final","sorted","map","<","string",",","string",">","sorted","param","map",")","{","if","(","sorted","param","map","=","=","null","|","|","sorted","param","map",".","is","empty","(",")",")","{","return","\"","\"",";","}","final","string","builder","sb","=","new","string","builder","(","100",")",";","for","(","map",".","entry","<","string",",","string",">","pair",":","sorted","param","map",".","entry","set","(",")",")","{","final","string","key","=","pair",".","get","key","(",")",".","to","lower","case","(",")",";","if","(","key",".","equals","(","\"","jsessionid","\"",")","|","|","key",".","equals","(","\"","phpsessid","\"",")","|","|","key",".","equals","(","\"","aspsessionid","\"",")",")","{","continue",";","}","if","(","sb",".","length","(",")",">","0",")","{","sb",".","append","(","'","&","'",")",";","}","sb",".","append","(","percent","encode","rfc3986","(","pair",".","get","key","(",")",")",")",";","if","(","!","pair",".","get","value","(",")",".","is","empty","(",")",")","{","sb",".","append","(","'","=","'",")",";","sb",".","append","(","percent","encode","rfc3986","(","pair",".","get","value","(",")",")",")",";","}","}","return","sb",".","to","string","(",")",";","}","private","static","string","percent","encode","rfc3986","(","string","string",")","{","try","{","string","=","string",".","replace","(","\"","+","\"",",","\"","%","2b","\"",")",";","string","=","url","decoder",".","decode","(","string",",","\"","utf","-","8","\"",")",";","string","=","url","encoder",".","encode","(","string",",","\"","utf","-","8","\"",")",";","return","string",".","replace","(","\"","+","\"",",","\"","%","20","\"",")",".","replace","(","\"","*","\"",",","\"","%","2a","\"",")",".","replace","(","\"","%","7e","\"",",","\"","~","\"",")",";","}","catch","(","exception","e",")","{","return","string",";","}","}","private","static","string","normalize","path","(","final","string","path",")","{","return","path",".","replace","(","\"","%","7e","\"",",","\"","~","\"",")",".","replace","(","\"","\"",",","\"","%","20","\"",")",";","}","}"],"func_name":"URLCanonicalizer","func_name_tokens":["url","canonicalizer"],"docstring":"\r  See http://en.wikipedia.org/wiki/URL_normalization for a reference Note: some parts of the code are adapted from:\r  \r  @author Yasser Ganjisaffar <lastname at gmail dot com>\r","docstring_tokens":["see","for","a","reference","note",":","some","parts","of","the","code","are","adapted","from",":"],"query":"How to normalize a URL in Java?","query_tokens":["how","to","normalize","a","url","in","java","?"]}
{"query_id":"4057513","repo_name":"dinesh-kumar-11/recordLinkageMapreduce","zip_link":"/dinesh-kumar-11/recordLinkageMapreduce/archive/master.zip","code":"public class Levenshtein implements Comparator {  public double compare(String s1, String s2) {       int len = Math.min(s1.length(), s2.length());    // we know that if the outcome here is 0.5 or lower, then the    // property will return the lower probability. so the moment we    // learn that probability is 0.5 or lower we can return 0.0 and    // stop. this optimization makes a perceptible improvement in    // overall performance.    int maxlen = Math.max(s1.length(), s2.length());    if ((double) len / (double) maxlen <= 0.5)      return 0.0;    // if the strings are equal we can stop right here.    if (len == maxlen && s1.equals(s2))      return 1.0;        // we couldn't shortcut, so now we go ahead and compute the full    // metric    int dist = Math.min(compactDistance(s1, s2), len);    return 1.0 - (((double) dist) / ((double) len));  }  public boolean isTokenized() {    return true;  }  /**   * This is the original, naive implementation, using the Wagner &   * Fischer algorithm from 1974. It uses a flattened matrix for   * speed, but still computes the entire matrix.   */  public static int distance(String s1, String s2) {    if (s1.length() == 0)      return s2.length();    if (s2.length() == 0)      return s1.length();    int s1len = s1.length();    // we use a flat array for better performance. we address it by    // s1ix + s1len * s2ix. this modification improves performance    // by about 30%, which is definitely worth the extra complexity.    int[] matrix = new int[(s1len + 1) * (s2.length() + 1)];    for (int col = 0; col <= s2.length(); col++)      matrix[col * s1len] = col;    for (int row = 0; row <= s1len; row++)      matrix[row] = row;    for (int ix1 = 0; ix1 < s1len; ix1++) {      char ch1 = s1.charAt(ix1);      for (int ix2 = 0; ix2 < s2.length(); ix2++) {        int cost;        if (ch1 == s2.charAt(ix2))          cost = 0;        else          cost = 1;        int left = matrix[ix1 + ((ix2 + 1) * s1len)] + 1;        int above = matrix[ix1 + 1 + (ix2 * s1len)] + 1;        int aboveleft = matrix[ix1 + (ix2 * s1len)] + cost;        matrix[ix1 + 1 + ((ix2 + 1) * s1len)] =          Math.min(left, Math.min(above, aboveleft));      }    }    // for (int ix1 = 0; ix1 <= s1len; ix1++) {    //   for (int ix2 = 0; ix2 <= s2.length(); ix2++) {    //     System.out.print(matrix[ix1 + (ix2 * s1len)] + \" \");    //   }    //   System.out.println();    // }        return matrix[s1len + (s2.length() * s1len)];  }    // /**  //  * An optimized version of the Wagner & Fischer algorithm, which  //  * exploits our knowledge that if the distance is above a certain  //  * limit (0.5 when normalized) we use the lower probability. We  //  * therefore stop once we go over the maximum distance.  //  *  //  * <p>On at least one use case, this optimization shaves 15% off the  //  * total execution time (ie: not just Levenshtein).  //  */  // public static int cutoffDistance(String s1, String s2) {  //   if (s1.length() == 0)  //     return s2.length();  //   if (s2.length() == 0)  //     return s1.length();  //   int maxdist = Math.min(s1.length(), s2.length()) / 2;  //   int s1len = s1.length();  //   // we use a flat array for better performance. we address it by  //   // s1ix + s1len * s2ix. this modification improves performance  //   // by about 30%, which is definitely worth the extra complexity.  //   int[] matrix = new int[(s1len + 1) * (s2.length() + 1)];  //   for (int col = 0; col <= s2.length(); col++)  //     matrix[col * s1len] = col;  //   for (int row = 0; row <= s1len; row++)  //     matrix[row] = row;  //   for (int ix1 = 0; ix1 < s1len; ix1++) {  //     char ch1 = s1.charAt(ix1);  //     for (int ix2 = 0; ix2 < s2.length(); ix2++) {  //       int cost;  //       if (ch1 == s2.charAt(ix2))  //         cost = 0;  //       else  //         cost = 1;  //       int left = matrix[ix1 + ((ix2 + 1) * s1len)] + 1;  //       int above = matrix[ix1 + 1 + (ix2 * s1len)] + 1;  //       int aboveleft = matrix[ix1 + (ix2 * s1len)] + cost;  //       int distance = Math.min(left, Math.min(above, aboveleft));  //       if (ix1 == ix2 && distance > maxdist)  //          return distance;  //       matrix[ix1 + 1 + ((ix2 + 1) * s1len)] = distance;  //     }  //   }      //   return matrix[s1len + (s2.length() * s1len)];  // }  // /**  //  * This implementation is my own reinvention of Ukkonen's optimized  //  * version of the Wagner & Fischer algorithm. It's not exactly the  //  * same as Ukkonen's algorithm, and I only managed to formulate it  //  * recursively. The result is that unless s1 and s2 are very similar  //  * it is slower than Wagner & Fischer. I don't recommend using this  //  * version.  //  */  // public static int recursiveDistance(String s1, String s2) {  //   if (s1.length() == 0)  //     return s2.length();  //   if (s2.length() == 0)  //     return s1.length();  //   // we use a flat array for better performance. we address it by  //   // s1ix + s1len * s2ix. this modification improves performance  //   // by about 30%, which is definitely worth the extra complexity.  //   int[] matrix = new int[(s1.length() + 1) * (s2.length() + 1)];  //   // FIXME: modify to avoid having to initialize  //   for (int ix = 1; ix < matrix.length; ix++)  //     matrix[ix] = -1;      //   return computeRecursively(matrix, s1, s2, s1.length(), s2.length());  // }  // // inner recursive function for above method  // private static int computeRecursively(int[] matrix, String s1, String s2,  //                                       int ix1, int ix2) {  //   // for the first row and first column we know the score already  //   if (ix1 == 0)  //     return ix2;  //   if (ix2 == 0)  //     return ix1;  //   // work out our position in the matrix, and see if we know the score  //   int pos = ix1 + (ix2 * s1.length());  //   if (matrix[pos] != -1)  //     return matrix[pos];  //   // the lowest possible score in this position  //   int lowest = Math.abs(ix1 - ix2);  //   // increase estimate based on lowest score at diagonal  //   int smallest = Math.min(ix1, ix2);  //   int cost_smallest = matrix[smallest + (smallest * s1.length())];  //   if (cost_smallest != -1)  //     lowest += cost_smallest;  //   // find the cost here  //   int cost;  //   if (s1.charAt(ix1 - 1) == s2.charAt(ix2 - 1))  //     cost = 0;  //   else  //     cost = 1;  //   // if aboveleft is already at the lowest, we're done  //   int aboveleft = computeRecursively(matrix, s1, s2, ix1 - 1, ix2 - 1);  //   if (aboveleft == lowest) {  //     matrix[pos] = lowest + cost;  //     return lowest + cost;  //   }  //   // what about above?  //   int above = computeRecursively(matrix, s1, s2, ix1, ix2 - 1);  //   int left;  //   if (above > lowest)  //     // could be lower than above, so compute  //     left = computeRecursively(matrix, s1, s2, ix1 - 1, ix2);  //   else  //     // it' can't be smaller than above, so no need to compute  //     left = above;      //   int distance = Math.min(left, Math.min(above, aboveleft)) + cost;  //   matrix[pos] = distance;  //   return distance;  // }  /**   * Optimized version of the Wagner & Fischer algorithm that only   * keeps a single column in the matrix in memory at a time. It   * implements the simple cutoff, but otherwise computes the entire   * matrix. It is roughly twice as fast as the original function.   */  public static int compactDistance(String s1, String s2) {    if (s1.length() == 0)      return s2.length();    if (s2.length() == 0)      return s1.length();    // the maximum edit distance there is any point in reporting.    int maxdist = Math.min(s1.length(), s2.length()) / 2;        // we allocate just one column instead of the entire matrix, in    // order to save space.  this also enables us to implement the    // algorithm somewhat faster.  the first cell is always the    // virtual first row.    int s1len = s1.length();    int[] column = new int[s1len + 1];    // first we need to fill in the initial column. we use a separate    // loop for this, because in this case our basis for comparison is    // not the previous column, but a virtual first column.    int ix2 = 0;    char ch2 = s2.charAt(ix2);    column[0] = 1; // virtual first row    for (int ix1 = 1; ix1 <= s1len; ix1++) {      int cost = s1.charAt(ix1 - 1) == ch2 ? 0 : 1;      // Lowest of three: above (column[ix1 - 1]), aboveleft: ix1 - 1,      // left: ix1. Latter cannot possibly be lowest, so is      // ignored.      column[ix1] = Math.min(column[ix1 - 1], ix1 - 1) + cost;    }    // okay, now we have an initialized first column, and we can    // compute the rest of the matrix.    int above = 0;    for (ix2 = 1; ix2 < s2.length(); ix2++) {      ch2 = s2.charAt(ix2);      above = ix2 + 1; // virtual first row      int smallest = s1len * 2; // used to implement cutoff      for (int ix1 = 1; ix1 <= s1len; ix1++) {        int cost = s1.charAt(ix1 - 1) == ch2 ? 0 : 1;        // above:     above        // aboveleft: column[ix1 - 1]        // left:      column[ix1]        int value = Math.min(Math.min(above, column[ix1 - 1]), column[ix1]) +                    cost;        column[ix1 - 1] = above; // write previous        above = value;           // keep current        smallest = Math.min(smallest, value);      }      column[s1len] = above;      // check if we can stop because we'll be going over the max distance      if (smallest > maxdist)        return smallest;    }    // ok, we're done    return above;  }  }","code_tokens":["public","class","levenshtein","implements","comparator","{","public","double","compare","(","string","s1",",","string","s2",")","{","int","len","=","math",".","min","(","s1",".","length","(",")",",","s2",".","length","(",")",")",";","/","/","we","know","that","if","the","outcome","here","is","0",".","5","or","lower",",","then","the","/","/","property","will","return","the","lower","probability",".","so","the","moment","we","/","/","learn","that","probability","is","0",".","5","or","lower","we","can","return","0",".","0","and","/","/","stop",".","this","optimization","makes","a","perceptible","improvement","in","/","/","overall","performance",".","int","maxlen","=","math",".","max","(","s1",".","length","(",")",",","s2",".","length","(",")",")",";","if","(","(","double",")","len","/","(","double",")","maxlen","<","=","0",".","5",")","return","0",".","0",";","/","/","if","the","strings","are","equal","we","can","stop","right","here",".","if","(","len","=","=","maxlen","&","&","s1",".","equals","(","s2",")",")","return","1",".","0",";","/","/","we","couldn","'","t","shortcut",",","so","now","we","go","ahead","and","compute","the","full","/","/","metric","int","dist","=","math",".","min","(","compact","distance","(","s1",",","s2",")",",","len",")",";","return","1",".","0","-","(","(","(","double",")","dist",")","/","(","(","double",")","len",")",")",";","}","public","boolean","is","tokenized","(",")","{","return","true",";","}","public","static","int","distance","(","string","s1",",","string","s2",")","{","if","(","s1",".","length","(",")","=","=","0",")","return","s2",".","length","(",")",";","if","(","s2",".","length","(",")","=","=","0",")","return","s1",".","length","(",")",";","int","s1len","=","s1",".","length","(",")",";","/","/","we","use","a","flat","array","for","better","performance",".","we","address","it","by","/","/","s1ix","+","s1len","*","s2ix",".","this","modification","improves","performance","/","/","by","about","30","%",",","which","is","definitely","worth","the","extra","complexity",".","int","[","]","matrix","=","new","int","[","(","s1len","+","1",")","*","(","s2",".","length","(",")","+","1",")","]",";","for","(","int","col","=","0",";","col","<","=","s2",".","length","(",")",";","col","+","+",")","matrix","[","col","*","s1len","]","=","col",";","for","(","int","row","=","0",";","row","<","=","s1len",";","row","+","+",")","matrix","[","row","]","=","row",";","for","(","int","ix1","=","0",";","ix1","<","s1len",";","ix1","+","+",")","{","char","ch1","=","s1",".","char","at","(","ix1",")",";","for","(","int","ix2","=","0",";","ix2","<","s2",".","length","(",")",";","ix2","+","+",")","{","int","cost",";","if","(","ch1","=","=","s2",".","char","at","(","ix2",")",")","cost","=","0",";","else","cost","=","1",";","int","left","=","matrix","[","ix1","+","(","(","ix2","+","1",")","*","s1len",")","]","+","1",";","int","above","=","matrix","[","ix1","+","1","+","(","ix2","*","s1len",")","]","+","1",";","int","aboveleft","=","matrix","[","ix1","+","(","ix2","*","s1len",")","]","+","cost",";","matrix","[","ix1","+","1","+","(","(","ix2","+","1",")","*","s1len",")","]","=","math",".","min","(","left",",","math",".","min","(","above",",","aboveleft",")",")",";","}","}","/","/","for","(","int","ix1","=","0",";","ix1","<","=","s1len",";","ix1","+","+",")","{","/","/","for","(","int","ix2","=","0",";","ix2","<","=","s2",".","length","(",")",";","ix2","+","+",")","{","/","/","system",".","out",".","print","(","matrix","[","ix1","+","(","ix2","*","s1len",")","]","+","\"","\"",")",";","/","/","}","/","/","system",".","out",".","println","(",")",";","/","/","}","return","matrix","[","s1len","+","(","s2",".","length","(",")","*","s1len",")","]",";","}","/","/","/","/","public","static","int","cutoff","distance","(","string","s1",",","string","s2",")","{","/","/","if","(","s1",".","length","(",")","=","=","0",")","/","/","return","s2",".","length","(",")",";","/","/","if","(","s2",".","length","(",")","=","=","0",")","/","/","return","s1",".","length","(",")",";","/","/","int","maxdist","=","math",".","min","(","s1",".","length","(",")",",","s2",".","length","(",")",")","/","2",";","/","/","int","s1len","=","s1",".","length","(",")",";","/","/","/","/","we","use","a","flat","array","for","better","performance",".","we","address","it","by","/","/","/","/","s1ix","+","s1len","*","s2ix",".","this","modification","improves","performance","/","/","/","/","by","about","30","%",",","which","is","definitely","worth","the","extra","complexity",".","/","/","int","[","]","matrix","=","new","int","[","(","s1len","+","1",")","*","(","s2",".","length","(",")","+","1",")","]",";","/","/","for","(","int","col","=","0",";","col","<","=","s2",".","length","(",")",";","col","+","+",")","/","/","matrix","[","col","*","s1len","]","=","col",";","/","/","for","(","int","row","=","0",";","row","<","=","s1len",";","row","+","+",")","/","/","matrix","[","row","]","=","row",";","/","/","for","(","int","ix1","=","0",";","ix1","<","s1len",";","ix1","+","+",")","{","/","/","char","ch1","=","s1",".","char","at","(","ix1",")",";","/","/","for","(","int","ix2","=","0",";","ix2","<","s2",".","length","(",")",";","ix2","+","+",")","{","/","/","int","cost",";","/","/","if","(","ch1","=","=","s2",".","char","at","(","ix2",")",")","/","/","cost","=","0",";","/","/","else","/","/","cost","=","1",";","/","/","int","left","=","matrix","[","ix1","+","(","(","ix2","+","1",")","*","s1len",")","]","+","1",";","/","/","int","above","=","matrix","[","ix1","+","1","+","(","ix2","*","s1len",")","]","+","1",";","/","/","int","aboveleft","=","matrix","[","ix1","+","(","ix2","*","s1len",")","]","+","cost",";","/","/","int","distance","=","math",".","min","(","left",",","math",".","min","(","above",",","aboveleft",")",")",";","/","/","if","(","ix1","=","=","ix2","&","&","distance",">","maxdist",")","/","/","return","distance",";","/","/","matrix","[","ix1","+","1","+","(","(","ix2","+","1",")","*","s1len",")","]","=","distance",";","/","/","}","/","/","}","/","/","return","matrix","[","s1len","+","(","s2",".","length","(",")","*","s1len",")","]",";","/","/","}","/","/","/","/","public","static","int","recursive","distance","(","string","s1",",","string","s2",")","{","/","/","if","(","s1",".","length","(",")","=","=","0",")","/","/","return","s2",".","length","(",")",";","/","/","if","(","s2",".","length","(",")","=","=","0",")","/","/","return","s1",".","length","(",")",";","/","/","/","/","we","use","a","flat","array","for","better","performance",".","we","address","it","by","/","/","/","/","s1ix","+","s1len","*","s2ix",".","this","modification","improves","performance","/","/","/","/","by","about","30","%",",","which","is","definitely","worth","the","extra","complexity",".","/","/","int","[","]","matrix","=","new","int","[","(","s1",".","length","(",")","+","1",")","*","(","s2",".","length","(",")","+","1",")","]",";","/","/","/","/","fixme",":","modify","to","avoid","having","to","initialize","/","/","for","(","int","ix","=","1",";","ix","<","matrix",".","length",";","ix","+","+",")","/","/","matrix","[","ix","]","=","-","1",";","/","/","return","compute","recursively","(","matrix",",","s1",",","s2",",","s1",".","length","(",")",",","s2",".","length","(",")",")",";","/","/","}","/","/","/","/","inner","recursive","function","for","above","method","/","/","private","static","int","compute","recursively","(","int","[","]","matrix",",","string","s1",",","string","s2",",","/","/","int","ix1",",","int","ix2",")","{","/","/","/","/","for","the","first","row","and","first","column","we","know","the","score","already","/","/","if","(","ix1","=","=","0",")","/","/","return","ix2",";","/","/","if","(","ix2","=","=","0",")","/","/","return","ix1",";","/","/","/","/","work","out","our","position","in","the","matrix",",","and","see","if","we","know","the","score","/","/","int","pos","=","ix1","+","(","ix2","*","s1",".","length","(",")",")",";","/","/","if","(","matrix","[","pos","]","!","=","-","1",")","/","/","return","matrix","[","pos","]",";","/","/","/","/","the","lowest","possible","score","in","this","position","/","/","int","lowest","=","math",".","abs","(","ix1","-","ix2",")",";","/","/","/","/","increase","estimate","based","on","lowest","score","at","diagonal","/","/","int","smallest","=","math",".","min","(","ix1",",","ix2",")",";","/","/","int","cost","smallest","=","matrix","[","smallest","+","(","smallest","*","s1",".","length","(",")",")","]",";","/","/","if","(","cost","smallest","!","=","-","1",")","/","/","lowest","+","=","cost","smallest",";","/","/","/","/","find","the","cost","here","/","/","int","cost",";","/","/","if","(","s1",".","char","at","(","ix1","-","1",")","=","=","s2",".","char","at","(","ix2","-","1",")",")","/","/","cost","=","0",";","/","/","else","/","/","cost","=","1",";","/","/","/","/","if","aboveleft","is","already","at","the","lowest",",","we","'","re","done","/","/","int","aboveleft","=","compute","recursively","(","matrix",",","s1",",","s2",",","ix1","-","1",",","ix2","-","1",")",";","/","/","if","(","aboveleft","=","=","lowest",")","{","/","/","matrix","[","pos","]","=","lowest","+","cost",";","/","/","return","lowest","+","cost",";","/","/","}","/","/","/","/","what","about","above","?","/","/","int","above","=","compute","recursively","(","matrix",",","s1",",","s2",",","ix1",",","ix2","-","1",")",";","/","/","int","left",";","/","/","if","(","above",">","lowest",")","/","/","/","/","could","be","lower","than","above",",","so","compute","/","/","left","=","compute","recursively","(","matrix",",","s1",",","s2",",","ix1","-","1",",","ix2",")",";","/","/","else","/","/","/","/","it","'","can","'","t","be","smaller","than","above",",","so","no","need","to","compute","/","/","left","=","above",";","/","/","int","distance","=","math",".","min","(","left",",","math",".","min","(","above",",","aboveleft",")",")","+","cost",";","/","/","matrix","[","pos","]","=","distance",";","/","/","return","distance",";","/","/","}","public","static","int","compact","distance","(","string","s1",",","string","s2",")","{","if","(","s1",".","length","(",")","=","=","0",")","return","s2",".","length","(",")",";","if","(","s2",".","length","(",")","=","=","0",")","return","s1",".","length","(",")",";","/","/","the","maximum","edit","distance","there","is","any","point","in","reporting",".","int","maxdist","=","math",".","min","(","s1",".","length","(",")",",","s2",".","length","(",")",")","/","2",";","/","/","we","allocate","just","one","column","instead","of","the","entire","matrix",",","in","/","/","order","to","save","space",".","this","also","enables","us","to","implement","the","/","/","algorithm","somewhat","faster",".","the","first","cell","is","always","the","/","/","virtual","first","row",".","int","s1len","=","s1",".","length","(",")",";","int","[","]","column","=","new","int","[","s1len","+","1","]",";","/","/","first","we","need","to","fill","in","the","initial","column",".","we","use","a","separate","/","/","loop","for","this",",","because","in","this","case","our","basis","for","comparison","is","/","/","not","the","previous","column",",","but","a","virtual","first","column",".","int","ix2","=","0",";","char","ch2","=","s2",".","char","at","(","ix2",")",";","column","[","0","]","=","1",";","/","/","virtual","first","row","for","(","int","ix1","=","1",";","ix1","<","=","s1len",";","ix1","+","+",")","{","int","cost","=","s1",".","char","at","(","ix1","-","1",")","=","=","ch2","?","0",":","1",";","/","/","lowest","of","three",":","above","(","column","[","ix1","-","1","]",")",",","aboveleft",":","ix1","-","1",",","/","/","left",":","ix1",".","latter","cannot","possibly","be","lowest",",","so","is","/","/","ignored",".","column","[","ix1","]","=","math",".","min","(","column","[","ix1","-","1","]",",","ix1","-","1",")","+","cost",";","}","/","/","okay",",","now","we","have","an","initialized","first","column",",","and","we","can","/","/","compute","the","rest","of","the","matrix",".","int","above","=","0",";","for","(","ix2","=","1",";","ix2","<","s2",".","length","(",")",";","ix2","+","+",")","{","ch2","=","s2",".","char","at","(","ix2",")",";","above","=","ix2","+","1",";","/","/","virtual","first","row","int","smallest","=","s1len","*","2",";","/","/","used","to","implement","cutoff","for","(","int","ix1","=","1",";","ix1","<","=","s1len",";","ix1","+","+",")","{","int","cost","=","s1",".","char","at","(","ix1","-","1",")","=","=","ch2","?","0",":","1",";","/","/","above",":","above","/","/","aboveleft",":","column","[","ix1","-","1","]","/","/","left",":","column","[","ix1","]","int","value","=","math",".","min","(","math",".","min","(","above",",","column","[","ix1","-","1","]",")",",","column","[","ix1","]",")","+","cost",";","column","[","ix1","-","1","]","=","above",";","/","/","write","previous","above","=","value",";","/","/","keep","current","smallest","=","math",".","min","(","smallest",",","value",")",";","}","column","[","s1len","]","=","above",";","/","/","check","if","we","can","stop","because","we","'","ll","be","going","over","the","max","distance","if","(","smallest",">","maxdist",")","return","smallest",";","}","/","/","ok",",","we","'","re","done","return","above",";","}","}"],"func_name":"Levenshtein","func_name_tokens":["levenshtein"],"docstring":"  An implementation of the Levenshtein distance metric. This is a  fairly complicated metric, and there are a number of different ways  to implement it, with different performance characteristics. As  this comparator is highly performance-critical, this class contains  a number of different implementations, some of them experimental.   <p>Some <a href=\"http://www.let.rug.nl/kleiweg/lev/\">general  background on Levenshtein</a>, and <a   <p>To see which algorithms are implemented, see comments on  individual methods.","docstring_tokens":["an","implementation","of","the","levenshtein","distance","metric",".","this","is","a","fairly","complicated","metric",",","and","there","are","a","number","of","different","ways","to","implement","it",",","with","different","performance","characteristics",".","as","this","comparator","is","highly","performance","-","critical",",","this","class","contains","a","number","of","different","implementations",",","some","of","them","experimental",".","<","p",">","some","<","a","href","=","\"","\"",">","general","background","on","levenshtein","<","/","a",">",",","and","<","a","<","p",">","to","see","which","algorithms","are","implemented",",","see","comments","on","individual","methods","."],"query":"Levenshtein Distance Algorithm better than O(n*m)?","query_tokens":["levenshtein","distance","algorithm","better","than","o","(","n","*","m",")","?"]}
{"query_id":"202302","repo_name":"huangsongyan/hellocharts-android","zip_link":"/huangsongyan/hellocharts-android/archive/master.zip","code":"    public static float roundToOneSignificantFigure(double num) {        final float d = (float) Math.ceil((float) Math.log10(num < 0 ? -num : num));        final int power = 1 - (int) d;        final float magnitude = (float) Math.pow(10, power);        final long shifted = Math.round(num * magnitude);        return shifted / magnitude;    }","code_tokens":["public","static","float","round","to","one","significant","figure","(","double","num",")","{","final","float","d","=","(","float",")","math",".","ceil","(","(","float",")","math",".","log10","(","num","<","0","?","-","num",":","num",")",")",";","final","int","power","=","1","-","(","int",")","d",";","final","float","magnitude","=","(","float",")","math",".","pow","(","10",",","power",")",";","final","long","shifted","=","math",".","round","(","num","*","magnitude",")",";","return","shifted","/","magnitude",";","}"],"func_name":"roundToOneSignificantFigure","func_name_tokens":["round","to","one","significant","figure"],"docstring":"          Rounds the given number to the given number of significant digits. Based on an answer on <a","docstring_tokens":["rounds","the","given","number","to","the","given","number","of","significant","digits",".","based","on","an","answer","on","<","a"],"query":"Rounding to an arbitrary number of significant digits","query_tokens":["rounding","to","an","arbitrary","number","of","significant","digits"]}
{"query_id":"3771081","repo_name":"robgratz/pac4j","zip_link":"/robgratz/pac4j/archive/master.zip","code":"    public static boolean urisEqualAfterPortNormalization(final URI uri1, final URI uri2) {\r        if ((uri1 == null) && (uri2 == null)) {\r            return true;\r        }\r        if (((uri1 == null) && (uri2 != null)) || ((uri1 != null) && (uri2 == null))) {\r            return false;\r        }\r        \r        try {\r            URI normalizedUri1 = normalizePortNumbersInUri(uri1);\r            URI normalizedUri2 = normalizePortNumbersInUri(uri2);\r            boolean eq = normalizedUri1.equals(normalizedUri2);\r            return eq;\r        } catch (URISyntaxException use) {\r            logger.error(\"Cannot compare 2 URIs.\", use);\r            return false;    \r        }\r    }\r","code_tokens":["public","static","boolean","uris","equal","after","port","normalization","(","final","uri","uri1",",","final","uri","uri2",")","{","if","(","(","uri1","=","=","null",")","&","&","(","uri2","=","=","null",")",")","{","return","true",";","}","if","(","(","(","uri1","=","=","null",")","&","&","(","uri2","!","=","null",")",")","|","|","(","(","uri1","!","=","null",")","&","&","(","uri2","=","=","null",")",")",")","{","return","false",";","}","try","{","uri","normalized","uri1","=","normalize","port","numbers","in","uri","(","uri1",")",";","uri","normalized","uri2","=","normalize","port","numbers","in","uri","(","uri2",")",";","boolean","eq","=","normalized","uri1",".","equals","(","normalized","uri2",")",";","return","eq",";","}","catch","(","uri","syntax","exception","use",")","{","logger",".","error","(","\"","cannot","compare","2","ur","is",".","\"",",","use",")",";","return","false",";","}","}"],"func_name":"urisEqualAfterPortNormalization","func_name_tokens":["uris","equal","after","port","normalization"],"docstring":"    \r      Compares two URIs for equality, ignoring default port numbers for selected protocols.\r      \r      By default, {@link URI#equals(Object)} doesn't take into account default port numbers, so http://server:80/resource is a different\r      URI than http://server/resource.\r      \r      And URLs should not be used for comparison, as written here:\r      \r      @param uri1\r                 URI 1 to be compared.\r      @param uri2\r                 URI 2 to be compared.\r      \r      @return True if both URIs are equal.\r","docstring_tokens":["compares","two","ur","is","for","equality",",","ignoring","default","port","numbers","for","selected","protocols",".","by","default",",","{","uri","#","equals","(","object",")","}","doesn","'","t","take","into","account","default","port","numbers",",","so","http",":","/","/","server",":","80","/","resource","is","a","different","uri","than","http",":","/","/","server","/","resource",".","and","ur","ls","should","not","be","used","for","comparison",",","as","written","here",":"],"query":"Proper way to check for URL equality","query_tokens":["proper","way","to","check","for","url","equality"]}
{"query_id":"17512853","repo_name":"kkashi01/appinventor-sources","zip_link":"/kkashi01/appinventor-sources/archive/master.zip","code":"  public static void getRawScreenDim(Context context, Point outSize) {    final DisplayMetrics metrics = new DisplayMetrics();    final WindowManager wm = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);    Display display = wm.getDefaultDisplay();    int sdkLevel = SdkLevel.getLevel();    if (sdkLevel >= SdkLevel.LEVEL_JELLYBEAN_MR1) {      // On API level 17, a public method was added to get the actual sizes      JellybeanUtil.getRealSize(display, outSize);    } else if ( sdkLevel > SdkLevel.LEVEL_GINGERBREAD_MR1){      // Before API level 17, the realsize method did not exist      // We use reflection instead to access some hidden methods      // Does not work for 3.x, will just error      try {        Method getRawH = Display.class.getMethod(\"getRawHeight\");        Method getRawW = Display.class.getMethod(\"getRawWidth\");        try {          outSize.x = (Integer) getRawW.invoke(display);          outSize.y = (Integer) getRawH.invoke(display);        } catch (IllegalArgumentException e) {          Log.e(LOG_TAG, \"Error reading raw screen size\", e);        } catch (IllegalAccessException e) {          Log.e(LOG_TAG, \"Error reading raw screen size\", e);        } catch (InvocationTargetException e) {          Log.e(LOG_TAG, \"Error reading raw screen size\", e);        }      } catch (NoSuchMethodException e) {        Log.e(LOG_TAG, \"Error reading raw screen size\", e);      }    } else {      // The raw height and width functions were added after verison 10      // Before that, the methods actually returned the raw values      outSize.x = display.getWidth();      outSize.y = display.getHeight();    }  }","code_tokens":["public","static","void","get","raw","screen","dim","(","context","context",",","point","out","size",")","{","final","display","metrics","metrics","=","new","display","metrics","(",")",";","final","window","manager","wm","=","(","window","manager",")","context",".","get","system","service","(","context",".","window","service",")",";","display","display","=","wm",".","get","default","display","(",")",";","int","sdk","level","=","sdk","level",".","get","level","(",")",";","if","(","sdk","level",">","=","sdk","level",".","level","jellybean","mr1",")","{","/","/","on","api","level","17",",","a","public","method","was","added","to","get","the","actual","sizes","jellybean","util",".","get","real","size","(","display",",","out","size",")",";","}","else","if","(","sdk","level",">","sdk","level",".","level","gingerbread","mr1",")","{","/","/","before","api","level","17",",","the","realsize","method","did","not","exist","/","/","we","use","reflection","instead","to","access","some","hidden","methods","/","/","does","not","work","for","3",".","x",",","will","just","error","try","{","method","get","raw","h","=","display",".","class",".","get","method","(","\"","get","raw","height","\"",")",";","method","get","raw","w","=","display",".","class",".","get","method","(","\"","get","raw","width","\"",")",";","try","{","out","size",".","x","=","(","integer",")","get","raw","w",".","invoke","(","display",")",";","out","size",".","y","=","(","integer",")","get","raw","h",".","invoke","(","display",")",";","}","catch","(","illegal","argument","exception","e",")","{","log",".","e","(","log","tag",",","\"","error","reading","raw","screen","size","\"",",","e",")",";","}","catch","(","illegal","access","exception","e",")","{","log",".","e","(","log","tag",",","\"","error","reading","raw","screen","size","\"",",","e",")",";","}","catch","(","invocation","target","exception","e",")","{","log",".","e","(","log","tag",",","\"","error","reading","raw","screen","size","\"",",","e",")",";","}","}","catch","(","no","such","method","exception","e",")","{","log",".","e","(","log","tag",",","\"","error","reading","raw","screen","size","\"",",","e",")",";","}","}","else","{","/","/","the","raw","height","and","width","functions","were","added","after","verison","10","/","/","before","that",",","the","methods","actually","returned","the","raw","values","out","size",".","x","=","display",".","get","width","(",")",";","out","size",".","y","=","display",".","get","height","(",")",";","}","}"],"func_name":"getRawScreenDim","func_name_tokens":["get","raw","screen","dim"],"docstring":"      Determine the actual size of the screen in pixels.       @param context context to get screen size of.    @param outSize Set to the real size of the display.","docstring_tokens":["determine","the","actual","size","of","the","screen","in","pixels","."],"query":"Android DisplayMetrics returns incorrect screen size in pixels on ICS","query_tokens":["android","display","metrics","returns","incorrect","screen","size","in","pixels","on","ics"]}
{"query_id":"14963756","repo_name":"okroener/BootsFaces-OSP","zip_link":"/okroener/BootsFaces-OSP/archive/master.zip","code":"public class UnmappedResourceHandler extends ResourceHandlerWrapper {    private ResourceHandler wrapped;    public UnmappedResourceHandler(ResourceHandler wrapped) {        this.wrapped = wrapped;    }    @Override    public Resource createResource(final String resourceName, final String libraryName) {        final Resource resource = super.createResource(resourceName, libraryName);        if (resource == null) {            return null;        }        return new BsfResWrapper(resource);            }    @Override    public boolean isResourceRequest(FacesContext context) {        return ResourceHandler.RESOURCE_IDENTIFIER.equals(context.getExternalContext().getRequestServletPath());    }    @Override    public void handleResourceRequest(FacesContext context) throws IOException {        ExternalContext externalContext = context.getExternalContext();        String resourceName = externalContext.getRequestPathInfo();        String libraryName = externalContext.getRequestParameterMap().get(\"ln\");        Resource resource = context.getApplication().getResourceHandler().createResource(resourceName, libraryName);        if (resource == null) {            super.handleResourceRequest(context);            return;        }        if (!resource.userAgentNeedsUpdate(context)) {            externalContext.setResponseStatus(HttpServletResponse.SC_NOT_MODIFIED);            return;        }        externalContext.setResponseContentType(resource.getContentType());        for (Entry<String, String> header : resource.getResponseHeaders().entrySet()) {            externalContext.setResponseHeader(header.getKey(), header.getValue());        }        ReadableByteChannel input = null;        WritableByteChannel output = null;        try {            input = Channels.newChannel(resource.getInputStream());            output = Channels.newChannel(externalContext.getResponseOutputStream());            for (ByteBuffer buffer = ByteBuffer.allocateDirect(10240); input.read(buffer) != -1; buffer.clear()) {                output.write((ByteBuffer) buffer.flip());            }        }        finally {            if (output != null) try { output.close(); } catch (IOException ignore) {}            if (input != null) try { input.close(); } catch (IOException ignore) {}        }    }    @Override    public ResourceHandler getWrapped() {        return wrapped;    }}","code_tokens":["public","class","unmapped","resource","handler","extends","resource","handler","wrapper","{","private","resource","handler","wrapped",";","public","unmapped","resource","handler","(","resource","handler","wrapped",")","{","this",".","wrapped","=","wrapped",";","}","@","override","public","resource","create","resource","(","final","string","resource","name",",","final","string","library","name",")","{","final","resource","resource","=","super",".","create","resource","(","resource","name",",","library","name",")",";","if","(","resource","=","=","null",")","{","return","null",";","}","return","new","bsf","res","wrapper","(","resource",")",";","}","@","override","public","boolean","is","resource","request","(","faces","context","context",")","{","return","resource","handler",".","resource","identifier",".","equals","(","context",".","get","external","context","(",")",".","get","request","servlet","path","(",")",")",";","}","@","override","public","void","handle","resource","request","(","faces","context","context",")","throws","io","exception","{","external","context","external","context","=","context",".","get","external","context","(",")",";","string","resource","name","=","external","context",".","get","request","path","info","(",")",";","string","library","name","=","external","context",".","get","request","parameter","map","(",")",".","get","(","\"","ln","\"",")",";","resource","resource","=","context",".","get","application","(",")",".","get","resource","handler","(",")",".","create","resource","(","resource","name",",","library","name",")",";","if","(","resource","=","=","null",")","{","super",".","handle","resource","request","(","context",")",";","return",";","}","if","(","!","resource",".","user","agent","needs","update","(","context",")",")","{","external","context",".","set","response","status","(","http","servlet","response",".","sc","not","modified",")",";","return",";","}","external","context",".","set","response","content","type","(","resource",".","get","content","type","(",")",")",";","for","(","entry","<","string",",","string",">","header",":","resource",".","get","response","headers","(",")",".","entry","set","(",")",")","{","external","context",".","set","response","header","(","header",".","get","key","(",")",",","header",".","get","value","(",")",")",";","}","readable","byte","channel","input","=","null",";","writable","byte","channel","output","=","null",";","try","{","input","=","channels",".","new","channel","(","resource",".","get","input","stream","(",")",")",";","output","=","channels",".","new","channel","(","external","context",".","get","response","output","stream","(",")",")",";","for","(","byte","buffer","buffer","=","byte","buffer",".","allocate","direct","(","10240",")",";","input",".","read","(","buffer",")","!","=","-","1",";","buffer",".","clear","(",")",")","{","output",".","write","(","(","byte","buffer",")","buffer",".","flip","(",")",")",";","}","}","finally","{","if","(","output","!","=","null",")","try","{","output",".","close","(",")",";","}","catch","(","io","exception","ignore",")","{","}","if","(","input","!","=","null",")","try","{","input",".","close","(",")",";","}","catch","(","io","exception","ignore",")","{","}","}","}","@","override","public","resource","handler","get","wrapped","(",")","{","return","wrapped",";","}","}"],"func_name":"UnmappedResourceHandler","func_name_tokens":["unmapped","resource","handler"],"docstring":"  @since 0.3.8","docstring_tokens":["@","since","0",".","3",".","8"],"query":"Prevent suffix from being added to resources when page loads","query_tokens":["prevent","suffix","from","being","added","to","resources","when","page","loads"]}
{"query_id":"617414","repo_name":"SpenceSouth/encog-java-core","zip_link":"/SpenceSouth/encog-java-core/archive/master.zip","code":"public class TempDir {\tprivate File tempdir;\tpublic TempDir() {\t\tthis.tempdir = new File(System.getProperty(\"java.io.tmpdir\"),\"encog-ut\");\t\tthis.tempdir.mkdir();\t}\t\tpublic File createFile(String filename) {\t\treturn new File(this.tempdir,filename);\t}\t\t/**\t * Recursively delete file or directory\t * @param fileOrDir\t *          the file or dir to delete\t * @return\t *          true iff all files are successfully deleted\t */\tpublic void recursiveDelete(File fileOrDir)\t{\t    if(fileOrDir.isDirectory())\t    {\t        // recursively delete contents\t        for(File innerFile: fileOrDir.listFiles())\t        {\t            recursiveDelete(innerFile);\t        }\t    }\t    fileOrDir.delete();\t}\tpublic void clearContents() {\t\tfor(File innerFile: this.tempdir.listFiles()) {\t\t\tinnerFile.delete();\t\t}\t}\t\t\tpublic void dispose() {\t\t//recursiveDelete(this.tempdir);\t}\t\tpublic String toString() {\t\treturn this.tempdir.toString();\t}}","code_tokens":["public","class","temp","dir","{","private","file","tempdir",";","public","temp","dir","(",")","{","this",".","tempdir","=","new","file","(","system",".","get","property","(","\"","java",".","io",".","tmpdir","\"",")",",","\"","encog","-","ut","\"",")",";","this",".","tempdir",".","mkdir","(",")",";","}","public","file","create","file","(","string","filename",")","{","return","new","file","(","this",".","tempdir",",","filename",")",";","}","public","void","recursive","delete","(","file","file","or","dir",")","{","if","(","file","or","dir",".","is","directory","(",")",")","{","/","/","recursively","delete","contents","for","(","file","inner","file",":","file","or","dir",".","list","files","(",")",")","{","recursive","delete","(","inner","file",")",";","}","}","file","or","dir",".","delete","(",")",";","}","public","void","clear","contents","(",")","{","for","(","file","inner","file",":","this",".","tempdir",".","list","files","(",")",")","{","inner","file",".","delete","(",")",";","}","}","public","void","dispose","(",")","{","/","/","recursive","delete","(","this",".","tempdir",")",";","}","public","string","to","string","(",")","{","return","this",".","tempdir",".","to","string","(",")",";","}","}"],"func_name":"TempDir","func_name_tokens":["temp","dir"],"docstring":"  Based on code from:  -directory-in-java  ","docstring_tokens":["based","on","code","from",":","-","directory","-","in","-","java"],"query":"How to create a temporary directory/folder in Java?","query_tokens":["how","to","create","a","temporary","directory","/","folder","in","java","?"]}
{"query_id":"16719959","repo_name":"veniosg/syncthing-android","zip_link":"/veniosg/syncthing-android/archive/master.zip","code":"public class CustomX509TrustManager implements X509TrustManager {    private static final String TAG = \"CustomX509TrustManager\";    /**     * Taken from: http://janis.peisenieks.lv/en/76/english-making-an-ssl-connection-via-android/     *     */    public static class CustomSSLSocketFactory extends SSLSocketFactory {        SSLContext sslContext = SSLContext.getInstance(\"TLS\");        public CustomSSLSocketFactory(SSLContext context)                throws KeyManagementException, NoSuchAlgorithmException,                KeyStoreException, UnrecoverableKeyException {            super(null);            sslContext = context;        }        @Override        public Socket createSocket(Socket socket, String host, int port,                                   boolean autoClose) throws IOException {            return sslContext.getSocketFactory().createSocket(socket, host, port,                    autoClose);        }        @Override        public Socket createSocket() throws IOException {            return sslContext.getSocketFactory().createSocket();        }    }    private String mHttpsCertPath;    public CustomX509TrustManager(String httpsCertPath) {        mHttpsCertPath = httpsCertPath;    }    @Override    public void checkClientTrusted(X509Certificate[] chain, String authType)            throws CertificateException {    }    /**     * Verifies certs against public key of the local syncthing instance     */    @Override    public void checkServerTrusted(java.security.cert.X509Certificate[] certs,                                   String authType) throws CertificateException {        InputStream inStream = null;        try {            inStream = new FileInputStream(mHttpsCertPath);            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");            X509Certificate ca = (X509Certificate)                    cf.generateCertificate(inStream);            for (X509Certificate cert : certs) {                cert.verify(ca.getPublicKey());            }        } catch (FileNotFoundException |NoSuchAlgorithmException|InvalidKeyException|                NoSuchProviderException |SignatureException e) {            throw new CertificateException(\"Untrusted Certificate!\", e);        } finally {            try {                if (inStream != null)                    inStream.close();            } catch (IOException e) {                Log.w(TAG, e);            }        }    }    public X509Certificate[] getAcceptedIssuers() {        return null;    }}","code_tokens":["public","class","custom","x509trust","manager","implements","x509trust","manager","{","private","static","final","string","tag","=","\"","custom","x509trust","manager","\"",";","public","static","class","custom","ssl","socket","factory","extends","ssl","socket","factory","{","ssl","context","ssl","context","=","ssl","context",".","get","instance","(","\"","tls","\"",")",";","public","custom","ssl","socket","factory","(","ssl","context","context",")","throws","key","management","exception",",","no","such","algorithm","exception",",","key","store","exception",",","unrecoverable","key","exception","{","super","(","null",")",";","ssl","context","=","context",";","}","@","override","public","socket","create","socket","(","socket","socket",",","string","host",",","int","port",",","boolean","auto","close",")","throws","io","exception","{","return","ssl","context",".","get","socket","factory","(",")",".","create","socket","(","socket",",","host",",","port",",","auto","close",")",";","}","@","override","public","socket","create","socket","(",")","throws","io","exception","{","return","ssl","context",".","get","socket","factory","(",")",".","create","socket","(",")",";","}","}","private","string","m","https","cert","path",";","public","custom","x509trust","manager","(","string","https","cert","path",")","{","m","https","cert","path","=","https","cert","path",";","}","@","override","public","void","check","client","trusted","(","x509certificate","[","]","chain",",","string","auth","type",")","throws","certificate","exception","{","}","@","override","public","void","check","server","trusted","(","java",".","security",".","cert",".","x509certificate","[","]","certs",",","string","auth","type",")","throws","certificate","exception","{","input","stream","in","stream","=","null",";","try","{","in","stream","=","new","file","input","stream","(","m","https","cert","path",")",";","certificate","factory","cf","=","certificate","factory",".","get","instance","(","\"","x",".","509","\"",")",";","x509certificate","ca","=","(","x509certificate",")","cf",".","generate","certificate","(","in","stream",")",";","for","(","x509certificate","cert",":","certs",")","{","cert",".","verify","(","ca",".","get","public","key","(",")",")",";","}","}","catch","(","file","not","found","exception","|","no","such","algorithm","exception","|","invalid","key","exception","|","no","such","provider","exception","|","signature","exception","e",")","{","throw","new","certificate","exception","(","\"","untrusted","certificate","!","\"",",","e",")",";","}","finally","{","try","{","if","(","in","stream","!","=","null",")","in","stream",".","close","(",")",";","}","catch","(","io","exception","e",")","{","log",".","w","(","tag",",","e",")",";","}","}","}","public","x509certificate","[","]","get","accepted","issuers","(",")","{","return","null",";","}","}"],"func_name":"CustomX509TrustManager","func_name_tokens":["custom","x509trust","manager"],"docstring":"/  TrustManager allowing the Syncthing https.pem CA  ","docstring_tokens":["/","trust","manager","allowing","the","syncthing","https",".","pem","ca"],"query":"Android SSL HttpGet (No peer certificate) error OR (Connection closed by peer) error","query_tokens":["android","ssl","http","get","(","no","peer","certificate",")","error","or","(","connection","closed","by","peer",")","error"]}
{"query_id":"4931399","repo_name":"Halcom/zanata-server","zip_link":"/Halcom/zanata-server/archive/master.zip","code":"public class EnumRenderer<T extends Enum<?>> extends AbstractRenderer<T> {    private String emptyValue = \"\";    /**     * Subclasses can override to return localised strings     */    @Override    public String render(T object) {        if (object == null) {            return emptyValue;        }        return object.toString();    }    public String getEmptyValue() {        return emptyValue;    }}","code_tokens":["public","class","enum","renderer","<","t","extends","enum","<","?",">",">","extends","abstract","renderer","<","t",">","{","private","string","empty","value","=","\"","\"",";","@","override","public","string","render","(","t","object",")","{","if","(","object","=","=","null",")","{","return","empty","value",";","}","return","object",".","to","string","(",")",";","}","public","string","get","empty","value","(",")","{","return","empty","value",";","}","}"],"func_name":"EnumRenderer","func_name_tokens":["enum","renderer"],"docstring":"  Translates enum entries. Use setEmptyValue() if you want to have a custom  empty value. Default empty value is \"\".   @param <T>             an enumeration entry which is to be registered in             {@link Translations}","docstring_tokens":["translates","enum","entries",".","use","set","empty","value","(",")","if","you","want","to","have","a","custom","empty","value",".","default","empty","value","is","\"","\"","."],"query":"How do I add items to GWT ListBox in Uibinder .ui.xml template ?","query_tokens":["how","do","i","add","items","to","gwt","list","box","in","uibinder",".","ui",".","xml","template","?"]}
{"query_id":"19166352","repo_name":"stacs-srg/utilities","zip_link":"/stacs-srg/utilities/archive/master.zip","code":"public class AsymmetricEncryption {    /**     * The name of the directory in this user's home directory in which private and public keys are stored.     */    @SuppressWarnings(\"WeakerAccess\")    public static final String DEFAULT_KEY_DIR = \".ssh\";    /**     * This is the file extension used for both the private and the public key file     */    @SuppressWarnings(\"WeakerAccess\")    public static final String KEY_EXTENSION = \".pem\";    /**     * The name of the private key file.     */    @SuppressWarnings(\"WeakerAccess\")    public static final String DEFAULT_PRIVATE_KEY_FILE = \"private_key\" + KEY_EXTENSION;    /**     * The name of the public key file.     */    @SuppressWarnings(\"WeakerAccess\")    public static final String DEFAULT_PUBLIC_KEY_FILE = \"public_key\" + KEY_EXTENSION;    /**     * The delimiting header in the private key file.     */    @SuppressWarnings(\"WeakerAccess\")    public static final String PRIVATE_KEY_HEADER = \"RSA PRIVATE KEY\";    /**     * The delimiting header in the public key file.     */    @SuppressWarnings(\"WeakerAccess\")    public static final String PUBLIC_KEY_HEADER = \"PUBLIC KEY\";    private static final String ENCRYPTED_KEY_END_DELIMITER = \"==\";    private static final String TRANSFORMATION = \"RSA\";    private static final String ALGORITHM = \"RSA\";    private static final int DEFAULT_KEY_LENGTH_IN_BITS = 2048;    private static final int MIN_KEY_LENGTH_IN_BITS = 512;    private static final int MAX_KEY_LENGTH_IN_BITS = 4096;    private static final Cipher CIPHER;    private static final KeyFactory KEY_FACTORY;    private static final String USER_HOME = System.getProperty(\"user.home\");    private static final Path USER_HOME_PATH = Paths.get(USER_HOME);    private static final Path DEFAULT_KEY_PATH = USER_HOME_PATH.resolve(Paths.get(DEFAULT_KEY_DIR));    private static final Path DEFAULT_PRIVATE_KEY_PATH = DEFAULT_KEY_PATH.resolve(Paths.get(DEFAULT_PRIVATE_KEY_FILE));    private static final Path DEFAULT_PUBLIC_KEY_PATH = DEFAULT_KEY_PATH.resolve(Paths.get(DEFAULT_PUBLIC_KEY_FILE));    static {        try {            // Code compiles without using Bouncy Castle library, but key loading doesn't work with default provider.            Security.addProvider(new BouncyCastleProvider());            CIPHER = Cipher.getInstance(TRANSFORMATION);            KEY_FACTORY = KeyFactory.getInstance(ALGORITHM);        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {            throw new RuntimeException(\"error loading cipher \" + TRANSFORMATION + \" or algorithm \" + ALGORITHM);        }    }    /**     * Generate a set of keys using RSA and with length 2048 bits     *     * @return the keys generated     * @throws CryptoException if the keys cannot be generated     */    @SuppressWarnings(\"WeakerAccess\")    public static KeyPair generateKeys() throws CryptoException {        return generateKeys(DEFAULT_KEY_LENGTH_IN_BITS);    }    /**     * Generate a set of keys using RSA and with an arbitrary length     * The key length should be within 512 and 4096 bits     *     * @param key_length the length of the keys in bits     * @return the keys generated     * @throws CryptoException if the keys cannot be generated     */    @SuppressWarnings(\"WeakerAccess\")    public static KeyPair generateKeys(final int key_length) throws CryptoException {        // RSA keys must be at least 512 bits long        // Keys longer than 4096 bits can take too long to generate        if (key_length < MIN_KEY_LENGTH_IN_BITS || key_length > MAX_KEY_LENGTH_IN_BITS) throw new CryptoException(\"Length of key is invalid\");        try {            final KeyPairGenerator generator = KeyPairGenerator.getInstance(ALGORITHM);            generator.initialize(key_length);            return generator.generateKeyPair();        } catch (final NoSuchAlgorithmException e) {            throw new CryptoException(e);        }    }    /**     * Encrypts the given plain text string using the given public key, and MIME-encodes the result.     *     * @param public_key the public key     * @param plain_text the plain text     * @return the encrypted and MIME-encoded text     * @throws CryptoException if the text cannot be encrypted     */    @SuppressWarnings(\"WeakerAccess\")    public static String encrypt(final PublicKey public_key, final String plain_text) throws CryptoException {        try (final InputStream input_stream = new ByteArrayInputStream(plain_text.getBytes());             final ByteArrayOutputStream output_stream = new ByteArrayOutputStream()) {            encrypt(public_key, input_stream, output_stream);            return new String(output_stream.toByteArray());        } catch (final IOException e) {            throw new CryptoException(e);        }    }    /**     * Decrypts the given encrypted and MIME-encoded text string using the given private key.     *     * @param private_key the private key     * @param cipher_text the encrypted and MIME-encoded text     * @return the plain text     * @throws CryptoException if the decryption cannot be completed     */    @SuppressWarnings(\"WeakerAccess\")    public static String decrypt(final PrivateKey private_key, final String cipher_text) throws CryptoException {        try (final InputStream input_stream = new ByteArrayInputStream(cipher_text.getBytes());             final ByteArrayOutputStream output_stream = new ByteArrayOutputStream()) {            decrypt(private_key, input_stream, output_stream);            return new String(output_stream.toByteArray());        } catch (final IOException e) {            throw new CryptoException(e);        }    }    /**     * Encrypts the given plain text file to another file, using the given public key, and MIME-encodes the result.     *     * @param public_key       the public key     * @param plain_text_path  the path of the plain text file     * @param cipher_text_path the path of the resulting encrypted file     * @throws CryptoException if the encryption cannot be completed     * @throws IOException     if a file cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static void encrypt(final PublicKey public_key, final Path plain_text_path, final Path cipher_text_path) throws CryptoException, IOException {        try (final InputStream input_stream = Files.newInputStream(plain_text_path);             final OutputStream output_stream = Files.newOutputStream(cipher_text_path)) {            encrypt(public_key, input_stream, output_stream);        }    }    /**     * Decrypts the given encrypted and MIME-encoded text file to another file, using the given private key.     *     * @param private_key      the private key     * @param cipher_text_path the path of the encrypted file     * @param plain_text_path  the path of the resulting plain text file     * @throws CryptoException if the encryption cannot be completed     * @throws IOException     if a file cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static void decrypt(final PrivateKey private_key, final Path cipher_text_path, final Path plain_text_path) throws CryptoException, IOException {        try (final InputStream input_stream = Files.newInputStream(cipher_text_path);             final OutputStream output_stream = Files.newOutputStream(plain_text_path)) {            decrypt(private_key, input_stream, output_stream);        }    }    /**     * Encrypts the given plain text file, using the given public key, MIME-encodes the result, and outputs it to the given stream.     *     * @param public_key      the public key     * @param plain_text_path the path of the plain text file     * @param output_stream   the output stream for the resulting encrypted data     * @throws CryptoException if the encryption cannot be completed     * @throws IOException     if the plain text file cannot be accessed     */    @SuppressWarnings(\"unused\")    public static void encrypt(final PublicKey public_key, final Path plain_text_path, final OutputStream output_stream) throws CryptoException, IOException {        try (final InputStream input_stream = Files.newInputStream(plain_text_path)) {            encrypt(public_key, input_stream, output_stream);        }    }    /**     * Decrypts the given encrypted and MIME-encoded text file, using the given private key, and outputs it to the given stream.     *     * @param private_key      the private key     * @param cipher_text_path the path of the encrypted file     * @param output_stream    the output stream for the resulting data     * @throws CryptoException if the encryption cannot be completed     * @throws IOException     if the encrypted file cannot be accessed     */    @SuppressWarnings(\"unused\")    public static void decrypt(final PrivateKey private_key, final Path cipher_text_path, final OutputStream output_stream) throws CryptoException, IOException {        try (final InputStream input_stream = Files.newInputStream(cipher_text_path)) {            decrypt(private_key, input_stream, output_stream);        }    }    /**     * Encrypts the plain text read from the given stream, using the given public key, MIME-encodes the result, and outputs it to another given stream.     *     * @param public_key    the public key     * @param input_stream  the input stream for the plain text     * @param output_stream the output stream for the resulting encrypted data     * @throws CryptoException if the encryption cannot be completed     */    @SuppressWarnings(\"WeakerAccess\")    public static void encrypt(final PublicKey public_key, final InputStream input_stream, final OutputStream output_stream) throws CryptoException {        try {            CIPHER.init(Cipher.ENCRYPT_MODE, public_key);            final byte[] plain_text = FileManipulation.readAllBytes(input_stream);            final byte[] encrypted = CIPHER.doFinal(plain_text);            final byte[] mime_encoded = Base64.getMimeEncoder().encode(encrypted);            output_stream.write(mime_encoded);        } catch (BadPaddingException | InvalidKeyException | IllegalBlockSizeException | IOException e) {            throw new CryptoException(e);        }    }    /**     * Decrypts the encrypted and MIME-encoded data read from the given stream, using the given private key, and outputs it to another given stream.     *     * @param private_key   the private key     * @param input_stream  the input stream for the encrypted file     * @param output_stream the output stream for the resulting data     * @throws CryptoException if the encryption cannot be completed     */    @SuppressWarnings(\"WeakerAccess\")    public static void decrypt(final PrivateKey private_key, final InputStream input_stream, final OutputStream output_stream) throws CryptoException {        try {            CIPHER.init(Cipher.DECRYPT_MODE, private_key);            final byte[] mime_encoded = FileManipulation.readAllBytes(input_stream);            final byte[] encrypted = Base64.getMimeDecoder().decode(mime_encoded);            final byte[] plain_text = CIPHER.doFinal(encrypted);            output_stream.write(plain_text);        } catch (BadPaddingException | InvalidKeyException | IllegalBlockSizeException | IOException e) {            throw new CryptoException(e);        }    }    /**     * Verifies that the pair of Public and Private keys is valid     *     * @param public_key of the key pair     * @param private_key of the key pair     * @return true if the key pair is valid     * @throws CryptoException if unable to verify the key pair     */    @SuppressWarnings(\"WeakerAccess\")    public static boolean verifyKeyPair(final PublicKey public_key, final PrivateKey private_key) throws CryptoException {        SecureRandom random = new SecureRandom();        String randomChallenge = new BigInteger(130, random).toString(32);        String encryptedChallenge = encrypt(public_key, randomChallenge);        try {            String decryptedChallenge = decrypt(private_key, encryptedChallenge);            // Checking the result of the challenge is not strictly needed, as a not-valid key pair will result in a            // CryptoException.            // Checking the challenge however provides a more rigid and clean key-pair verification.            return decryptedChallenge.equals(randomChallenge);        } catch (CryptoException e) {            return false;        }    }    /**     * Gets this user's private key.     * The key is assumed to be stored in the file {@value #DEFAULT_PRIVATE_KEY_FILE} in the directory {@value #DEFAULT_KEY_DIR} in     * this user's home directory.     *     * @return this user's private key     * @throws CryptoException if the private key cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static PrivateKey getPrivateKey() throws CryptoException {        return getPrivateKey(DEFAULT_PRIVATE_KEY_PATH);    }    /**     * Gets a private key from a given file.     *     * @param key_path the path of the private key file     * @return the private key     * @throws CryptoException if the private key cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static PrivateKey getPrivateKey(final Path key_path) throws CryptoException {        return getPrivateKeyFromPEMString(getKey(key_path));    }    /**     * Gets this user's public key.     * The key is assumed to be stored in the file {@value #DEFAULT_PUBLIC_KEY_FILE} in the directory {@value #DEFAULT_KEY_DIR} in     * this user's home directory.     *     * @return this user's public key     * @throws CryptoException if the public key cannot be accessed     */    @SuppressWarnings(\"unused\")    public static PublicKey getPublicKey() throws CryptoException {        return getPublicKey(DEFAULT_PUBLIC_KEY_PATH);    }    /**     * Gets a public key from a given file.     *     * @param key_path the path of the public key file     * @return the public key     * @throws CryptoException if the public key cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static PublicKey getPublicKey(final Path key_path) throws CryptoException {        return getPublicKeyFromPEMString(getKey(key_path));    }    /**     * Gets a private key from a string. The string is assumed to be in PEM format, with BEGIN and END delimiters {@value #PRIVATE_KEY_HEADER}     *     * @param key_in_pem_format the private key in PEM format     * @return the private key     * @throws CryptoException if the private key cannot be extracted     */    @SuppressWarnings(\"WeakerAccess\")    public static PrivateKey getPrivateKeyFromPEMString(final String key_in_pem_format) throws CryptoException {        final String base64_encoded_private_key = stripKeyDelimiters(key_in_pem_format, PRIVATE_KEY_HEADER);        return getPrivateKeyFromString(base64_encoded_private_key);    }    /**     * Gets a private key from a string. The string is assumed to be in base64.     *     * @param key_base64 the private key in PEM format     * @return the private key     * @throws CryptoException if the private key cannot be extracted     */    @SuppressWarnings(\"WeakerAccess\")    public static PrivateKey getPrivateKeyFromString(final String key_base64) throws CryptoException {        try {            final byte[] private_key = Base64.getMimeDecoder().decode(key_base64);            return KEY_FACTORY.generatePrivate(new PKCS8EncodedKeySpec(private_key));        } catch (final InvalidKeySpecException e) {            throw new CryptoException(e);        }    }    /**     * Gets a public key from a string. The string is assumed to be in PEM format, with BEGIN and END delimiters {@value #PUBLIC_KEY_HEADER}     *     * @param key_in_pem_format the public key in PEM format     * @return the public key     * @throws CryptoException if the public key cannot be extracted     */    @SuppressWarnings(\"WeakerAccess\")    public static PublicKey getPublicKeyFromPEMString(final String key_in_pem_format) throws CryptoException {        final String base64_encoded_public_key = stripKeyDelimiters(key_in_pem_format, PUBLIC_KEY_HEADER);        return getPublicKeyFromString(base64_encoded_public_key);    }    /**     * Gets a public key from a string. The string is assumed to be in base64.     *     * @param key_base64 the public key in base64     * @return the public key     * @throws CryptoException if the public key cannot be extracted     */    @SuppressWarnings(\"WeakerAccess\")    public static PublicKey getPublicKeyFromString(final String key_base64) throws CryptoException {        try {            final byte[] public_key = Base64.getMimeDecoder().decode(key_base64);            return KEY_FACTORY.generatePublic(new X509EncodedKeySpec(public_key));        } catch (final InvalidKeySpecException e) {            throw new CryptoException(e);        }    }    /**     * Convert a given key to its string representation in base64     *     * @param key to be converted     * @return the string version of the key in base64     */    @SuppressWarnings(\"WeakerAccess\")    public static String keyToBase64(Key key) {        return Base64.getMimeEncoder().encodeToString(key.getEncoded())                .replace(\"\\n\", \"\")                .replace(\"\\r\", \"\");    }    /**     * Loads a list of public keys from the given file containing keys in PEM format.     *     * @param path the file containing public keys     * @return a list of keys in PEM format     * @throws IOException if the file cannot be accessed     */    @SuppressWarnings(\"WeakerAccess\")    public static List<PublicKey> loadPublicKeys(final Path path) throws IOException, CryptoException {        final List<PublicKey> key_list = new ArrayList<>();        try (final BufferedReader reader = new BufferedReader(FileManipulation.getInputStreamReader(path))) {            StringBuilder builder = null;            String line;            while ((line = reader.readLine()) != null) {                if (line.contains(PUBLIC_KEY_HEADER)) {                    if (builder != null) {                        builder.append(line);                        PublicKey public_key = getPublicKeyFromPEMString(builder.toString());                        key_list.add(public_key);                        builder = null;                    } else {                        builder = new StringBuilder();                        builder.append(line);                        builder.append(\"\\n\");                    }                } else {                    if (builder != null) {                        builder.append(line);                        builder.append(\"\\n\");                    }                }            }        }        return key_list;    }    /**     * Persist a key pair to the specified paths for the private and the public key     *     * @param key_pair to be persisted     * @param private_key_filename the path for the private key     * @param public_key_filename the path for the public key     * @throws CryptoException if the keys could not be persisted     */    @SuppressWarnings(\"WeakerAccess\")    public static void persist(final KeyPair key_pair, final Path private_key_filename, final Path public_key_filename) throws CryptoException {        try {            writePemFile(key_pair.getPrivate(), PRIVATE_KEY_HEADER, extension(private_key_filename, KEY_EXTENSION));            writePemFile(key_pair.getPublic(), PUBLIC_KEY_HEADER, extension(public_key_filename, KEY_EXTENSION));        } catch (final IOException e) {            throw new CryptoException(e);        }    }    /**     * Attempts to extract an AES key from a file, in which     * each line in the input stream is assumed to contain a MIME-encoded AES key, encrypted with a particular user's     * RSA public key. This method attempts to decrypt each one with this user's RSA private key, and returns the first     * one to be successfully decrypted.     *     * @param encrypted_keys the file containing encrypted keys     * @return the decrypted AES key     * @throws IOException     if the input stream cannot be read     * @throws CryptoException if no key can be successfully decrypted     */    @SuppressWarnings(\"unused\")    public static SecretKey getAESKey(final Path encrypted_keys) throws IOException, CryptoException {        try (final InputStream encrypted_key_stream = Files.newInputStream(encrypted_keys)) {            return getAESKey(encrypted_key_stream);        }    }    /**     * Attempts to extract an AES key from an input stream, in which     * each line in the input stream is assumed to contain a MIME-encoded AES key, encrypted with a particular user's     * RSA public key. This method attempts to decrypt each one with this user's RSA private key, and returns the first     * one to be successfully decrypted.     *     * @param encrypted_key_stream the input stream containing encrypted keys     * @return the decrypted AES key     * @throws IOException     if the input stream cannot be read     * @throws CryptoException if no key can be successfully decrypted     */    @SuppressWarnings(\"WeakerAccess\")    public static SecretKey getAESKey(final InputStream encrypted_key_stream) throws IOException, CryptoException {        // SecretKey represents a symmetric key, whereas PrivateKey represents a private asymmetric key.        final PrivateKey private_key = getPrivateKey();        try (BufferedReader reader = new BufferedReader(new InputStreamReader(encrypted_key_stream))) {            StringBuilder builder = new StringBuilder();            String line;            while ((line = reader.readLine()) != null) {                builder.append(line);                if (line.endsWith(ENCRYPTED_KEY_END_DELIMITER)) {                    try {                        return SymmetricEncryption.getKey(decrypt(private_key, builder.toString()));                    } catch (final CryptoException e) {                        // Couldn't decrypt, try the next one.                        builder = new StringBuilder();                    }                }            }            throw new CryptoException(\"No valid encrypted key\");        }    }    /**     * Encrypts the AES key with the given public key     *     * @param public_key the key used to perform the encryption     * @param AES_key the key to encrypt     * @return the encrypted key as a String     * @throws CryptoException if the AES key could not be encrypted     */    @SuppressWarnings(\"WeakerAccess\")    public static String encryptAESKey(final PublicKey public_key, final SecretKey AES_key) throws CryptoException {        return encrypt(public_key, SymmetricEncryption.keyToString(AES_key)) + \"\\n\";    }    @SuppressWarnings(\"unused\")    public static void encryptAESKey(final SecretKey AES_key, final Path authorized_keys_path, final Path destination_path) throws IOException, CryptoException {        try (OutputStreamWriter writer = FileManipulation.getOutputStreamWriter(destination_path)) {            final List<PublicKey> public_keys = AsymmetricEncryption.loadPublicKeys(authorized_keys_path);            for (final PublicKey public_key : public_keys) {                writeEncryptedAESKey(public_key, AES_key, writer);            }            writer.flush();        }    }    /**     * Decrypts the AES key with the given private key     *     * @param private_key used to decrypt the key     * @param encrypted_key the AES key that was encrypted using the matching public key     * @return the AES key     * @throws CryptoException if the AES key could not be decrypted     */    @SuppressWarnings(\"WeakerAccess\")    public static SecretKey decryptAESKey(final PrivateKey private_key, final String encrypted_key) throws CryptoException {        return SymmetricEncryption.getKey(decrypt(private_key, encrypted_key));    }    private static void writeEncryptedAESKey(final PublicKey public_key, final SecretKey AES_key, final OutputStreamWriter writer) throws IOException, CryptoException {        writer.append(encryptAESKey(public_key, AES_key));        writer.append(\"\\n\");    }    private static String getKey(final Path key_path) throws CryptoException {        try {            return new String(Files.readAllBytes(key_path));        } catch (final IOException e) {            throw new CryptoException(\"Can't access key file: \" + key_path);        }    }}","code_tokens":["public","class","asymmetric","encryption","{","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","default","key","dir","=","\"",".","ssh","\"",";","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","key","extension","=","\"",".","pem","\"",";","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","default","private","key","file","=","\"","private","key","\"","+","key","extension",";","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","default","public","key","file","=","\"","public","key","\"","+","key","extension",";","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","private","key","header","=","\"","rsa","private","key","\"",";","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","final","string","public","key","header","=","\"","public","key","\"",";","private","static","final","string","encrypted","key","end","delimiter","=","\"","=","=","\"",";","private","static","final","string","transformation","=","\"","rsa","\"",";","private","static","final","string","algorithm","=","\"","rsa","\"",";","private","static","final","int","default","key","length","in","bits","=","2048",";","private","static","final","int","min","key","length","in","bits","=","512",";","private","static","final","int","max","key","length","in","bits","=","4096",";","private","static","final","cipher","cipher",";","private","static","final","key","factory","key","factory",";","private","static","final","string","user","home","=","system",".","get","property","(","\"","user",".","home","\"",")",";","private","static","final","path","user","home","path","=","paths",".","get","(","user","home",")",";","private","static","final","path","default","key","path","=","user","home","path",".","resolve","(","paths",".","get","(","default","key","dir",")",")",";","private","static","final","path","default","private","key","path","=","default","key","path",".","resolve","(","paths",".","get","(","default","private","key","file",")",")",";","private","static","final","path","default","public","key","path","=","default","key","path",".","resolve","(","paths",".","get","(","default","public","key","file",")",")",";","static","{","try","{","/","/","code","compiles","without","using","bouncy","castle","library",",","but","key","loading","doesn","'","t","work","with","default","provider",".","security",".","add","provider","(","new","bouncy","castle","provider","(",")",")",";","cipher","=","cipher",".","get","instance","(","transformation",")",";","key","factory","=","key","factory",".","get","instance","(","algorithm",")",";","}","catch","(","no","such","algorithm","exception","|","no","such","padding","exception","e",")","{","throw","new","runtime","exception","(","\"","error","loading","cipher","\"","+","transformation","+","\"","or","algorithm","\"","+","algorithm",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","key","pair","generate","keys","(",")","throws","crypto","exception","{","return","generate","keys","(","default","key","length","in","bits",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","key","pair","generate","keys","(","final","int","key","length",")","throws","crypto","exception","{","/","/","rsa","keys","must","be","at","least","512","bits","long","/","/","keys","longer","than","4096","bits","can","take","too","long","to","generate","if","(","key","length","<","min","key","length","in","bits","|","|","key","length",">","max","key","length","in","bits",")","throw","new","crypto","exception","(","\"","length","of","key","is","invalid","\"",")",";","try","{","final","key","pair","generator","generator","=","key","pair","generator",".","get","instance","(","algorithm",")",";","generator",".","initialize","(","key","length",")",";","return","generator",".","generate","key","pair","(",")",";","}","catch","(","final","no","such","algorithm","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","string","encrypt","(","final","public","key","public","key",",","final","string","plain","text",")","throws","crypto","exception","{","try","(","final","input","stream","input","stream","=","new","byte","array","input","stream","(","plain","text",".","get","bytes","(",")",")",";","final","byte","array","output","stream","output","stream","=","new","byte","array","output","stream","(",")",")","{","encrypt","(","public","key",",","input","stream",",","output","stream",")",";","return","new","string","(","output","stream",".","to","byte","array","(",")",")",";","}","catch","(","final","io","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","string","decrypt","(","final","private","key","private","key",",","final","string","cipher","text",")","throws","crypto","exception","{","try","(","final","input","stream","input","stream","=","new","byte","array","input","stream","(","cipher","text",".","get","bytes","(",")",")",";","final","byte","array","output","stream","output","stream","=","new","byte","array","output","stream","(",")",")","{","decrypt","(","private","key",",","input","stream",",","output","stream",")",";","return","new","string","(","output","stream",".","to","byte","array","(",")",")",";","}","catch","(","final","io","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","void","encrypt","(","final","public","key","public","key",",","final","path","plain","text","path",",","final","path","cipher","text","path",")","throws","crypto","exception",",","io","exception","{","try","(","final","input","stream","input","stream","=","files",".","new","input","stream","(","plain","text","path",")",";","final","output","stream","output","stream","=","files",".","new","output","stream","(","cipher","text","path",")",")","{","encrypt","(","public","key",",","input","stream",",","output","stream",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","void","decrypt","(","final","private","key","private","key",",","final","path","cipher","text","path",",","final","path","plain","text","path",")","throws","crypto","exception",",","io","exception","{","try","(","final","input","stream","input","stream","=","files",".","new","input","stream","(","cipher","text","path",")",";","final","output","stream","output","stream","=","files",".","new","output","stream","(","plain","text","path",")",")","{","decrypt","(","private","key",",","input","stream",",","output","stream",")",";","}","}","@","suppress","warnings","(","\"","unused","\"",")","public","static","void","encrypt","(","final","public","key","public","key",",","final","path","plain","text","path",",","final","output","stream","output","stream",")","throws","crypto","exception",",","io","exception","{","try","(","final","input","stream","input","stream","=","files",".","new","input","stream","(","plain","text","path",")",")","{","encrypt","(","public","key",",","input","stream",",","output","stream",")",";","}","}","@","suppress","warnings","(","\"","unused","\"",")","public","static","void","decrypt","(","final","private","key","private","key",",","final","path","cipher","text","path",",","final","output","stream","output","stream",")","throws","crypto","exception",",","io","exception","{","try","(","final","input","stream","input","stream","=","files",".","new","input","stream","(","cipher","text","path",")",")","{","decrypt","(","private","key",",","input","stream",",","output","stream",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","void","encrypt","(","final","public","key","public","key",",","final","input","stream","input","stream",",","final","output","stream","output","stream",")","throws","crypto","exception","{","try","{","cipher",".","init","(","cipher",".","encrypt","mode",",","public","key",")",";","final","byte","[","]","plain","text","=","file","manipulation",".","read","all","bytes","(","input","stream",")",";","final","byte","[","]","encrypted","=","cipher",".","do","final","(","plain","text",")",";","final","byte","[","]","mime","encoded","=","base64",".","get","mime","encoder","(",")",".","encode","(","encrypted",")",";","output","stream",".","write","(","mime","encoded",")",";","}","catch","(","bad","padding","exception","|","invalid","key","exception","|","illegal","block","size","exception","|","io","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","void","decrypt","(","final","private","key","private","key",",","final","input","stream","input","stream",",","final","output","stream","output","stream",")","throws","crypto","exception","{","try","{","cipher",".","init","(","cipher",".","decrypt","mode",",","private","key",")",";","final","byte","[","]","mime","encoded","=","file","manipulation",".","read","all","bytes","(","input","stream",")",";","final","byte","[","]","encrypted","=","base64",".","get","mime","decoder","(",")",".","decode","(","mime","encoded",")",";","final","byte","[","]","plain","text","=","cipher",".","do","final","(","encrypted",")",";","output","stream",".","write","(","plain","text",")",";","}","catch","(","bad","padding","exception","|","invalid","key","exception","|","illegal","block","size","exception","|","io","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","boolean","verify","key","pair","(","final","public","key","public","key",",","final","private","key","private","key",")","throws","crypto","exception","{","secure","random","random","=","new","secure","random","(",")",";","string","random","challenge","=","new","big","integer","(","130",",","random",")",".","to","string","(","32",")",";","string","encrypted","challenge","=","encrypt","(","public","key",",","random","challenge",")",";","try","{","string","decrypted","challenge","=","decrypt","(","private","key",",","encrypted","challenge",")",";","/","/","checking","the","result","of","the","challenge","is","not","strictly","needed",",","as","a","not","-","valid","key","pair","will","result","in","a","/","/","crypto","exception",".","/","/","checking","the","challenge","however","provides","a","more","rigid","and","clean","key","-","pair","verification",".","return","decrypted","challenge",".","equals","(","random","challenge",")",";","}","catch","(","crypto","exception","e",")","{","return","false",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","private","key","get","private","key","(",")","throws","crypto","exception","{","return","get","private","key","(","default","private","key","path",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","private","key","get","private","key","(","final","path","key","path",")","throws","crypto","exception","{","return","get","private","key","from","pem","string","(","get","key","(","key","path",")",")",";","}","@","suppress","warnings","(","\"","unused","\"",")","public","static","public","key","get","public","key","(",")","throws","crypto","exception","{","return","get","public","key","(","default","public","key","path",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","public","key","get","public","key","(","final","path","key","path",")","throws","crypto","exception","{","return","get","public","key","from","pem","string","(","get","key","(","key","path",")",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","private","key","get","private","key","from","pem","string","(","final","string","key","in","pem","format",")","throws","crypto","exception","{","final","string","base64","encoded","private","key","=","strip","key","delimiters","(","key","in","pem","format",",","private","key","header",")",";","return","get","private","key","from","string","(","base64","encoded","private","key",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","private","key","get","private","key","from","string","(","final","string","key","base64",")","throws","crypto","exception","{","try","{","final","byte","[","]","private","key","=","base64",".","get","mime","decoder","(",")",".","decode","(","key","base64",")",";","return","key","factory",".","generate","private","(","new","pkcs8encoded","key","spec","(","private","key",")",")",";","}","catch","(","final","invalid","key","spec","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","public","key","get","public","key","from","pem","string","(","final","string","key","in","pem","format",")","throws","crypto","exception","{","final","string","base64","encoded","public","key","=","strip","key","delimiters","(","key","in","pem","format",",","public","key","header",")",";","return","get","public","key","from","string","(","base64","encoded","public","key",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","public","key","get","public","key","from","string","(","final","string","key","base64",")","throws","crypto","exception","{","try","{","final","byte","[","]","public","key","=","base64",".","get","mime","decoder","(",")",".","decode","(","key","base64",")",";","return","key","factory",".","generate","public","(","new","x509encoded","key","spec","(","public","key",")",")",";","}","catch","(","final","invalid","key","spec","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","string","key","to","base64","(","key","key",")","{","return","base64",".","get","mime","encoder","(",")",".","encode","to","string","(","key",".","get","encoded","(",")",")",".","replace","(","\"","\\n","\"",",","\"","\"",")",".","replace","(","\"","\\r","\"",",","\"","\"",")",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","list","<","public","key",">","load","public","keys","(","final","path","path",")","throws","io","exception",",","crypto","exception","{","final","list","<","public","key",">","key","list","=","new","array","list","<",">","(",")",";","try","(","final","buffered","reader","reader","=","new","buffered","reader","(","file","manipulation",".","get","input","stream","reader","(","path",")",")",")","{","string","builder","builder","=","null",";","string","line",";","while","(","(","line","=","reader",".","read","line","(",")",")","!","=","null",")","{","if","(","line",".","contains","(","public","key","header",")",")","{","if","(","builder","!","=","null",")","{","builder",".","append","(","line",")",";","public","key","public","key","=","get","public","key","from","pem","string","(","builder",".","to","string","(",")",")",";","key","list",".","add","(","public","key",")",";","builder","=","null",";","}","else","{","builder","=","new","string","builder","(",")",";","builder",".","append","(","line",")",";","builder",".","append","(","\"","\\n","\"",")",";","}","}","else","{","if","(","builder","!","=","null",")","{","builder",".","append","(","line",")",";","builder",".","append","(","\"","\\n","\"",")",";","}","}","}","}","return","key","list",";","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","void","persist","(","final","key","pair","key","pair",",","final","path","private","key","filename",",","final","path","public","key","filename",")","throws","crypto","exception","{","try","{","write","pem","file","(","key","pair",".","get","private","(",")",",","private","key","header",",","extension","(","private","key","filename",",","key","extension",")",")",";","write","pem","file","(","key","pair",".","get","public","(",")",",","public","key","header",",","extension","(","public","key","filename",",","key","extension",")",")",";","}","catch","(","final","io","exception","e",")","{","throw","new","crypto","exception","(","e",")",";","}","}","@","suppress","warnings","(","\"","unused","\"",")","public","static","secret","key","get","aes","key","(","final","path","encrypted","keys",")","throws","io","exception",",","crypto","exception","{","try","(","final","input","stream","encrypted","key","stream","=","files",".","new","input","stream","(","encrypted","keys",")",")","{","return","get","aes","key","(","encrypted","key","stream",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","secret","key","get","aes","key","(","final","input","stream","encrypted","key","stream",")","throws","io","exception",",","crypto","exception","{","/","/","secret","key","represents","a","symmetric","key",",","whereas","private","key","represents","a","private","asymmetric","key",".","final","private","key","private","key","=","get","private","key","(",")",";","try","(","buffered","reader","reader","=","new","buffered","reader","(","new","input","stream","reader","(","encrypted","key","stream",")",")",")","{","string","builder","builder","=","new","string","builder","(",")",";","string","line",";","while","(","(","line","=","reader",".","read","line","(",")",")","!","=","null",")","{","builder",".","append","(","line",")",";","if","(","line",".","ends","with","(","encrypted","key","end","delimiter",")",")","{","try","{","return","symmetric","encryption",".","get","key","(","decrypt","(","private","key",",","builder",".","to","string","(",")",")",")",";","}","catch","(","final","crypto","exception","e",")","{","/","/","couldn","'","t","decrypt",",","try","the","next","one",".","builder","=","new","string","builder","(",")",";","}","}","}","throw","new","crypto","exception","(","\"","no","valid","encrypted","key","\"",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","string","encrypt","aes","key","(","final","public","key","public","key",",","final","secret","key","aes","key",")","throws","crypto","exception","{","return","encrypt","(","public","key",",","symmetric","encryption",".","key","to","string","(","aes","key",")",")","+","\"","\\n","\"",";","}","@","suppress","warnings","(","\"","unused","\"",")","public","static","void","encrypt","aes","key","(","final","secret","key","aes","key",",","final","path","authorized","keys","path",",","final","path","destination","path",")","throws","io","exception",",","crypto","exception","{","try","(","output","stream","writer","writer","=","file","manipulation",".","get","output","stream","writer","(","destination","path",")",")","{","final","list","<","public","key",">","public","keys","=","asymmetric","encryption",".","load","public","keys","(","authorized","keys","path",")",";","for","(","final","public","key","public","key",":","public","keys",")","{","write","encrypted","aes","key","(","public","key",",","aes","key",",","writer",")",";","}","writer",".","flush","(",")",";","}","}","@","suppress","warnings","(","\"","weaker","access","\"",")","public","static","secret","key","decrypt","aes","key","(","final","private","key","private","key",",","final","string","encrypted","key",")","throws","crypto","exception","{","return","symmetric","encryption",".","get","key","(","decrypt","(","private","key",",","encrypted","key",")",")",";","}","private","static","void","write","encrypted","aes","key","(","final","public","key","public","key",",","final","secret","key","aes","key",",","final","output","stream","writer","writer",")","throws","io","exception",",","crypto","exception","{","writer",".","append","(","encrypt","aes","key","(","public","key",",","aes","key",")",")",";","writer",".","append","(","\"","\\n","\"",")",";","}","private","static","string","get","key","(","final","path","key","path",")","throws","crypto","exception","{","try","{","return","new","string","(","files",".","read","all","bytes","(","key","path",")",")",";","}","catch","(","final","io","exception","e",")","{","throw","new","crypto","exception","(","\"","can","'","t","access","key","file",":","\"","+","key","path",")",";","}","}","}"],"func_name":"AsymmetricEncryption","func_name_tokens":["asymmetric","encryption"],"docstring":"  <p>A utility class that encrypts or decrypts data using RSA public key encryption.  The encrypted data is also Base64 MIME-encoded.</p>  <p>  <p>This code works with keys in PEM format, generated as follows:</p>  <p>  <pre>{@code  openssl genrsa -out private_key.pem 2048  chmod 600 private_key.pem  openssl rsa -in private_key.pem -pubout > public_key.pem  }</pre>  <p>  <p>Code derived from articles linked below.</p>   @author Graham Kirby (graham.kirby@st-andrews.ac.uk)  @see <a href=\"http://www.codejava.net/coding/file-encryption-and-decryption-simple-example\">http://www.codejava.net/coding/file-encryption-and-decryption-simple-example</a>","docstring_tokens":["<","p",">","a","utility","class","that","encrypts","or","decrypts","data","using","rsa","public","key","encryption",".","the","encrypted","data","is","also","base64","mime","-","encoded",".","<","/","p",">","<","p",">","<","p",">","this","code","works","with","keys","in","pem","format",",","generated","as","follows",":","<","/","p",">","<","p",">","<","pre",">","{","@","code","openssl","genrsa","-","out","private","key",".","pem","2048","chmod","600","private","key",".","pem","openssl","rsa","-","in","private","key",".","pem","-","pubout",">","public","key",".","pem","}","<","/","pre",">","<","p",">","<","p",">","code","derived","from","articles","linked","below",".","<","/","p",">"],"query":"How to read .pem file to get private and public key","query_tokens":["how","to","read",".","pem","file","to","get","private","and","public","key"]}
{"query_id":"12919231","repo_name":"siemens/omniproperties","zip_link":"/siemens/omniproperties/archive/master.zip","code":"public final class Intersection implements ObjectBuilder<Object> {\tprivate Object intersectionArray;\t\tpublic Intersection() {\t        intersectionArray = null;\t}\t        public Intersection(final Object[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Object> targetList = new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        List<Object> bList = Arrays.asList(arrays[i]);                        targetList.retainAll(bList);                }                intersectionArray = ReflectionUtil.createArray(targetList, arrays[0].getClass().getComponentType());        }        public Intersection(final byte[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Byte> targetList = new ArrayList<Byte>() {{ for (byte j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Byte> bList = new ArrayList<Byte>() {{ for (byte j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                byte[] result = new byte[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final short[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Short> targetList = new ArrayList<Short>() {{ for (short j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Short> bList = new ArrayList<Short>() {{ for (short j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                short[] result = new short[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final int[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Integer> targetList = new ArrayList<Integer>() {{ for (int j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Integer> bList = new ArrayList<Integer>() {{ for (int j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                int[] result = new int[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final long[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Long> targetList = new ArrayList<Long>() {{ for (long j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Long> bList = new ArrayList<Long>() {{ for (long j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                long[] result = new long[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final double[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Double> targetList = new ArrayList<Double>() {{ for (double j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Double> bList = new ArrayList<Double>() {{ for (double j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                double[] result = new double[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final float[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Float> targetList = new ArrayList<Float>() {{ for (float j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Float> bList = new ArrayList<Float>() {{ for (float j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                float[] result = new float[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final boolean[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Boolean> targetList = new ArrayList<Boolean>() {{ for (boolean j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Boolean> bList = new ArrayList<Boolean>() {{ for (boolean j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                boolean[] result = new boolean[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                public Intersection(final char[][] arrays) {                if(arrays.length==0){                        throw new IllegalArgumentException(\"No arrays given.\");                }                List<Character> targetList = new ArrayList<Character>() {{ for (char j : arrays[0]) add(j); }}; //new ArrayList<>(Arrays.asList(arrays[0]));                for (int i = 1; i < arrays.length; ++i) {                        final int ii = i;                        List<Character> bList = new ArrayList<Character>() {{ for (char j : arrays[ii]) add(j); }};;                        targetList.retainAll(bList);                }                char[] result = new char[targetList.size()];                for (int i = 0; i < targetList.size(); ++i) result[i] = targetList.get(i);                intersectionArray = result;        }                @Override\tpublic Object build() throws Exception {\t        if (intersectionArray == null)\t            throw new IllegalArgumentException(\"no arrays to intersect provided before call of build() (default constructor was called without setting the arrays to intersect afterward).\");\t\treturn intersectionArray;\t}}","code_tokens":["public","final","class","intersection","implements","object","builder","<","object",">","{","private","object","intersection","array",";","public","intersection","(",")","{","intersection","array","=","null",";","}","public","intersection","(","final","object","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","object",">","target","list","=","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","list","<","object",">","b","list","=","arrays",".","as","list","(","arrays","[","i","]",")",";","target","list",".","retain","all","(","b","list",")",";","}","intersection","array","=","reflection","util",".","create","array","(","target","list",",","arrays","[","0","]",".","get","class","(",")",".","get","component","type","(",")",")",";","}","public","intersection","(","final","byte","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","byte",">","target","list","=","new","array","list","<","byte",">","(",")","{","{","for","(","byte","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","byte",">","b","list","=","new","array","list","<","byte",">","(",")","{","{","for","(","byte","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","byte","[","]","result","=","new","byte","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","short","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","short",">","target","list","=","new","array","list","<","short",">","(",")","{","{","for","(","short","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","short",">","b","list","=","new","array","list","<","short",">","(",")","{","{","for","(","short","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","short","[","]","result","=","new","short","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","int","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","integer",">","target","list","=","new","array","list","<","integer",">","(",")","{","{","for","(","int","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","integer",">","b","list","=","new","array","list","<","integer",">","(",")","{","{","for","(","int","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","int","[","]","result","=","new","int","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","long","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","long",">","target","list","=","new","array","list","<","long",">","(",")","{","{","for","(","long","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","long",">","b","list","=","new","array","list","<","long",">","(",")","{","{","for","(","long","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","long","[","]","result","=","new","long","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","double","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","double",">","target","list","=","new","array","list","<","double",">","(",")","{","{","for","(","double","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","double",">","b","list","=","new","array","list","<","double",">","(",")","{","{","for","(","double","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","double","[","]","result","=","new","double","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","float","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","float",">","target","list","=","new","array","list","<","float",">","(",")","{","{","for","(","float","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","float",">","b","list","=","new","array","list","<","float",">","(",")","{","{","for","(","float","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","float","[","]","result","=","new","float","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","boolean","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","boolean",">","target","list","=","new","array","list","<","boolean",">","(",")","{","{","for","(","boolean","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","boolean",">","b","list","=","new","array","list","<","boolean",">","(",")","{","{","for","(","boolean","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","boolean","[","]","result","=","new","boolean","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","public","intersection","(","final","char","[","]","[","]","arrays",")","{","if","(","arrays",".","length","=","=","0",")","{","throw","new","illegal","argument","exception","(","\"","no","arrays","given",".","\"",")",";","}","list","<","character",">","target","list","=","new","array","list","<","character",">","(",")","{","{","for","(","char","j",":","arrays","[","0","]",")","add","(","j",")",";","}","}",";","/","/","new","array","list","<",">","(","arrays",".","as","list","(","arrays","[","0","]",")",")",";","for","(","int","i","=","1",";","i","<","arrays",".","length",";","+","+","i",")","{","final","int","ii","=","i",";","list","<","character",">","b","list","=","new","array","list","<","character",">","(",")","{","{","for","(","char","j",":","arrays","[","ii","]",")","add","(","j",")",";","}","}",";",";","target","list",".","retain","all","(","b","list",")",";","}","char","[","]","result","=","new","char","[","target","list",".","size","(",")","]",";","for","(","int","i","=","0",";","i","<","target","list",".","size","(",")",";","+","+","i",")","result","[","i","]","=","target","list",".","get","(","i",")",";","intersection","array","=","result",";","}","@","override","public","object","build","(",")","throws","exception","{","if","(","intersection","array","=","=","null",")","throw","new","illegal","argument","exception","(","\"","no","arrays","to","intersect","provided","before","call","of","build","(",")","(","default","constructor","was","called","without","setting","the","arrays","to","intersect","afterward",")",".","\"",")",";","return","intersection","array",";","}","}"],"func_name":"Intersection","func_name_tokens":["intersection"],"docstring":"  Omniproperties builder which takes a number of Arrays (at least one) and  provides another Array of the same type as the first provided Array containing  all the elements present in each of the provided Arrays.    @author Holger Schoener <holger.schoener@siemens.com>","docstring_tokens":["omniproperties","builder","which","takes","a","number","of","arrays","(","at","least","one",")","and","provides","another","array","of","the","same","type","as","the","first","provided","array","containing","all","the","elements","present","in","each","of","the","provided","arrays","."],"query":"Finding the intersection of two arrays [closed]","query_tokens":["finding","the","intersection","of","two","arrays","[","closed","]"]}
{"query_id":"22639336","repo_name":"DisruptiveMind/cineio-broadcast-android","zip_link":"/DisruptiveMind/cineio-broadcast-android/archive/master.zip","code":"    public static int chooseFixedPreviewFps(Camera.Parameters parms, int desiredThousandFps) {        List<int[]> supported = parms.getSupportedPreviewFpsRange();        for (int[] entry : supported) {            Log.d(TAG, \"entry: \" + entry[0] + \" - \" + entry[1]);            if ((entry[0] == entry[1]) && (entry[0] == desiredThousandFps)) {                parms.setPreviewFpsRange(entry[0], entry[1]);                return entry[0];            }        }        int[] tmp = new int[2];        parms.getPreviewFpsRange(tmp);        int guess;        if (tmp[0] == tmp[1]) {            guess = tmp[0];        } else {            guess = tmp[1] / 2;     // shrug        }        Log.d(TAG, \"Couldn't find match for \" + desiredThousandFps + \", using \" + guess);        return guess;    }","code_tokens":["public","static","int","choose","fixed","preview","fps","(","camera",".","parameters","parms",",","int","desired","thousand","fps",")","{","list","<","int","[","]",">","supported","=","parms",".","get","supported","preview","fps","range","(",")",";","for","(","int","[","]","entry",":","supported",")","{","log",".","d","(","tag",",","\"","entry",":","\"","+","entry","[","0","]","+","\"","-","\"","+","entry","[","1","]",")",";","if","(","(","entry","[","0","]","=","=","entry","[","1","]",")","&","&","(","entry","[","0","]","=","=","desired","thousand","fps",")",")","{","parms",".","set","preview","fps","range","(","entry","[","0","]",",","entry","[","1","]",")",";","return","entry","[","0","]",";","}","}","int","[","]","tmp","=","new","int","[","2","]",";","parms",".","get","preview","fps","range","(","tmp",")",";","int","guess",";","if","(","tmp","[","0","]","=","=","tmp","[","1","]",")","{","guess","=","tmp","[","0","]",";","}","else","{","guess","=","tmp","[","1","]","/","2",";","/","/","shrug","}","log",".","d","(","tag",",","\"","couldn","'","t","find","match","for","\"","+","desired","thousand","fps","+","\"",",","using","\"","+","guess",")",";","return","guess",";","}"],"func_name":"chooseFixedPreviewFps","func_name_tokens":["choose","fixed","preview","fps"],"docstring":"          Attempts to find a fixed preview frame rate that matches the desired frame rate.      <p/>      It doesn't seem like there's a great deal of flexibility here.      <p/>           @return The expected frame rate, in thousands of frames per second.","docstring_tokens":["attempts","to","find","a","fixed","preview","frame","rate","that","matches","the","desired","frame","rate",".","<","p","/",">","it","doesn","'","t","seem","like","there","'","s","a","great","deal","of","flexibility","here",".","<","p","/",">"],"query":"Android MediaCodec and camera: how to achieve a higher frame rate to get frame raw data from camera?","query_tokens":["android","media","codec","and","camera",":","how","to","achieve","a","higher","frame","rate","to","get","frame","raw","data","from","camera","?"]}
{"query_id":"909542","repo_name":"dbisUnibas/cineast","zip_link":"/vitrivr/cineast/archive/master.zip","code":"public class EHD extends AbstractFeatureModule {  private static final Logger LOGGER = LogManager.getLogger();  public EHD() {    this(80);  }  protected EHD(int vectorLength){    super(\"features_EHD\", 16f / 4f, vectorLength);  }  private static final float[]      mv = new float[]{1f, -1f, 1f, -1f},      mh = new float[]{1f, 1f, -1f, -1f},      m45 = new float[]{MathHelper.SQRT2_f, 0, 0, -MathHelper.SQRT2_f},      m135 = new float[]{0, MathHelper.SQRT2_f, -MathHelper.SQRT2_f, 0},      mn = new float[]{2f, -2f, -2f, 2};  @Override  public void processSegment(SegmentContainer shot) {    if (shot.getMostRepresentativeFrame() == VideoFrame.EMPTY_VIDEO_FRAME) {      return;    }    if (!phandler.idExists(shot.getId())) {      List<VideoFrame> videoFrames = shot.getVideoFrames();      float[] hist = new float[80];      for (VideoFrame f : videoFrames) {        MultiImage img = f.getImage();        hist = process(img, hist);      }      float count = videoFrames.size();      for (int i = 0; i < 80; ++i) {        hist[i] /= count;      }      persist(shot.getId(), new FloatVectorImpl(hist));    }  }  protected static float[] process(MultiImage img, float[] hist) {    GrayU8 gray = ConvertBufferedImage.convertFrom(img.getBufferedImage(), (GrayU8) null);    int width = img.getWidth(), height = img.getHeight();    for (int x = 0; x < 4; ++x) {      for (int y = 0; y < 4; ++y) {        GrayU8 subImage = gray            .subimage(width * x / 4, height * y / 4, width * (x + 1) / 4, height * (y + 1) / 4,                null);        int count = 0;        int[] tmp = new int[5];        for (int xx = 0; xx < subImage.getWidth() - 1; xx += 2) {          for (int yy = 0; yy < subImage.getHeight() - 1; yy += 2) {            count++;            int index = edgeType(                subImage.unsafe_get(xx, yy),                subImage.unsafe_get(xx + 1, yy),                subImage.unsafe_get(xx, yy + 1),                subImage.unsafe_get(xx + 1, yy + 1)            );            if (index > -1) {              tmp[index]++;            }          }        }        int offset = (4 * x + y) * 5;        for (int i = 0; i < 5; ++i) {          hist[offset + i] += ((float) tmp[i]) / (float) count;        }      }    }    return hist;  }  private static int edgeType(int i1, int i2, int i3, int i4) {    float[] coeffs = new float[]{        mv[0] * i1 + mv[1] * i2 + mv[2] * i3 + mv[3] * i4,        mh[0] * i1 + mh[1] * i2 + mh[2] * i3 + mh[3] * i4,        m45[0] * i1 + m45[1] * i2 + m45[2] * i3 + m45[3] * i4,        m135[0] * i1 + m135[1] * i2 + m135[2] * i3 + m135[3] * i4,        mn[0] * i1 + mn[1] * i2 + mn[2] * i3 + mn[3] * i4,    };    int maxid = 0;    for (int i = 1; i < 5; ++i) {      if (coeffs[maxid] < coeffs[i]) {        maxid = i;      }    }    if (coeffs[maxid] >= 14) {      return maxid;    }    return -1;  }  @Override  public List<ScoreElement> getSimilar(SegmentContainer sc, ReadableQueryConfig qc) {    FloatVector query = new FloatVectorImpl(process(sc.getMostRepresentativeFrame().getImage(), new float[80]));    return getSimilar(ReadableFloatVector.toArray(query), qc);  }  @Override  protected ReadableQueryConfig setQueryConfig(ReadableQueryConfig qc) {    return QueryConfig.clone(qc).setDistanceIfEmpty(Distance.chisquared);  }}","code_tokens":["public","class","ehd","extends","abstract","feature","module","{","private","static","final","logger","logger","=","log","manager",".","get","logger","(",")",";","public","ehd","(",")","{","this","(","80",")",";","}","protected","ehd","(","int","vector","length",")","{","super","(","\"","features","ehd","\"",",","16f","/","4f",",","vector","length",")",";","}","private","static","final","float","[","]","mv","=","new","float","[","]","{","1f",",","-","1f",",","1f",",","-","1f","}",",","mh","=","new","float","[","]","{","1f",",","1f",",","-","1f",",","-","1f","}",",","m45","=","new","float","[","]","{","math","helper",".","sqrt2","f",",","0",",","0",",","-","math","helper",".","sqrt2","f","}",",","m135","=","new","float","[","]","{","0",",","math","helper",".","sqrt2","f",",","-","math","helper",".","sqrt2","f",",","0","}",",","mn","=","new","float","[","]","{","2f",",","-","2f",",","-","2f",",","2","}",";","@","override","public","void","process","segment","(","segment","container","shot",")","{","if","(","shot",".","get","most","representative","frame","(",")","=","=","video","frame",".","empty","video","frame",")","{","return",";","}","if","(","!","phandler",".","id","exists","(","shot",".","get","id","(",")",")",")","{","list","<","video","frame",">","video","frames","=","shot",".","get","video","frames","(",")",";","float","[","]","hist","=","new","float","[","80","]",";","for","(","video","frame","f",":","video","frames",")","{","multi","image","img","=","f",".","get","image","(",")",";","hist","=","process","(","img",",","hist",")",";","}","float","count","=","video","frames",".","size","(",")",";","for","(","int","i","=","0",";","i","<","80",";","+","+","i",")","{","hist","[","i","]","/","=","count",";","}","persist","(","shot",".","get","id","(",")",",","new","float","vector","impl","(","hist",")",")",";","}","}","protected","static","float","[","]","process","(","multi","image","img",",","float","[","]","hist",")","{","gray","u8","gray","=","convert","buffered","image",".","convert","from","(","img",".","get","buffered","image","(",")",",","(","gray","u8",")","null",")",";","int","width","=","img",".","get","width","(",")",",","height","=","img",".","get","height","(",")",";","for","(","int","x","=","0",";","x","<","4",";","+","+","x",")","{","for","(","int","y","=","0",";","y","<","4",";","+","+","y",")","{","gray","u8","sub","image","=","gray",".","subimage","(","width","*","x","/","4",",","height","*","y","/","4",",","width","*","(","x","+","1",")","/","4",",","height","*","(","y","+","1",")","/","4",",","null",")",";","int","count","=","0",";","int","[","]","tmp","=","new","int","[","5","]",";","for","(","int","xx","=","0",";","xx","<","sub","image",".","get","width","(",")","-","1",";","xx","+","=","2",")","{","for","(","int","yy","=","0",";","yy","<","sub","image",".","get","height","(",")","-","1",";","yy","+","=","2",")","{","count","+","+",";","int","index","=","edge","type","(","sub","image",".","unsafe","get","(","xx",",","yy",")",",","sub","image",".","unsafe","get","(","xx","+","1",",","yy",")",",","sub","image",".","unsafe","get","(","xx",",","yy","+","1",")",",","sub","image",".","unsafe","get","(","xx","+","1",",","yy","+","1",")",")",";","if","(","index",">","-","1",")","{","tmp","[","index","]","+","+",";","}","}","}","int","offset","=","(","4","*","x","+","y",")","*","5",";","for","(","int","i","=","0",";","i","<","5",";","+","+","i",")","{","hist","[","offset","+","i","]","+","=","(","(","float",")","tmp","[","i","]",")","/","(","float",")","count",";","}","}","}","return","hist",";","}","private","static","int","edge","type","(","int","i1",",","int","i2",",","int","i3",",","int","i4",")","{","float","[","]","coeffs","=","new","float","[","]","{","mv","[","0","]","*","i1","+","mv","[","1","]","*","i2","+","mv","[","2","]","*","i3","+","mv","[","3","]","*","i4",",","mh","[","0","]","*","i1","+","mh","[","1","]","*","i2","+","mh","[","2","]","*","i3","+","mh","[","3","]","*","i4",",","m45","[","0","]","*","i1","+","m45","[","1","]","*","i2","+","m45","[","2","]","*","i3","+","m45","[","3","]","*","i4",",","m135","[","0","]","*","i1","+","m135","[","1","]","*","i2","+","m135","[","2","]","*","i3","+","m135","[","3","]","*","i4",",","mn","[","0","]","*","i1","+","mn","[","1","]","*","i2","+","mn","[","2","]","*","i3","+","mn","[","3","]","*","i4",",","}",";","int","maxid","=","0",";","for","(","int","i","=","1",";","i","<","5",";","+","+","i",")","{","if","(","coeffs","[","maxid","]","<","coeffs","[","i","]",")","{","maxid","=","i",";","}","}","if","(","coeffs","[","maxid","]",">","=","14",")","{","return","maxid",";","}","return","-","1",";","}","@","override","public","list","<","score","element",">","get","similar","(","segment","container","sc",",","readable","query","config","qc",")","{","float","vector","query","=","new","float","vector","impl","(","process","(","sc",".","get","most","representative","frame","(",")",".","get","image","(",")",",","new","float","[","80","]",")",")",";","return","get","similar","(","readable","float","vector",".","to","array","(","query",")",",","qc",")",";","}","@","override","protected","readable","query","config","set","query","config","(","readable","query","config","qc",")","{","return","query","config",".","clone","(","qc",")",".","set","distance","if","empty","(","distance",".","chisquared",")",";","}","}"],"func_name":"EHD","func_name_tokens":["ehd"],"docstring":"  see Efficient Use of MPEG-7 Edge Histogram Descriptor by Won '02   @author rosluc00","docstring_tokens":["see","efficient","use","of","mpeg","-","7","edge","histogram","descriptor","by","won","'","02"],"query":"Opencv Edge extraction","query_tokens":["opencv","edge","extraction"]}
{"query_id":"20727515","repo_name":"huangbop/seadroid-build","zip_link":"/huangbop/seadroid-build/archive/master.zip","code":"public class CustomPreferenceManagerCompat {    private static final String TAG = \"CustomPreferenceManagerCompat\";    /**     * Interface definition for a callback to be invoked when a     * {@link Preference} in the hierarchy rooted at this {@link PreferenceScreen} is     * clicked.     */    public interface OnPreferenceTreeClickListener {        /**         * Called when a preference in the tree rooted at this         * {@link PreferenceScreen} has been clicked.         *          * @param preferenceScreen The {@link PreferenceScreen} that the         *        preference is located in.         * @param preference The preference that was clicked.         * @return Whether the click was handled.         */        boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference);    }        public static PreferenceManager newInstance(Activity activity, int firstRequestCode) {        try {            Constructor<PreferenceManager> c = PreferenceManager.class.getDeclaredConstructor(Activity.class, int.class);            c.setAccessible(true);            return c.newInstance(activity, firstRequestCode);        } catch (Exception e) {            Log.w(TAG, \"Couldn't call constructor PreferenceManager by reflection\", e);        }        return null;}        /**     * Sets the owning preference fragment     */    public static void setFragment(PreferenceManager manager, CustomPreferenceFragment fragment) {        // stub    }    /**     * Sets the callback to be invoked when a {@link Preference} in the     * hierarchy rooted at this {@link PreferenceManager} is clicked.     *      * @param listener The callback to be invoked.     */    public static void setOnPreferenceTreeClickListener(            PreferenceManager manager,            final OnPreferenceTreeClickListener listener) {        try {            Field onPreferenceTreeClickListener = PreferenceManager.class.getDeclaredField(\"mOnPreferenceTreeClickListener\");            onPreferenceTreeClickListener.setAccessible(true);            if (listener != null) {                Object proxy = Proxy.newProxyInstance(onPreferenceTreeClickListener.getType().getClassLoader(),                                new Class[] { onPreferenceTreeClickListener.getType() }, new InvocationHandler() {                                    public Object invoke(Object proxy, Method method, Object[] args) {                                        if (method.getName().equals(\"onPreferenceTreeClick\")) {                                            return Boolean.valueOf(listener.onPreferenceTreeClick(                                                            (PreferenceScreen) args[0],                                                            (Preference) args[1]));                                        } else {                                            return null;                                        }                                    }                                });                onPreferenceTreeClickListener.set(manager, proxy);            } else {                onPreferenceTreeClickListener.set(manager, null);            }        } catch (Exception e) {            Log.w(TAG, \"Couldn't set PreferenceManager.mOnPreferenceTreeClickListener by reflection\", e);        }    }","code_tokens":["public","class","custom","preference","manager","compat","{","private","static","final","string","tag","=","\"","custom","preference","manager","compat","\"",";","public","interface","on","preference","tree","click","listener","{","boolean","on","preference","tree","click","(","preference","screen","preference","screen",",","preference","preference",")",";","}","public","static","preference","manager","new","instance","(","activity","activity",",","int","first","request","code",")","{","try","{","constructor","<","preference","manager",">","c","=","preference","manager",".","class",".","get","declared","constructor","(","activity",".","class",",","int",".","class",")",";","c",".","set","accessible","(","true",")",";","return","c",".","new","instance","(","activity",",","first","request","code",")",";","}","catch","(","exception","e",")","{","log",".","w","(","tag",",","\"","couldn","'","t","call","constructor","preference","manager","by","reflection","\"",",","e",")",";","}","return","null",";","}","public","static","void","set","fragment","(","preference","manager","manager",",","custom","preference","fragment","fragment",")","{","/","/","stub","}","public","static","void","set","on","preference","tree","click","listener","(","preference","manager","manager",",","final","on","preference","tree","click","listener","listener",")","{","try","{","field","on","preference","tree","click","listener","=","preference","manager",".","class",".","get","declared","field","(","\"","m","on","preference","tree","click","listener","\"",")",";","on","preference","tree","click","listener",".","set","accessible","(","true",")",";","if","(","listener","!","=","null",")","{","object","proxy","=","proxy",".","new","proxy","instance","(","on","preference","tree","click","listener",".","get","type","(",")",".","get","class","loader","(",")",",","new","class","[","]","{","on","preference","tree","click","listener",".","get","type","(",")","}",",","new","invocation","handler","(",")","{","public","object","invoke","(","object","proxy",",","method","method",",","object","[","]","args",")","{","if","(","method",".","get","name","(",")",".","equals","(","\"","on","preference","tree","click","\"",")",")","{","return","boolean",".","value","of","(","listener",".","on","preference","tree","click","(","(","preference","screen",")","args","[","0","]",",","(","preference",")","args","[","1","]",")",")",";","}","else","{","return","null",";","}","}","}",")",";","on","preference","tree","click","listener",".","set","(","manager",",","proxy",")",";","}","else","{","on","preference","tree","click","listener",".","set","(","manager",",","null",")",";","}","}","catch","(","exception","e",")","{","log",".","w","(","tag",",","\"","couldn","'","t","set","preference","manager",".","m","on","preference","tree","click","listener","by","reflection","\"",",","e",")",";","}","}"],"func_name":"CustomPreferenceManagerCompat","func_name_tokens":["custom","preference","manager","compat"],"docstring":"  Unofficial PreferenceFragment compatibility layer for Android 1.6 and up.  @see {@link https://github.com/kolavar/android-support-v4-preferencefragment}    @author kolavar ","docstring_tokens":["unofficial","preference","fragment","compatibility","layer","for","android","1",".","6","and","up",".","@","see","{","}"],"query":"Alternatives to PreferenceFragment with android-support-v4","query_tokens":["alternatives","to","preference","fragment","with","android","-","support","-","v4"]}
{"query_id":"204784","repo_name":"schnatterer/songbirdDbTools","zip_link":"/schnatterer/songbirdDbTools/archive/master.zip","code":"\tpublic static String getRelativePath(final String basePath, final String targetPath, final String pathSeparator) {\t\t// Normalize the paths\t\tString normalizedTargetPath = FilenameUtils.normalizeNoEndSeparator(targetPath);\t\tString normalizedBasePath = FilenameUtils.normalizeNoEndSeparator(basePath);\t\t// Undo the changes to the separators made by normalization\t\tif (pathSeparator.equals(\"/\")) {\t\t\tnormalizedTargetPath = FilenameUtils.separatorsToUnix(normalizedTargetPath);\t\t\tnormalizedBasePath = FilenameUtils.separatorsToUnix(normalizedBasePath);\t\t} else if (pathSeparator.equals(\"\\\\\")) {\t\t\tnormalizedTargetPath = FilenameUtils.separatorsToWindows(normalizedTargetPath);\t\t\tnormalizedBasePath = FilenameUtils.separatorsToWindows(normalizedBasePath);\t\t} else {\t\t\tthrow new IllegalArgumentException(\"Unrecognised dir separator '\" + pathSeparator + \"'\");\t\t}\t\tString[] base = normalizedBasePath.split(Pattern.quote(pathSeparator));\t\tString[] target = normalizedTargetPath.split(Pattern.quote(pathSeparator));\t\t// First get all the common elements. Store them as a string,\t\t// and also count how many of them there are.\t\tStringBuffer common = new StringBuffer();\t\tint commonIndex = 0;\t\twhile (commonIndex < target.length && commonIndex < base.length\t\t\t\t&& target[commonIndex].equals(base[commonIndex])) {\t\t\tcommon.append(target[commonIndex] + pathSeparator);\t\t\tcommonIndex++;\t\t}\t\tif (commonIndex == 0) {\t\t\t// No single common path element. This most\t\t\t// likely indicates differing drive letters, like C: and D:.\t\t\t// These paths cannot be relativized.\t\t\tthrow new PathResolutionException(\"No common path element found for '\" + normalizedTargetPath + \"' and '\"\t\t\t\t\t+ normalizedBasePath + \"'\");\t\t}\t\t// The number of directories we have to backtrack depends on whether the\t\t// base is a file or a dir\t\t// For example, the relative path from\t\t//\t\t// /foo/bar/baz/gg/ff to /foo/bar/baz\t\t//\t\t// \"..\" if ff is a file\t\t// \"../..\" if ff is a directory\t\t//\t\t// The following is a heuristic to figure out if the base refers to a\t\t// file or dir. It's not perfect, because\t\t// the resource referred to by this path may not actually exist, but\t\t// it's the best I can do\t\tboolean baseIsFile = true;\t\tFile baseResource = new File(normalizedBasePath);\t\tif (baseResource.exists()) {\t\t\tbaseIsFile = baseResource.isFile();\t\t} else if (basePath.endsWith(pathSeparator)) {\t\t\tbaseIsFile = false;\t\t}\t\tStringBuffer relative = new StringBuffer();\t\tif (base.length != commonIndex) {\t\t\tint numDirsUp;\t\t\tif (baseIsFile) {\t\t\t\tnumDirsUp = base.length - commonIndex - 1;\t\t\t} else {\t\t\t\tnumDirsUp = base.length - commonIndex;\t\t\t}\t\t\tfor (int i = 0; i < numDirsUp; i++) {\t\t\t\trelative.append(\"..\" + pathSeparator);\t\t\t}\t\t}\t\trelative.append(normalizedTargetPath.substring(common.length()));\t\treturn relative.toString();\t}","code_tokens":["public","static","string","get","relative","path","(","final","string","base","path",",","final","string","target","path",",","final","string","path","separator",")","{","/","/","normalize","the","paths","string","normalized","target","path","=","filename","utils",".","normalize","no","end","separator","(","target","path",")",";","string","normalized","base","path","=","filename","utils",".","normalize","no","end","separator","(","base","path",")",";","/","/","undo","the","changes","to","the","separators","made","by","normalization","if","(","path","separator",".","equals","(","\"","/","\"",")",")","{","normalized","target","path","=","filename","utils",".","separators","to","unix","(","normalized","target","path",")",";","normalized","base","path","=","filename","utils",".","separators","to","unix","(","normalized","base","path",")",";","}","else","if","(","path","separator",".","equals","(","\"","\\","\\","\"",")",")","{","normalized","target","path","=","filename","utils",".","separators","to","windows","(","normalized","target","path",")",";","normalized","base","path","=","filename","utils",".","separators","to","windows","(","normalized","base","path",")",";","}","else","{","throw","new","illegal","argument","exception","(","\"","unrecognised","dir","separator","'","\"","+","path","separator","+","\"","'","\"",")",";","}","string","[","]","base","=","normalized","base","path",".","split","(","pattern",".","quote","(","path","separator",")",")",";","string","[","]","target","=","normalized","target","path",".","split","(","pattern",".","quote","(","path","separator",")",")",";","/","/","first","get","all","the","common","elements",".","store","them","as","a","string",",","/","/","and","also","count","how","many","of","them","there","are",".","string","buffer","common","=","new","string","buffer","(",")",";","int","common","index","=","0",";","while","(","common","index","<","target",".","length","&","&","common","index","<","base",".","length","&","&","target","[","common","index","]",".","equals","(","base","[","common","index","]",")",")","{","common",".","append","(","target","[","common","index","]","+","path","separator",")",";","common","index","+","+",";","}","if","(","common","index","=","=","0",")","{","/","/","no","single","common","path","element",".","this","most","/","/","likely","indicates","differing","drive","letters",",","like","c",":","and","d",":",".","/","/","these","paths","cannot","be","relativized",".","throw","new","path","resolution","exception","(","\"","no","common","path","element","found","for","'","\"","+","normalized","target","path","+","\"","'","and","'","\"","+","normalized","base","path","+","\"","'","\"",")",";","}","/","/","the","number","of","directories","we","have","to","backtrack","depends","on","whether","the","/","/","base","is","a","file","or","a","dir","/","/","for","example",",","the","relative","path","from","/","/","/","/","/","foo","/","bar","/","baz","/","gg","/","ff","to","/","foo","/","bar","/","baz","/","/","/","/","\"",".",".","\"","if","ff","is","a","file","/","/","\"",".",".","/",".",".","\"","if","ff","is","a","directory","/","/","/","/","the","following","is","a","heuristic","to","figure","out","if","the","base","refers","to","a","/","/","file","or","dir",".","it","'","s","not","perfect",",","because","/","/","the","resource","referred","to","by","this","path","may","not","actually","exist",",","but","/","/","it","'","s","the","best","i","can","do","boolean","base","is","file","=","true",";","file","base","resource","=","new","file","(","normalized","base","path",")",";","if","(","base","resource",".","exists","(",")",")","{","base","is","file","=","base","resource",".","is","file","(",")",";","}","else","if","(","base","path",".","ends","with","(","path","separator",")",")","{","base","is","file","=","false",";","}","string","buffer","relative","=","new","string","buffer","(",")",";","if","(","base",".","length","!","=","common","index",")","{","int","num","dirs","up",";","if","(","base","is","file",")","{","num","dirs","up","=","base",".","length","-","common","index","-","1",";","}","else","{","num","dirs","up","=","base",".","length","-","common","index",";","}","for","(","int","i","=","0",";","i","<","num","dirs","up",";","i","+","+",")","{","relative",".","append","(","\"",".",".","\"","+","path","separator",")",";","}","}","relative",".","append","(","normalized","target","path",".","substring","(","common",".","length","(",")",")",")",";","return","relative",".","to","string","(",")",";","}"],"func_name":"getRelativePath","func_name_tokens":["get","relative","path"],"docstring":"\t\t  Get the relative path from one file to another, specifying the directory separator. If one of the provided\t  resources does not exist, it is assumed to be a file unless it ends with '/' or '\\'.\t  \t  @param targetPath\t             targetPath is calculated to this file\t  @param basePath\t             basePath is calculated from this file\t  @param pathSeparator\t             directory separator. The platform default is not assumed so that we can test Unix behavior when\t             running on Windows (for example)\t  @return <code>targetPath</code> relativized to <code>basePath</code>\t  \t          -path-in-java-from-two-absolute-paths-or-urls","docstring_tokens":["get","the","relative","path","from","one","file","to","another",",","specifying","the","directory","separator",".","if","one","of","the","provided","resources","does","not","exist",",","it","is","assumed","to","be","a","file","unless","it","ends","with","'","/","'","or","'","\\","'","."],"query":"How to construct a relative path in Java from two absolute paths (or URLs)?","query_tokens":["how","to","construct","a","relative","path","in","java","from","two","absolute","paths","(","or","ur","ls",")","?"]}
{"query_id":"2972986","repo_name":"prembasumatary/graphhopper","zip_link":"/prembasumatary/graphhopper/archive/master.zip","code":"    public static void cleanHack() {        System.gc();    }","code_tokens":["public","static","void","clean","hack","(",")","{","system",".","gc","(",")",";","}"],"func_name":"cleanHack","func_name_tokens":["clean","hack"],"docstring":"          Trying to force the release of the mapped ByteBuffer. See","docstring_tokens":["trying","to","force","the","release","of","the","mapped","byte","buffer",".","see"],"query":"How to unmap a file from memory mapped using FileChannel in java?","query_tokens":["how","to","unmap","a","file","from","memory","mapped","using","file","channel","in","java","?"]}
{"query_id":"6324852","repo_name":"TheCallSign/cawls-common","zip_link":"/TheCallSign/cawls-common/archive/master.zip","code":"    public static String getStringRepresentation(List<Character> list) {        StringBuilder builder = new StringBuilder(list.size());        for (Character ch : list) {            builder.append(ch);        }        return builder.toString();    }","code_tokens":["public","static","string","get","string","representation","(","list","<","character",">","list",")","{","string","builder","builder","=","new","string","builder","(","list",".","size","(",")",")",";","for","(","character","ch",":","list",")","{","builder",".","append","(","ch",")",";","}","return","builder",".","to","string","(",")",";","}"],"func_name":"getStringRepresentation","func_name_tokens":["get","string","representation"],"docstring":"          Get a direct string representation of a List. Taken from           @param list      @return String representation      @since 0.2.0","docstring_tokens":["get","a","direct","string","representation","of","a","list",".","taken","from"],"query":"Converting ArrayList of Characters to a String?","query_tokens":["converting","array","list","of","characters","to","a","string","?"]}
{"query_id":"12216148","repo_name":"alex-schwartzman/card.io-Android-source","zip_link":"/alex-schwartzman/card.io-Android-source/archive/master.zip","code":"    private int getRotationalOffset() {        final int rotationOffset;        // Check \"normal\" screen orientation and adjust accordingly        int naturalOrientation = ((WindowManager) getSystemService(Context.WINDOW_SERVICE))                .getDefaultDisplay().getRotation();        if (naturalOrientation == Surface.ROTATION_0) {            rotationOffset = 0;        } else if (naturalOrientation == Surface.ROTATION_90) {            rotationOffset = 90;        } else if (naturalOrientation == Surface.ROTATION_180) {            rotationOffset = 180;        } else if (naturalOrientation == Surface.ROTATION_270) {            rotationOffset = 270;        } else {            // just hope for the best (shouldn't happen)            rotationOffset = 0;        }        return rotationOffset;    }","code_tokens":["private","int","get","rotational","offset","(",")","{","final","int","rotation","offset",";","/","/","check","\"","normal","\"","screen","orientation","and","adjust","accordingly","int","natural","orientation","=","(","(","window","manager",")","get","system","service","(","context",".","window","service",")",")",".","get","default","display","(",")",".","get","rotation","(",")",";","if","(","natural","orientation","=","=","surface",".","rotation","0",")","{","rotation","offset","=","0",";","}","else","if","(","natural","orientation","=","=","surface",".","rotation","90",")","{","rotation","offset","=","90",";","}","else","if","(","natural","orientation","=","=","surface",".","rotation","180",")","{","rotation","offset","=","180",";","}","else","if","(","natural","orientation","=","=","surface",".","rotation","270",")","{","rotation","offset","=","270",";","}","else","{","/","/","just","hope","for","the","best","(","shouldn","'","t","happen",")","rotation","offset","=","0",";","}","return","rotation","offset",";","}"],"func_name":"getRotationalOffset","func_name_tokens":["get","rotational","offset"],"docstring":"          @see <a      post</a>","docstring_tokens":["@","see","<","a","post","<","/","a",">"],"query":"Android screen orientation differs between devices","query_tokens":["android","screen","orientation","differs","between","devices"]}
{"query_id":"615948","repo_name":"jurgendl/jhaws","zip_link":"/jurgendl/jhaws/archive/master.zip","code":"\tpublic boolean recycle() {\t\tif (notExists()) {\t\t\treturn false;\t\t}\t\tFilePath deleteJSBat = getTempDirectory().child(\"deleteJS.bat\");\t\tif (deleteJSBat.notExists()) {\t\t\tFilePath source = FilePath.of(FilePath.class, \"deleteJS/deleteJS.bat\");\t\t\tsource.writeTo(deleteJSBat);\t\t}\t\ttry {\t\t\tProcess p = Runtime.getRuntime()\t\t\t\t\t.exec(new String[] { \"cmd\", \"/c\", \"call\", deleteJSBat.getAbsolutePath(), getAbsolutePath() });\t\t\tp.waitFor();\t\t} catch (IOException ex) {\t\t\tthrow new UncheckedIOException(ex);\t\t} catch (InterruptedException ex) {\t\t\t//\t\t}\t\treturn notExists();\t}","code_tokens":["public","boolean","recycle","(",")","{","if","(","not","exists","(",")",")","{","return","false",";","}","file","path","delete","js","bat","=","get","temp","directory","(",")",".","child","(","\"","delete","js",".","bat","\"",")",";","if","(","delete","js","bat",".","not","exists","(",")",")","{","file","path","source","=","file","path",".","of","(","file","path",".","class",",","\"","delete","js","/","delete","js",".","bat","\"",")",";","source",".","write","to","(","delete","js","bat",")",";","}","try","{","process","p","=","runtime",".","get","runtime","(",")",".","exec","(","new","string","[","]","{","\"","cmd","\"",",","\"","/","c","\"",",","\"","call","\"",",","delete","js","bat",".","get","absolute","path","(",")",",","get","absolute","path","(",")","}",")",";","p",".","wait","for","(",")",";","}","catch","(","io","exception","ex",")","{","throw","new","unchecked","io","exception","(","ex",")",";","}","catch","(","interrupted","exception","ex",")","{","/","/","}","return","not","exists","(",")",";","}"],"func_name":"recycle","func_name_tokens":["recycle"],"docstring":"\t\t  windows only\t \t  @see http://stackoverflow.com/questions/1646425/cmd-command-to-delete-files-and-put-them-into-recycle-bin\t  @see https://github.com/npocmaka/batch.scripts/blob/master/hybrids/jscript/deleteJS.bat","docstring_tokens":["windows","only","@","see","@","see"],"query":"How do I run a batch file from my Java Application?","query_tokens":["how","do","i","run","a","batch","file","from","my","java","application","?"]}
{"query_id":"2711858","repo_name":"icalab/rijkshuisstijl_android","zip_link":"/icalab/rijkshuisstijl_android/archive/master.zip","code":"public final class RHFontsOverride {    public static void setDefaultFont(Context context,                                      String staticTypefaceFieldName, String fontAssetName) {        final Typeface regular = Typeface.createFromAsset(context.getAssets(),                fontAssetName);        replaceFont(staticTypefaceFieldName, regular);    }    protected static void replaceFont(String staticTypefaceFieldName,                                      final Typeface newTypeface) {        try {            final Field staticField = Typeface.class                    .getDeclaredField(staticTypefaceFieldName);            staticField.setAccessible(true);            staticField.set(null, newTypeface);        } catch (NoSuchFieldException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }    }}","code_tokens":["public","final","class","rh","fonts","override","{","public","static","void","set","default","font","(","context","context",",","string","static","typeface","field","name",",","string","font","asset","name",")","{","final","typeface","regular","=","typeface",".","create","from","asset","(","context",".","get","assets","(",")",",","font","asset","name",")",";","replace","font","(","static","typeface","field","name",",","regular",")",";","}","protected","static","void","replace","font","(","string","static","typeface","field","name",",","final","typeface","new","typeface",")","{","try","{","final","field","static","field","=","typeface",".","class",".","get","declared","field","(","static","typeface","field","name",")",";","static","field",".","set","accessible","(","true",")",";","static","field",".","set","(","null",",","new","typeface",")",";","}","catch","(","no","such","field","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","catch","(","illegal","access","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","}","}"],"func_name":"RHFontsOverride","func_name_tokens":["rh","fonts","override"],"docstring":"  Helper class for overriding a font in an app. Code taken from here:","docstring_tokens":["helper","class","for","overriding","a","font","in","an","app",".","code","taken","from","here",":"],"query":"Is it possible to set a custom font for entire of application?","query_tokens":["is","it","possible","to","set","a","custom","font","for","entire","of","application","?"]}
{"query_id":"24914191","repo_name":"way1989/v2ex","zip_link":"/way1989/v2ex/archive/master.zip","code":"public class FlexibleRecyclerView extends RecyclerView {    private static final String TAG = makeLogTag(FlexibleRecyclerView.class);    private int mContentTopClearance = 0;    public FlexibleRecyclerView(Context context) {        this(context, null, 0);    }    public FlexibleRecyclerView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public FlexibleRecyclerView(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);        if (attrs != null) {            final TypedArray xmlArgs = context.obtainStyledAttributes(attrs,                    R.styleable.FlexibleRecyclerView, defStyle, 0);            mContentTopClearance = xmlArgs.getDimensionPixelSize(                    R.styleable.FlexibleRecyclerView_topClearance, 0);            xmlArgs.recycle();        }    }    public void setContentTopClearance(int clearance) {        if (mContentTopClearance != clearance) {            mContentTopClearance = clearance;            setPadding(getPaddingLeft(), mContentTopClearance,                    getPaddingRight(), getPaddingBottom());            getAdapter().notifyDataSetChanged();        }    }}","code_tokens":["public","class","flexible","recycler","view","extends","recycler","view","{","private","static","final","string","tag","=","make","log","tag","(","flexible","recycler","view",".","class",")",";","private","int","m","content","top","clearance","=","0",";","public","flexible","recycler","view","(","context","context",")","{","this","(","context",",","null",",","0",")",";","}","public","flexible","recycler","view","(","context","context",",","attribute","set","attrs",")","{","this","(","context",",","attrs",",","0",")",";","}","public","flexible","recycler","view","(","context","context",",","attribute","set","attrs",",","int","def","style",")","{","super","(","context",",","attrs",",","def","style",")",";","if","(","attrs","!","=","null",")","{","final","typed","array","xml","args","=","context",".","obtain","styled","attributes","(","attrs",",","r",".","styleable",".","flexible","recycler","view",",","def","style",",","0",")",";","m","content","top","clearance","=","xml","args",".","get","dimension","pixel","size","(","r",".","styleable",".","flexible","recycler","view","top","clearance",",","0",")",";","xml","args",".","recycle","(",")",";","}","}","public","void","set","content","top","clearance","(","int","clearance",")","{","if","(","m","content","top","clearance","!","=","clearance",")","{","m","content","top","clearance","=","clearance",";","set","padding","(","get","padding","left","(",")",",","m","content","top","clearance",",","get","padding","right","(",")",",","get","padding","bottom","(",")",")",";","get","adapter","(",")",".","notify","data","set","changed","(",")",";","}","}","}"],"func_name":"FlexibleRecyclerView","func_name_tokens":["flexible","recycler","view"],"docstring":"  After hours of digging, finally get it through. \"clipToPadding = false\" works like a charm  and see @http://stackoverflow.com/questions/25178329/recyclerview-and-swiperefreshlayout  Created by liutao on 12/16/14.","docstring_tokens":["after","hours","of","digging",",","finally","get","it","through",".","\"","clip","to","padding","=","false","\"","works","like","a","charm","and","see","@","created","by","liutao","on","12","/","16","/","14","."],"query":"RecyclerView clipToPadding = false","query_tokens":["recycler","view","clip","to","padding","=","false"]}
{"query_id":"534648","repo_name":"ysung-pivotal/incubator-geode","zip_link":"/ysung-pivotal/incubator-geode/archive/develop.zip","code":"public final class LocalProcessLauncher {  public static final String PROPERTY_IGNORE_IS_PID_ALIVE = \"gemfire.test.LocalProcessLauncher.ignoreIsPidAlive\";    private final int pid;  private final File pidFile;    /**   * Constructs a new ProcessLauncher. Parses this process's RuntimeMXBean name    * for the pid (process id).   *    * @param pidFile the file to create and write pid into   * @param force if true then the pid file will be replaced if it already exists   *    * @throws FileAlreadyExistsException if the pid file already exists and force is false   * @throws IOException if unable to write pid (process id) to pid file   * @throws PidUnavailableException if the pid cannot be parsed from the RuntimeMXBean name    *    * @see java.lang.management.RuntimeMXBean   */  public LocalProcessLauncher(final File pidFile, final boolean force)       throws FileAlreadyExistsException, IOException, PidUnavailableException {    this.pid = ProcessUtils.identifyPid();    this.pidFile = pidFile;    writePid(force);  }    /**   * Returns the process id (pid).   *    * @return the process id (pid)   */  public int getPid() {    return this.pid;  }    /**   * Returns the pid file.   *    * @return the pid file   */  public File getPidFile() {    return this.pidFile;  }    /**   * Delete the pid file now. {@link java.io.File#deleteOnExit()} is set on the pid file.   */  void close() {    this.pidFile.delete();  }  /**   * Creates a new pid file and writes this process's pid into it.   *    * @param force if true then the pid file will be replaced if it already exists it    *    * @throws FileAlreadyExistsException if the pid file already exists and force is false   * @throws IOException if unable to create or write to the file   */  private void writePid(final boolean force) throws FileAlreadyExistsException, IOException {    final boolean created = this.pidFile.createNewFile();    if (!created && !force) {      int otherPid = 0;      try {        otherPid = ProcessUtils.readPid(this.pidFile);      } catch(IOException e) {        // suppress      } catch (NumberFormatException e) {        // suppress      }      boolean ignorePidFile = false;      if (otherPid != 0 && !ignoreIsPidAlive()) {        ignorePidFile = !ProcessUtils.isProcessAlive(otherPid);      }      if (!ignorePidFile) {        throw new FileAlreadyExistsException(\"Pid file already exists: \" + this.pidFile +             \" for \" + (otherPid > 0 ? \"process \" + otherPid : \"unknown process\"));      }    }    this.pidFile.deleteOnExit();    final FileWriter writer = new FileWriter(this.pidFile);    writer.write(String.valueOf(this.pid));    writer.flush();    writer.close();  }    private static boolean ignoreIsPidAlive() {    return Boolean.getBoolean(PROPERTY_IGNORE_IS_PID_ALIVE);  }}","code_tokens":["public","final","class","local","process","launcher","{","public","static","final","string","property","ignore","is","pid","alive","=","\"","gemfire",".","test",".","local","process","launcher",".","ignore","is","pid","alive","\"",";","private","final","int","pid",";","private","final","file","pid","file",";","public","local","process","launcher","(","final","file","pid","file",",","final","boolean","force",")","throws","file","already","exists","exception",",","io","exception",",","pid","unavailable","exception","{","this",".","pid","=","process","utils",".","identify","pid","(",")",";","this",".","pid","file","=","pid","file",";","write","pid","(","force",")",";","}","public","int","get","pid","(",")","{","return","this",".","pid",";","}","public","file","get","pid","file","(",")","{","return","this",".","pid","file",";","}","void","close","(",")","{","this",".","pid","file",".","delete","(",")",";","}","private","void","write","pid","(","final","boolean","force",")","throws","file","already","exists","exception",",","io","exception","{","final","boolean","created","=","this",".","pid","file",".","create","new","file","(",")",";","if","(","!","created","&","&","!","force",")","{","int","other","pid","=","0",";","try","{","other","pid","=","process","utils",".","read","pid","(","this",".","pid","file",")",";","}","catch","(","io","exception","e",")","{","/","/","suppress","}","catch","(","number","format","exception","e",")","{","/","/","suppress","}","boolean","ignore","pid","file","=","false",";","if","(","other","pid","!","=","0","&","&","!","ignore","is","pid","alive","(",")",")","{","ignore","pid","file","=","!","process","utils",".","is","process","alive","(","other","pid",")",";","}","if","(","!","ignore","pid","file",")","{","throw","new","file","already","exists","exception","(","\"","pid","file","already","exists",":","\"","+","this",".","pid","file","+","\"","for","\"","+","(","other","pid",">","0","?","\"","process","\"","+","other","pid",":","\"","unknown","process","\"",")",")",";","}","}","this",".","pid","file",".","delete","on","exit","(",")",";","final","file","writer","writer","=","new","file","writer","(","this",".","pid","file",")",";","writer",".","write","(","string",".","value","of","(","this",".","pid",")",")",";","writer",".","flush","(",")",";","writer",".","close","(",")",";","}","private","static","boolean","ignore","is","pid","alive","(",")","{","return","boolean",".","get","boolean","(","property","ignore","is","pid","alive",")",";","}","}"],"func_name":"LocalProcessLauncher","func_name_tokens":["local","process","launcher"],"docstring":"  Creates a pid file and writes the process id to the pid file.  <p/>  Related articles and libraries:  <ul>  <li>http://barelyenough.org/blog/2005/03/java-daemon/  <li>http://commons.apache.org/daemon/  <li>http://wrapper.tanukisoftware.com/  <li>http://weblogs.java.net/blog/kohsuke/archive/2009/01/writing_a_unix.html  <li>http://www.enderunix.org/docs/eng/daemon.php    @author Kirk Lund  @since 7.0","docstring_tokens":["creates","a","pid","file","and","writes","the","process","id","to","the","pid","file",".","<","p","/",">","related","articles","and","libraries",":","<","ul",">","<","li",">","<","li",">","<","li",">","<","li",">","<","li",">"],"query":"How to Daemonize a Java Program?","query_tokens":["how","to","daemonize","a","java","program","?"]}
{"query_id":"15656428","repo_name":"lloydtorres/stately","zip_link":"/lloydtorres/stately/archive/master.zip","code":"public abstract class DetachFragment extends Fragment {    @Override    public void onDetach() {        super.onDetach();        try {            Field childFragmentManager = Fragment.class.getDeclaredField(\"mChildFragmentManager\");            childFragmentManager.setAccessible(true);            childFragmentManager.set(this, null);        } catch (NoSuchFieldException e) {        } catch (IllegalAccessException e) {        }    }}","code_tokens":["public","abstract","class","detach","fragment","extends","fragment","{","@","override","public","void","on","detach","(",")","{","super",".","on","detach","(",")",";","try","{","field","child","fragment","manager","=","fragment",".","class",".","get","declared","field","(","\"","m","child","fragment","manager","\"",")",";","child","fragment","manager",".","set","accessible","(","true",")",";","child","fragment","manager",".","set","(","this",",","null",")",";","}","catch","(","no","such","field","exception","e",")","{","}","catch","(","illegal","access","exception","e",")","{","}","}","}"],"func_name":"DetachFragment","func_name_tokens":["detach","fragment"],"docstring":"  Created by Lloyd on 2016-10-31.","docstring_tokens":["created","by","lloyd","on","2016","-","10","-","31","."],"query":"Getting the error “Java.lang.IllegalStateException Activity has been destroyed” when using tabs with ViewPager","query_tokens":["getting","the","error","“","java",".","lang",".","illegal","state","exception","activity","has","been","destroyed","”","when","using","tabs","with","view","pager"]}
{"query_id":"11555366","repo_name":"palaima/DebugDrawer","zip_link":"/palaima/DebugDrawer/archive/master.zip","code":"    private boolean setMobileNetworkEnabled(ConnectivityManager connectivityManager, boolean enabled) {        try {            final Class conmanClass = Class.forName(connectivityManager.getClass().getName());            final Field iConnectivityManagerField = conmanClass.getDeclaredField(\"mService\");            iConnectivityManagerField.setAccessible(true);            final Object iConnectivityManager = iConnectivityManagerField.get(connectivityManager);            final Class iConnectivityManagerClass = Class.forName(iConnectivityManager.getClass().getName());            final Method setMobileDataEnabledMethod = iConnectivityManagerClass.getDeclaredMethod(\"setMobileDataEnabled\", Boolean.TYPE);            setMobileDataEnabledMethod.setAccessible(true);            setMobileDataEnabledMethod.invoke(iConnectivityManager, enabled);            return true;        } catch (ClassNotFoundException e) {        } catch (InvocationTargetException e) {        } catch (NoSuchMethodException e) {        } catch (IllegalAccessException e) {        } catch (NoSuchFieldException e) {        }        return false;    }","code_tokens":["private","boolean","set","mobile","network","enabled","(","connectivity","manager","connectivity","manager",",","boolean","enabled",")","{","try","{","final","class","conman","class","=","class",".","for","name","(","connectivity","manager",".","get","class","(",")",".","get","name","(",")",")",";","final","field","i","connectivity","manager","field","=","conman","class",".","get","declared","field","(","\"","m","service","\"",")",";","i","connectivity","manager","field",".","set","accessible","(","true",")",";","final","object","i","connectivity","manager","=","i","connectivity","manager","field",".","get","(","connectivity","manager",")",";","final","class","i","connectivity","manager","class","=","class",".","for","name","(","i","connectivity","manager",".","get","class","(",")",".","get","name","(",")",")",";","final","method","set","mobile","data","enabled","method","=","i","connectivity","manager","class",".","get","declared","method","(","\"","set","mobile","data","enabled","\"",",","boolean",".","type",")",";","set","mobile","data","enabled","method",".","set","accessible","(","true",")",";","set","mobile","data","enabled","method",".","invoke","(","i","connectivity","manager",",","enabled",")",";","return","true",";","}","catch","(","class","not","found","exception","e",")","{","}","catch","(","invocation","target","exception","e",")","{","}","catch","(","no","such","method","exception","e",")","{","}","catch","(","illegal","access","exception","e",")","{","}","catch","(","no","such","field","exception","e",")","{","}","return","false",";","}"],"func_name":"setMobileNetworkEnabled","func_name_tokens":["set","mobile","network","enabled"],"docstring":"          Try to enabled/disable mobile network state using reflection.      Returns true if succeeded           @param enabled","docstring_tokens":["try","to","enabled","/","disable","mobile","network","state","using","reflection",".","returns","true","if","succeeded"],"query":"Enable/disable data connection in android programmatically","query_tokens":["enable","/","disable","data","connection","in","android","programmatically"]}
{"query_id":"6938560","repo_name":"flamearrow/MonsterHunter4UDatabase","zip_link":"/flamearrow/MonsterHunter4UDatabase/archive/master.zip","code":"public class QuestExpandableListFragment extends Fragment {    private String mHub;    private static final String ARG_HUB = \"QUEST_HUB\";    private ArrayList<Quest> quests;    private String[] caravan = {\"1 \", \"2 \", \"3 \", \"4 \", \"5 \", \"6 \", \"7 \",            \"8 \", \"9 \", \"10 \"};    private String[] guild = {\"1 \", \"2 \", \"3 \", \"4 \", \"5 \", \"6 \", \"7 \",            \"8 \", \"9 \", \"10 \"};    private String[] event = {\"1 \", \"2 \", \"3 \", \"4 \", \"5 \", \"6 \", \"7 \",            \"8 \", \"9 \", \"10 \"};    private ArrayList<ArrayList<Quest>> children;    public static QuestExpandableListFragment newInstance(String hub) {        Bundle args = new Bundle();        args.putString(ARG_HUB, hub);        QuestExpandableListFragment f = new QuestExpandableListFragment();        f.setArguments(args);        return f;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mHub = null;        Bundle args = getArguments();        if (args != null) {            mHub = args.getString(ARG_HUB);        }        populateList();    }    private void populateList() {        children = new ArrayList<ArrayList<Quest>>();        quests = DataManager.get(getActivity()).queryQuestArrayHub(mHub);        ArrayList<Quest> g1 = new ArrayList<Quest>();        ArrayList<Quest> g2 = new ArrayList<Quest>();        ArrayList<Quest> g3 = new ArrayList<Quest>();        ArrayList<Quest> g4 = new ArrayList<Quest>();        ArrayList<Quest> g5 = new ArrayList<Quest>();        ArrayList<Quest> g6 = new ArrayList<Quest>();        ArrayList<Quest> g7 = new ArrayList<Quest>();        ArrayList<Quest> g8 = new ArrayList<Quest>();        ArrayList<Quest> g9 = new ArrayList<Quest>();        ArrayList<Quest> g10 = new ArrayList<Quest>();        for (int i = 0; i < quests.size(); i++) {            switch (quests.get(i).getStars()) {                case \"1\":                    g1.add(quests.get(i));                    break;                case \"2\":                    g2.add(quests.get(i));                    break;                case \"3\":                    g3.add(quests.get(i));                    break;                case \"4\":                    g4.add(quests.get(i));                    break;                case \"5\":                    g5.add(quests.get(i));                    break;                case \"6\":                    g6.add(quests.get(i));                    break;                case \"7\":                    g7.add(quests.get(i));                    break;                case \"8\":                    g8.add(quests.get(i));                    break;                case \"9\":                    g9.add(quests.get(i));                    break;                case \"10\":                    g10.add(quests.get(i));                    break;                default:                    break;            }        }        children.add(g1);        children.add(g2);        children.add(g3);        children.add(g4);        children.add(g5);        children.add(g6);        children.add(g7);        children.add(g8);        children.add(g9);        children.add(g10);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View v = inflater.inflate(R.layout.fragment_generic_expandable_list, container, false);        ExpandableListView elv = (ExpandableListView) v                .findViewById(R.id.expandableListView);        if (mHub.equals(\"Caravan\")) {            elv.setAdapter(new QuestListAdapter(caravan));        } else if(mHub.equals(\"Guild\")) {            elv.setAdapter(new QuestListAdapter(guild));        } else {            elv.setAdapter(new QuestListAdapter(event));        }        return v;    }    public class QuestListAdapter extends BaseExpandableListAdapter {        private String[] quests;        public QuestListAdapter(String[] quests) {            super();            this.quests = quests;        }        @Override        public int getGroupCount() {            return quests.length;        }        @Override        public int getChildrenCount(int i) {            return children.get(i).size();        }        @Override        public Object getGroup(int i) {            return quests[i];        }        @Override        public Object getChild(int i, int i1) {            return children.get(i).get(i1);        }        @Override        public long getGroupId(int i) {            return i;        }        @Override        public long getChildId(int i, int i1) {            return i1;        }        @Override        public boolean hasStableIds() {            return true;        }        @Override        public View getGroupView(int i, boolean b, View view,                                 ViewGroup viewGroup) {            // TextView textView = new TextView(            // QuestExpandableListFragment.this.getActivity());            // textView.setText(getGroup(i).toString());            // return textView;            View v = view;            Context context = viewGroup.getContext();            LayoutInflater inflater = (LayoutInflater) context                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            v = inflater.inflate(                    R.layout.fragment_quest_expandablelist_group_item,                    viewGroup, false);            TextView questGroupTextView = (TextView) v.findViewById(R.id.numstars);            ImageView[] stars = new ImageView[10];            stars[0] = (ImageView) v.findViewById(R.id.star1);            stars[1] = (ImageView) v.findViewById(R.id.star2);            stars[2] = (ImageView) v.findViewById(R.id.star3);            stars[3] = (ImageView) v.findViewById(R.id.star4);            stars[4] = (ImageView) v.findViewById(R.id.star5);            stars[5] = (ImageView) v.findViewById(R.id.star6);            stars[6] = (ImageView) v.findViewById(R.id.star7);            stars[7] = (ImageView) v.findViewById(R.id.star8);            stars[8] = (ImageView) v.findViewById(R.id.star9);            stars[9] = (ImageView) v.findViewById(R.id.star10);            for (int j = 0; j <= i; j++) {                stars[j].setVisibility(View.VISIBLE);            }            questGroupTextView.setText(getGroup(i).toString());            return v;        }        @Override        public View getChildView(int i, int i1, boolean b, View view,                                 ViewGroup viewGroup) {            // TextView textView = new TextView(            // QuestExpandableListFragment.this.getActivity());            View v = view;            Context context = viewGroup.getContext();            LayoutInflater inflater = (LayoutInflater) context                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            v = inflater.inflate(                    R.layout.fragment_quest_expandablelist_child_item,                    viewGroup, false);            TextView questChildTextView = (TextView) v.findViewById(R.id.name_text);            TextView keyChildTextView = (TextView) v.findViewById(R.id.key);            LinearLayout root = (LinearLayout) v.findViewById(R.id.root);            questChildTextView.setText(getChild(i, i1).toString());            String key = ((Quest) getChild(i, i1)).getType();            if (key.equals(\"Normal\")) {                key = \"\";            }            keyChildTextView.setText(key);            long questId = ((Quest) getChild(i, i1)).getId();            root.setTag(questId);            root.setOnClickListener(new QuestClickListener(context, questId));            return v;        }        @Override        public boolean isChildSelectable(int i, int i1) {            return true;        }    }}","code_tokens":["public","class","quest","expandable","list","fragment","extends","fragment","{","private","string","m","hub",";","private","static","final","string","arg","hub","=","\"","quest","hub","\"",";","private","array","list","<","quest",">","quests",";","private","string","[","]","caravan","=","{","\"","1","\"",",","\"","2","\"",",","\"","3","\"",",","\"","4","\"",",","\"","5","\"",",","\"","6","\"",",","\"","7","\"",",","\"","8","\"",",","\"","9","\"",",","\"","10","\"","}",";","private","string","[","]","guild","=","{","\"","1","\"",",","\"","2","\"",",","\"","3","\"",",","\"","4","\"",",","\"","5","\"",",","\"","6","\"",",","\"","7","\"",",","\"","8","\"",",","\"","9","\"",",","\"","10","\"","}",";","private","string","[","]","event","=","{","\"","1","\"",",","\"","2","\"",",","\"","3","\"",",","\"","4","\"",",","\"","5","\"",",","\"","6","\"",",","\"","7","\"",",","\"","8","\"",",","\"","9","\"",",","\"","10","\"","}",";","private","array","list","<","array","list","<","quest",">",">","children",";","public","static","quest","expandable","list","fragment","new","instance","(","string","hub",")","{","bundle","args","=","new","bundle","(",")",";","args",".","put","string","(","arg","hub",",","hub",")",";","quest","expandable","list","fragment","f","=","new","quest","expandable","list","fragment","(",")",";","f",".","set","arguments","(","args",")",";","return","f",";","}","@","override","public","void","on","create","(","bundle","saved","instance","state",")","{","super",".","on","create","(","saved","instance","state",")",";","m","hub","=","null",";","bundle","args","=","get","arguments","(",")",";","if","(","args","!","=","null",")","{","m","hub","=","args",".","get","string","(","arg","hub",")",";","}","populate","list","(",")",";","}","private","void","populate","list","(",")","{","children","=","new","array","list","<","array","list","<","quest",">",">","(",")",";","quests","=","data","manager",".","get","(","get","activity","(",")",")",".","query","quest","array","hub","(","m","hub",")",";","array","list","<","quest",">","g1","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g2","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g3","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g4","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g5","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g6","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g7","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g8","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g9","=","new","array","list","<","quest",">","(",")",";","array","list","<","quest",">","g10","=","new","array","list","<","quest",">","(",")",";","for","(","int","i","=","0",";","i","<","quests",".","size","(",")",";","i","+","+",")","{","switch","(","quests",".","get","(","i",")",".","get","stars","(",")",")","{","case","\"","1","\"",":","g1",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","2","\"",":","g2",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","3","\"",":","g3",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","4","\"",":","g4",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","5","\"",":","g5",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","6","\"",":","g6",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","7","\"",":","g7",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","8","\"",":","g8",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","9","\"",":","g9",".","add","(","quests",".","get","(","i",")",")",";","break",";","case","\"","10","\"",":","g10",".","add","(","quests",".","get","(","i",")",")",";","break",";","default",":","break",";","}","}","children",".","add","(","g1",")",";","children",".","add","(","g2",")",";","children",".","add","(","g3",")",";","children",".","add","(","g4",")",";","children",".","add","(","g5",")",";","children",".","add","(","g6",")",";","children",".","add","(","g7",")",";","children",".","add","(","g8",")",";","children",".","add","(","g9",")",";","children",".","add","(","g10",")",";","}","@","override","public","view","on","create","view","(","layout","inflater","inflater",",","view","group","container",",","bundle","saved","instance","state",")","{","view","v","=","inflater",".","inflate","(","r",".","layout",".","fragment","generic","expandable","list",",","container",",","false",")",";","expandable","list","view","elv","=","(","expandable","list","view",")","v",".","find","view","by","id","(","r",".","id",".","expandable","list","view",")",";","if","(","m","hub",".","equals","(","\"","caravan","\"",")",")","{","elv",".","set","adapter","(","new","quest","list","adapter","(","caravan",")",")",";","}","else","if","(","m","hub",".","equals","(","\"","guild","\"",")",")","{","elv",".","set","adapter","(","new","quest","list","adapter","(","guild",")",")",";","}","else","{","elv",".","set","adapter","(","new","quest","list","adapter","(","event",")",")",";","}","return","v",";","}","public","class","quest","list","adapter","extends","base","expandable","list","adapter","{","private","string","[","]","quests",";","public","quest","list","adapter","(","string","[","]","quests",")","{","super","(",")",";","this",".","quests","=","quests",";","}","@","override","public","int","get","group","count","(",")","{","return","quests",".","length",";","}","@","override","public","int","get","children","count","(","int","i",")","{","return","children",".","get","(","i",")",".","size","(",")",";","}","@","override","public","object","get","group","(","int","i",")","{","return","quests","[","i","]",";","}","@","override","public","object","get","child","(","int","i",",","int","i1",")","{","return","children",".","get","(","i",")",".","get","(","i1",")",";","}","@","override","public","long","get","group","id","(","int","i",")","{","return","i",";","}","@","override","public","long","get","child","id","(","int","i",",","int","i1",")","{","return","i1",";","}","@","override","public","boolean","has","stable","ids","(",")","{","return","true",";","}","@","override","public","view","get","group","view","(","int","i",",","boolean","b",",","view","view",",","view","group","view","group",")","{","/","/","text","view","text","view","=","new","text","view","(","/","/","quest","expandable","list","fragment",".","this",".","get","activity","(",")",")",";","/","/","text","view",".","set","text","(","get","group","(","i",")",".","to","string","(",")",")",";","/","/","return","text","view",";","view","v","=","view",";","context","context","=","view","group",".","get","context","(",")",";","layout","inflater","inflater","=","(","layout","inflater",")","context",".","get","system","service","(","context",".","layout","inflater","service",")",";","v","=","inflater",".","inflate","(","r",".","layout",".","fragment","quest","expandablelist","group","item",",","view","group",",","false",")",";","text","view","quest","group","text","view","=","(","text","view",")","v",".","find","view","by","id","(","r",".","id",".","numstars",")",";","image","view","[","]","stars","=","new","image","view","[","10","]",";","stars","[","0","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star1",")",";","stars","[","1","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star2",")",";","stars","[","2","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star3",")",";","stars","[","3","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star4",")",";","stars","[","4","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star5",")",";","stars","[","5","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star6",")",";","stars","[","6","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star7",")",";","stars","[","7","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star8",")",";","stars","[","8","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star9",")",";","stars","[","9","]","=","(","image","view",")","v",".","find","view","by","id","(","r",".","id",".","star10",")",";","for","(","int","j","=","0",";","j","<","=","i",";","j","+","+",")","{","stars","[","j","]",".","set","visibility","(","view",".","visible",")",";","}","quest","group","text","view",".","set","text","(","get","group","(","i",")",".","to","string","(",")",")",";","return","v",";","}","@","override","public","view","get","child","view","(","int","i",",","int","i1",",","boolean","b",",","view","view",",","view","group","view","group",")","{","/","/","text","view","text","view","=","new","text","view","(","/","/","quest","expandable","list","fragment",".","this",".","get","activity","(",")",")",";","view","v","=","view",";","context","context","=","view","group",".","get","context","(",")",";","layout","inflater","inflater","=","(","layout","inflater",")","context",".","get","system","service","(","context",".","layout","inflater","service",")",";","v","=","inflater",".","inflate","(","r",".","layout",".","fragment","quest","expandablelist","child","item",",","view","group",",","false",")",";","text","view","quest","child","text","view","=","(","text","view",")","v",".","find","view","by","id","(","r",".","id",".","name","text",")",";","text","view","key","child","text","view","=","(","text","view",")","v",".","find","view","by","id","(","r",".","id",".","key",")",";","linear","layout","root","=","(","linear","layout",")","v",".","find","view","by","id","(","r",".","id",".","root",")",";","quest","child","text","view",".","set","text","(","get","child","(","i",",","i1",")",".","to","string","(",")",")",";","string","key","=","(","(","quest",")","get","child","(","i",",","i1",")",")",".","get","type","(",")",";","if","(","key",".","equals","(","\"","normal","\"",")",")","{","key","=","\"","\"",";","}","key","child","text","view",".","set","text","(","key",")",";","long","quest","id","=","(","(","quest",")","get","child","(","i",",","i1",")",")",".","get","id","(",")",";","root",".","set","tag","(","quest","id",")",";","root",".","set","on","click","listener","(","new","quest","click","listener","(","context",",","quest","id",")",")",";","return","v",";","}","@","override","public","boolean","is","child","selectable","(","int","i",",","int","i1",")","{","return","true",";","}","}","}"],"func_name":"QuestExpandableListFragment","func_name_tokens":["quest","expandable","list","fragment"],"docstring":"  Pieced together from: Android samples:  com.example.android.apis.view.ExpandableList1  http://androidword.blogspot.com/2012/01/how-to-use-expandablelistview.html  alternative  http://stackoverflow.com/questions/6495898/findviewbyid-in-fragment-android","docstring_tokens":["pieced","together","from",":","android","samples",":","com",".","example",".","android",".","apis",".","view",".","expandable","list1","alternative"],"query":"Android: Fragments: setContentView alternative","query_tokens":["android",":","fragments",":","set","content","view","alternative"]}
{"query_id":"745415","repo_name":"Josharias/Terasology","zip_link":"/Josharias/Terasology/archive/develop.zip","code":"public final class CamelCaseMatcher {    private CamelCaseMatcher() {        // avoid instantiation    }    /**     * @param queryStr     * @param commands     * @return     */    public static Set<String> getMatches(String queryStr, Collection<String> commands, boolean includeCaseInsensitiveStartingWith) {        Set<String> matches = Sets.newHashSet();        String query = queryStr.replaceAll(\"\\\\*\", \".*?\");        query = query.replaceFirst(\"\\\\b([a-z]+)\", \"$1[a-z]*\");        String re = \"\\\\b(\" + query.replaceAll(\"([A-Z][^A-Z]*)\", \"$1[^A-Z]*\") + \".*?)\\\\b\";        Pattern regex = Pattern.compile(re);        for (String cmd : commands) {            if (includeCaseInsensitiveStartingWith && cmd.toLowerCase().startsWith(queryStr.toLowerCase())) {                matches.add(cmd);            }            Matcher m = regex.matcher(cmd);            if (m.find()) {                matches.add(m.group());            }        }        return matches;    }}","code_tokens":["public","final","class","camel","case","matcher","{","private","camel","case","matcher","(",")","{","/","/","avoid","instantiation","}","public","static","set","<","string",">","get","matches","(","string","query","str",",","collection","<","string",">","commands",",","boolean","include","case","insensitive","starting","with",")","{","set","<","string",">","matches","=","sets",".","new","hash","set","(",")",";","string","query","=","query","str",".","replace","all","(","\"","\\","\\","*","\"",",","\"",".","*","?","\"",")",";","query","=","query",".","replace","first","(","\"","\\","\\b","(","[","a","-","z","]","+",")","\"",",","\"","$","1","[","a","-","z","]","*","\"",")",";","string","re","=","\"","\\","\\b","(","\"","+","query",".","replace","all","(","\"","(","[","a","-","z","]","[","^","a","-","z","]","*",")","\"",",","\"","$","1","[","^","a","-","z","]","*","\"",")","+","\"",".","*","?",")","\\","\\b","\"",";","pattern","regex","=","pattern",".","compile","(","re",")",";","for","(","string","cmd",":","commands",")","{","if","(","include","case","insensitive","starting","with","&","&","cmd",".","to","lower","case","(",")",".","starts","with","(","query","str",".","to","lower","case","(",")",")",")","{","matches",".","add","(","cmd",")",";","}","matcher","m","=","regex",".","matcher","(","cmd",")",";","if","(","m",".","find","(",")",")","{","matches",".","add","(","m",".","group","(",")",")",";","}","}","return","matches",";","}","}"],"func_name":"CamelCaseMatcher","func_name_tokens":["camel","case","matcher"],"docstring":"  Inspired by  <p>  </p>","docstring_tokens":["inspired","by","<","p",">","<","/","p",">"],"query":"Regex to match from partial or camel case string?","query_tokens":["regex","to","match","from","partial","or","camel","case","string","?"]}
{"query_id":"955110","repo_name":"mredaelli/jabref","zip_link":"/mredaelli/jabref/archive/fulltext-search.zip","code":"    private static double similarity(String s1, String s2) {        String longer = s1;        String shorter = s2;        if (s1.length() < s2.length()) { // longer should always have greater length            longer = s2;            shorter = s1;        }        int longerLength = longer.length();        if (longerLength == 0) {            return 1.0;            /* both strings are zero length */ }        double sim = (longerLength - editDistance(longer, shorter)) / (double) longerLength;        LOGGER.debug(\"Longer string: \" + longer + \" Shorter string: \" + shorter + \" Similarity: \" + sim);        return sim;    }","code_tokens":["private","static","double","similarity","(","string","s1",",","string","s2",")","{","string","longer","=","s1",";","string","shorter","=","s2",";","if","(","s1",".","length","(",")","<","s2",".","length","(",")",")","{","/","/","longer","should","always","have","greater","length","longer","=","s2",";","shorter","=","s1",";","}","int","longer","length","=","longer",".","length","(",")",";","if","(","longer","length","=","=","0",")","{","return","1",".","0",";","}","double","sim","=","(","longer","length","-","edit","distance","(","longer",",","shorter",")",")","/","(","double",")","longer","length",";","logger",".","debug","(","\"","longer","string",":","\"","+","longer","+","\"","shorter","string",":","\"","+","shorter","+","\"","similarity",":","\"","+","sim",")",";","return","sim",";","}"],"func_name":"similarity","func_name_tokens":["similarity"],"docstring":"          Calculates the similarity (a number within 0 and 1) between two strings.","docstring_tokens":["calculates","the","similarity","(","a","number","within","0","and","1",")","between","two","strings","."],"query":"Similarity String Comparison in Java","query_tokens":["similarity","string","comparison","in","java"]}
{"query_id":"5966584","repo_name":"simmam/simmam_inaturalist","zip_link":"/simmam/simmam_inaturalist/archive/master.zip","code":"public class SQLiteCursorFactory implements CursorFactory {  private boolean debugQueries = false;  public SQLiteCursorFactory() {    this.debugQueries = false;  }  public SQLiteCursorFactory(boolean debugQueries) {    this.debugQueries = debugQueries;  }  //@Override  public Cursor newCursor(SQLiteDatabase db, SQLiteCursorDriver masterQuery,       String editTable, SQLiteQuery query) {    if (debugQueries) {      Log.d(\"SQL\", query.toString());    }    return new SQLiteCursor(db, masterQuery, editTable, query);  }}","code_tokens":["public","class","sq","lite","cursor","factory","implements","cursor","factory","{","private","boolean","debug","queries","=","false",";","public","sq","lite","cursor","factory","(",")","{","this",".","debug","queries","=","false",";","}","public","sq","lite","cursor","factory","(","boolean","debug","queries",")","{","this",".","debug","queries","=","debug","queries",";","}","/","/","@","override","public","cursor","new","cursor","(","sq","lite","database","db",",","sq","lite","cursor","driver","master","query",",","string","edit","table",",","sq","lite","query","query",")","{","if","(","debug","queries",")","{","log",".","d","(","\"","sql","\"",",","query",".","to","string","(",")",")",";","}","return","new","sq","lite","cursor","(","db",",","master","query",",","edit","table",",","query",")",";","}","}"],"func_name":"SQLiteCursorFactory","func_name_tokens":["sq","lite","cursor","factory"],"docstring":"  Implement the cursor factory in order to log the queries before returning   the cursor    @author Vincent @ MarvinLabs","docstring_tokens":["implement","the","cursor","factory","in","order","to","log","the","queries","before","returning","the","cursor"],"query":"Logging SQL queries in android","query_tokens":["logging","sql","queries","in","android"]}
{"query_id":"2056221","repo_name":"fxarte/FileSystemAnalyzer","zip_link":"/fxarte/FileSystemAnalyzer/archive/master.zip","code":"public class ProcessFolder {  private final WatchService watcher;  private final Map<WatchKey, Path> keys;  static boolean recursive;  public static String watchDirectory;  public static String duplicatesReport;  public static String commandsOS;  public static String commandsComment;  public static String commandsRowOperations;  public static String commandsOperationSkipRow = \"last\";  public static String logFolder = \"logs\";  public static String logFile = logFolder + \"/output.log\";  public static Integer showBiggestItems;  public static String similarFoldersReport;  public static boolean skipProcessed;  public static boolean processOnly;  public static boolean multithread = false;  private static final long startTime = System.nanoTime();    private boolean trace = true;  public static Boolean refreshDB = true;  public static SupportedProcessors[] processors;  private static final Logger logger = Logger.getLogger(ProcessFolder.class.getName());  public static long getTimeIntervalMillis() {    return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);  }    private static void loadProperties() {    Properties prop = new Properties();    InputStream input = null;    try {      input = new FileInputStream(\"settings.properties\");      // load a properties file      prop.load(input);      // get the property value and print it out      recursive = \"yes\".equals(prop.getProperty(\"recurse\").toLowerCase());      String watchDirectoryPropertyValue = prop.getProperty(\"watchDirectory\");      commandsOS = prop.getProperty(\"commandsOS\");      duplicatesReport = prop.getProperty(\"duplicatesReport\", \"duplicates.log\");      similarFoldersReport = prop.getProperty(\"similarFoldersReport\", \"similar_folders.log\");      commandsComment = prop.getProperty(\"commandsComment\", \"# \");      commandsRowOperations = prop.getProperty(\"commandsRowOperations\", \"# \");      commandsOperationSkipRow = prop.getProperty(\"commandsOperationSkipRow\", \"last\");      showBiggestItems = Integer.valueOf(prop.getProperty(\"showBiggestItems\", \"2147483647\"));      refreshDB = Boolean.valueOf(prop.getProperty(\"refreshDB\", \"True\"));      skipProcessed = Boolean.valueOf(prop.getProperty(\"skipProcessed\", \"False\"));      processOnly = Boolean.valueOf(prop.getProperty(\"processOnly\", \"False\"));      //TODO If processOnly; then check if the required DBs are available??                  processors = Stream.of(prop.getProperty(\"processors\").split(\" ?, ?\"))          .map(v -> v.toUpperCase())          .map(SupportedProcessors::valueOf)          .toArray(size -> new SupportedProcessors[size]);      logFolder = prop.getProperty(\"logFolder\");      logFile = logFolder + \"/\" + prop.getProperty(\"logFile\");      File wf = new File(watchDirectoryPropertyValue);      if (wf.exists() && wf.isDirectory()) {        watchDirectory = watchDirectoryPropertyValue;      } else {        String exceptionMessage = String.format(\"The provided folder:<%s> is not valid folder or the app has no access\", watchDirectoryPropertyValue);        throw new IllegalArgumentException(exceptionMessage);      }    } catch (IOException ex) {      ex.printStackTrace();    } finally {      if (input != null) {        try {          input.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }  }  @SuppressWarnings(\"unchecked\")  static <T> WatchEvent<T> cast(WatchEvent<?> event) {    return (WatchEvent<T>) event;  }  /**   * Register the given directory with the WatchService   */  private void register(Path dir) throws IOException {    WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);    if (trace) {      Path prev = keys.get(key);      if (prev == null) {        System.out.format(\"register: %s\\n\", dir);      } else {        if (!dir.equals(prev)) {          System.out.format(\"update: %s -> %s\\n\", prev, dir);        }      }    }    // this should be in the SQLite fileSystemAnalyzer.DB?    // here if the item is not registered, do so, and pass it to the    // registered analyzers    // based on the type (file or dir) to a    keys.put(key, dir);  }  /**   * Register the given directory, and all its sub-directories, with the   * WatchService.   */  private void registerAll(final Path start) {    try {      // register directory and sub-directories      Files.walkFileTree(start, new SimpleObservableVisitor());    } catch (IOException ex) {      System.err.println(ex);    }  }  /**   * Creates a WatchService and registers the given directory   */  ProcessFolder(Path dir, boolean recursive) throws IOException {    //TODO: Clean up maybe the watch pattern is not needed    this.watcher = FileSystems.getDefault().newWatchService();    this.keys = new HashMap<WatchKey, Path>();    this.recursive = recursive;    if (recursive) {      Date t0 = new Date();      System.out.format(\"Scanning %s ... \\n\", dir);      registerAll(dir);      Date t1 = new Date();      System.out.format(\"%nDone. (%s ms) %n\", (t1.getTime() - t0.getTime()));    } else {      register(dir);    }    // enable trace after initial registration    this.trace = true;  }  /**   * Process all events for keys queued to the watcher   */  void processEvents() {    for (;;) {      // wait for key to be signaled      WatchKey key;      try {        key = watcher.take();      } catch (InterruptedException x) {        return;      }      Path dir = keys.get(key);      if (dir == null) {        System.err.println(\"WatchKey not recognized!! \" + dir.toString());        continue;      }      for (WatchEvent<?> event : key.pollEvents()) {        // StandardWatchEventKinds        WatchEvent.Kind kind = event.kind();        // TBD - provide example of how OVERFLOW event is handled        if (kind == OVERFLOW) {          continue;        }        // Context for directory entry event is the file name of entry        WatchEvent<Path> ev = cast(event);        Path name = ev.context();        Path child = dir.resolve(name);        // print out event        System.out.format(\"%s: %s\\n\", event.kind().name(), child);        // if directory is created, and watching recursively, then        // register it and its sub-directories        if (recursive && (kind == ENTRY_CREATE)) {          if (Files.isDirectory(child, NOFOLLOW_LINKS)) {            registerAll(child);          }        }        // After all checks are done: instantiate an analyzer and pass        // the path        // if it is a directory then of sub type bundle        // If a file of type quantum      }      // reset key and remove from set if directory no longer accessible      boolean valid = key.reset();      if (!valid) {        keys.remove(key);        // all directories are inaccessible        if (keys.isEmpty()) {          break;        }      }      System.out.println(\"Done.\");    }    System.exit(0);  }  static void usage() {    System.err.println(\"usage: java ProcessFolder [-r] dir\");    System.exit(-1);  }  public static void main(String[] args) throws IOException {    // load properties    init();    PrintStream stdout = null;    stdout = ProcessFolder.toggleStdOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(logFile)), true));    // parse arguments    // if (args.length == 0 || args.length > 2) {    // usage();    // }    // boolean recursive = false;    // int dirArg = 0;    // if (args[0].equals(\"-r\")) {    // if (args.length < 2) {    // usage();    // }    // recursive = true;    // dirArg++;    // } else if (args[0].equals(\"-p\") || args[0].equals(\"-p\")) {    // //run all reports, for now    // processProcessed();    // }    Boolean refreshFileData = ProcessFolder.refreshDB;    try {      instantiateAnalizers();    } catch (NoSuchMethodException | SecurityException | ClassNotFoundException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {      System.err.println(\"An exception occur, these are the details\" + ex.getMessage());    } catch (NoSuchFieldException e) {      // TODO Auto-generated catch block      e.printStackTrace();    }    // register directory and process its events    Path dir = Paths.get(watchDirectory);    if (/* refreshFileData && */Files.isWritable(dir)) {      if (!processOnly) {        System.out.println(\"Analyzing folder \" + watchDirectory);        ProcessFolder p = new ProcessFolder(dir, recursive);      } else {        System.out.println(\"Skipping analyzing folder \" + watchDirectory);      }      System.out.println(\"Start processing folder \" + watchDirectory);      processProcessed();      System.out.println(\"Processing done!\");      // p.processEvents();      stdout = ProcessFolder.toggleStdOut(stdout);    } else {      System.err.println(\"Cannot access the folder '\" + watchDirectory + \"' for processing\");    }    System.out.printf(\"Processing done!\\nDuration: %d msecs.\\n\", getTimeIntervalMillis());  }  private static void init() {    loadProperties();    new File(logFolder).mkdirs();//    reRouteOutput();  }  static private PrintStream stdout = System.out;;  public static PrintStream toggleStdOut(PrintStream out) {    PrintStream prevOut;     if (out != null) {      prevOut = stdout;      stdout = out;      System.setOut(stdout);      return prevOut;    }    System.setOut(stdout);    return stdout;  }    private static void reRouteOutput() {    try {      stdout = System.out;      System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(logFile)), true));    } catch (FileNotFoundException e) {      // TODO Auto-generated catch block      e.printStackTrace();    }    System.out.println(\"=====================================================================================\\n\" + logFile + \"\\n=====================================================================================\");    System.err.println(\"System.out is being sent to:\" + logFile);  }  private static void processProcessed() {    DataProcessorsAPI.INSTANCE.processData();  }  private static void instantiateAnalizers() throws NoSuchMethodException, SecurityException, ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException {    Set<FileAnalyzer> al = FileAnalyzerAPI.INSTANCE.getAnalyzerProviders();    System.out.println(al);    for (FileAnalyzer fa : al) {      logger.log(Level.INFO, \"--------- Using analiser: {0} \", fa.getClass().getName());    }    SimpleObservableVisitor.setPluggings(al);  }}","code_tokens":["public","class","process","folder","{","private","final","watch","service","watcher",";","private","final","map","<","watch","key",",","path",">","keys",";","static","boolean","recursive",";","public","static","string","watch","directory",";","public","static","string","duplicates","report",";","public","static","string","commands","os",";","public","static","string","commands","comment",";","public","static","string","commands","row","operations",";","public","static","string","commands","operation","skip","row","=","\"","last","\"",";","public","static","string","log","folder","=","\"","logs","\"",";","public","static","string","log","file","=","log","folder","+","\"","/","output",".","log","\"",";","public","static","integer","show","biggest","items",";","public","static","string","similar","folders","report",";","public","static","boolean","skip","processed",";","public","static","boolean","process","only",";","public","static","boolean","multithread","=","false",";","private","static","final","long","start","time","=","system",".","nano","time","(",")",";","private","boolean","trace","=","true",";","public","static","boolean","refresh","db","=","true",";","public","static","supported","processors","[","]","processors",";","private","static","final","logger","logger","=","logger",".","get","logger","(","process","folder",".","class",".","get","name","(",")",")",";","public","static","long","get","time","interval","millis","(",")","{","return","time","unit",".","nanoseconds",".","to","millis","(","system",".","nano","time","(",")","-","start","time",")",";","}","private","static","void","load","properties","(",")","{","properties","prop","=","new","properties","(",")",";","input","stream","input","=","null",";","try","{","input","=","new","file","input","stream","(","\"","settings",".","properties","\"",")",";","/","/","load","a","properties","file","prop",".","load","(","input",")",";","/","/","get","the","property","value","and","print","it","out","recursive","=","\"","yes","\"",".","equals","(","prop",".","get","property","(","\"","recurse","\"",")",".","to","lower","case","(",")",")",";","string","watch","directory","property","value","=","prop",".","get","property","(","\"","watch","directory","\"",")",";","commands","os","=","prop",".","get","property","(","\"","commands","os","\"",")",";","duplicates","report","=","prop",".","get","property","(","\"","duplicates","report","\"",",","\"","duplicates",".","log","\"",")",";","similar","folders","report","=","prop",".","get","property","(","\"","similar","folders","report","\"",",","\"","similar","folders",".","log","\"",")",";","commands","comment","=","prop",".","get","property","(","\"","commands","comment","\"",",","\"","#","\"",")",";","commands","row","operations","=","prop",".","get","property","(","\"","commands","row","operations","\"",",","\"","#","\"",")",";","commands","operation","skip","row","=","prop",".","get","property","(","\"","commands","operation","skip","row","\"",",","\"","last","\"",")",";","show","biggest","items","=","integer",".","value","of","(","prop",".","get","property","(","\"","show","biggest","items","\"",",","\"","2147483647","\"",")",")",";","refresh","db","=","boolean",".","value","of","(","prop",".","get","property","(","\"","refresh","db","\"",",","\"","true","\"",")",")",";","skip","processed","=","boolean",".","value","of","(","prop",".","get","property","(","\"","skip","processed","\"",",","\"","false","\"",")",")",";","process","only","=","boolean",".","value","of","(","prop",".","get","property","(","\"","process","only","\"",",","\"","false","\"",")",")",";","/","/","todo","if","process","only",";","then","check","if","the","required","d","bs","are","available","?","?","processors","=","stream",".","of","(","prop",".","get","property","(","\"","processors","\"",")",".","split","(","\"","?",",","?","\"",")",")",".","map","(","v","-",">","v",".","to","upper","case","(",")",")",".","map","(","supported","processors",":",":","value","of",")",".","to","array","(","size","-",">","new","supported","processors","[","size","]",")",";","log","folder","=","prop",".","get","property","(","\"","log","folder","\"",")",";","log","file","=","log","folder","+","\"","/","\"","+","prop",".","get","property","(","\"","log","file","\"",")",";","file","wf","=","new","file","(","watch","directory","property","value",")",";","if","(","wf",".","exists","(",")","&","&","wf",".","is","directory","(",")",")","{","watch","directory","=","watch","directory","property","value",";","}","else","{","string","exception","message","=","string",".","format","(","\"","the","provided","folder",":","<","%","s",">","is","not","valid","folder","or","the","app","has","no","access","\"",",","watch","directory","property","value",")",";","throw","new","illegal","argument","exception","(","exception","message",")",";","}","}","catch","(","io","exception","ex",")","{","ex",".","print","stack","trace","(",")",";","}","finally","{","if","(","input","!","=","null",")","{","try","{","input",".","close","(",")",";","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","}","}","}","@","suppress","warnings","(","\"","unchecked","\"",")","static","<","t",">","watch","event","<","t",">","cast","(","watch","event","<","?",">","event",")","{","return","(","watch","event","<","t",">",")","event",";","}","private","void","register","(","path","dir",")","throws","io","exception","{","watch","key","key","=","dir",".","register","(","watcher",",","entry","create",",","entry","delete",",","entry","modify",")",";","if","(","trace",")","{","path","prev","=","keys",".","get","(","key",")",";","if","(","prev","=","=","null",")","{","system",".","out",".","format","(","\"","register",":","%","s","\\n","\"",",","dir",")",";","}","else","{","if","(","!","dir",".","equals","(","prev",")",")","{","system",".","out",".","format","(","\"","update",":","%","s","-",">","%","s","\\n","\"",",","prev",",","dir",")",";","}","}","}","/","/","this","should","be","in","the","sq","lite","file","system","analyzer",".","db","?","/","/","here","if","the","item","is","not","registered",",","do","so",",","and","pass","it","to","the","/","/","registered","analyzers","/","/","based","on","the","type","(","file","or","dir",")","to","a","keys",".","put","(","key",",","dir",")",";","}","private","void","register","all","(","final","path","start",")","{","try","{","/","/","register","directory","and","sub","-","directories","files",".","walk","file","tree","(","start",",","new","simple","observable","visitor","(",")",")",";","}","catch","(","io","exception","ex",")","{","system",".","err",".","println","(","ex",")",";","}","}","process","folder","(","path","dir",",","boolean","recursive",")","throws","io","exception","{","/","/","todo",":","clean","up","maybe","the","watch","pattern","is","not","needed","this",".","watcher","=","file","systems",".","get","default","(",")",".","new","watch","service","(",")",";","this",".","keys","=","new","hash","map","<","watch","key",",","path",">","(",")",";","this",".","recursive","=","recursive",";","if","(","recursive",")","{","date","t0","=","new","date","(",")",";","system",".","out",".","format","(","\"","scanning","%","s",".",".",".","\\n","\"",",","dir",")",";","register","all","(","dir",")",";","date","t1","=","new","date","(",")",";","system",".","out",".","format","(","\"","%","n","done",".","(","%","s","ms",")","%","n","\"",",","(","t1",".","get","time","(",")","-","t0",".","get","time","(",")",")",")",";","}","else","{","register","(","dir",")",";","}","/","/","enable","trace","after","initial","registration","this",".","trace","=","true",";","}","void","process","events","(",")","{","for","(",";",";",")","{","/","/","wait","for","key","to","be","signaled","watch","key","key",";","try","{","key","=","watcher",".","take","(",")",";","}","catch","(","interrupted","exception","x",")","{","return",";","}","path","dir","=","keys",".","get","(","key",")",";","if","(","dir","=","=","null",")","{","system",".","err",".","println","(","\"","watch","key","not","recognized","!","!","\"","+","dir",".","to","string","(",")",")",";","continue",";","}","for","(","watch","event","<","?",">","event",":","key",".","poll","events","(",")",")","{","/","/","standard","watch","event","kinds","watch","event",".","kind","kind","=","event",".","kind","(",")",";","/","/","tbd","-","provide","example","of","how","overflow","event","is","handled","if","(","kind","=","=","overflow",")","{","continue",";","}","/","/","context","for","directory","entry","event","is","the","file","name","of","entry","watch","event","<","path",">","ev","=","cast","(","event",")",";","path","name","=","ev",".","context","(",")",";","path","child","=","dir",".","resolve","(","name",")",";","/","/","print","out","event","system",".","out",".","format","(","\"","%","s",":","%","s","\\n","\"",",","event",".","kind","(",")",".","name","(",")",",","child",")",";","/","/","if","directory","is","created",",","and","watching","recursively",",","then","/","/","register","it","and","its","sub","-","directories","if","(","recursive","&","&","(","kind","=","=","entry","create",")",")","{","if","(","files",".","is","directory","(","child",",","nofollow","links",")",")","{","register","all","(","child",")",";","}","}","/","/","after","all","checks","are","done",":","instantiate","an","analyzer","and","pass","/","/","the","path","/","/","if","it","is","a","directory","then","of","sub","type","bundle","/","/","if","a","file","of","type","quantum","}","/","/","reset","key","and","remove","from","set","if","directory","no","longer","accessible","boolean","valid","=","key",".","reset","(",")",";","if","(","!","valid",")","{","keys",".","remove","(","key",")",";","/","/","all","directories","are","inaccessible","if","(","keys",".","is","empty","(",")",")","{","break",";","}","}","system",".","out",".","println","(","\"","done",".","\"",")",";","}","system",".","exit","(","0",")",";","}","static","void","usage","(",")","{","system",".","err",".","println","(","\"","usage",":","java","process","folder","[","-","r","]","dir","\"",")",";","system",".","exit","(","-","1",")",";","}","public","static","void","main","(","string","[","]","args",")","throws","io","exception","{","/","/","load","properties","init","(",")",";","print","stream","stdout","=","null",";","stdout","=","process","folder",".","toggle","std","out","(","new","print","stream","(","new","buffered","output","stream","(","new","file","output","stream","(","log","file",")",")",",","true",")",")",";","/","/","parse","arguments","/","/","if","(","args",".","length","=","=","0","|","|","args",".","length",">","2",")","{","/","/","usage","(",")",";","/","/","}","/","/","boolean","recursive","=","false",";","/","/","int","dir","arg","=","0",";","/","/","if","(","args","[","0","]",".","equals","(","\"","-","r","\"",")",")","{","/","/","if","(","args",".","length","<","2",")","{","/","/","usage","(",")",";","/","/","}","/","/","recursive","=","true",";","/","/","dir","arg","+","+",";","/","/","}","else","if","(","args","[","0","]",".","equals","(","\"","-","p","\"",")","|","|","args","[","0","]",".","equals","(","\"","-","p","\"",")",")","{","/","/","/","/","run","all","reports",",","for","now","/","/","process","processed","(",")",";","/","/","}","boolean","refresh","file","data","=","process","folder",".","refresh","db",";","try","{","instantiate","analizers","(",")",";","}","catch","(","no","such","method","exception","|","security","exception","|","class","not","found","exception","|","illegal","access","exception","|","illegal","argument","exception","|","invocation","target","exception","ex",")","{","system",".","err",".","println","(","\"","an","exception","occur",",","these","are","the","details","\"","+","ex",".","get","message","(",")",")",";","}","catch","(","no","such","field","exception","e",")","{","/","/","todo","auto","-","generated","catch","block","e",".","print","stack","trace","(",")",";","}","/","/","register","directory","and","process","its","events","path","dir","=","paths",".","get","(","watch","directory",")",";","if","(","files",".","is","writable","(","dir",")",")","{","if","(","!","process","only",")","{","system",".","out",".","println","(","\"","analyzing","folder","\"","+","watch","directory",")",";","process","folder","p","=","new","process","folder","(","dir",",","recursive",")",";","}","else","{","system",".","out",".","println","(","\"","skipping","analyzing","folder","\"","+","watch","directory",")",";","}","system",".","out",".","println","(","\"","start","processing","folder","\"","+","watch","directory",")",";","process","processed","(",")",";","system",".","out",".","println","(","\"","processing","done","!","\"",")",";","/","/","p",".","process","events","(",")",";","stdout","=","process","folder",".","toggle","std","out","(","stdout",")",";","}","else","{","system",".","err",".","println","(","\"","cannot","access","the","folder","'","\"","+","watch","directory","+","\"","'","for","processing","\"",")",";","}","system",".","out",".","printf","(","\"","processing","done","!","\\n","duration",":","%","d","msecs",".","\\n","\"",",","get","time","interval","millis","(",")",")",";","}","private","static","void","init","(",")","{","load","properties","(",")",";","new","file","(","log","folder",")",".","mkdirs","(",")",";","/","/","re","route","output","(",")",";","}","static","private","print","stream","stdout","=","system",".","out",";",";","public","static","print","stream","toggle","std","out","(","print","stream","out",")","{","print","stream","prev","out",";","if","(","out","!","=","null",")","{","prev","out","=","stdout",";","stdout","=","out",";","system",".","set","out","(","stdout",")",";","return","prev","out",";","}","system",".","set","out","(","stdout",")",";","return","stdout",";","}","private","static","void","re","route","output","(",")","{","try","{","stdout","=","system",".","out",";","system",".","set","out","(","new","print","stream","(","new","buffered","output","stream","(","new","file","output","stream","(","log","file",")",")",",","true",")",")",";","}","catch","(","file","not","found","exception","e",")","{","/","/","todo","auto","-","generated","catch","block","e",".","print","stack","trace","(",")",";","}","system",".","out",".","println","(","\"","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","\\n","\"","+","log","file","+","\"","\\n","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","\"",")",";","system",".","err",".","println","(","\"","system",".","out","is","being","sent","to",":","\"","+","log","file",")",";","}","private","static","void","process","processed","(",")","{","data","processors","api",".","instance",".","process","data","(",")",";","}","private","static","void","instantiate","analizers","(",")","throws","no","such","method","exception",",","security","exception",",","class","not","found","exception",",","illegal","access","exception",",","illegal","argument","exception",",","invocation","target","exception",",","no","such","field","exception","{","set","<","file","analyzer",">","al","=","file","analyzer","api",".","instance",".","get","analyzer","providers","(",")",";","system",".","out",".","println","(","al",")",";","for","(","file","analyzer","fa",":","al",")","{","logger",".","log","(","level",".","info",",","\"","-","-","-","-","-","-","-","-","-","using","analiser",":","{","0","}","\"",",","fa",".","get","class","(",")",".","get","name","(",")",")",";","}","simple","observable","visitor",".","set","pluggings","(","al",")",";","}","}"],"func_name":"ProcessFolder","func_name_tokens":["process","folder"],"docstring":"  Example to watch a directory (or tree) for changes to files.","docstring_tokens":["example","to","watch","a","directory","(","or","tree",")","for","changes","to","files","."],"query":"Recursively list files in Java","query_tokens":["recursively","list","files","in","java"]}
{"query_id":"4095133","repo_name":"jk1/intellij-community","zip_link":"/jk1/intellij-community/archive/master.zip","code":"  private static void addToWindowsCommandLine(String command, List<String> parameters, List<String> commandLine) {    boolean isCmdParam = isWinShell(command);    int cmdInvocationDepth = isWinShellScript(command) ? 2 : isCmdParam ? 1 : 0;    QuoteFlag quoteFlag = new QuoteFlag(false);    for (int i = 0; i < parameters.size(); i++) {      String parameter = parameters.get(i);      parameter = unquoteString(parameter, INESCAPABLE_QUOTE);      boolean inescapableQuoting = !parameter.equals(parameters.get(i));      if (parameter.isEmpty()) {        commandLine.add(QQ);        continue;      }      if (isCmdParam && parameter.startsWith(\"/\") && parameter.length() == 2) {        commandLine.add(parameter);        continue;      }      String parameterPrefix = \"\";      if (isCmdParam) {        Matcher m = WIN_QUIET_COMMAND.matcher(parameter);        if (m.matches()) {          parameterPrefix = m.group(1);  // @...          parameter = m.group(2);        }        if (parameter.equalsIgnoreCase(\"echo\")) {          // no further quoting, only ^-escape and wrap the whole \"echo ...\" into double quotes          String parametersJoin = join(ContainerUtil.subList(parameters, i), \" \");          quoteFlag.toggle();          parameter = escapeParameter(parametersJoin, quoteFlag, cmdInvocationDepth, false);          commandLine.add(parameter);  // prefix is already included          break;        }        if (!parameter.equalsIgnoreCase(\"call\")) {          isCmdParam = isWinShell(parameter);          if (isCmdParam || isWinShellScript(parameter)) {            cmdInvocationDepth++;          }        }      }      if (cmdInvocationDepth > 0 && !isCmdParam || inescapableQuoting) {        parameter = escapeParameter(parameter, quoteFlag, cmdInvocationDepth, !inescapableQuoting);      }      else {        parameter = backslashEscapeQuotes(parameter);      }      commandLine.add(parameterPrefix.isEmpty() ? parameter : parameterPrefix + parameter);    }  }","code_tokens":["private","static","void","add","to","windows","command","line","(","string","command",",","list","<","string",">","parameters",",","list","<","string",">","command","line",")","{","boolean","is","cmd","param","=","is","win","shell","(","command",")",";","int","cmd","invocation","depth","=","is","win","shell","script","(","command",")","?","2",":","is","cmd","param","?","1",":","0",";","quote","flag","quote","flag","=","new","quote","flag","(","false",")",";","for","(","int","i","=","0",";","i","<","parameters",".","size","(",")",";","i","+","+",")","{","string","parameter","=","parameters",".","get","(","i",")",";","parameter","=","unquote","string","(","parameter",",","inescapable","quote",")",";","boolean","inescapable","quoting","=","!","parameter",".","equals","(","parameters",".","get","(","i",")",")",";","if","(","parameter",".","is","empty","(",")",")","{","command","line",".","add","(","qq",")",";","continue",";","}","if","(","is","cmd","param","&","&","parameter",".","starts","with","(","\"","/","\"",")","&","&","parameter",".","length","(",")","=","=","2",")","{","command","line",".","add","(","parameter",")",";","continue",";","}","string","parameter","prefix","=","\"","\"",";","if","(","is","cmd","param",")","{","matcher","m","=","win","quiet","command",".","matcher","(","parameter",")",";","if","(","m",".","matches","(",")",")","{","parameter","prefix","=","m",".","group","(","1",")",";","/","/","@",".",".",".","parameter","=","m",".","group","(","2",")",";","}","if","(","parameter",".","equals","ignore","case","(","\"","echo","\"",")",")","{","/","/","no","further","quoting",",","only","^","-","escape","and","wrap","the","whole","\"","echo",".",".",".","\"","into","double","quotes","string","parameters","join","=","join","(","container","util",".","sub","list","(","parameters",",","i",")",",","\"","\"",")",";","quote","flag",".","toggle","(",")",";","parameter","=","escape","parameter","(","parameters","join",",","quote","flag",",","cmd","invocation","depth",",","false",")",";","command","line",".","add","(","parameter",")",";","/","/","prefix","is","already","included","break",";","}","if","(","!","parameter",".","equals","ignore","case","(","\"","call","\"",")",")","{","is","cmd","param","=","is","win","shell","(","parameter",")",";","if","(","is","cmd","param","|","|","is","win","shell","script","(","parameter",")",")","{","cmd","invocation","depth","+","+",";","}","}","}","if","(","cmd","invocation","depth",">","0","&","&","!","is","cmd","param","|","|","inescapable","quoting",")","{","parameter","=","escape","parameter","(","parameter",",","quote","flag",",","cmd","invocation","depth",",","!","inescapable","quoting",")",";","}","else","{","parameter","=","backslash","escape","quotes","(","parameter",")",";","}","command","line",".","add","(","parameter","prefix",".","is","empty","(",")","?","parameter",":","parameter","prefix","+","parameter",")",";","}","}"],"func_name":"addToWindowsCommandLine","func_name_tokens":["add","to","windows","command","line"],"docstring":"  /    Windows command line escaping rules are tricky and poorly documented, so the code below might require a bit of explanation.       Here're the rules that define our implementation, and some peculiarities to know:          On Windows, there's no ARGV concept at the OS level; all parameters are passed as a single command line          string, which is only parsed into the ARGV by CRT if needed (this is used by the most applications).             CRT parsing rules are relatively simple:              - Parameters are delimited using spaces:        [foo] [bar] [baz]  ->  [foo bar baz]           - Whitespaces are escaped using double quotes:  [foo bar] [baz]    ->  [\"foo bar\" baz]           - Double-quotes are escaped using backslashes:  [foo bar] [\"baz\"]  ->  [\"foo bar\" \\\"baz\\\"]              - Backslashes are treated literally unless they precede a double quote, otherwise they need to be             backslash-escaped as well:                    [C:\\Program Files\\] [\"backslash quote\\\"]                         -> [\"C:\\Program Files\\\\\" \"\\\"backslash quote\\\\\\\"\"]             Besides the rules above, double quotes escaping is also used to prevent CRT from glob-expanding the arguments          containing the [?] special chars.             Cygwin note:                 Additionally, we also use double quotes to escape POSIX glob special chars that otherwise are processed              by Cygwin CRT. These chars [?\\[{}~] and [()'] enable extended POSIX globbing unless the CYGWIN=noglob              variable is set, which we can't rely upon anyway because the behavior of 'noglob' doesn't conform to the              standard command line quoting rules (for example, it expands [\\\\\\\"] to [\\\\\\] instead of the expected [\\\"]).                 This is enabled unconditionally on Windows, that is, no attempt is made to detect that we indeed run under              Cygwin. Although it might be checked as well (yet in some clumsy way, for example, by looking up cygwin-1.dll              in PATH), it doesn't make much sense since such check wouldn't be a 100% reliable solution anyway              (the executable may still run without linking to Cygwin CRT, even if the latter is in PATH).                 Anyway, escaping yet another set of special chars is harmless as long as the executable uses the standard              Windows CRT parameter quoting conventions, which is almost always the case.             In case a command line is wrapped using CMD.EXE call (that is, `cmd /d /c call executable args...`, which          is quite common), additional escaping rules apply.             CMD.EXE treats few chars in a special way (piping, command chaining, etc.), these are: [&<>()@|^].          The CMD.EXE command line parser has two means of escaping these special chars: quote flag and caret-escaping.          The main rules in a nutshell are:               - A quote [\"] toggles the quote flag; while the quote flag is active, the special chars are no longer              special. Note that quotes themselves are NOT removed at this stage:  [\"<^.^>\"] => [\"<^.^>\"]              The quotes might be removed by the CRT command line parser later on when reconstructing the ARGV,              if the executable opts to.               - A char following a caret [^] has no special meaning, the caret itself is removed: [^<^^.^^^>] => [<^.^>]             These rules, in turn, have special cases that affect the implementation, see below.             [CMD] As already mentioned, the CMD special chars [&<>()@|^] are sensitive to the quote flag, which is toggled          whenever the command line parser encounters a quote, no matter whether backslash-escaped or regular one:                 [foo \"bar\" baz]                      -> [\"foo \\\"bar\\\" baz\"]               # enclosed in quotes due to whitespaces inside for CRT                                                                       # quote flag:                      [ ^^^^^      ^^^^ ]                              #   ON:   [&<>()@|^] lose special meaning                      [       ^^^^      ]                              #   OFF:  [&<>()@|^] must be ^-escaped             This gets even more confusing when dealing with caret-escaping state across multiple arguments in case some          of them have odd number of quotes:                 [C:\\Program Files\\...]  [\"]  [f o]  [b\"r]                      -> [\"C:\\Program Files\\...\"   \\\"   \"f o\"   b\\\"r]                                                                       # quote flag:                      [ ^^^^^^^^^^^^^^^^^^^^      ^^^     ^^^^^  ]     #   ON:   [&<>()@|^] lose special meaning                      [                      ^^^^     ^^^       ^]     #   OFF:  [&<>()@|^] must be ^-escaped             However, this is a totally valid case considering that arguments are passed as a single command line string          under the hood. Anyway, the point is, we need to count all the quotes in order to properly escape the special          chars. In the following sections we describe our escaping approach w.r.t. the quote flag.             [CMD] A caret [^] is always ^-escaped with the quote flag OFF:                 [^]                                       # original value                   -> [^^]                              # escaping                           -> [^]                       # execution             Why not just use a caret within quotes [\"^\"] (i.e. with the quote flag ON) here?             Because of the way CMD.EXE handles the CALL command. Due to the nature of the CALL command, CMD.EXE has          to process the ^-escaped special chars twice. In order to preserve the number of carets, which would be          halved after the second expansion otherwise, it duplicates all the carets behind the scenes beforehand:                 [^]                                       # original value                   -> [^^]                              # escaping                           -> [^^^^]                    # under the hood: CALL caret doubling                                   -> [^^]              # under the hood: CALL second expansion                                           -> [^]       # execution             Unfortunately it blindly doubles all carets, with no regard to the quote flag. But a quoted caret is not          treated as an escape, hence it's not consumed. These carets appear duplicated to a process being called:                 [^]                                       # original value                   -> [\"^\"]                             # escaping                           -> [\"^^\"]                    # under the hood: CALL caret doubling                                   -> [\"^^\"]            # under the hood: CALL second expansion                                           -> [^^]      # execution (oops...)             [CMD] The rest special chars ([&<>()@|] except the caret) are quoted instead (i.e. emitted with the quote          flag ON) instead of being ^-escaped (with the only exception of ECHO command, see below):                 [&]                                       # original value                  -> [\"&\"]                              # escaping                           -> [&]                       # execution             Why not use ^-escaping, just like for the caret itself? Again, because of the CALL caret doubling:                 [&]                                       # original value                   -> [^&]                              # escaping                           -> [^^&]                     # under the hood: CALL caret doubling                                   -> [^]               # under the hood: CALL second expansion (stray [&] may lead to errors)                                           -> []        # execution (oops...)          [CMD] [ECHO] The ECHO command doesn't use CRT for parsing the ARGV, so only the common rules for CMD parameters          apply. That is, we ^-escape all the special chars [&<>()@|^].          Useful links:      https://ss64.com/nt/syntax-esc.html  Syntax : Escape Characters, Delimiters and Quotes      https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/","docstring_tokens":["/","windows","command","line","escaping","rules","are","tricky","and","poorly","documented",",","so","the","code","below","might","require","a","bit","of","explanation",".","here","'","re","the","rules","that","define","our","implementation",",","and","some","peculiarities","to","know",":","on","windows",",","there","'","s","no","argv","concept","at","the","os","level",";","all","parameters","are","passed","as","a","single","command","line","string",",","which","is","only","parsed","into","the","argv","by","crt","if","needed","(","this","is","used","by","the","most","applications",")",".","crt","parsing","rules","are","relatively","simple",":","-","parameters","are","delimited","using","spaces",":","[","foo","]","[","bar","]","[","baz","]","-",">","[","foo","bar","baz","]","-","whitespaces","are","escaped","using","double","quotes",":","[","foo","bar","]","[","baz","]","-",">","[","\"","foo","bar","\"","baz","]","-","double","-","quotes","are","escaped","using","backslashes",":","[","foo","bar","]","[","\"","baz","\"","]","-",">","[","\"","foo","bar","\"","\\","\"","baz","\\","\"","]","-","backslashes","are","treated","literally","unless","they","precede","a","double","quote",",","otherwise","they","need","to","be","backslash","-","escaped","as","well",":","[","c",":","\\","program","files","\\","]","[","\"","backslash","quote","\\","\"","]","-",">","[","\"","c",":","\\","program","files","\\","\\","\"","\"","\\","\"","backslash","quote","\\","\\","\\","\"","\"","]","besides","the","rules","above",",","double","quotes","escaping","is","also","used","to","prevent","crt","from","glob","-","expanding","the","arguments","containing","the","[","?","]","special","chars",".","cygwin","note",":","additionally",",","we","also","use","double","quotes","to","escape","posix","glob","special","chars","that","otherwise","are","processed","by","cygwin","crt",".","these","chars","[","?","\\","[","{","}","~","]","and","[","(",")","'","]","enable","extended","posix","globbing","unless","the","cygwin","=","noglob","variable","is","set",",","which","we","can","'","t","rely","upon","anyway","because","the","behavior","of","'","noglob","'","doesn","'","t","conform","to","the","standard","command","line","quoting","rules","(","for","example",",","it","expands","[","\\","\\","\\","\"","]","to","[","\\","\\","\\","]","instead","of","the","expected","[","\\","\"","]",")",".","this","is","enabled","unconditionally","on","windows",",","that","is",",","no","attempt","is","made","to","detect","that","we","indeed","run","under","cygwin",".","although","it","might","be","checked","as","well","(","yet","in","some","clumsy","way",",","for","example",",","by","looking","up","cygwin","-","1",".","dll","in","path",")",",","it","doesn","'","t","make","much","sense","since","such","check","wouldn","'","t","be","a","100","%","reliable","solution","anyway","(","the","executable","may","still","run","without","linking","to","cygwin","crt",",","even","if","the","latter","is","in","path",")",".","anyway",",","escaping","yet","another","set","of","special","chars","is","harmless","as","long","as","the","executable","uses","the","standard","windows","crt","parameter","quoting","conventions",",","which","is","almost","always","the","case",".","in","case","a","command","line","is","wrapped","using","cmd",".","exe","call","(","that","is",",","`","cmd","/","d","/","c","call","executable","args",".",".",".","`",",","which","is","quite","common",")",",","additional","escaping","rules","apply",".","cmd",".","exe","treats","few","chars","in","a","special","way","(","piping",",","command","chaining",",","etc",".",")",",","these","are",":","[","&","<",">","(",")","@","|","^","]",".","the","cmd",".","exe","command","line","parser","has","two","means","of","escaping","these","special","chars",":","quote","flag","and","caret","-","escaping",".","the","main","rules","in","a","nutshell","are",":","-","a","quote","[","\"","]","toggles","the","quote","flag",";","while","the","quote","flag","is","active",",","the","special","chars","are","no","longer","special",".","note","that","quotes","themselves","are","not","removed","at","this","stage",":","[","\"","<","^",".","^",">","\"","]","=",">","[","\"","<","^",".","^",">","\"","]","the","quotes","might","be","removed","by","the","crt","command","line","parser","later","on","when","reconstructing","the","argv",",","if","the","executable","opts","to",".","-","a","char","following","a","caret","[","^","]","has","no","special","meaning",",","the","caret","itself","is","removed",":","[","^","<","^","^",".","^","^","^",">","]","=",">","[","<","^",".","^",">","]","these","rules",",","in","turn",",","have","special","cases","that","affect","the","implementation",",","see","below",".","[","cmd","]","as","already","mentioned",",","the","cmd","special","chars","[","&","<",">","(",")","@","|","^","]","are","sensitive","to","the","quote","flag",",","which","is","toggled","whenever","the","command","line","parser","encounters","a","quote",",","no","matter","whether","backslash","-","escaped","or","regular","one",":","[","foo","\"","bar","\"","baz","]","-",">","[","\"","foo","\\","\"","bar","\\","\"","baz","\"","]","#","enclosed","in","quotes","due","to","whitespaces","inside","for","crt","#","quote","flag",":","[","^","^","^","^","^","^","^","^","^","]","#","on",":","[","&","<",">","(",")","@","|","^","]","lose","special","meaning","[","^","^","^","^","]","#","off",":","[","&","<",">","(",")","@","|","^","]","must","be","^","-","escaped","this","gets","even","more","confusing","when","dealing","with","caret","-","escaping","state","across","multiple","arguments","in","case","some","of","them","have","odd","number","of","quotes",":","[","c",":","\\","program","files","\\",".",".",".","]","[","\"","]","[","f","o","]","[","b","\"","r","]","-",">","[","\"","c",":","\\","program","files","\\",".",".",".","\"","\\","\"","\"","f","o","\"","b","\\","\"","r","]","#","quote","flag",":","[","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","^","]","#","on",":","[","&","<",">","(",")","@","|","^","]","lose","special","meaning","[","^","^","^","^","^","^","^","^","]","#","off",":","[","&","<",">","(",")","@","|","^","]","must","be","^","-","escaped","however",",","this","is","a","totally","valid","case","considering","that","arguments","are","passed","as","a","single","command","line","string","under","the","hood",".","anyway",",","the","point","is",",","we","need","to","count","all","the","quotes","in","order","to","properly","escape","the","special","chars",".","in","the","following","sections","we","describe","our","escaping","approach","w",".","r",".","t",".","the","quote","flag",".","[","cmd","]","a","caret","[","^","]","is","always","^","-","escaped","with","the","quote","flag","off",":","[","^","]","#","original","value","-",">","[","^","^","]","#","escaping","-",">","[","^","]","#","execution","why","not","just","use","a","caret","within","quotes","[","\"","^","\"","]","(","i",".","e",".","with","the","quote","flag","on",")","here","?","because","of","the","way","cmd",".","exe","handles","the","call","command",".","due","to","the","nature","of","the","call","command",",","cmd",".","exe","has","to","process","the","^","-","escaped","special","chars","twice",".","in","order","to","preserve","the","number","of","carets",",","which","would","be","halved","after","the","second","expansion","otherwise",",","it","duplicates","all","the","carets","behind","the","scenes","beforehand",":","[","^","]","#","original","value","-",">","[","^","^","]","#","escaping","-",">","[","^","^","^","^","]","#","under","the","hood",":","call","caret","doubling","-",">","[","^","^","]","#","under","the","hood",":","call","second","expansion","-",">","[","^","]","#","execution","unfortunately","it","blindly","doubles","all","carets",",","with","no","regard","to","the","quote","flag",".","but","a","quoted","caret","is","not","treated","as","an","escape",",","hence","it","'","s","not","consumed",".","these","carets","appear","duplicated","to","a","process","being","called",":","[","^","]","#","original","value","-",">","[","\"","^","\"","]","#","escaping","-",">","[","\"","^","^","\"","]","#","under","the","hood",":","call","caret","doubling","-",">","[","\"","^","^","\"","]","#","under","the","hood",":","call","second","expansion","-",">","[","^","^","]","#","execution","(","oops",".",".",".",")","[","cmd","]","the","rest","special","chars","(","[","&","<",">","(",")","@","|","]","except","the","caret",")","are","quoted","instead","(","i",".","e",".","emitted","with","the","quote","flag","on",")","instead","of","being","^","-","escaped","(","with","the","only","exception","of","echo","command",",","see","below",")",":","[","&","]","#","original","value","-",">","[","\"","&","\"","]","#","escaping","-",">","[","&","]","#","execution","why","not","use","^","-","escaping",",","just","like","for","the","caret","itself","?","again",",","because","of","the","call","caret","doubling",":","[","&","]","#","original","value","-",">","[","^","&","]","#","escaping","-",">","[","^","^","&","]","#","under","the","hood",":","call","caret","doubling","-",">","[","^","]","#","under","the","hood",":","call","second","expansion","(","stray","[","&","]","may","lead","to","errors",")","-",">","[","]","#","execution","(","oops",".",".",".",")","[","cmd","]","[","echo","]","the","echo","command","doesn","'","t","use","crt","for","parsing","the","argv",",","so","only","the","common","rules","for","cmd","parameters","apply",".","that","is",",","we","^","-","escape","all","the","special","chars","[","&","<",">","(",")","@","|","^","]",".","useful","links",":","syntax",":","escape","characters",",","delimiters","and","quotes"],"query":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","query_tokens":["how","does","the","windows","command","interpreter","(","cmd",".","exe",")","parse","scripts","?"]}
{"query_id":"434718","repo_name":"NPWR/CoreNLP","zip_link":"/elliots-bits/CoreNLP/archive/master.zip","code":"  public static boolean available(int port) {    ServerSocket ss = null;    DatagramSocket ds = null;    try {      ss = new ServerSocket(port);      ss.setReuseAddress(true);      ds = new DatagramSocket(port);      ds.setReuseAddress(true);      return true;    } catch (IOException e) {    } finally {      if (ds != null) {        ds.close();      }            if (ss != null) {        try {          ss.close();        } catch (IOException e) {          // should not be thrown        }      }    }        return false;  }","code_tokens":["public","static","boolean","available","(","int","port",")","{","server","socket","ss","=","null",";","datagram","socket","ds","=","null",";","try","{","ss","=","new","server","socket","(","port",")",";","ss",".","set","reuse","address","(","true",")",";","ds","=","new","datagram","socket","(","port",")",";","ds",".","set","reuse","address","(","true",")",";","return","true",";","}","catch","(","io","exception","e",")","{","}","finally","{","if","(","ds","!","=","null",")","{","ds",".","close","(",")",";","}","if","(","ss","!","=","null",")","{","try","{","ss",".","close","(",")",";","}","catch","(","io","exception","e",")","{","/","/","should","not","be","thrown","}","}","}","return","false",";","}"],"func_name":"available","func_name_tokens":["available"],"docstring":"      Checks to see if a specific port is available.    <br>    Source: Apache's mina project, via stack overflow       sockets-discover-port-availability-using-java       @param port the port to check for availability","docstring_tokens":["checks","to","see","if","a","specific","port","is","available",".","<","br",">","source",":","apache","'","s","mina","project",",","via","stack","overflow","sockets","-","discover","-","port","-","availability","-","using","-","java"],"query":"Sockets: Discover port availability using Java","query_tokens":["sockets",":","discover","port","availability","using","java"]}
{"query_id":"24511052","repo_name":"ffays/eu.fays.sandbox","zip_link":"/ffays/eu.fays.sandbox/archive/master.zip","code":"\tpublic static <T> Stream<T> iteratorToStream1(final Iterator<T> iterator) {\t\treturn StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false);\t}","code_tokens":["public","static","<","t",">","stream","<","t",">","iterator","to","stream1","(","final","iterator","<","t",">","iterator",")","{","return","stream","support",".","stream","(","spliterators",".","spliterator","unknown","size","(","iterator",",","spliterator",".","ordered",")",",","false",")",";","}"],"func_name":"iteratorToStream1","func_name_tokens":["iterator","to","stream1"],"docstring":"\t\t  Converts the given iterator into a stream<br>\t  <br>\t  @param iterator the given iterator\t  @param <T> the type of both the given iterator and the resulting stream\t  @return the stream","docstring_tokens":["converts","the","given","iterator","into","a","stream","<","br",">","<","br",">"],"query":"How to convert an iterator to a stream?","query_tokens":["how","to","convert","an","iterator","to","a","stream","?"]}
{"query_id":"18249007","repo_name":"xSooDx/open-keychain","zip_link":"/xSooDx/open-keychain/archive/master.zip","code":"public class TemporaryStorageProvider extends ContentProvider {    private static final String DB_NAME = \"tempstorage.db\";    private static final String TABLE_FILES = \"files\";    private static final String COLUMN_ID = \"id\";    private static final String COLUMN_NAME = \"name\";    private static final String COLUMN_TIME = \"time\";    private static final String COLUMN_TYPE = \"mimetype\";    public static final String CONTENT_AUTHORITY = Constants.TEMPSTORAGE_AUTHORITY;    private static final Uri BASE_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);    private static final int DB_VERSION = 3;    private static File cacheDir;    public static Uri createFile(Context context, String targetName, String mimeType) {        ContentValues contentValues = new ContentValues();        contentValues.put(COLUMN_NAME, targetName);        contentValues.put(COLUMN_TYPE, mimeType);        return context.getContentResolver().insert(BASE_URI, contentValues);    }    public static Uri createFile(Context context, String targetName) {        ContentValues contentValues = new ContentValues();        contentValues.put(COLUMN_NAME, targetName);        return context.getContentResolver().insert(BASE_URI, contentValues);    }    public static Uri createFile(Context context) {        ContentValues contentValues = new ContentValues();        return context.getContentResolver().insert(BASE_URI, contentValues);    }    public static int setMimeType(Context context, Uri uri, String mimetype) {        ContentValues values = new ContentValues();        values.put(COLUMN_TYPE, mimetype);        return context.getContentResolver().update(uri, values, null, null);    }    public static int cleanUp(Context context) {        return context.getContentResolver().delete(BASE_URI, COLUMN_TIME + \"< ?\",                new String[]{Long.toString(System.currentTimeMillis() - Constants.TEMPFILE_TTL)});    }    private class TemporaryStorageDatabase extends SQLiteOpenHelper {        public TemporaryStorageDatabase(Context context) {            super(context, DB_NAME, null, DB_VERSION);        }        @Override        public void onCreate(SQLiteDatabase db) {            db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + TABLE_FILES + \" (\" +                    COLUMN_ID + \" TEXT PRIMARY KEY, \" +                    COLUMN_NAME + \" TEXT, \" +                    COLUMN_TYPE + \" TEXT, \" +                    COLUMN_TIME + \" INTEGER\" +                    \");\");        }        @Override        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {            Log.d(Constants.TAG, \"Upgrading files db from \" + oldVersion + \" to \" + newVersion);            switch (oldVersion) {                case 1:                    db.execSQL(\"DROP TABLE IF EXISTS files\");                    db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + TABLE_FILES + \" (\" +                            COLUMN_ID + \" TEXT PRIMARY KEY, \" +                            COLUMN_NAME + \" TEXT, \" +                            COLUMN_TIME + \" INTEGER\" +                            \");\");                case 2:                    db.execSQL(\"ALTER TABLE files ADD COLUMN \" + COLUMN_TYPE + \" TEXT\");            }        }    }    private static TemporaryStorageDatabase db;    private File getFile(Uri uri) throws FileNotFoundException {        try {            return getFile(uri.getLastPathSegment());        } catch (NumberFormatException e) {            throw new FileNotFoundException();        }    }    private File getFile(String id) {        return new File(cacheDir, \"temp/\" + id);    }    @Override    public boolean onCreate() {        db = new TemporaryStorageDatabase(getContext());        cacheDir = getContext().getCacheDir();        return new File(cacheDir, \"temp\").mkdirs();    }    @Override    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {        if (uri.getLastPathSegment() == null) {            throw new SecurityException(\"Listing temporary files is not allowed, only querying single files.\");        }        File file;        try {            file = getFile(uri);        } catch (FileNotFoundException e) {            return null;        }        Cursor fileName = db.getReadableDatabase().query(TABLE_FILES, new String[]{COLUMN_NAME}, COLUMN_ID + \"=?\",                new String[]{uri.getLastPathSegment()}, null, null, null);        if (fileName != null) {            if (fileName.moveToNext()) {                MatrixCursor cursor = new MatrixCursor(new String[]{                        OpenableColumns.DISPLAY_NAME,                        OpenableColumns.SIZE,                        \"_data\"                });                cursor.newRow()                        .add(fileName.getString(0))                        .add(file.length())                        .add(file.getAbsolutePath());                fileName.close();                return cursor;            }            fileName.close();        }        return null;    }    @Override    public String getType(Uri uri) {        Cursor cursor = db.getReadableDatabase().query(TABLE_FILES,                new String[]{COLUMN_TYPE}, COLUMN_ID + \"=?\",                new String[]{uri.getLastPathSegment()}, null, null, null);        if (cursor != null) {            try {                if (cursor.moveToNext()) {                    if (!cursor.isNull(0)) {                        return cursor.getString(0);                    }                }            } finally {                cursor.close();            }        }        return \"application/octet-stream\";    }    @Override    public String[] getStreamTypes(Uri uri, String mimeTypeFilter) {        String type = getType(uri);        if (ClipDescription.compareMimeTypes(type, mimeTypeFilter)) {            return new String[]{type};        }        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        if (!values.containsKey(COLUMN_TIME)) {            values.put(COLUMN_TIME, System.currentTimeMillis());        }        String uuid = UUID.randomUUID().toString();        values.put(COLUMN_ID, uuid);        int insert = (int) db.getWritableDatabase().insert(TABLE_FILES, null, values);        if (insert == -1) {            Log.e(Constants.TAG, \"Insert failed!\");            return null;        }        try {            getFile(uuid).createNewFile();        } catch (IOException e) {            Log.e(Constants.TAG, \"File creation failed!\");            return null;        }        return Uri.withAppendedPath(BASE_URI, uuid);    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        if (uri == null || uri.getLastPathSegment() == null) {            return 0;        }        selection = DatabaseUtil.concatenateWhere(selection, COLUMN_ID + \"=?\");        selectionArgs = DatabaseUtil.appendSelectionArgs(selectionArgs, new String[]{uri.getLastPathSegment()});        Cursor files = db.getReadableDatabase().query(TABLE_FILES, new String[]{COLUMN_ID}, selection,                selectionArgs, null, null, null);        if (files != null) {            while (files.moveToNext()) {                getFile(files.getString(0)).delete();            }            files.close();            return db.getWritableDatabase().delete(TABLE_FILES, selection, selectionArgs);        }        return 0;    }    @Override    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {        if (values.size() != 1 || !values.containsKey(COLUMN_TYPE)) {            throw new UnsupportedOperationException(\"Update supported only for type field!\");        }        if (selection != null || selectionArgs != null) {            throw new UnsupportedOperationException(\"Update supported only for plain uri!\");        }        return db.getWritableDatabase().update(TABLE_FILES, values,                COLUMN_ID + \" = ?\", new String[]{uri.getLastPathSegment()});    }    @Override    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {        return openFileHelper(uri, mode);    }}","code_tokens":["public","class","temporary","storage","provider","extends","content","provider","{","private","static","final","string","db","name","=","\"","tempstorage",".","db","\"",";","private","static","final","string","table","files","=","\"","files","\"",";","private","static","final","string","column","id","=","\"","id","\"",";","private","static","final","string","column","name","=","\"","name","\"",";","private","static","final","string","column","time","=","\"","time","\"",";","private","static","final","string","column","type","=","\"","mimetype","\"",";","public","static","final","string","content","authority","=","constants",".","tempstorage","authority",";","private","static","final","uri","base","uri","=","uri",".","parse","(","\"","content",":","/","/","\"","+","content","authority",")",";","private","static","final","int","db","version","=","3",";","private","static","file","cache","dir",";","public","static","uri","create","file","(","context","context",",","string","target","name",",","string","mime","type",")","{","content","values","content","values","=","new","content","values","(",")",";","content","values",".","put","(","column","name",",","target","name",")",";","content","values",".","put","(","column","type",",","mime","type",")",";","return","context",".","get","content","resolver","(",")",".","insert","(","base","uri",",","content","values",")",";","}","public","static","uri","create","file","(","context","context",",","string","target","name",")","{","content","values","content","values","=","new","content","values","(",")",";","content","values",".","put","(","column","name",",","target","name",")",";","return","context",".","get","content","resolver","(",")",".","insert","(","base","uri",",","content","values",")",";","}","public","static","uri","create","file","(","context","context",")","{","content","values","content","values","=","new","content","values","(",")",";","return","context",".","get","content","resolver","(",")",".","insert","(","base","uri",",","content","values",")",";","}","public","static","int","set","mime","type","(","context","context",",","uri","uri",",","string","mimetype",")","{","content","values","values","=","new","content","values","(",")",";","values",".","put","(","column","type",",","mimetype",")",";","return","context",".","get","content","resolver","(",")",".","update","(","uri",",","values",",","null",",","null",")",";","}","public","static","int","clean","up","(","context","context",")","{","return","context",".","get","content","resolver","(",")",".","delete","(","base","uri",",","column","time","+","\"","<","?","\"",",","new","string","[","]","{","long",".","to","string","(","system",".","current","time","millis","(",")","-","constants",".","tempfile","ttl",")","}",")",";","}","private","class","temporary","storage","database","extends","sq","lite","open","helper","{","public","temporary","storage","database","(","context","context",")","{","super","(","context",",","db","name",",","null",",","db","version",")",";","}","@","override","public","void","on","create","(","sq","lite","database","db",")","{","db",".","exec","sql","(","\"","create","table","if","not","exists","\"","+","table","files","+","\"","(","\"","+","column","id","+","\"","text","primary","key",",","\"","+","column","name","+","\"","text",",","\"","+","column","type","+","\"","text",",","\"","+","column","time","+","\"","integer","\"","+","\"",")",";","\"",")",";","}","@","override","public","void","on","upgrade","(","sq","lite","database","db",",","int","old","version",",","int","new","version",")","{","log",".","d","(","constants",".","tag",",","\"","upgrading","files","db","from","\"","+","old","version","+","\"","to","\"","+","new","version",")",";","switch","(","old","version",")","{","case","1",":","db",".","exec","sql","(","\"","drop","table","if","exists","files","\"",")",";","db",".","exec","sql","(","\"","create","table","if","not","exists","\"","+","table","files","+","\"","(","\"","+","column","id","+","\"","text","primary","key",",","\"","+","column","name","+","\"","text",",","\"","+","column","time","+","\"","integer","\"","+","\"",")",";","\"",")",";","case","2",":","db",".","exec","sql","(","\"","alter","table","files","add","column","\"","+","column","type","+","\"","text","\"",")",";","}","}","}","private","static","temporary","storage","database","db",";","private","file","get","file","(","uri","uri",")","throws","file","not","found","exception","{","try","{","return","get","file","(","uri",".","get","last","path","segment","(",")",")",";","}","catch","(","number","format","exception","e",")","{","throw","new","file","not","found","exception","(",")",";","}","}","private","file","get","file","(","string","id",")","{","return","new","file","(","cache","dir",",","\"","temp","/","\"","+","id",")",";","}","@","override","public","boolean","on","create","(",")","{","db","=","new","temporary","storage","database","(","get","context","(",")",")",";","cache","dir","=","get","context","(",")",".","get","cache","dir","(",")",";","return","new","file","(","cache","dir",",","\"","temp","\"",")",".","mkdirs","(",")",";","}","@","override","public","cursor","query","(","uri","uri",",","string","[","]","projection",",","string","selection",",","string","[","]","selection","args",",","string","sort","order",")","{","if","(","uri",".","get","last","path","segment","(",")","=","=","null",")","{","throw","new","security","exception","(","\"","listing","temporary","files","is","not","allowed",",","only","querying","single","files",".","\"",")",";","}","file","file",";","try","{","file","=","get","file","(","uri",")",";","}","catch","(","file","not","found","exception","e",")","{","return","null",";","}","cursor","file","name","=","db",".","get","readable","database","(",")",".","query","(","table","files",",","new","string","[","]","{","column","name","}",",","column","id","+","\"","=","?","\"",",","new","string","[","]","{","uri",".","get","last","path","segment","(",")","}",",","null",",","null",",","null",")",";","if","(","file","name","!","=","null",")","{","if","(","file","name",".","move","to","next","(",")",")","{","matrix","cursor","cursor","=","new","matrix","cursor","(","new","string","[","]","{","openable","columns",".","display","name",",","openable","columns",".","size",",","\"","data","\"","}",")",";","cursor",".","new","row","(",")",".","add","(","file","name",".","get","string","(","0",")",")",".","add","(","file",".","length","(",")",")",".","add","(","file",".","get","absolute","path","(",")",")",";","file","name",".","close","(",")",";","return","cursor",";","}","file","name",".","close","(",")",";","}","return","null",";","}","@","override","public","string","get","type","(","uri","uri",")","{","cursor","cursor","=","db",".","get","readable","database","(",")",".","query","(","table","files",",","new","string","[","]","{","column","type","}",",","column","id","+","\"","=","?","\"",",","new","string","[","]","{","uri",".","get","last","path","segment","(",")","}",",","null",",","null",",","null",")",";","if","(","cursor","!","=","null",")","{","try","{","if","(","cursor",".","move","to","next","(",")",")","{","if","(","!","cursor",".","is","null","(","0",")",")","{","return","cursor",".","get","string","(","0",")",";","}","}","}","finally","{","cursor",".","close","(",")",";","}","}","return","\"","application","/","octet","-","stream","\"",";","}","@","override","public","string","[","]","get","stream","types","(","uri","uri",",","string","mime","type","filter",")","{","string","type","=","get","type","(","uri",")",";","if","(","clip","description",".","compare","mime","types","(","type",",","mime","type","filter",")",")","{","return","new","string","[","]","{","type","}",";","}","return","null",";","}","@","override","public","uri","insert","(","uri","uri",",","content","values","values",")","{","if","(","!","values",".","contains","key","(","column","time",")",")","{","values",".","put","(","column","time",",","system",".","current","time","millis","(",")",")",";","}","string","uuid","=","uuid",".","random","uuid","(",")",".","to","string","(",")",";","values",".","put","(","column","id",",","uuid",")",";","int","insert","=","(","int",")","db",".","get","writable","database","(",")",".","insert","(","table","files",",","null",",","values",")",";","if","(","insert","=","=","-","1",")","{","log",".","e","(","constants",".","tag",",","\"","insert","failed","!","\"",")",";","return","null",";","}","try","{","get","file","(","uuid",")",".","create","new","file","(",")",";","}","catch","(","io","exception","e",")","{","log",".","e","(","constants",".","tag",",","\"","file","creation","failed","!","\"",")",";","return","null",";","}","return","uri",".","with","appended","path","(","base","uri",",","uuid",")",";","}","@","override","public","int","delete","(","uri","uri",",","string","selection",",","string","[","]","selection","args",")","{","if","(","uri","=","=","null","|","|","uri",".","get","last","path","segment","(",")","=","=","null",")","{","return","0",";","}","selection","=","database","util",".","concatenate","where","(","selection",",","column","id","+","\"","=","?","\"",")",";","selection","args","=","database","util",".","append","selection","args","(","selection","args",",","new","string","[","]","{","uri",".","get","last","path","segment","(",")","}",")",";","cursor","files","=","db",".","get","readable","database","(",")",".","query","(","table","files",",","new","string","[","]","{","column","id","}",",","selection",",","selection","args",",","null",",","null",",","null",")",";","if","(","files","!","=","null",")","{","while","(","files",".","move","to","next","(",")",")","{","get","file","(","files",".","get","string","(","0",")",")",".","delete","(",")",";","}","files",".","close","(",")",";","return","db",".","get","writable","database","(",")",".","delete","(","table","files",",","selection",",","selection","args",")",";","}","return","0",";","}","@","override","public","int","update","(","uri","uri",",","content","values","values",",","string","selection",",","string","[","]","selection","args",")","{","if","(","values",".","size","(",")","!","=","1","|","|","!","values",".","contains","key","(","column","type",")",")","{","throw","new","unsupported","operation","exception","(","\"","update","supported","only","for","type","field","!","\"",")",";","}","if","(","selection","!","=","null","|","|","selection","args","!","=","null",")","{","throw","new","unsupported","operation","exception","(","\"","update","supported","only","for","plain","uri","!","\"",")",";","}","return","db",".","get","writable","database","(",")",".","update","(","table","files",",","values",",","column","id","+","\"","=","?","\"",",","new","string","[","]","{","uri",".","get","last","path","segment","(",")","}",")",";","}","@","override","public","parcel","file","descriptor","open","file","(","uri","uri",",","string","mode",")","throws","file","not","found","exception","{","return","open","file","helper","(","uri",",","mode",")",";","}","}"],"func_name":"TemporaryStorageProvider","func_name_tokens":["temporary","storage","provider"],"docstring":"  TemporaryStorageProvider stores decrypted files inside the app's cache directory previously to  sharing them with other applications.   Security:  - It is writable by OpenKeychain only (see Manifest), but exported for reading files  - It uses UUIDs as identifiers which makes predicting files from outside impossible  - Querying a number of files is not allowed, only querying single files  -> You can only open a file if you know the Uri containing the precise UUID, this Uri is only  revealed when the user shares a decrypted file with another app.   Why is support lib's FileProvider not used?  Because granting Uri permissions temporarily does not work correctly. See  - https://code.google.com/p/android/issues/detail?id=76683  - https://github.com/nmr8acme/FileProvider-permission-bug  - http://stackoverflow.com/q/24467696  - Comments at http://www.blogc.at/2014/03/23/share-private-files-with-other-apps-fileprovider/","docstring_tokens":["temporary","storage","provider","stores","decrypted","files","inside","the","app","'","s","cache","directory","previously","to","sharing","them","with","other","applications",".","security",":","-","it","is","writable","by","open","keychain","only","(","see","manifest",")",",","but","exported","for","reading","files","-","it","uses","uui","ds","as","identifiers","which","makes","predicting","files","from","outside","impossible","-","querying","a","number","of","files","is","not","allowed",",","only","querying","single","files","-",">","you","can","only","open","a","file","if","you","know","the","uri","containing","the","precise","uuid",",","this","uri","is","only","revealed","when","the","user","shares","a","decrypted","file","with","another","app",".","why","is","support","lib","'","s","file","provider","not","used","?","because","granting","uri","permissions","temporarily","does","not","work","correctly",".","see","-","-","-","-","comments","at"],"query":"How to use support FileProvider for sharing content to other apps?","query_tokens":["how","to","use","support","file","provider","for","sharing","content","to","other","apps","?"]}
{"query_id":"3729157","repo_name":"JessicaDias/JabRef_ES2","zip_link":"/JessicaDias/JabRef_ES2/archive/master.zip","code":"    private final JFileChooser fileChooser = new JFileChooser() {        @Override        public void approveSelection() {            File file = getSelectedFile();            if (file.exists() && (getDialogType() == SAVE_DIALOG)) {                int result = JOptionPane.showConfirmDialog(this,                        Localization.lang(\"'%0' exists. Overwrite file?\", file.getName()),                        Localization.lang(\"Existing file\"), JOptionPane.YES_NO_CANCEL_OPTION);                switch (result) {                case JOptionPane.YES_OPTION:                    super.approveSelection();                    return;                case JOptionPane.NO_OPTION:                    return;                case JOptionPane.CLOSED_OPTION:                    return;                case JOptionPane.CANCEL_OPTION:                    cancelSelection();                    return;                default:                    return;                }            }            super.approveSelection();        }    };","code_tokens":["private","final","j","file","chooser","file","chooser","=","new","j","file","chooser","(",")","{","@","override","public","void","approve","selection","(",")","{","file","file","=","get","selected","file","(",")",";","if","(","file",".","exists","(",")","&","&","(","get","dialog","type","(",")","=","=","save","dialog",")",")","{","int","result","=","j","option","pane",".","show","confirm","dialog","(","this",",","localization",".","lang","(","\"","'","%","0","'","exists",".","overwrite","file","?","\"",",","file",".","get","name","(",")",")",",","localization",".","lang","(","\"","existing","file","\"",")",",","j","option","pane",".","yes","no","cancel","option",")",";","switch","(","result",")","{","case","j","option","pane",".","yes","option",":","super",".","approve","selection","(",")",";","return",";","case","j","option","pane",".","no","option",":","return",";","case","j","option","pane",".","closed","option",":","return",";","case","j","option","pane",".","cancel","option",":","cancel","selection","(",")",";","return",";","default",":","return",";","}","}","super",".","approve","selection","(",")",";","}","}",";"],"func_name":"JFileChooser","func_name_tokens":["j","file","chooser"],"docstring":"          Custom confirmation dialog","docstring_tokens":["custom","confirmation","dialog"],"query":"JFileChooser with confirmation dialog","query_tokens":["j","file","chooser","with","confirmation","dialog"]}
{"query_id":"9690686","repo_name":"SirDap/itranslator99-to-unicode-epub-converter","zip_link":"/NaanProphet/itranslator99-to-unicode-epub-converter/archive/master.zip","code":"public class TextEditor extends JFrame {    private static final Logger LOGGER = LoggerFactory.getLogger(TextEditor.class);    private static final String SUBMIT_BUTTON_TEXT = \"Submit\";    private static final String DEFAULT_TEXT_AREA_TEXT = \"\";    private static final int DEFAULT_WINDOW_HEIGHT = 30;    private static final int DEFAULT_WINDOW_WIDTH = 70;    private static final Optional<CountDownLatch> NO_OUTSIDE_LISTENER = Optional.<CountDownLatch>empty();    private final String textFrameText;    private JTextArea textArea;    /**     * Stateful variable to hold result of text window result     * FIXME static hack because text is dissapearing     */    private volatile String submittedText;    public TextEditor() {        this.textFrameText = DEFAULT_TEXT_AREA_TEXT;        init(NO_OUTSIDE_LISTENER);    }    public TextEditor(final String windowTitle, final String textFrameText, final CountDownLatch outsideListener) {        super(windowTitle);        this.textFrameText = textFrameText;        init(Optional.of(outsideListener));    }    private void init(final Optional<CountDownLatch> optionalOutsideListener) {        textArea = new JTextArea(textFrameText, DEFAULT_WINDOW_HEIGHT, DEFAULT_WINDOW_WIDTH);        // save frame reference for anonymous class access        final Frame frame = this;        add(new JScrollPane(textArea));        add(new JPanel() {{            final JButton button = new JButton(new AbstractAction(SUBMIT_BUTTON_TEXT) {                @Override                public void actionPerformed(ActionEvent arg0) {                    LOGGER.info(\"User pressed [{}] button\", SUBMIT_BUTTON_TEXT);                    submittedText = saveInput();                    // close the window                    frame.dispose();                    optionalOutsideListener.ifPresent(l -> l.countDown());                }            });            add(button);        }}, BorderLayout.SOUTH);        add(new JPanel() {{            final JButton button = new JButton(new AbstractAction(\"Cancel\") {                @Override                public void actionPerformed(ActionEvent arg0) {                    LOGGER.info(\"User pressed [{}] button\", \"Cancel\");                    // do not save output and close the window                    frame.dispose();                    optionalOutsideListener.ifPresent(l -> l.countDown());                }            });            add(button);        }}, BorderLayout.NORTH);    }    /**     * @return the resulting text submitted by the user     * @throws java.lang.IllegalArgumentException if cannot read the text     */    private String saveInput() {        try (final Writer outFile = new StringWriter()) {            textArea.write(outFile);            outFile.flush();            final String submittedText = outFile.toString();            LOGGER.debug(\"Submitted text from JTextArea is [{}]\", submittedText);            return submittedText;        } catch (IOException e) {            throw new IllegalArgumentException(\"Could not capture input of sumbitted textArea!\", e);        }    }    /**     * Create the GUI and show it.  For thread safety, this method should be invoked from the event dispatch thread.     */    private static void createAndShowGui(final TextEditor frame) {        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.pack();        frame.setLocationByPlatform(true);        frame.setVisible(true);        frame.toFront();    }    public static void main(String[] args) {        askUserToEditText(new TextEditor());    }    public static void askUserToEditText(final TextEditor textEditor) {        //Schedule a job for the event dispatch thread:        //creating and showing this application's GUI.        SwingUtilities.invokeLater(new Runnable() {            public void run() {                createAndShowGui(textEditor);            }        });    }    /**     * @return the text submitted from the window screen, <code>null</code> if text has not been submitted yet or user     * pressed cancel     */    public String getSubmittedText() {        return submittedText;    }}","code_tokens":["public","class","text","editor","extends","j","frame","{","private","static","final","logger","logger","=","logger","factory",".","get","logger","(","text","editor",".","class",")",";","private","static","final","string","submit","button","text","=","\"","submit","\"",";","private","static","final","string","default","text","area","text","=","\"","\"",";","private","static","final","int","default","window","height","=","30",";","private","static","final","int","default","window","width","=","70",";","private","static","final","optional","<","count","down","latch",">","no","outside","listener","=","optional",".","<","count","down","latch",">","empty","(",")",";","private","final","string","text","frame","text",";","private","j","text","area","text","area",";","private","volatile","string","submitted","text",";","public","text","editor","(",")","{","this",".","text","frame","text","=","default","text","area","text",";","init","(","no","outside","listener",")",";","}","public","text","editor","(","final","string","window","title",",","final","string","text","frame","text",",","final","count","down","latch","outside","listener",")","{","super","(","window","title",")",";","this",".","text","frame","text","=","text","frame","text",";","init","(","optional",".","of","(","outside","listener",")",")",";","}","private","void","init","(","final","optional","<","count","down","latch",">","optional","outside","listener",")","{","text","area","=","new","j","text","area","(","text","frame","text",",","default","window","height",",","default","window","width",")",";","/","/","save","frame","reference","for","anonymous","class","access","final","frame","frame","=","this",";","add","(","new","j","scroll","pane","(","text","area",")",")",";","add","(","new","j","panel","(",")","{","{","final","j","button","button","=","new","j","button","(","new","abstract","action","(","submit","button","text",")","{","@","override","public","void","action","performed","(","action","event","arg0",")","{","logger",".","info","(","\"","user","pressed","[","{","}","]","button","\"",",","submit","button","text",")",";","submitted","text","=","save","input","(",")",";","/","/","close","the","window","frame",".","dispose","(",")",";","optional","outside","listener",".","if","present","(","l","-",">","l",".","count","down","(",")",")",";","}","}",")",";","add","(","button",")",";","}","}",",","border","layout",".","south",")",";","add","(","new","j","panel","(",")","{","{","final","j","button","button","=","new","j","button","(","new","abstract","action","(","\"","cancel","\"",")","{","@","override","public","void","action","performed","(","action","event","arg0",")","{","logger",".","info","(","\"","user","pressed","[","{","}","]","button","\"",",","\"","cancel","\"",")",";","/","/","do","not","save","output","and","close","the","window","frame",".","dispose","(",")",";","optional","outside","listener",".","if","present","(","l","-",">","l",".","count","down","(",")",")",";","}","}",")",";","add","(","button",")",";","}","}",",","border","layout",".","north",")",";","}","private","string","save","input","(",")","{","try","(","final","writer","out","file","=","new","string","writer","(",")",")","{","text","area",".","write","(","out","file",")",";","out","file",".","flush","(",")",";","final","string","submitted","text","=","out","file",".","to","string","(",")",";","logger",".","debug","(","\"","submitted","text","from","j","text","area","is","[","{","}","]","\"",",","submitted","text",")",";","return","submitted","text",";","}","catch","(","io","exception","e",")","{","throw","new","illegal","argument","exception","(","\"","could","not","capture","input","of","sumbitted","text","area","!","\"",",","e",")",";","}","}","private","static","void","create","and","show","gui","(","final","text","editor","frame",")","{","frame",".","set","default","close","operation","(","j","frame",".","exit","on","close",")",";","frame",".","pack","(",")",";","frame",".","set","location","by","platform","(","true",")",";","frame",".","set","visible","(","true",")",";","frame",".","to","front","(",")",";","}","public","static","void","main","(","string","[","]","args",")","{","ask","user","to","edit","text","(","new","text","editor","(",")",")",";","}","public","static","void","ask","user","to","edit","text","(","final","text","editor","text","editor",")","{","/","/","schedule","a","job","for","the","event","dispatch","thread",":","/","/","creating","and","showing","this","application","'","s","gui",".","swing","utilities",".","invoke","later","(","new","runnable","(",")","{","public","void","run","(",")","{","create","and","show","gui","(","text","editor",")",";","}","}",")",";","}","public","string","get","submitted","text","(",")","{","return","submitted","text",";","}","}"],"func_name":"TextEditor","func_name_tokens":["text","editor"],"docstring":"  A text window for asking a user to edit text. Can be registered with an {@link java.awt.event.ActionListener} for  advanced thread-waiting functionality (e.g. using a {@link java.util.concurrent.CountDownLatch}. <p>To use, after  creating a new instance, invoke the GUI by calling displayFrame </p> Special thanks to: <a  Modified to retun the edited text, rather than save it to a file.","docstring_tokens":["a","text","window","for","asking","a","user","to","edit","text",".","can","be","registered","with","an","{","java",".","awt",".","event",".","action","listener","}","for","advanced","thread","-","waiting","functionality","(","e",".","g",".","using","a","{","java",".","util",".","concurrent",".","count","down","latch","}",".","<","p",">","to","use",",","after","creating","a","new","instance",",","invoke","the","gui","by","calling","display","frame","<","/","p",">","special","thanks","to",":","<","a","modified","to","retun","the","edited","text",",","rather","than","save","it","to","a","file","."],"query":"Save a the text from a jTextArea (ie Save As) into a new .txt file","query_tokens":["save","a","the","text","from","a","j","text","area","(","ie","save","as",")","into","a","new",".","txt","file"]}
{"query_id":"7348711","repo_name":"badvision/acs-aem-commons","zip_link":"/badvision/acs-aem-commons/archive/feature/MCP.zip","code":"    private String getHostname() {        String hostname = null;        final String OS = System.getProperty(\"os.name\").toLowerCase();        // Unpleasant 'if structure' to avoid making unnecessary Runtime calls; only call Runtime.        if (OS.indexOf(\"win\") >= 0) {            hostname = System.getenv(\"COMPUTERNAME\");            if (StringUtils.isBlank(hostname)) {                try {                    hostname = execReadToString(\"hostname\");                } catch (IOException ex) {                    log.warn(\"Unable to collect hostname from Windows via 'hostname' command.\", ex);                }            }        } else if (OS.indexOf(\"nix\") >= 0 || OS.indexOf(\"nux\") >= 0 || OS.indexOf(\"mac\") >= 0) {            hostname = System.getenv(\"HOSTNAME\");            if (StringUtils.isBlank(hostname)) {                try {                    hostname = execReadToString(\"hostname\");                } catch (IOException ex) {                    log.warn(\"Unable to collect hostname from *nix via 'hostname' command.\", ex);                }            }            if (StringUtils.isBlank(hostname)) {                try {                    execReadToString(\"cat /etc/hostname\");                } catch (IOException ex) {                    log.warn(\"Unable to collect hostname from *nix via 'cat /etc/hostname' command.\", ex);                }            }        } else {            log.warn(\"Unidentifiable OS [ {} ]. Could not collect hostname.\", OS);        }        hostname = StringUtils.trimToNull(hostname);        if (StringUtils.isBlank(hostname)) {            log.debug(\"Unable to derive hostname from OS; defaulting to OSGi Configured value [ {} ]\", fallbackHostname);            return fallbackHostname;        } else {            log.debug(\"Derived hostname from OS: [ {} ]\", hostname);            return hostname;        }    }","code_tokens":["private","string","get","hostname","(",")","{","string","hostname","=","null",";","final","string","os","=","system",".","get","property","(","\"","os",".","name","\"",")",".","to","lower","case","(",")",";","/","/","unpleasant","'","if","structure","'","to","avoid","making","unnecessary","runtime","calls",";","only","call","runtime",".","if","(","os",".","index","of","(","\"","win","\"",")",">","=","0",")","{","hostname","=","system",".","getenv","(","\"","computername","\"",")",";","if","(","string","utils",".","is","blank","(","hostname",")",")","{","try","{","hostname","=","exec","read","to","string","(","\"","hostname","\"",")",";","}","catch","(","io","exception","ex",")","{","log",".","warn","(","\"","unable","to","collect","hostname","from","windows","via","'","hostname","'","command",".","\"",",","ex",")",";","}","}","}","else","if","(","os",".","index","of","(","\"","nix","\"",")",">","=","0","|","|","os",".","index","of","(","\"","nux","\"",")",">","=","0","|","|","os",".","index","of","(","\"","mac","\"",")",">","=","0",")","{","hostname","=","system",".","getenv","(","\"","hostname","\"",")",";","if","(","string","utils",".","is","blank","(","hostname",")",")","{","try","{","hostname","=","exec","read","to","string","(","\"","hostname","\"",")",";","}","catch","(","io","exception","ex",")","{","log",".","warn","(","\"","unable","to","collect","hostname","from","*","nix","via","'","hostname","'","command",".","\"",",","ex",")",";","}","}","if","(","string","utils",".","is","blank","(","hostname",")",")","{","try","{","exec","read","to","string","(","\"","cat","/","etc","/","hostname","\"",")",";","}","catch","(","io","exception","ex",")","{","log",".","warn","(","\"","unable","to","collect","hostname","from","*","nix","via","'","cat","/","etc","/","hostname","'","command",".","\"",",","ex",")",";","}","}","}","else","{","log",".","warn","(","\"","unidentifiable","os","[","{","}","]",".","could","not","collect","hostname",".","\"",",","os",")",";","}","hostname","=","string","utils",".","trim","to","null","(","hostname",")",";","if","(","string","utils",".","is","blank","(","hostname",")",")","{","log",".","debug","(","\"","unable","to","derive","hostname","from","os",";","defaulting","to","os","gi","configured","value","[","{","}","]","\"",",","fallback","hostname",")",";","return","fallback","hostname",";","}","else","{","log",".","debug","(","\"","derived","hostname","from","os",":","[","{","}","]","\"",",","hostname",")",";","return","hostname",";","}","}"],"func_name":"getHostname","func_name_tokens":["get","hostname"],"docstring":"          Hostname retrieval code borrowed from Malt on StackOverflow      /          Attempts to get the hostname of running AEM instance. Uses the OSGi configured fallback if unavailable.           @return the AEM Instance's hostname.","docstring_tokens":["hostname","retrieval","code","borrowed","from","malt","on","stack","overflow","/","attempts","to","get","the","hostname","of","running","aem","instance",".","uses","the","os","gi","configured","fallback","if","unavailable","."],"query":"Recommended way to get hostname in Java","query_tokens":["recommended","way","to","get","hostname","in","java"]}
{"query_id":"8287853","repo_name":"elexis/elexis-3-core","zip_link":"/elexis/elexis-3-core/archive/master.zip","code":"\tprivate final class StyledTextMultiLineAutoGrowListener implements Listener {\t\tprotected int lines = 0;\t\t\t\t@Override\t\tpublic void handleEvent(Event event){\t\t\tif (event.type != SWT.Modify)\t\t\t\treturn;\t\t\tif (txtClientCustomText.getLineCount() != lines) {\t\t\t\tlines = txtClientCustomText.getLineCount();\t\t\t\t\t\t\t\ttxtClientCustomText.setSize(txtClientCustomText.getSize().x, lines\t\t\t\t\t* (int) txtClientCustomText.getFont().getFontData()[0].height);\t\t\t}\t\t\tscrldfrm.reflow(true);\t\t}\t}","code_tokens":["private","final","class","styled","text","multi","line","auto","grow","listener","implements","listener","{","protected","int","lines","=","0",";","@","override","public","void","handle","event","(","event","event",")","{","if","(","event",".","type","!","=","swt",".","modify",")","return",";","if","(","txt","client","custom","text",".","get","line","count","(",")","!","=","lines",")","{","lines","=","txt","client","custom","text",".","get","line","count","(",")",";","txt","client","custom","text",".","set","size","(","txt","client","custom","text",".","get","size","(",")",".","x",",","lines","*","(","int",")","txt","client","custom","text",".","get","font","(",")",".","get","font","data","(",")","[","0","]",".","height",")",";","}","scrldfrm",".","reflow","(","true",")",";","}","}"],"func_name":"StyledTextMultiLineAutoGrowListener","func_name_tokens":["styled","text","multi","line","auto","grow","listener"],"docstring":"\t\t  This {@link Listener} automatically grows and shrinks a {@link StyledText} according to the\t  number of lines contained. It handles {@link SWT#Modify} events only.\t  \t       adjusting-height-based-on-interactively-entered-text\t  ","docstring_tokens":["this","{","listener","}","automatically","grows","and","shrinks","a","{","styled","text","}","according","to","the","number","of","lines","contained",".","it","handles","{","swt","#","modify","}","events","only",".","adjusting","-","height","-","based","-","on","-","interactively","-","entered","-","text"],"query":"Text widget with self-adjusting height based on interactively entered text?","query_tokens":["text","widget","with","self","-","adjusting","height","based","on","interactively","entered","text","?"]}
{"query_id":"565282","repo_name":"alireza-hosseini/libgdx","zip_link":"/alireza-hosseini/libgdx/archive/master.zip","code":"\tpublic static float intersectRayRay(Vector2 start1, Vector2 direction1, Vector2 start2, Vector2 direction2) {\t\tfloat difx = start2.x - start1.x;\t\tfloat dify = start2.y - start1.y;\t\tfloat d1xd2 = direction1.x * direction2.y - direction1.y * direction2.x;\t\tif(d1xd2 == 0.0f) {\t\t\treturn Float.POSITIVE_INFINITY; //collinear\t\t}\t\tfloat d2sx = direction2.x / d1xd2;\t\tfloat d2sy = direction2.y / d1xd2;\t\treturn difx * d2sy - dify * d2sx;\t}","code_tokens":["public","static","float","intersect","ray","ray","(","vector2","start1",",","vector2","direction1",",","vector2","start2",",","vector2","direction2",")","{","float","difx","=","start2",".","x","-","start1",".","x",";","float","dify","=","start2",".","y","-","start1",".","y",";","float","d1xd2","=","direction1",".","x","*","direction2",".","y","-","direction1",".","y","*","direction2",".","x",";","if","(","d1xd2","=","=","0",".","0f",")","{","return","float",".","positive","infinity",";","/","/","collinear","}","float","d2sx","=","direction2",".","x","/","d1xd2",";","float","d2sy","=","direction2",".","y","/","d1xd2",";","return","difx","*","d2sy","-","dify","*","d2sx",";","}"],"func_name":"intersectRayRay","func_name_tokens":["intersect","ray","ray"],"docstring":"\t Intersect two 2D Rays and return the scalar parameter of the first ray at the intersection point.\t  You can get the intersection point by: Vector2 point(direction1).scl(scalar).add(start1);\t  @param start1 Where the first ray start\t  @param direction1 The direction the first ray is pointing\t  @param start2 Where the second ray start\t  @param direction2 The direction the second ray is pointing\t  @return scalar parameter on the first ray describing the point where the intersection happens. May be negative.\t  In case the rays are collinear, Float.POSITIVE_INFINITY will be returned.","docstring_tokens":["intersect","two","2d","rays","and","return","the","scalar","parameter","of","the","first","ray","at","the","intersection","point",".","you","can","get","the","intersection","point","by",":","vector2","point","(","direction1",")",".","scl","(","scalar",")",".","add","(","start1",")",";"],"query":"How do you detect where two line segments intersect? [closed]","query_tokens":["how","do","you","detect","where","two","line","segments","intersect","?","[","closed","]"]}
{"query_id":"2967359","repo_name":"resty-gwt/resty-gwt","zip_link":"/resty-gwt/resty-gwt/archive/master.zip","code":"public interface ModelChangedEventHandler extends EventHandler {    void onModelChange(ModelChangeEvent event);}","code_tokens":["public","interface","model","changed","event","handler","extends","event","handler","{","void","on","model","change","(","model","change","event","event",")",";","}"],"func_name":"EventHandler","func_name_tokens":["event","handler"],"docstring":"  example eventhandler interface    @author <a href=\"mailto:andi.balke@gmail.com\">andi</a>","docstring_tokens":["example","eventhandler","interface"],"query":"GWT Custom Events","query_tokens":["gwt","custom","events"]}
{"query_id":"7610355","repo_name":"changjiashuai/SimpleCropView","zip_link":"/changjiashuai/SimpleCropView/archive/master.zip","code":"    public static Typeface getTypefaceFromRaw(Context context, int resourceId) {        InputStream inputStream = null;        BufferedOutputStream bos = null;        OutputStream os = null;        Typeface typeface = null;        try {            // Load font(in res/raw) to memory            inputStream = context.getResources().openRawResource(resourceId);            // Output font to temporary file            String fontFilePath = context.getCacheDir() + \"/tmp\" + System.currentTimeMillis() + \".raw\";            os = new FileOutputStream(fontFilePath);            bos = new BufferedOutputStream(os);            byte[] buffer = new byte[inputStream.available()];            int length = 0;            while ((length = inputStream.read(buffer)) > 0) {                bos.write(buffer, 0, length);            }            // When loading completed, delete temporary files            typeface = Typeface.createFromFile(fontFilePath);            new File(fontFilePath).delete();        } catch (Resources.NotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } finally {            tryClose(bos);            tryClose(os);            tryClose(inputStream);        }        return typeface;    }","code_tokens":["public","static","typeface","get","typeface","from","raw","(","context","context",",","int","resource","id",")","{","input","stream","input","stream","=","null",";","buffered","output","stream","bos","=","null",";","output","stream","os","=","null",";","typeface","typeface","=","null",";","try","{","/","/","load","font","(","in","res","/","raw",")","to","memory","input","stream","=","context",".","get","resources","(",")",".","open","raw","resource","(","resource","id",")",";","/","/","output","font","to","temporary","file","string","font","file","path","=","context",".","get","cache","dir","(",")","+","\"","/","tmp","\"","+","system",".","current","time","millis","(",")","+","\"",".","raw","\"",";","os","=","new","file","output","stream","(","font","file","path",")",";","bos","=","new","buffered","output","stream","(","os",")",";","byte","[","]","buffer","=","new","byte","[","input","stream",".","available","(",")","]",";","int","length","=","0",";","while","(","(","length","=","input","stream",".","read","(","buffer",")",")",">","0",")","{","bos",".","write","(","buffer",",","0",",","length",")",";","}","/","/","when","loading","completed",",","delete","temporary","files","typeface","=","typeface",".","create","from","file","(","font","file","path",")",";","new","file","(","font","file","path",")",".","delete","(",")",";","}","catch","(","resources",".","not","found","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","catch","(","io","exception","e",")","{","e",".","print","stack","trace","(",")",";","}","finally","{","try","close","(","bos",")",";","try","close","(","os",")",";","try","close","(","input","stream",")",";","}","return","typeface",";","}"],"func_name":"getTypefaceFromRaw","func_name_tokens":["get","typeface","from","raw"],"docstring":"          Load font from res/raw      <p/>      Font in Android Library - Stack Overflow           @param context    Context      @param resourceId resourceId      @return Typeface or null","docstring_tokens":["load","font","from","res","/","raw","<","p","/",">","font","in","android","library","-","stack","overflow"],"query":"Font in Android Library","query_tokens":["font","in","android","library"]}
{"query_id":"252893","repo_name":"knightliao/disconf","zip_link":"/knightliao/disconf/archive/master.zip","code":"    private static void addCurrentWorkingDir2Classpath(String path2Added) {        // Add the conf dir to the classpath        // Chain the current thread classloader        URLClassLoader urlClassLoader;        try {            urlClassLoader = new URLClassLoader(new URL[] {new File(path2Added).toURI().toURL()},                    loader);            // Replace the thread classloader - assumes            // you have permissions to do so            Thread.currentThread().setContextClassLoader(urlClassLoader);        } catch (Exception e) {            LOGGER.warn(e.toString());        }    }","code_tokens":["private","static","void","add","current","working","dir2classpath","(","string","path2added",")","{","/","/","add","the","conf","dir","to","the","classpath","/","/","chain","the","current","thread","classloader","url","class","loader","url","class","loader",";","try","{","url","class","loader","=","new","url","class","loader","(","new","url","[","]","{","new","file","(","path2added",")",".","to","uri","(",")",".","to","url","(",")","}",",","loader",")",";","/","/","replace","the","thread","classloader","-","assumes","/","/","you","have","permissions","to","do","so","thread",".","current","thread","(",")",".","set","context","class","loader","(","url","class","loader",")",";","}","catch","(","exception","e",")","{","logger",".","warn","(","e",".","to","string","(",")",")",";","}","}"],"func_name":"addCurrentWorkingDir2Classpath","func_name_tokens":["add","current","working","dir2classpath"],"docstring":"          only support 1.7 or higher","docstring_tokens":["only","support","1",".","7","or","higher"],"query":"How do you change the CLASSPATH within Java?","query_tokens":["how","do","you","change","the","classpath","within","java","?"]}
{"query_id":"8607707","repo_name":"weiwenqiang/GitHub","zip_link":"/weiwenqiang/GitHub/archive/master.zip","code":"\tpublic static SpannableString typeface(Context context, int strResId) {\t\tif (sDefaultTypefaceCollection == null) {\t\t\tthrow new IllegalStateException(\"Default typeface collection not initialized. Forgot to call init()?\");\t\t}\t\treturn typeface(context.getString(strResId), sDefaultTypefaceCollection, Typeface.NORMAL);\t}","code_tokens":["public","static","spannable","string","typeface","(","context","context",",","int","str","res","id",")","{","if","(","s","default","typeface","collection","=","=","null",")","{","throw","new","illegal","state","exception","(","\"","default","typeface","collection","not","initialized",".","forgot","to","call","init","(",")","?","\"",")",";","}","return","typeface","(","context",".","get","string","(","str","res","id",")",",","s","default","typeface","collection",",","typeface",".","normal",")",";","}"],"func_name":"typeface","func_name_tokens":["typeface"],"docstring":"\t\t  Return spannable string with default typeface style (style: Typeface.NORMAL)\t \t  @param context to obtain string resource\t  @param strResId string resource id, content\t \t  @throws IllegalStateException {@link #init(TypefaceCollection)} has not been called\t  @return SpannableString that can be used in TextView.setText() method","docstring_tokens":["return","spannable","string","with","default","typeface","style","(","style",":","typeface",".","normal",")"],"query":"How to Set a Custom Font in the ActionBar Title?","query_tokens":["how","to","set","a","custom","font","in","the","action","bar","title","?"]}
{"query_id":"8489993","repo_name":"PerfectSlayer/AdAway","zip_link":"/PerfectSlayer/AdAway/archive/master.zip","code":"    public static boolean isInForeground(Context context) {        AsyncTask<Context, Void, Boolean> foregroundCheckTask = new AsyncTask<Context, Void, Boolean>() {            @Override            protected Boolean doInBackground(Context... params) {                final Context context = params[0].getApplicationContext();                return isAppOnForeground(context);            }            private boolean isAppOnForeground(Context context) {                ActivityManager activityManager = (ActivityManager) context                        .getSystemService(Context.ACTIVITY_SERVICE);                List<RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();                if (appProcesses == null) {                    return false;                }                final String packageName = context.getPackageName();                for (RunningAppProcessInfo appProcess : appProcesses) {                    if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND                            && appProcess.processName.equals(packageName)) {                        return true;                    }                }                return false;            }        };        boolean foreground = false;        try {            foreground = foregroundCheckTask.execute(context).get();        } catch (InterruptedException e) {            Log.e(Constants.TAG, \"IsInForeground InterruptedException\", e);        } catch (ExecutionException e) {            Log.e(Constants.TAG, \"IsInForeground ExecutionException\", e);        }        return foreground;    }","code_tokens":["public","static","boolean","is","in","foreground","(","context","context",")","{","async","task","<","context",",","void",",","boolean",">","foreground","check","task","=","new","async","task","<","context",",","void",",","boolean",">","(",")","{","@","override","protected","boolean","do","in","background","(","context",".",".",".","params",")","{","final","context","context","=","params","[","0","]",".","get","application","context","(",")",";","return","is","app","on","foreground","(","context",")",";","}","private","boolean","is","app","on","foreground","(","context","context",")","{","activity","manager","activity","manager","=","(","activity","manager",")","context",".","get","system","service","(","context",".","activity","service",")",";","list","<","running","app","process","info",">","app","processes","=","activity","manager",".","get","running","app","processes","(",")",";","if","(","app","processes","=","=","null",")","{","return","false",";","}","final","string","package","name","=","context",".","get","package","name","(",")",";","for","(","running","app","process","info","app","process",":","app","processes",")","{","if","(","app","process",".","importance","=","=","running","app","process","info",".","importance","foreground","&","&","app","process",".","process","name",".","equals","(","package","name",")",")","{","return","true",";","}","}","return","false",";","}","}",";","boolean","foreground","=","false",";","try","{","foreground","=","foreground","check","task",".","execute","(","context",")",".","get","(",")",";","}","catch","(","interrupted","exception","e",")","{","log",".","e","(","constants",".","tag",",","\"","is","in","foreground","interrupted","exception","\"",",","e",")",";","}","catch","(","execution","exception","e",")","{","log",".","e","(","constants",".","tag",",","\"","is","in","foreground","execution","exception","\"",",","e",")",";","}","return","foreground",";","}"],"func_name":"isInForeground","func_name_tokens":["is","in","foreground"],"docstring":"          Checks if AdAway is in foreground, see           @param context      @return","docstring_tokens":["checks","if","ad","away","is","in","foreground",",","see"],"query":"check android application is in foreground or not? [duplicate]","query_tokens":["check","android","application","is","in","foreground","or","not","?","[","duplicate","]"]}