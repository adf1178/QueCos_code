{"code":"    def get_fields(cls, fields=None, excludes=None):","code_tokens":["def","get","fields","(","cls",",","fields","=","none",",","excludes","=","none",")",":"],"func_name":"get_fields","func_name_tokens":["get","fields"],"docstring":"Unfortunately we must override this method because tastypie ignores         'blank' attribute on model fields.         Here we invoke an insane workaround hack due to metaclass inheritance         issues:","docstring_tokens":["unfortunately","we","must","override","this","method","because","tastypie","ignores","'","blank","'","attribute","on","model","fields",".","here","we","invoke","an","insane","workaround","hack","due","to","metaclass","inheritance","issues",":"],"query":"Invoking `super` in classmethod called from metaclass.__new__","query_tokens":["invoking","`","super","`","in","classmethod","called","from","metaclass",".","new"]}
{"code":"def color_real(s, color, prompt=False, colors_enabled=True):","code_tokens":["def","color","real","(","s",",","color",",","prompt","=","false",",","colors","enabled","=","true",")",":"],"func_name":"color_real","func_name_tokens":["color","real"],"docstring":"color a string using ansi escape characters. set prompt to true to add marks for readline to see invisible portions of the prompt\tcf. http://stackoverflow.com/questions/9468435/look-how-to-fix-column-calculation-in-python-readline-if-use-color-prompt\tif s is None:\t\treturn \"\"\ts=str(s)\tif not colors_enabled:\t\treturn s\tres=s\tCOLOR_STOP=\"\\033[0m\"\tprompt_stop=\"\"\tprompt_start=\"\"\tif prompt:\t\tprompt_stop=\"\\002\"\t\tprompt_start=\"\\001\"\tif prompt:\t\tCOLOR_STOP=prompt_start+COLOR_STOP+prompt_stop\tif color.lower()==\"random\":\t\tcolor=random.choice([\"blue\",\"red\",\"green\",\"yellow\"])\tif color.lower()==\"blue\":\t\tres=prompt_start+\"\\033[34m\"+prompt_stop+s+COLOR_STOP\tif color.lower()==\"red\":\t\tres=prompt_start+\"\\033[31m\"+prompt_stop+s+COLOR_STOP\tif color.lower()==\"green\":\t\tres=prompt_start+\"\\033[32m\"+prompt_stop+s+COLOR_STOP\tif color.lower()==\"yellow\":\t\tres=prompt_start+\"\\033[33m\"+prompt_stop+s+COLOR_STOP\tif color.lower()==\"grey\":\t\tres=prompt_start+\"\\033[37m\"+prompt_stop+s+COLOR_STOP\tif color.lower()==\"darkgrey\":\t\tres=prompt_start+\"\\033[1;30m\"+prompt_stop+s+COLOR_STOP\treturn res","docstring_tokens":["color","a","string","using","ansi","escape","characters",".","set","prompt","to","true","to","add","marks","for","readline","to","see","invisible","portions","of","the","prompt","cf",".","if","s","is","none",":","return","\"","\"","s","=","str","(","s",")","if","not","colors","enabled",":","return","s","res","=","s","color","stop","=","\"","\\","033","[","0m","\"","prompt","stop","=","\"","\"","prompt","start","=","\"","\"","if","prompt",":","prompt","stop","=","\"","\\","002","\"","prompt","start","=","\"","\\","001","\"","if","prompt",":","color","stop","=","prompt","start","+","color","stop","+","prompt","stop","if","color",".","lower","(",")","=","=","\"","random","\"",":","color","=","random",".","choice","(","[","\"","blue","\"",",","\"","red","\"",",","\"","green","\"",",","\"","yellow","\"","]",")","if","color",".","lower","(",")","=","=","\"","blue","\"",":","res","=","prompt","start","+","\"","\\","033","[","34m","\"","+","prompt","stop","+","s","+","color","stop","if","color",".","lower","(",")","=","=","\"","red","\"",":","res","=","prompt","start","+","\"","\\","033","[","31m","\"","+","prompt","stop","+","s","+","color","stop","if","color",".","lower","(",")","=","=","\"","green","\"",":","res","=","prompt","start","+","\"","\\","033","[","32m","\"","+","prompt","stop","+","s","+","color","stop","if","color",".","lower","(",")","=","=","\"","yellow","\"",":","res","=","prompt","start","+","\"","\\","033","[","33m","\"","+","prompt","stop","+","s","+","color","stop","if","color",".","lower","(",")","=","=","\"","grey","\"",":","res","=","prompt","start","+","\"","\\","033","[","37m","\"","+","prompt","stop","+","s","+","color","stop","if","color",".","lower","(",")","=","=","\"","darkgrey","\"",":","res","=","prompt","start","+","\"","\\","033","[","1",";","30m","\"","+","prompt","stop","+","s","+","color","stop","return","res"],"query":"How to fix column calculation in Python readline if using color prompt","query_tokens":["how","to","fix","column","calculation","in","python","readline","if","using","color","prompt"]}
{"code":"def check_output(*popenargs, **kwargs):    if 'stdout' in kwargs:        raise ValueError('stdout argument not allowed, it will be overridden.')    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)    output, unused_err = process.communicate()    retcode = process.poll()    if retcode:        cmd = kwargs.get(\"args\")        if cmd is None:            cmd = popenargs[0]        raise subprocess.CalledProcessError(retcode, cmd)    return output","code_tokens":["def","check","output","(","*","popenargs",",","*","*","kwargs",")",":","if","'","stdout","'","in","kwargs",":","raise","value","error","(","'","stdout","argument","not","allowed",",","it","will","be","overridden",".","'",")","process","=","subprocess",".","popen","(","stdout","=","subprocess",".","pipe",",","*","popenargs",",","*","*","kwargs",")","output",",","unused","err","=","process",".","communicate","(",")","retcode","=","process",".","poll","(",")","if","retcode",":","cmd","=","kwargs",".","get","(","\"","args","\"",")","if","cmd","is","none",":","cmd","=","popenargs","[","0","]","raise","subprocess",".","called","process","error","(","retcode",",","cmd",")","return","output"],"func_name":"check_output","func_name_tokens":["check","output"],"docstring":"For Python 2.6 compatibility: see    http://stackoverflow.com/questions/4814970/","docstring_tokens":["for","python","2",".","6","compatibility",":","see"],"query":"subprocess.check_output() doesn't seem to exist (Python 2.6.5)","query_tokens":["subprocess",".","check","output","(",")","doesn","'","t","seem","to","exist","(","python","2",".","6",".","5",")"]}
{"code":"def add_colors(*args):","code_tokens":["def","add","colors","(","*","args",")",":"],"func_name":"add_colors","func_name_tokens":["add","colors"],"docstring":"Do some *args magic to return a tuple, which has the sums of all tuples in *args\nAdapted from an answer here: http://stackoverflow.com/questions/14180866/sum-each-value-in-a-list-of-tuples    added = [sum(x) for x in zip(*args)]    return numpy.clip(added, 0, 255)\nrestrict to uint8","docstring_tokens":["do","some","*","args","magic","to","return","a","tuple",",","which","has","the","sums","of","all","tuples","in","*","args","adapted","from","an","answer","here",":","added","=","[","sum","(","x",")","for","x","in","zip","(","*","args",")","]","return","numpy",".","clip","(","added",",","0",",","255",")","restrict","to","uint8"],"query":"sum each value in a list of tuples","query_tokens":["sum","each","value","in","a","list","of","tuples"]}
{"code":"                    def build_key(*args, **kwargs):                        dyn_val = dyn_func(*args, **kwargs)                        stat_val.update(dyn_val)                        return stat_val                    return build_key                config[key] = key_closure()","code_tokens":["def","build","key","(","*","args",",","*","*","kwargs",")",":","dyn","val","=","dyn","func","(","*","args",",","*","*","kwargs",")","stat","val",".","update","(","dyn","val",")","return","stat","val","return","build","key","config","[","key","]","=","key","closure","(",")"],"func_name":"build_key","func_name_tokens":["build","key"],"docstring":"To explain some of the funkiness wrt closures, see:\nhttp://stackoverflow.com/questions/233673/lexical-closures-in-python\ncreate the actual build_request method","docstring_tokens":["to","explain","some","of","the","funkiness","wrt","closures",",","see",":","create","the","actual","build","request","method"],"query":"How do lexical closures work?","query_tokens":["how","do","lexical","closures","work","?"]}
{"code":"import osimport sysimport mathimport pickleimport optparseclass FileReader(object):    def __init__(self, in_rmode = 'byte'):    self.fh = None;    self.rmode = in_rmode;    self.__buffer_length = 4096;  ","code_tokens":["import","osimport","sysimport","mathimport","pickleimport","optparseclass","file","reader","(","object",")",":","def","init","(","self",",","in","rmode","=","'","byte","'",")",":","self",".","fh","=","none",";","self",".","rmode","=","in","rmode",";","self",".","buffer","length","=","4096",";"],"func_name":"FileReader","func_name_tokens":["file","reader"],"docstring":"File statistics (fstats)Tool calculating various file statistics:  size  histogram  entropy  Usage example:  python ./fstats.py --load-data=./fstats.py --line-count --word-count --length --mode-length=read --histogram --entropy  wc ./fstats.py\ndd if=/dev/zero of=/tmp/r bs=1 count=1000000  dd if=/dev/urandom of=/tmp/r bs=1 count=1000000  wc /tmp/r  python ./fstats.py --load-data=/tmp/r --line-count --word-count --length --mode-length=read --histogram --entropySource URLs: http://www.cs.uta.fi/~scott/mmm/Entropy.html http://www.forensickb.com/2013/03/file-entropy-explained.html http://gynvael.coldwind.pl/?id=158 http://troydhanson.github.io/misc/Entropy.html http://stackoverflow.com/questions/990477/how-to-calculate-the-entropy-of-a-file\n---------------------------------------------------------------------------\nclasses\n---------------------------------------------------------------------------     public ctor          reading mode: 'byte'                        'line'                        'none'","docstring_tokens":["file","statistics","(","fstats",")","tool","calculating","various","file","statistics",":","size","histogram","entropy","usage","example",":","python",".","/","fstats",".","py","-","-","load","-","data","=",".","/","fstats",".","py","-","-","line","-","count","-","-","word","-","count","-","-","length","-","-","mode","-","length","=","read","-","-","histogram","-","-","entropy","wc",".","/","fstats",".","py","dd","if","=","/","dev","/","zero","of","=","/","tmp","/","r","bs","=","1","count","=","1000000","dd","if","=","/","dev","/","urandom","of","=","/","tmp","/","r","bs","=","1","count","=","1000000","wc","/","tmp","/","r","python",".","/","fstats",".","py","-","-","load","-","data","=","/","tmp","/","r","-","-","line","-","count","-","-","word","-","count","-","-","length","-","-","mode","-","length","=","read","-","-","histogram","-","-","entropy","source","ur","ls",":","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","classes","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","public","ctor","reading","mode",":","'","byte","'","'","line","'","'","none","'"],"query":"How to calculate the entropy of a file?","query_tokens":["how","to","calculate","the","entropy","of","a","file","?"]}
{"code":"    def dbapi(cls):        from google.appengine.api import apiproxy_stub_map        if _is_dev_environment():            from google.appengine.api import rdbms_mysqldb            return rdbms_mysqldb        elif apiproxy_stub_map.apiproxy.GetStub('rdbms'):            from google.storage.speckle.python.api import rdbms_apiproxy            return rdbms_apiproxy        else:            from google.storage.speckle.python.api import rdbms_googleapi            return rdbms_googleapi","code_tokens":["def","dbapi","(","cls",")",":","from","google",".","appengine",".","api","import","apiproxy","stub","map","if","is","dev","environment","(",")",":","from","google",".","appengine",".","api","import","rdbms","mysqldb","return","rdbms","mysqldb","elif","apiproxy","stub","map",".","apiproxy",".","get","stub","(","'","rdbms","'",")",":","from","google",".","storage",".","speckle",".","python",".","api","import","rdbms","apiproxy","return","rdbms","apiproxy","else",":","from","google",".","storage",".","speckle",".","python",".","api","import","rdbms","googleapi","return","rdbms","googleapi"],"func_name":"dbapi","func_name_tokens":["dbapi"],"docstring":"from django:\nhttp://code.google.com/p/googleappengine/source/\nbrowse/trunk/python/google/storage/speckle/\n118\nsee also [ticket:2649]\nsee also http://stackoverflow.com/q/14224679/34549","docstring_tokens":["from","django",":","browse","/","trunk","/","python","/","google","/","storage","/","speckle","/","118","see","also","[","ticket",":","2649","]","see","also"],"query":"Unable to connect to Google Cloud SQL from development server using SQLAlchemy","query_tokens":["unable","to","connect","to","google","cloud","sql","from","development","server","using","sql","alchemy"]}
{"code":"    rest_columns = [ 'parameter__name',                     'parameter__standard_name',                     'measurement__depth',                     'measurement__geom',                     'measurement__instantpoint__timevalue',                      'measurement__instantpoint__activity__platform__name',                     'datavalue',                     'parameter__units'                   ]    kml_columns = [  'parameter__name',                     'parameter__standard_name',                     'measurement__depth',                     'measurement__geom',                     'measurement__instantpoint__timevalue',                      'measurement__instantpoint__activity__platform__name',                     'datavalue',                   ]    def __init__(self, query, values_list, qs_mp=None):","code_tokens":["rest","columns","=","[","'","parameter","name","'",",","'","parameter","standard","name","'",",","'","measurement","depth","'",",","'","measurement","geom","'",",","'","measurement","instantpoint","timevalue","'",",","'","measurement","instantpoint","activity","platform","name","'",",","'","datavalue","'",",","'","parameter","units","'","]","kml","columns","=","[","'","parameter","name","'",",","'","parameter","standard","name","'",",","'","measurement","depth","'",",","'","measurement","geom","'",",","'","measurement","instantpoint","timevalue","'",",","'","measurement","instantpoint","activity","platform","name","'",",","'","datavalue","'",",","]","def","init","(","self",",","query",",","values","list",",","qs","mp","=","none",")",":"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"A class to simulate a GeoQuerySet that's suitable for use everywhere a GeoQuerySet may be used.    This special class supports adapting MeasuredParameter RawQuerySets to make them look like regular    GeoQuerySets.  See: http://ramenlabs.com/2010/12/08/how-to-quack-like-a-queryset/.  (I looked at Google    again to see if self-joins are possible in Django, and confirmed that they are probably not.      See: http://stackoverflow.com/questions/1578362/self-join-with-django-orm.)                    Initialize PQuerySet with either raw SQL in @query or a QuerySet in @qs_mp.","docstring_tokens":["a","class","to","simulate","a","geo","query","set","that","'","s","suitable","for","use","everywhere","a","geo","query","set","may","be","used",".","this","special","class","supports","adapting","measured","parameter","raw","query","sets","to","make","them","look","like","regular","geo","query","sets",".","see",":","(","i","looked","at","google","again","to","see","if","self","-","joins","are","possible","in","django",",","and","confirmed","that","they","are","probably","not",".","see",":",")","initialize","p","query","set","with","either","raw","sql","in","@","query","or","a","query","set","in","@","qs","mp","."],"query":"Self join with django ORM","query_tokens":["self","join","with","django","orm"]}
{"code":"    \r    __setattr__= dict.__setitem__\r    __delattr__= dict.__delitem__\r \r    def __init__(self, data):\r        if type(data) == str:\r            data = json.loads( data)\r        for name, value in data.items():\r            setattr(self, name, self._wrap(value))\r \r","code_tokens":["setattr","=","dict",".","setitem","delattr","=","dict",".","delitem","def","init","(","self",",","data",")",":","if","type","(","data",")","=","=","str",":","data","=","json",".","loads","(","data",")","for","name",",","value","in","data",".","items","(",")",":","setattr","(","self",",","name",",","self",".","wrap","(","value",")",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"based on class dotdict(dict):\nfrom http://stackoverflow.com/questions/224026/dot-notation-for-dictionary-keys","docstring_tokens":["based","on","class","dotdict","(","dict",")",":","from"],"query":"Javascript style dot notation for dictionary keys unpythonic?","query_tokens":["javascript","style","dot","notation","for","dictionary","keys","unpythonic","?"]}
{"code":"def _load_all_modules(path, names):    module_names = []    for importer, module_name, is_package in pkgutil.iter_modules(        [os.path.dirname(path)]    ):        importlib.import_module(names + '.' + module_name)        module_names.append(module_name)    return module_names","code_tokens":["def","load","all","modules","(","path",",","names",")",":","module","names","=","[","]","for","importer",",","module","name",",","is","package","in","pkgutil",".","iter","modules","(","[","os",".","path",".","dirname","(","path",")","]",")",":","importlib",".","import","module","(","names","+","'",".","'","+","module","name",")","module","names",".","append","(","module","name",")","return","module","names"],"func_name":"_load_all_modules","func_name_tokens":["load","all","modules"],"docstring":"Load all modules in path.    usage:\nLoad all modules in the current directory.        load_all_modules(__file__,__name__)    based on        http://stackoverflow.com/a/25459405/574981        from Daniel Kauffman\nFor each module in the current directory...\nImport the module.\npackage init\nLoad all modules in the current directory.","docstring_tokens":["load","all","modules","in","path",".","usage",":","load","all","modules","in","the","current","directory",".","load","all","modules","(","file",",","name",")","based","on","from","daniel","kauffman","for","each","module","in","the","current","directory",".",".",".","import","the","module",".","package","init","load","all","modules","in","the","current","directory","."],"query":"How would I create and then import a package containing an unspecified set of modules?","query_tokens":["how","would","i","create","and","then","import","a","package","containing","an","unspecified","set","of","modules","?"]}
{"code":"def is_binary(pathname):","code_tokens":["def","is","binary","(","pathname",")",":"],"func_name":"is_binary","func_name_tokens":["is","binary"],"docstring":"Cargo culted from http://stackoverflow.com/questions/898669/how-can-i-detect-if-a-file-is-binary-non-text-in-python    Return true if the given filename is binary.    @raise EnvironmentError: if the file does not exist or cannot be accessed.    @attention: found @ http://bytes.com/topic/python/answers/21222-determine-file-type-binary-text on 6/08/2010    @author: Trent Mick     @author: Jorge Orpinel     try:        with open(pathname, 'r') as f:            CHUNKSIZE = 1024            while 1:                chunk = f.read(CHUNKSIZE)                if '\\0' in chunk:\nfound null byte                    return True                if len(chunk) < CHUNKSIZE:                    break\ndone    except:        return True    return False","docstring_tokens":["cargo","culted","from","return","true","if","the","given","filename","is","binary",".","@","raise","environment","error",":","if","the","file","does","not","exist","or","cannot","be","accessed",".","@","attention",":","found","@","on","6","/","08","/","2010","@","author",":","trent","mick","@","author",":","jorge","orpinel","try",":","with","open","(","pathname",",","'","r","'",")","as","f",":","chunksize","=","1024","while","1",":","chunk","=","f",".","read","(","chunksize",")","if","'","\\","0","'","in","chunk",":","found","null","byte","return","true","if","len","(","chunk",")","<","chunksize",":","break","done","except",":","return","true","return","false"],"query":"How can I detect if a file is binary (non-text) in python?","query_tokens":["how","can","i","detect","if","a","file","is","binary","(","non","-","text",")","in","python","?"]}
{"code":"    def __init__(self, format):        choices = ('1d', 'datamatrix', 'pdf417', 'qrcode')        if not self.available():            raise GoudaError('Inlite unavailable')        elif format not in choices:            raise ValueError('Unrecognised barcode format [{0}]'.format(format))        else:            com.pythoncom.CoInitialize()            self.ci = com.gencache.EnsureDispatch(self.CLSID)            if '1d' == format:                self.d = self.ci.CreateBarcodePro()                self.d.Type = c.cibfCode39 | c.cibfCode128            elif 'datamatrix' == format:                self.d = self.ci.CreateDataMatrix()            elif 'pdf417' == format:                self.d = self.ci.CreatePdf417()            else:                self.d = self.ci.CreateQR()            self.d.Algorithm = c.cibBestRecognition            self.d.Directions = c.cibHorz | c.cibVert | c.cibDiag","code_tokens":["def","init","(","self",",","format",")",":","choices","=","(","'","1d","'",",","'","datamatrix","'",",","'","pdf417","'",",","'","qrcode","'",")","if","not","self",".","available","(",")",":","raise","gouda","error","(","'","inlite","unavailable","'",")","elif","format","not","in","choices",":","raise","value","error","(","'","unrecognised","barcode","format","[","{","0","}","]","'",".","format","(","format",")",")","else",":","com",".","pythoncom",".","co","initialize","(",")","self",".","ci","=","com",".","gencache",".","ensure","dispatch","(","self",".","clsid",")","if","'","1d","'","=","=","format",":","self",".","d","=","self",".","ci",".","create","barcode","pro","(",")","self",".","d",".","type","=","c",".","cibf","code39","|","c",".","cibf","code128","elif","'","datamatrix","'","=","=","format",":","self",".","d","=","self",".","ci",".","create","data","matrix","(",")","elif","'","pdf417","'","=","=","format",":","self",".","d","=","self",".","ci",".","create","pdf417","(",")","else",":","self",".","d","=","self",".","ci",".","create","qr","(",")","self",".","d",".","algorithm","=","c",".","cib","best","recognition","self",".","d",".","directions","=","c",".","cib","horz","|","c",".","cib","vert","|","c",".","cib","diag"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Tip from stackoverflow about how to access COM constants\nhttp://stackoverflow.com/a/21534997/1773758\nMap values in EBarcodeType to text","docstring_tokens":["tip","from","stackoverflow","about","how","to","access","com","constants","map","values","in","e","barcode","type","to","text"],"query":"Accessing enumeration constants in Excel COM using Python and win32com","query_tokens":["accessing","enumeration","constants","in","excel","com","using","python","and","win32com"]}
{"code":"    def _get_plot_point_colors(self, df, column, ids, cmap):        if ((df is None and column is not None) or (df is not None and                                                    column is None)):            raise ValueError(\"Both df and column must be provided, or both \"                             \"must be None.\")        elif df is None and column is None:            point_colors, category_to_color = None, None        else:            if column not in df:                raise ValueError(\"Column '%s' not in data frame.\" % column)            col_vals = df.loc[ids, column]            if col_vals.isnull().any():                raise ValueError(\"One or more IDs in the ordination results \"                                 \"are not in the data frame, or there is \"                                 \"missing data in the data frame's '%s' \"                                 \"column.\" % column)            category_to_color = None            try:                point_colors = col_vals.astype(float)            except ValueError:                categories = col_vals.unique()                cmap = plt.get_cmap(cmap)                category_colors = cmap(np.linspace(0, 1, len(categories)))                category_to_color = dict(zip(categories, category_colors))                point_colors = col_vals.apply(lambda x: category_to_color[x])            point_colors = point_colors.tolist()        return point_colors, category_to_color","code_tokens":["def","get","plot","point","colors","(","self",",","df",",","column",",","ids",",","cmap",")",":","if","(","(","df","is","none","and","column","is","not","none",")","or","(","df","is","not","none","and","column","is","none",")",")",":","raise","value","error","(","\"","both","df","and","column","must","be","provided",",","or","both","\"","\"","must","be","none",".","\"",")","elif","df","is","none","and","column","is","none",":","point","colors",",","category","to","color","=","none",",","none","else",":","if","column","not","in","df",":","raise","value","error","(","\"","column","'","%","s","'","not","in","data","frame",".","\"","%","column",")","col","vals","=","df",".","loc","[","ids",",","column","]","if","col","vals",".","isnull","(",")",".","any","(",")",":","raise","value","error","(","\"","one","or","more","i","ds","in","the","ordination","results","\"","\"","are","not","in","the","data","frame",",","or","there","is","\"","\"","missing","data","in","the","data","frame","'","s","'","%","s","'","\"","\"","column",".","\"","%","column",")","category","to","color","=","none","try",":","point","colors","=","col","vals",".","astype","(","float",")","except","value","error",":","categories","=","col","vals",".","unique","(",")","cmap","=","plt",".","get","cmap","(","cmap",")","category","colors","=","cmap","(","np",".","linspace","(","0",",","1",",","len","(","categories",")",")",")","category","to","color","=","dict","(","zip","(","categories",",","category","colors",")",")","point","colors","=","col","vals",".","apply","(","lambda","x",":","category","to","color","[","x","]",")","point","colors","=","point","colors",".","tolist","(",")","return","point","colors",",","category","to","color"],"func_name":"_get_plot_point_colors","func_name_tokens":["get","plot","point","colors"],"docstring":"Return a list of colors for each plot point given a metadata column.        If `column` is categorical, additionally returns a dictionary mapping        each category (str) to color (used for legend creation).\nwe have categorical data, so choose a color for each\ncategory, where colors are evenly spaced across the\ncolormap.\nderived from http://stackoverflow.com/a/14887119","docstring_tokens":["return","a","list","of","colors","for","each","plot","point","given","a","metadata","column",".","if","`","column","`","is","categorical",",","additionally","returns","a","dictionary","mapping","each","category","(","str",")","to","color","(","used","for","legend","creation",")",".","we","have","categorical","data",",","so","choose","a","color","for","each","category",",","where","colors","are","evenly","spaced","across","the","colormap",".","derived","from"],"query":"Color by Column Values in Matplotlib","query_tokens":["color","by","column","values","in","matplotlib"]}
{"code":"def main(dms_node_str, pause_secs, section_sep_str):\tprint('Starting \"DMS tracer\" for DMS node \"' + str(dms_node_str) + '\"...')\tcurr_dms = dms.dmspipe.Dmspipe()\tif curr_dms:\t\tprint('DMS tracer is ready...')\t\tprint('\\t(=>pause between polling is ' + str(pause_secs) + ' seconds)')\t\tprint('=>usage hint: press <CTRL> + \"C\" for cancelling')\telse:\t\tprint('ERROR: \"DMS tracer\" needs a running DMS!')\t\treturn 0\told_keys_dict = {}\tfirst_run = True\ttry:\t\twhile True:\t\t\told_keys_set = set(old_keys_dict.keys())\t\t\tnew_keys_dict = get_dms_tree_as_dict(curr_dms=curr_dms, dms_node_str=dms_node_str)\t\t\tnew_keys_set = set(new_keys_dict.keys())\t\t\tif not first_run:\t\t\t\tnew_section = False\t\t\t\tfor dms_key in sorted(old_keys_set - new_keys_set):\t\t\t\t\told_node = old_keys_dict[dms_key]\t\t\t\t\tchange_str = 'DELETED:'\t\t\t\t\ttype_str = '[' + old_node.datatype_str + ']'\t\t\t\t\tvalue_str = '[' + str(old_node.value) + ']'\t\t\t\t\tprint_with_timestamp('\\t'.join([change_str, type_str, dms_key, value_str]))\t\t\t\t\tnew_section = True\t\t\t\tfor dms_key in sorted(old_keys_set & new_keys_set):\t\t\t\t\told_node = old_keys_dict[dms_key]\t\t\t\t\tnew_node = new_keys_dict[dms_key]\t\t\t\t\tif old_node.value != new_node.value:\t\t\t\t\t\tchange_str = 'CHANGED:'\t\t\t\t\t\tif old_node.datatype_str != new_node.datatype_str:\t\t\t\t\t\t\ttype_str = '[' + old_node.datatype_str + ']=>[' + new_node.datatype_str + ']'\t\t\t\t\t\telse:\t\t\t\t\t\t\ttype_str = '[' + old_node.datatype_str + ']'\t\t\t\t\t\tvalue_str = '[' + str(old_node.value) + ']=>[' + str(new_node.value) + ']'\t\t\t\t\t\tprint_with_timestamp('\\t'.join([change_str, type_str, dms_key, value_str]))\t\t\t\t\t\tnew_section = True\t\t\t\tfor dms_key in sorted(new_keys_set - old_keys_set):\t\t\t\t\tnew_node = new_keys_dict[dms_key]\t\t\t\t\tchange_str = 'ADDED:  '\t\t\t\t\ttype_str = '[' + new_node.datatype_str + ']'\t\t\t\t\tvalue_str = '[' + str(new_node.value) + ']'\t\t\t\t\tprint_with_timestamp('\\t'.join([change_str, type_str, dms_key, value_str]))\t\t\t\t\tnew_section = True\t\t\t\tif new_section and section_sep_str != '':\t\t\t\t\t\tprint(section_sep_str)\t\t\telse:\t\t\t\tfirst_run = False\t\t\ttime.sleep(pause_secs)\t\t\told_keys_dict = new_keys_dict\texcept KeyboardInterrupt:\t\tpass\tprint('Quitting \"DMS tracer\"...')\treturn 0  # successif __name__ == '__main__':\tparser = argparse.ArgumentParser(description='DMS tracer of changed DMS keys.')","code_tokens":["def","main","(","dms","node","str",",","pause","secs",",","section","sep","str",")",":","print","(","'","starting","\"","dms","tracer","\"","for","dms","node","\"","'","+","str","(","dms","node","str",")","+","'","\"",".",".",".","'",")","curr","dms","=","dms",".","dmspipe",".","dmspipe","(",")","if","curr","dms",":","print","(","'","dms","tracer","is","ready",".",".",".","'",")","print","(","'","\\t","(","=",">","pause","between","polling","is","'","+","str","(","pause","secs",")","+","'","seconds",")","'",")","print","(","'","=",">","usage","hint",":","press","<","ctrl",">","+","\"","c","\"","for","cancelling","'",")","else",":","print","(","'","error",":","\"","dms","tracer","\"","needs","a","running","dms","!","'",")","return","0","old","keys","dict","=","{","}","first","run","=","true","try",":","while","true",":","old","keys","set","=","set","(","old","keys","dict",".","keys","(",")",")","new","keys","dict","=","get","dms","tree","as","dict","(","curr","dms","=","curr","dms",",","dms","node","str","=","dms","node","str",")","new","keys","set","=","set","(","new","keys","dict",".","keys","(",")",")","if","not","first","run",":","new","section","=","false","for","dms","key","in","sorted","(","old","keys","set","-","new","keys","set",")",":","old","node","=","old","keys","dict","[","dms","key","]","change","str","=","'","deleted",":","'","type","str","=","'","[","'","+","old","node",".","datatype","str","+","'","]","'","value","str","=","'","[","'","+","str","(","old","node",".","value",")","+","'","]","'","print","with","timestamp","(","'","\\t","'",".","join","(","[","change","str",",","type","str",",","dms","key",",","value","str","]",")",")","new","section","=","true","for","dms","key","in","sorted","(","old","keys","set","&","new","keys","set",")",":","old","node","=","old","keys","dict","[","dms","key","]","new","node","=","new","keys","dict","[","dms","key","]","if","old","node",".","value","!","=","new","node",".","value",":","change","str","=","'","changed",":","'","if","old","node",".","datatype","str","!","=","new","node",".","datatype","str",":","type","str","=","'","[","'","+","old","node",".","datatype","str","+","'","]","=",">","[","'","+","new","node",".","datatype","str","+","'","]","'","else",":","type","str","=","'","[","'","+","old","node",".","datatype","str","+","'","]","'","value","str","=","'","[","'","+","str","(","old","node",".","value",")","+","'","]","=",">","[","'","+","str","(","new","node",".","value",")","+","'","]","'","print","with","timestamp","(","'","\\t","'",".","join","(","[","change","str",",","type","str",",","dms","key",",","value","str","]",")",")","new","section","=","true","for","dms","key","in","sorted","(","new","keys","set","-","old","keys","set",")",":","new","node","=","new","keys","dict","[","dms","key","]","change","str","=","'","added",":","'","type","str","=","'","[","'","+","new","node",".","datatype","str","+","'","]","'","value","str","=","'","[","'","+","str","(","new","node",".","value",")","+","'","]","'","print","with","timestamp","(","'","\\t","'",".","join","(","[","change","str",",","type","str",",","dms","key",",","value","str","]",")",")","new","section","=","true","if","new","section","and","section","sep","str","!","=","'","'",":","print","(","section","sep","str",")","else",":","first","run","=","false","time",".","sleep","(","pause","secs",")","old","keys","dict","=","new","keys","dict","except","keyboard","interrupt",":","pass","print","(","'","quitting","\"","dms","tracer","\"",".",".",".","'",")","return","0","#","successif","name","=","=","'","main","'",":","parser","=","argparse",".","argument","parser","(","description","=","'","dms","tracer","of","changed","dms","keys",".","'",")"],"func_name":"main","func_name_tokens":["main"],"docstring":"suppress showing of all DMS keys as \"ADDED\" on first run\nhelp from http://stackoverflow.com/questions/13180941/how-to-kill-a-while-loop-with-a-keystroke\nhandling of set() datatype: https://docs.python.org/2/library/sets.html\nset-objects\n=>we use set() on the dictionary keys to detect and analyze changes compared to last check\ncheck for deleted DMS keys\ncheck for changed DMS keys\ncheck for added DMS keys\nprint section separator if wanted (for better readability)\nusing a flag for insertion of linebreaks\nhelp from https://stackoverflow.com/questions/8259001/python-argparse-command-line-flags-without-arguments","docstring_tokens":["suppress","showing","of","all","dms","keys","as","\"","added","\"","on","first","run","help","from","handling","of","set","(",")","datatype",":","set","-","objects","=",">","we","use","set","(",")","on","the","dictionary","keys","to","detect","and","analyze","changes","compared","to","last","check","check","for","deleted","dms","keys","check","for","changed","dms","keys","check","for","added","dms","keys","print","section","separator","if","wanted","(","for","better","readability",")","using","a","flag","for","insertion","of","linebreaks","help","from"],"query":"How to kill a while loop with a keystroke?","query_tokens":["how","to","kill","a","while","loop","with","a","keystroke","?"]}
{"code":"def find_version(*file_paths):    version_file = read(*file_paths)    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",                              version_file, re.M)    if version_match:        return version_match.group(1)    raise RuntimeError(\"Unable to find version string.\")long_description = read('DESCRIPTION.rst')console_scripts = [    ['exec_sim_timed  = assisipy_utils.mgmt.exec_sim_timed:main'],    ['exec_phys_timed = assisipy_utils.mgmt.exec_physonly_timed:main'],    ['run_multiagent  = assisipy_utils.mgmt.run_multiagent:main'],    ['test_assisi_dep = assisipy_utils.validate.test_conn:main'],    ['layout_assisi_nbg = assisipy_utils.validate.draw_casu_graph:main'],    ['show_assisi_dep_test = assisipy_utils.validate.show_conntest_results:main'],    ['assisi_stop_all = assisipy_utils.mgmt.stopper:main']]setup(    name=\"assisipy_utils\",    version=find_version('assisipy_utils', '__init__.py'),    packages=find_packages(exclude=[\"doc\"]),    description=\"Utilities for simulations with ASSISI-playground.\",    long_description=long_description,    url='http://assisi-project.eu/',    author='Rob Mills, FCUL',    author_email='rob.mills@fc.ul.pt',    license='LGPL',    classifiers=[        'Development Status :: 5 - Production/Stable',        'Intended Audience :: Developers',        'Topic :: Scientific/Engineering :: Artificial Life',        'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',        'Programming Language :: Python :: 2.7'    ],    keywords='assisi, assisibf, collective systems',    install_requires = [],    entry_points     = {        'console_scripts': console_scripts,    },","code_tokens":["def","find","version","(","*","file","paths",")",":","version","file","=","read","(","*","file","paths",")","version","match","=","re",".","search","(","r","\"","^","version","=","[","'","\\","\"","]","(","[","^","'","\\","\"","]","*",")","[","'","\\","\"","]","\"",",","version","file",",","re",".","m",")","if","version","match",":","return","version","match",".","group","(","1",")","raise","runtime","error","(","\"","unable","to","find","version","string",".","\"",")","long","description","=","read","(","'","description",".","rst","'",")","console","scripts","=","[","[","'","exec","sim","timed","=","assisipy","utils",".","mgmt",".","exec","sim","timed",":","main","'","]",",","[","'","exec","phys","timed","=","assisipy","utils",".","mgmt",".","exec","physonly","timed",":","main","'","]",",","[","'","run","multiagent","=","assisipy","utils",".","mgmt",".","run","multiagent",":","main","'","]",",","[","'","test","assisi","dep","=","assisipy","utils",".","validate",".","test","conn",":","main","'","]",",","[","'","layout","assisi","nbg","=","assisipy","utils",".","validate",".","draw","casu","graph",":","main","'","]",",","[","'","show","assisi","dep","test","=","assisipy","utils",".","validate",".","show","conntest","results",":","main","'","]",",","[","'","assisi","stop","all","=","assisipy","utils",".","mgmt",".","stopper",":","main","'","]","]","setup","(","name","=","\"","assisipy","utils","\"",",","version","=","find","version","(","'","assisipy","utils","'",",","'","init",".","py","'",")",",","packages","=","find","packages","(","exclude","=","[","\"","doc","\"","]",")",",","description","=","\"","utilities","for","simulations","with","assisi","-","playground",".","\"",",","long","description","=","long","description",",","url","=","'","'",",","author","=","'","rob","mills",",","fcul","'",",","author","email","=","'","rob",".","mills","@","fc",".","ul",".","pt","'",",","license","=","'","lgpl","'",",","classifiers","=","[","'","development","status",":",":","5","-","production","/","stable","'",",","'","intended","audience",":",":","developers","'",",","'","topic",":",":","scientific","/","engineering",":",":","artificial","life","'",",","'","license",":",":","osi","approved",":",":","gnu","library","or","lesser","general","public","license","(","lgpl",")","'",",","'","programming","language",":",":","python",":",":","2",".","7","'","]",",","keywords","=","'","assisi",",","assisibf",",","collective","systems","'",",","install","requires","=","[","]",",","entry","points","=","{","'","console","scripts","'",":","console","scripts",",","}",","],"func_name":"find_version","func_name_tokens":["find","version"],"docstring":"source: https://github.com/jeffknupp/sandman/blob/develop/setup.py\nsetting up entry points to code within the python package - hopefully..\nThe project URL.\nAuthor details\nRun-time dependencies (will be installed by pip)\nworking with dev version so disable req for now\nremoving spec from here to distribute the examples, since it is\nerror-prone to specify all directories here. instead, the MANIFEST.in\nfile is used (see http://stackoverflow.com/a/1857436)","docstring_tokens":["source",":","setting","up","entry","points","to","code","within","the","python","package","-","hopefully",".",".","the","project","url",".","author","details","run","-","time","dependencies","(","will","be","installed","by","pip",")","working","with","dev","version","so","disable","req","for","now","removing","spec","from","here","to","distribute","the","examples",",","since","it","is","error","-","prone","to","specify","all","directories","here",".","instead",",","the","manifest",".","in","file","is","used","(","see",")"],"query":"Including non-Python files with setup.py","query_tokens":["including","non","-","python","files","with","setup",".","py"]}
{"code":"def get_merge_commit(commit, branch=\"master\"):    commit_range = \"{}..{}\".format(commit, branch)    ancestry_paths = git.rev_list(commit_range, ancestry_path=True).splitlines()    first_parents = git.rev_list(commit_range, first_parent=True).splitlines()    both = set(ancestry_paths) & set(first_parents)    for commit_hash in reversed(ancestry_paths):        if commit_hash in both:            return repo.commit(commit_hash)    msg = \"No merge commit for {commit} in {branch}!\".format(        commit=commit, branch=branch,    )    raise DoesNotExist(msg, commit, branch)","code_tokens":["def","get","merge","commit","(","commit",",","branch","=","\"","master","\"",")",":","commit","range","=","\"","{","}",".",".","{","}","\"",".","format","(","commit",",","branch",")","ancestry","paths","=","git",".","rev","list","(","commit","range",",","ancestry","path","=","true",")",".","splitlines","(",")","first","parents","=","git",".","rev","list","(","commit","range",",","first","parent","=","true",")",".","splitlines","(",")","both","=","set","(","ancestry","paths",")","&","set","(","first","parents",")","for","commit","hash","in","reversed","(","ancestry","paths",")",":","if","commit","hash","in","both",":","return","repo",".","commit","(","commit","hash",")","msg","=","\"","no","merge","commit","for","{","commit","}","in","{","branch","}","!","\"",".","format","(","commit","=","commit",",","branch","=","branch",",",")","raise","does","not","exist","(","msg",",","commit",",","branch",")"],"func_name":"get_merge_commit","func_name_tokens":["get","merge","commit"],"docstring":"Given a commit that was merged into the given branch, return the merge commit    for that event.    http://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit\nno merge commit!","docstring_tokens":["given","a","commit","that","was","merged","into","the","given","branch",",","return","the","merge","commit","for","that","event",".","no","merge","commit","!"],"query":"Find merge commit which include a specific commit","query_tokens":["find","merge","commit","which","include","a","specific","commit"]}
{"code":"def base64_url_decode_php_style(inp):    import base64    padding_factor = (4 - len(inp) % 4) % 4    inp += \"=\" * padding_factor    return base64.b64decode(unicode(inp).translate(        dict(zip(map(ord, u'-_'), u'+/'))))","code_tokens":["def","base64","url","decode","php","style","(","inp",")",":","import","base64","padding","factor","=","(","4","-","len","(","inp",")","%","4",")","%","4","inp","+","=","\"","=","\"","*","padding","factor","return","base64",".","b64decode","(","unicode","(","inp",")",".","translate","(","dict","(","zip","(","map","(","ord",",","u","'","-","'",")",",","u","'","+","/","'",")",")",")",")"],"func_name":"base64_url_decode_php_style","func_name_tokens":["base64","url","decode","php","style"],"docstring":"PHP follows a slightly different protocol for base64 url decode.    For a full explanation see:    http://stackoverflow.com/questions/3302946/how-to-base64-url-decode-in-python    and    http://sunilarora.org/parsing-signedrequest-parameter-in-python-bas","docstring_tokens":["php","follows","a","slightly","different","protocol","for","base64","url","decode",".","for","a","full","explanation","see",":","and"],"query":"How to decode base64 url in python?","query_tokens":["how","to","decode","base64","url","in","python","?"]}
{"code":"    def __get__(self, instance, owner):        self._instance = instance        return self","code_tokens":["def","get","(","self",",","instance",",","owner",")",":","self",".","instance","=","instance","return","self"],"func_name":"__get__","func_name_tokens":["get"],"docstring":"We have to implement __get__ because otherwise, we don't have a\nchance to bind to the instance self._func was bound to. See the\nfollowing SO answer: https://stackoverflow.com/a/22555978/675311","docstring_tokens":["we","have","to","implement","get","because","otherwise",",","we","don","'","t","have","a","chance","to","bind","to","the","instance","self",".","func","was","bound","to",".","see","the","following","so","answer",":"],"query":"Callable object decorator applied to method doesn't get self argument on input","query_tokens":["callable","object","decorator","applied","to","method","doesn","'","t","get","self","argument","on","input"]}
{"code":"    def clean_thumbnail(self):        thumb = self.cleaned_data.get('thumbnail')        if thumb and thumb != False:            try:                if thumb._size > 2 * 1024 * 1024:                    raise forms.ValidationError(\"That file is a bit big - please use one under 2mb\")                return thumb            except AttributeError:                return thumb","code_tokens":["def","clean","thumbnail","(","self",")",":","thumb","=","self",".","cleaned","data",".","get","(","'","thumbnail","'",")","if","thumb","and","thumb","!","=","false",":","try",":","if","thumb",".","size",">","2","*","1024","*","1024",":","raise","forms",".","validation","error","(","\"","that","file","is","a","bit","big","-","please","use","one","under","2mb","\"",")","return","thumb","except","attribute","error",":","return","thumb"],"func_name":"clean_thumbnail","func_name_tokens":["clean","thumbnail"],"docstring":"ensure that people can't upload a HUGE file\nhopefully we can top and tail this with a LimitRequestBody setting in\napache (http://stackoverflow.com/a/6195637/1308104)","docstring_tokens":["ensure","that","people","can","'","t","upload","a","huge","file","hopefully","we","can","top","and","tail","this","with","a","limit","request","body","setting","in","apache","(",")"],"query":"Max image size on file upload","query_tokens":["max","image","size","on","file","upload"]}
{"code":"def get_identical_queries(request: HttpRequest, sql: str,                          sitewide: bool = False) -> List[Query]:    if sitewide:        all_queries = get_all_sitewide_queries()    else:        all_queries = get_all_queries(request)    identical_queries = all_queries.filter(sql_hash=hash64(sql))    return [q for q in identical_queries if q.sql == sql]@user_passes_test(is_clinician)","code_tokens":["def","get","identical","queries","(","request",":","http","request",",","sql",":","str",",","sitewide",":","bool","=","false",")","-",">","list","[","query","]",":","if","sitewide",":","all","queries","=","get","all","sitewide","queries","(",")","else",":","all","queries","=","get","all","queries","(","request",")","identical","queries","=","all","queries",".","filter","(","sql","hash","=","hash64","(","sql",")",")","return","[","q","for","q","in","identical","queries","if","q",".","sql","=","=","sql","]","@","user","passes","test","(","is","clinician",")"],"func_name":"get_identical_queries","func_name_tokens":["get","identical","queries"],"docstring":"Returns all queries that are identical to the SQL provided.    This saves us creating a new query when one exists already that's    identical.    We check by hash.    Args:        request: the :class:`django.http.request.HttpRequest`        sql: SQL text        sitewide: check sitewide, rather than user-specific, queries?    Returns:        list: :class:`crate_anon.crateweb.research.models.Query` objects\n- 2017-02-03: we had a problem here, in which the parameter was sent to\nSQL Server as type NTEXT, but the field \"sql\" is NVARCHAR(MAX), leading\nto \"The data types nvarchar(max) and ntext are incompatible in the\nequal to operator.\"\n- The Django field type TextField is converted to NVARCHAR(MAX) by\ndjango-pyodbc-azure, in sql_server/pyodbc/base.py, also at [1].\n- That seems fine; NVARCHAR(MAX) seems more capable than NTEXT.\nNTEXT is deprecated.\n- Error is reproducible with\n... WHERE sql = CAST('hello' AS NTEXT) ...\n- The order of the types in the error message matches the order in the\nSQL statement.\n- A solution would be to cast the parameter as\nCAST(some_parameter AS NVARCHAR(MAX))\n- Fixed by upgrading pyodbc from 3.1.1 to 4.0.3\n- Added to FAQ\n- WARNING: the problem came back with pyodbc==4.0.6, but not fixed again\nby downgrading to 4.0.3\n- See also [2].\n- An alternative solution would not be to compare on the long text, but\nstore and compare on a hash of it.\n- The problem is that either pyodbc or ODBC itself, somehow, is sending\nthe string parameter as NTEXT.\nSimilar Perl problem: [3].\n- In pyodbc, the key functions are:\ncursor.cpp: static PyObject* execute(...)\n-> params.cpp: bool PrepareAndBind(...)\n-> GetParameterInfo  // THIS ONE\nParameter will be of type str.\nThis will fail for PyBytes_Check [4].\nThis will match for PyUnicode_Check [5].\nThus:\n-> GetUnicodeInfo\n... and depending on the string length of the\nparameter, this returns either\nSQL_WVARCHAR -> NVARCHAR on SQL Server [6], for short strings\nnoqa\nSQL_WLONGVARCHAR -> NTEXT on SQL Server [6], for long strings\nnoqa\n... and the length depends on\n-> connection.h: cur->cnxn->GetMaxLength(info.ValueType);\nnoqa\n-> BindParameter\nin cursor.cpp\n- Now we also have pyodbc docs: [7].\n- Anyway, the upshot is that there is some unpredictabilty in sending\nvery long parameters... the intermittency would be explained by some\ndependency on string length.\n- Empirically, it fails somewhere around 1,900 characters.\n- Could switch away from pyodbc, e.g. to Django-mssql [8, 9].\nBut, as per the CRATE manual, there were version incompatibilities\nhere. Tried again with v1.8, but it gave configuration errors\n(ADODB.Connection; Provider cannot be found. It may not be properly\ninstalled.) Anyway, pyodbc is good enough for SQLAlchemy.\n[1] https://github.com/michiya/django-pyodbc-azure/blob/azure-1.10/sql_server/pyodbc/base.py\nnoqa\n[2] https://github.com/mkleehammer/pyodbc/blob/master/tests2/informixtests.py\nnoqa\n[3] http://stackoverflow.com/questions/13090907\n[4] https://docs.python.org/3/c-api/bytes.html\n[5] https://docs.python.org/3/c-api/unicode.html\n[6] https://documentation.progress.com/output/DataDirect/DataDirectCloud/index.html\nnoqa\n[7] https://github.com/mkleehammer/pyodbc/wiki/Data-Types\n[8] https://docs.djangoproject.com/en/1.10/ref/databases/\nusing-a-3rd-party-database-backend\nnoqa\n[9] https://django-mssql.readthedocs.io/en/latest/\nScrew it, let's use a hash. We can use our hash64() function and\na Django BigIntegerField.\nNow eliminate any chance of errors via hash collisions by double-checking\nthe Python objects:\nnoinspection PyUnusedLocal","docstring_tokens":["returns","all","queries","that","are","identical","to","the","sql","provided",".","this","saves","us","creating","a","new","query","when","one","exists","already","that","'","s","identical",".","we","check","by","hash",".","args",":","request",":","the",":","class",":","`","django",".","http",".","request",".","http","request","`","sql",":","sql","text","sitewide",":","check","sitewide",",","rather","than","user","-","specific",",","queries","?","returns",":","list",":",":","class",":","`","crate","anon",".","crateweb",".","research",".","models",".","query","`","objects","-","2017","-","02","-","03",":","we","had","a","problem","here",",","in","which","the","parameter","was","sent","to","sql","server","as","type","ntext",",","but","the","field","\"","sql","\"","is","nvarchar","(","max",")",",","leading","to","\"","the","data","types","nvarchar","(","max",")","and","ntext","are","incompatible","in","the","equal","to","operator",".","\"","-","the","django","field","type","text","field","is","converted","to","nvarchar","(","max",")","by","django","-","pyodbc","-","azure",",","in","sql","server","/","pyodbc","/","base",".","py",",","also","at","[","1","]",".","-","that","seems","fine",";","nvarchar","(","max",")","seems","more","capable","than","ntext",".","ntext","is","deprecated",".","-","error","is","reproducible","with",".",".",".","where","sql","=","cast","(","'","hello","'","as","ntext",")",".",".",".","-","the","order","of","the","types","in","the","error","message","matches","the","order","in","the","sql","statement",".","-","a","solution","would","be","to","cast","the","parameter","as","cast","(","some","parameter","as","nvarchar","(","max",")",")","-","fixed","by","upgrading","pyodbc","from","3",".","1",".","1","to","4",".","0",".","3","-","added","to","faq","-","warning",":","the","problem","came","back","with","pyodbc","=","=","4",".","0",".","6",",","but","not","fixed","again","by","downgrading","to","4",".","0",".","3","-","see","also","[","2","]",".","-","an","alternative","solution","would","not","be","to","compare","on","the","long","text",",","but","store","and","compare","on","a","hash","of","it",".","-","the","problem","is","that","either","pyodbc","or","odbc","itself",",","somehow",",","is","sending","the","string","parameter","as","ntext",".","similar","perl","problem",":","[","3","]",".","-","in","pyodbc",",","the","key","functions","are",":","cursor",".","cpp",":","static","py","object","*","execute","(",".",".",".",")","-",">","params",".","cpp",":","bool","prepare","and","bind","(",".",".",".",")","-",">","get","parameter","info","/","/","this","one","parameter","will","be","of","type","str",".","this","will","fail","for","py","bytes","check","[","4","]",".","this","will","match","for","py","unicode","check","[","5","]",".","thus",":","-",">","get","unicode","info",".",".",".","and","depending","on","the","string","length","of","the","parameter",",","this","returns","either","sql","wvarchar","-",">","nvarchar","on","sql","server","[","6","]",",","for","short","strings","noqa","sql","wlongvarchar","-",">","ntext","on","sql","server","[","6","]",",","for","long","strings","noqa",".",".",".","and","the","length","depends","on","-",">","connection",".","h",":","cur","-",">","cnxn","-",">","get","max","length","(","info",".","value","type",")",";","noqa","-",">","bind","parameter","in","cursor",".","cpp","-","now","we","also","have","pyodbc","docs",":","[","7","]",".","-","anyway",",","the","upshot","is","that","there","is","some","unpredictabilty","in","sending","very","long","parameters",".",".",".","the","intermittency","would","be","explained","by","some","dependency","on","string","length",".","-","empirically",",","it","fails","somewhere","around","1",",","900","characters",".","-","could","switch","away","from","pyodbc",",","e",".","g",".","to","django","-","mssql","[","8",",","9","]",".","but",",","as","per","the","crate","manual",",","there","were","version","incompatibilities","here",".","tried","again","with","v1",".","8",",","but","it","gave","configuration","errors","(","adodb",".","connection",";","provider","cannot","be","found",".","it","may","not","be","properly","installed",".",")","anyway",",","pyodbc","is","good","enough","for","sql","alchemy",".","[","1","]","noqa","[","2","]","noqa","[","3","]","[","4","]","[","5","]","[","6","]","noqa","[","7","]","[","8","]","using","-","a","-","3rd","-","party","-","database","-","backend","noqa","[","9","]","screw","it",",","let","'","s","use","a","hash",".","we","can","use","our","hash64","(",")","function","and","a","django","big","integer","field",".","now","eliminate","any","chance","of","errors","via","hash","collisions","by","double","-","checking","the","python","objects",":","noinspection","py","unused","local"],"query":"DBI: bind_param casts string to ntext -> nvarchar(max) and ntext are incompatible","query_tokens":["dbi",":","bind","param","casts","string","to","ntext","-",">","nvarchar","(","max",")","and","ntext","are","incompatible"]}
{"code":"class Command(BaseCommand):    help = 'To backup the blog using django-import-export!'    def add_arguments(self, parser):        parser.add_argument(            'backup',            help='To backup the blog using django-import-export!'        )","code_tokens":["class","command","(","base","command",")",":","help","=","'","to","backup","the","blog","using","django","-","import","-","export","!","'","def","add","arguments","(","self",",","parser",")",":","parser",".","add","argument","(","'","backup","'",",","help","=","'","to","backup","the","blog","using","django","-","import","-","export","!","'",")"],"func_name":"Command","func_name_tokens":["command"],"docstring":"Refferences:        - http://stackoverflow.com/a/11789141/3445802        - http://stackoverflow.com/a/3287063/6396981    See alseo:        - https://docs.djangoproject.com/es/1.9/howto/custom-management-commands/    *) If you work with `hosting`, you can setup on `Cron Jobs`,        and setup your time with command:    source /path/to/yourenv/bin/activate && cd /path/to/yourenv/yourproject && ./manage.py autobackup yes    *) But, if you work with VPS or SERVER, please following this command bellow:    $ sudo crontab -e\nSetup to daily method.    [minute] [hour] [date] [month] [year]    59 23 * * * source /path/to/yourenv/bin/activate && cd /path/to/yourenv/yourproject && ./manage.py autobackup yes","docstring_tokens":["refferences",":","-","-","see","alseo",":","-","*",")","if","you","work","with","`","hosting","`",",","you","can","setup","on","`","cron","jobs","`",",","and","setup","your","time","with","command",":","source","/","path","/","to","/","yourenv","/","bin","/","activate","&","&","cd","/","path","/","to","/","yourenv","/","yourproject","&","&",".","/","manage",".","py","autobackup","yes","*",")","but",",","if","you","work","with","vps","or","server",",","please","following","this","command","bellow",":","$","sudo","crontab","-","e","setup","to","daily","method",".","[","minute","]","[","hour","]","[","date","]","[","month","]","[","year","]","59","23","*","*","*","source","/","path","/","to","/","yourenv","/","bin","/","activate","&","&","cd","/","path","/","to","/","yourenv","/","yourproject","&","&",".","/","manage",".","py","autobackup","yes"],"query":"Best way to delete a django model instance after a certain date","query_tokens":["best","way","to","delete","a","django","model","instance","after","a","certain","date"]}
{"code":"def load_config( args ):    if len(args) == 0:        print \"no config file or command given\", args        sys.exit(1)    variables = {        'HAS_LOGIN'                 : False,        'USE_SSL'                   : False,        'USE_ENCRYPTION'            : False,        'SSL_KEY_LENGTH'            : DEFAULT_SSL_KEY_SIZE,        'SERVER_PORT'               : DEFAULT_SERVER_PORT,        'SERVER_IP'                 : DEFAULT_SERVER_IP,        'DEBUG'                     : True,        'MAX_CONTENT_LENGTH'        : MAX_CONTENT_LENGTH,        'LIBRE_POINTS'              : librepoints,        'LIBRE_PATHS'               : [            '/api',            '/favicon.ico'        ],    }    INFOLDER = os.path.abspath( args[0] )    if not os.path.exists( INFOLDER ):        print \"data folder %s does not exists\" % INFOLDER        sys.exit(1)    if not os.path.isdir( INFOLDER ):        print \"data folder %s is not a folder\" % INFOLDER        sys.exit(1)    variables['INFOLDER']       = INFOLDER    SECRET_FILE        = os.path.join( INFOLDER, \"config.secret\" )    if not os.path.exists( SECRET_FILE ):        print \"secret file %s does not exists. CREATING\" % SECRET_FILE        secret = os.urandom(24)        open(SECRET_FILE, 'wb').write(secret)    SECRET_KEY         =  open(SECRET_FILE     , 'rb').read().strip()    print \"SECRET KEY  \", repr(SECRET_KEY)    variables['SECRET_FILE'] = SECRET_FILE    variables['SECRET_KEY' ] = SECRET_KEY    config_file      = os.path.join( INFOLDER, 'config.py'     )    if not os.path.exists( config_file ):        print \"config file %s does not exists. COPYING DEFAULT\" % config_file        config_template = os.path.join(dir_path, 'config.template')        shutil.copy2(config_template, config_file)    print \"loading config\", config_file    lcl = {}    execfile(config_file, lcl, lcl)    for k in lcl:        if k in variables:            print \"updating key %s from %s to %s\" % (k, str(variables[k]), str(lcl[k]))            variables[k] = lcl[k]    variables['IDEBUG'    ] = IDEBUG    variables['getManager'] = getManager    variables['INTERFACE' ] = interface    app.secret_key                   = variables['SECRET_KEY']    app.debug                        = variables['DEBUG'     ]    for k in variables:        app.config[k] = variables[k]    interface.DEBUG = IDEBUG","code_tokens":["def","load","config","(","args",")",":","if","len","(","args",")","=","=","0",":","print","\"","no","config","file","or","command","given","\"",",","args","sys",".","exit","(","1",")","variables","=","{","'","has","login","'",":","false",",","'","use","ssl","'",":","false",",","'","use","encryption","'",":","false",",","'","ssl","key","length","'",":","default","ssl","key","size",",","'","server","port","'",":","default","server","port",",","'","server","ip","'",":","default","server","ip",",","'","debug","'",":","true",",","'","max","content","length","'",":","max","content","length",",","'","libre","points","'",":","librepoints",",","'","libre","paths","'",":","[","'","/","api","'",",","'","/","favicon",".","ico","'","]",",","}","infolder","=","os",".","path",".","abspath","(","args","[","0","]",")","if","not","os",".","path",".","exists","(","infolder",")",":","print","\"","data","folder","%","s","does","not","exists","\"","%","infolder","sys",".","exit","(","1",")","if","not","os",".","path",".","isdir","(","infolder",")",":","print","\"","data","folder","%","s","is","not","a","folder","\"","%","infolder","sys",".","exit","(","1",")","variables","[","'","infolder","'","]","=","infolder","secret","file","=","os",".","path",".","join","(","infolder",",","\"","config",".","secret","\"",")","if","not","os",".","path",".","exists","(","secret","file",")",":","print","\"","secret","file","%","s","does","not","exists",".","creating","\"","%","secret","file","secret","=","os",".","urandom","(","24",")","open","(","secret","file",",","'","wb","'",")",".","write","(","secret",")","secret","key","=","open","(","secret","file",",","'","rb","'",")",".","read","(",")",".","strip","(",")","print","\"","secret","key","\"",",","repr","(","secret","key",")","variables","[","'","secret","file","'","]","=","secret","file","variables","[","'","secret","key","'","]","=","secret","key","config","file","=","os",".","path",".","join","(","infolder",",","'","config",".","py","'",")","if","not","os",".","path",".","exists","(","config","file",")",":","print","\"","config","file","%","s","does","not","exists",".","copying","default","\"","%","config","file","config","template","=","os",".","path",".","join","(","dir","path",",","'","config",".","template","'",")","shutil",".","copy2","(","config","template",",","config","file",")","print","\"","loading","config","\"",",","config","file","lcl","=","{","}","execfile","(","config","file",",","lcl",",","lcl",")","for","k","in","lcl",":","if","k","in","variables",":","print","\"","updating","key","%","s","from","%","s","to","%","s","\"","%","(","k",",","str","(","variables","[","k","]",")",",","str","(","lcl","[","k","]",")",")","variables","[","k","]","=","lcl","[","k","]","variables","[","'","idebug","'","]","=","idebug","variables","[","'","get","manager","'","]","=","get","manager","variables","[","'","interface","'","]","=","interface","app",".","secret","key","=","variables","[","'","secret","key","'","]","app",".","debug","=","variables","[","'","debug","'","]","for","k","in","variables",":","app",".","config","[","k","]","=","variables","[","k","]","interface",".","debug","=","idebug"],"func_name":"load_config","func_name_tokens":["load","config"],"docstring":"print \"lcl\", lcl, \"\\n\"\nprint \"config\", app.config, \"\\n\"\nhttp://stackoverflow.com/questions/9767585/insert-static-files-literally-into-jinja-templates-without-parsing-them","docstring_tokens":["print","\"","lcl","\"",",","lcl",",","\"","\\","n","\"","print","\"","config","\"",",","app",".","config",",","\"","\\","n","\""],"query":"Insert static files literally into Jinja templates without parsing them","query_tokens":["insert","static","files","literally","into","jinja","templates","without","parsing","them"]}
{"code":"def getNode(template, context=Context(), name='subject'):\tfor node in template:\t\tif isinstance(node, BlockNode) and node.name == name:\t\t\treturn node.render(context)\t\telif isinstance(node, ExtendsNode):\t\t\treturn getNode(node.nodelist, context, name)\traise Exception(\"Node '%s' could not be found in template.\" % name)","code_tokens":["def","get","node","(","template",",","context","=","context","(",")",",","name","=","'","subject","'",")",":","for","node","in","template",":","if","isinstance","(","node",",","block","node",")","and","node",".","name","=","=","name",":","return","node",".","render","(","context",")","elif","isinstance","(","node",",","extends","node",")",":","return","get","node","(","node",".","nodelist",",","context",",","name",")","raise","exception","(","\"","node","'","%","s","'","could","not","be","found","in","template",".","\"","%","name",")"],"func_name":"getNode","func_name_tokens":["get","node"],"docstring":"Get django block contents from a template.\thttp://stackoverflow.com/questions/2687173/\tdjango-how-can-i-get-a-block-from-a-template","docstring_tokens":["get","django","block","contents","from","a","template",".","django","-","how","-","can","-","i","-","get","-","a","-","block","-","from","-","a","-","template"],"query":"Django: How can I get a block from a template?","query_tokens":["django",":","how","can","i","get","a","block","from","a","template","?"]}
{"code":"def GetStack():  trc = 'Traceback (most recent call last):\\n'  stackstr = (      trc + ''.join(traceback.format_list(          traceback.extract_stack()[:-2])) + '  ' +      traceback.format_exc().lstrip(trc))  return stackstr","code_tokens":["def","get","stack","(",")",":","trc","=","'","traceback","(","most","recent","call","last",")",":","\\n","'","stackstr","=","(","trc","+","'","'",".","join","(","traceback",".","format","list","(","traceback",".","extract","stack","(",")","[",":","-","2","]",")",")","+","'","'","+","traceback",".","format","exc","(",")",".","lstrip","(","trc",")",")","return","stackstr"],"func_name":"GetStack","func_name_tokens":["get","stack"],"docstring":"Get full_stack; see http://stackoverflow.com/questions/6086976","docstring_tokens":["get","full","stack",";","see"],"query":"How to get a complete exception stack trace in Python","query_tokens":["how","to","get","a","complete","exception","stack","trace","in","python"]}
{"code":"def _windows_write_string(s, out):","code_tokens":["def","windows","write","string","(","s",",","out",")",":"],"func_name":"_windows_write_string","func_name_tokens":["windows","write","string"],"docstring":"Returns True if the string was written using special methods,    False if it has yet to be written out.\nAdapted from http://stackoverflow.com/a/3259271/35070    import ctypes    import ctypes.wintypes    WIN_OUTPUT_IDS = {        1: -11,        2: -12,    }    try:        fileno = out.fileno()    except AttributeError:\nIf the output stream doesn't have a fileno, it's virtual        return False    except io.UnsupportedOperation:\nSome strange Windows pseudo files?        return False    if fileno not in WIN_OUTPUT_IDS:        return False    GetStdHandle = ctypes.WINFUNCTYPE(        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(        (b'GetStdHandle', ctypes.windll.kernel32))    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])    WriteConsoleW = ctypes.WINFUNCTYPE(        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),        ctypes.wintypes.LPVOID)((b'WriteConsoleW', ctypes.windll.kernel32))    written = ctypes.wintypes.DWORD(0)    GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((b'GetFileType', ctypes.windll.kernel32))    FILE_TYPE_CHAR = 0x0002    FILE_TYPE_REMOTE = 0x8000    GetConsoleMode = ctypes.WINFUNCTYPE(        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,        ctypes.POINTER(ctypes.wintypes.DWORD))(        (b'GetConsoleMode', ctypes.windll.kernel32))    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value","docstring_tokens":["returns","true","if","the","string","was","written","using","special","methods",",","false","if","it","has","yet","to","be","written","out",".","adapted","from","import","ctypes","import","ctypes",".","wintypes","win","output","ids","=","{","1",":","-","11",",","2",":","-","12",",","}","try",":","fileno","=","out",".","fileno","(",")","except","attribute","error",":","if","the","output","stream","doesn","'","t","have","a","fileno",",","it","'","s","virtual","return","false","except","io",".","unsupported","operation",":","some","strange","windows","pseudo","files","?","return","false","if","fileno","not","in","win","output","ids",":","return","false","get","std","handle","=","ctypes",".","winfunctype","(","ctypes",".","wintypes",".","handle",",","ctypes",".","wintypes",".","dword",")","(","(","b","'","get","std","handle","'",",","ctypes",".","windll",".","kernel32",")",")","h","=","get","std","handle","(","win","output","ids","[","fileno","]",")","write","console","w","=","ctypes",".","winfunctype","(","ctypes",".","wintypes",".","bool",",","ctypes",".","wintypes",".","handle",",","ctypes",".","wintypes",".","lpwstr",",","ctypes",".","wintypes",".","dword",",","ctypes",".","pointer","(","ctypes",".","wintypes",".","dword",")",",","ctypes",".","wintypes",".","lpvoid",")","(","(","b","'","write","console","w","'",",","ctypes",".","windll",".","kernel32",")",")","written","=","ctypes",".","wintypes",".","dword","(","0",")","get","file","type","=","ctypes",".","winfunctype","(","ctypes",".","wintypes",".","dword",",","ctypes",".","wintypes",".","dword",")","(","(","b","'","get","file","type","'",",","ctypes",".","windll",".","kernel32",")",")","file","type","char","=","0x0002","file","type","remote","=","0x8000","get","console","mode","=","ctypes",".","winfunctype","(","ctypes",".","wintypes",".","bool",",","ctypes",".","wintypes",".","handle",",","ctypes",".","pointer","(","ctypes",".","wintypes",".","dword",")",")","(","(","b","'","get","console","mode","'",",","ctypes",".","windll",".","kernel32",")",")","invalid","handle","value","=","ctypes",".","wintypes",".","dword","(","-","1",")",".","value"],"query":"Windows cmd encoding change causes Python crash","query_tokens":["windows","cmd","encoding","change","causes","python","crash"]}
{"code":"    def connectedInternet():        try:            host = socket.gethostbyname(\"www.google.com\")            s = socket.create_connection((host, 80), 2)            return True        except:            pass        return False        @staticmethod","code_tokens":["def","connected","internet","(",")",":","try",":","host","=","socket",".","gethostbyname","(","\"","\"",")","s","=","socket",".","create","connection","(","(","host",",","80",")",",","2",")","return","true","except",":","pass","return","false","@","staticmethod"],"func_name":"connectedInternet","func_name_tokens":["connected","internet"],"docstring":"from http://stackoverflow.com/questions/20913411/test-if-an-internet-connection-is-present-in-python\nsee if we can resolve the host name -- tells us if there is\na DNS listening\nconnect to the host -- tells us if the host is actually\nreachable","docstring_tokens":["from","see","if","we","can","resolve","the","host","name","-","-","tells","us","if","there","is","a","dns","listening","connect","to","the","host","-","-","tells","us","if","the","host","is","actually","reachable"],"query":"Test if an internet connection is present in python","query_tokens":["test","if","an","internet","connection","is","present","in","python"]}
{"code":"def check_url(url):\r    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]\r\r    host, path = urlparse.urlparse(url)[1:3]    # elems [1] and [2]\r    try:\r        conn = httplib.HTTPConnection(host)\r        conn.request('HEAD', path)\r        return conn.getresponse().status in good_codes\r    except StandardError:\r        return None\r\r","code_tokens":["def","check","url","(","url",")",":","good","codes","=","[","httplib",".","ok",",","httplib",".","found",",","httplib",".","moved","permanently","]","host",",","path","=","urlparse",".","urlparse","(","url",")","[","1",":","3","]","#","elems","[","1","]","and","[","2","]","try",":","conn","=","httplib",".","http","connection","(","host",")","conn",".","request","(","'","head","'",",","path",")","return","conn",".","getresponse","(",")",".","status","in","good","codes","except","standard","error",":","return","none"],"func_name":"check_url","func_name_tokens":["check","url"],"docstring":"Check if a URL exists without downloading the whole file.\r    We only check the URL header.\nsee also http://stackoverflow.com/questions/2924422\nhttp://stackoverflow.com/questions/1140661\nEncryption Functions","docstring_tokens":["check","if","a","url","exists","without","downloading","the","whole","file",".","we","only","check","the","url","header",".","see","also","encryption","functions"],"query":"What’s the best way to get an HTTP response code from a URL?","query_tokens":["what","’","s","the","best","way","to","get","an","http","response","code","from","a","url","?"]}
{"code":"import appscriptimport os.pathIMAGE_DATA = [  {    'canvas': 'gradle',    'layers': [1,],    'out': 'gradle-rearranged.png',  },  {    'canvas': 'gradle',    'layers': [1, 2,],    'out': 'gradle-r-dot-java.png',  },  {    'canvas': 'gradle',    'layers': [1, 2, 3,],    'out': 'gradle-android-library-1.png',  },  {    'canvas': 'gradle',    'layers': [1, 2, 3, 4,],    'out': 'gradle-android-library-2.png',  },  {    'canvas': 'gradle',    'layers': [1, 2, 3, 4, 5,],    'out': 'gradle-classes-dot-dex.png',  },  {    'canvas': 'gradle',    'layers': [1, 2, 3, 4, 5, 6,],    'out': 'gradle-android-binary.png',  },  {    'canvas': 'full build',    'layers': [1, 2, 3,],    'out': 'boxes-and-arrows.png',  },  {    'canvas': 'full build',    'layers': [1, 2, 3, 4,],    'out': 'gen-r-txt.png',  },  {    'canvas': 'full build',    'layers': [1, 2, 4, 5,],    'out': 'gen-r-dot-java.png',  },  {    'canvas': 'full build',    'layers': [1, 2, 4, 5, 6,],    'out': 'gen-jar-files.png',  },  {    'canvas': 'full build',    'layers': [1, 2, 4, 5, 6, 7,],    'out': 'gen-dex-files.png',  },  {    'canvas': 'android_binary',    'layers': [1,],    'out': 'android-binary-rules-only.png',  },  {    'canvas': 'android_binary',    'layers': [1, 2,],    'out': 'android-binary-gen-resources.png',  },  {    'canvas': 'android_binary',    'layers': [1, 2, 3,],    'out': 'android-binary-intermediate-dex.png',  },  {    'canvas': 'android_binary',    'layers': [1, 2, 3, 4,],    'out': 'android-binary-uber-classes-dex.png',  },  {    'canvas': 'android_binary',    'layers': [1, 2, 3, 4, 5,],    'out': 'android-binary-done.png',  },  {    'canvas': 'build trace',    'layers': [2, 3,],    'out': 'build-trace.png',  },  {    'canvas': 'abi',    'layers': [1,],    'out': 'abi-graph.png',  },  {    'canvas': 'abi',    'layers': [1, 2, 4,],    'out': 'abi-change-method-body.png',  },  {    'canvas': 'abi',    'layers': [1, 2, 3, 4, 5,],    'out': 'abi-change-method-signature.png',  },  {    'canvas': 'abi',    'layers': [1, 2, 3, 4,],    'out': 'abi-add-unused-public-method.png',  },]def export_images(app, doc, canvas_map, directory):  for data in IMAGE_DATA:    canvas = canvas_map[data['canvas']]    out = os.path.join(directory, data['out'])    num_layers = len(canvas.layers())    enabled_layers = set([num_layers - layer for layer in data['layers']])    app.windows.first().canvas.set(canvas)    for index in range(num_layers):      layer = canvas.layers()[index]      app.set(layer.visible, to=index in enabled_layers)    doc.save(as_='PNG', in_=out)    print out","code_tokens":["import","appscriptimport","os",".","path","image","data","=","[","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","]",",","'","out","'",":","'","gradle","-","rearranged",".","png","'",",","}",",","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","2",",","]",",","'","out","'",":","'","gradle","-","r","-","dot","-","java",".","png","'",",","}",",","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","2",",","3",",","]",",","'","out","'",":","'","gradle","-","android","-","library","-","1",".","png","'",",","}",",","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","]",",","'","out","'",":","'","gradle","-","android","-","library","-","2",".","png","'",",","}",",","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","5",",","]",",","'","out","'",":","'","gradle","-","classes","-","dot","-","dex",".","png","'",",","}",",","{","'","canvas","'",":","'","gradle","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","5",",","6",",","]",",","'","out","'",":","'","gradle","-","android","-","binary",".","png","'",",","}",",","{","'","canvas","'",":","'","full","build","'",",","'","layers","'",":","[","1",",","2",",","3",",","]",",","'","out","'",":","'","boxes","-","and","-","arrows",".","png","'",",","}",",","{","'","canvas","'",":","'","full","build","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","]",",","'","out","'",":","'","gen","-","r","-","txt",".","png","'",",","}",",","{","'","canvas","'",":","'","full","build","'",",","'","layers","'",":","[","1",",","2",",","4",",","5",",","]",",","'","out","'",":","'","gen","-","r","-","dot","-","java",".","png","'",",","}",",","{","'","canvas","'",":","'","full","build","'",",","'","layers","'",":","[","1",",","2",",","4",",","5",",","6",",","]",",","'","out","'",":","'","gen","-","jar","-","files",".","png","'",",","}",",","{","'","canvas","'",":","'","full","build","'",",","'","layers","'",":","[","1",",","2",",","4",",","5",",","6",",","7",",","]",",","'","out","'",":","'","gen","-","dex","-","files",".","png","'",",","}",",","{","'","canvas","'",":","'","android","binary","'",",","'","layers","'",":","[","1",",","]",",","'","out","'",":","'","android","-","binary","-","rules","-","only",".","png","'",",","}",",","{","'","canvas","'",":","'","android","binary","'",",","'","layers","'",":","[","1",",","2",",","]",",","'","out","'",":","'","android","-","binary","-","gen","-","resources",".","png","'",",","}",",","{","'","canvas","'",":","'","android","binary","'",",","'","layers","'",":","[","1",",","2",",","3",",","]",",","'","out","'",":","'","android","-","binary","-","intermediate","-","dex",".","png","'",",","}",",","{","'","canvas","'",":","'","android","binary","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","]",",","'","out","'",":","'","android","-","binary","-","uber","-","classes","-","dex",".","png","'",",","}",",","{","'","canvas","'",":","'","android","binary","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","5",",","]",",","'","out","'",":","'","android","-","binary","-","done",".","png","'",",","}",",","{","'","canvas","'",":","'","build","trace","'",",","'","layers","'",":","[","2",",","3",",","]",",","'","out","'",":","'","build","-","trace",".","png","'",",","}",",","{","'","canvas","'",":","'","abi","'",",","'","layers","'",":","[","1",",","]",",","'","out","'",":","'","abi","-","graph",".","png","'",",","}",",","{","'","canvas","'",":","'","abi","'",",","'","layers","'",":","[","1",",","2",",","4",",","]",",","'","out","'",":","'","abi","-","change","-","method","-","body",".","png","'",",","}",",","{","'","canvas","'",":","'","abi","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","5",",","]",",","'","out","'",":","'","abi","-","change","-","method","-","signature",".","png","'",",","}",",","{","'","canvas","'",":","'","abi","'",",","'","layers","'",":","[","1",",","2",",","3",",","4",",","]",",","'","out","'",":","'","abi","-","add","-","unused","-","public","-","method",".","png","'",",","}",",","]","def","export","images","(","app",",","doc",",","canvas","map",",","directory",")",":","for","data","in","image","data",":","canvas","=","canvas","map","[","data","[","'","canvas","'","]","]","out","=","os",".","path",".","join","(","directory",",","data","[","'","out","'","]",")","num","layers","=","len","(","canvas",".","layers","(",")",")","enabled","layers","=","set","(","[","num","layers","-","layer","for","layer","in","data","[","'","layers","'","]","]",")","app",".","windows",".","first","(",")",".","canvas",".","set","(","canvas",")","for","index","in","range","(","num","layers",")",":","layer","=","canvas",".","layers","(",")","[","index","]","app",".","set","(","layer",".","visible",",","to","=","index","in","enabled","layers",")","doc",".","save","(","as","=","'","png","'",",","in","=","out",")","print","out"],"func_name":"export_images","func_name_tokens":["export","images"],"docstring":"This exports a bunch of images from the base-dependency-diagram.graffle fileusing py-appscript:http://appscript.sourceforge.net/py-appscript/doc/appscript-manual/index.htmlThis example from GitHub was particularly helpful as a template:https://github.com/fikovnik/omnigraffle-export/blob/master/omnigraffle_export/omnigraffle.pyI tried doing this in AppleScript, but that failed miserably:http://stackoverflow.com/questions/25876467/how-to-read-a-property-of-a-value-passed-by-referenceEach entry must have the following properties:  - canvas name of canvas, one of: {'full build', 'circular deps', 'android_binary'}  - layers list of indices of layers to include. 1-based, starting from bottom to top           as displayed in the Canvases column in OmniGraffle.  - out name of file where image should be exported.\ngradle\nfull build\nandroid_binary\nbuild trace\nabi\nEnable the specified set of layers.\nExport the .png.","docstring_tokens":["this","exports","a","bunch","of","images","from","the","base","-","dependency","-","diagram",".","graffle","fileusing","py","-","appscript",":","example","from","git","hub","was","particularly","helpful","as","a","template",":","tried","doing","this","in","apple","script",",","but","that","failed","miserably",":","entry","must","have","the","following","properties",":","-","canvas","name","of","canvas",",","one","of",":","{","'","full","build","'",",","'","circular","deps","'",",","'","android","binary","'","}","-","layers","list","of","indices","of","layers","to","include",".","1","-","based",",","starting","from","bottom","to","top","as","displayed","in","the","canvases","column","in","omni","graffle",".","-","out","name","of","file","where","image","should","be","exported",".","gradle","full","build","android","binary","build","trace","abi","enable","the","specified","set","of","layers",".","export","the",".","png","."],"query":"How to read a property of a value passed by reference?","query_tokens":["how","to","read","a","property","of","a","value","passed","by","reference","?"]}
{"code":"    def connect(dbapi_connection, connection_record):        try:            cursor = dbapi_connection.cursor()            try:                cursor.execute(\"PRAGMA foreign_keys = ON;\")                cursor.execute(\"PRAGMA foreign_keys;\")                if cursor.fetchone()[0] != 1:                    raise Exception()            finally:                cursor.close()        except Exception:            dbapi_connection.close()            raise sqlite3.Error()class BaseDTO (object):    __table_args__ = {        'mysql_engine': 'InnoDB',        'drizzle_engine': 'InnoDB',        'mysql_charset': 'utf8',        }BaseDTO = declarative_base(cls = BaseDTO)","code_tokens":["def","connect","(","dbapi","connection",",","connection","record",")",":","try",":","cursor","=","dbapi","connection",".","cursor","(",")","try",":","cursor",".","execute","(","\"","pragma","foreign","keys","=","on",";","\"",")","cursor",".","execute","(","\"","pragma","foreign","keys",";","\"",")","if","cursor",".","fetchone","(",")","[","0","]","!","=","1",":","raise","exception","(",")","finally",":","cursor",".","close","(",")","except","exception",":","dbapi","connection",".","close","(",")","raise","sqlite3",".","error","(",")","class","base","dto","(","object",")",":","table","args","=","{","'","mysql","engine","'",":","'","inno","db","'",",","'","drizzle","engine","'",":","'","inno","db","'",",","'","mysql","charset","'",":","'","utf8","'",",","}","base","dto","=","declarative","base","(","cls","=","base","dto",")"],"func_name":"connect","func_name_tokens":["connect"],"docstring":"Called once by SQLAlchemy for each new SQLite DB-API connection.        Here is where we issue some PRAGMA statements to configure how we're        going to access the SQLite database.        @param dbapi_connection:            A newly connected raw SQLite DB-API connection.        @param connection_record:            Unused by this method.\n------------------------------------------------------------------------------        Customized declarative base for SQLAlchemy.\nDon't use MyISAM in MySQL. It doesn't support ON DELETE CASCADE.\nDon't use BlitzDB in Drizzle. It doesn't support foreign keys.\nCollate to UTF-8.\n------------------------------------------------------------------------------\nTODO: if using mssql, check it's at least SQL Server 2005\n(LIMIT and OFFSET support is required).\nTODO: if using mysql, check it's at least MySQL 5.0.3\n(nested transactions are required).\nTODO: maybe in mysql check the tables are not myisam?\nTODO: maybe create the database if it doesn't exist?\nTODO: maybe add a method to compact the database?\nhttp://stackoverflow.com/questions/1875885\nhttp://www.sqlite.org/lang_vacuum.html\nhttp://dev.mysql.com/doc/refman/5.1/en/optimize-table.html\nhttp://msdn.microsoft.com/en-us/library/ms174459(v=sql.90).aspx","docstring_tokens":["called","once","by","sql","alchemy","for","each","new","sq","lite","db","-","api","connection",".","here","is","where","we","issue","some","pragma","statements","to","configure","how","we","'","re","going","to","access","the","sq","lite","database",".","@","param","dbapi","connection",":","a","newly","connected","raw","sq","lite","db","-","api","connection",".","@","param","connection","record",":","unused","by","this","method",".","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","customized","declarative","base","for","sql","alchemy",".","don","'","t","use","my","isam","in","my","sql",".","it","doesn","'","t","support","on","delete","cascade",".","don","'","t","use","blitz","db","in","drizzle",".","it","doesn","'","t","support","foreign","keys",".","collate","to","utf","-","8",".","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","todo",":","if","using","mssql",",","check","it","'","s","at","least","sql","server","2005","(","limit","and","offset","support","is","required",")",".","todo",":","if","using","mysql",",","check","it","'","s","at","least","my","sql","5",".","0",".","3","(","nested","transactions","are","required",")",".","todo",":","maybe","in","mysql","check","the","tables","are","not","myisam","?","todo",":","maybe","create","the","database","if","it","doesn","'","t","exist","?","todo",":","maybe","add","a","method","to","compact","the","database","?","(","v","=","sql",".","90",")",".","aspx"],"query":"Execute sql query with Elixir","query_tokens":["execute","sql","query","with","elixir"]}
{"code":"    def string_to_dict(s, separator='=', space='~'):        dict_arr = [x.split(separator) for x in s.split()]        for x in dict_arr:            x[1] = x[1].replace(space, ' ')        return dict(dict_arr)    @staticmethod","code_tokens":["def","string","to","dict","(","s",",","separator","=","'","=","'",",","space","=","'","~","'",")",":","dict","arr","=","[","x",".","split","(","separator",")","for","x","in","s",".","split","(",")","]","for","x","in","dict","arr",":","x","[","1","]","=","x","[","1","]",".","replace","(","space",",","'","'",")","return","dict","(","dict","arr",")","@","staticmethod"],"func_name":"string_to_dict","func_name_tokens":["string","to","dict"],"docstring":"Convert string to dict: http://stackoverflow.com/a/1248990\nConvert a dict to a string","docstring_tokens":["convert","string","to","dict",":","convert","a","dict","to","a","string"],"query":"convert string to dict using list comprehension","query_tokens":["convert","string","to","dict","using","list","comprehension"]}
{"code":"def unisymbol(codePoint):\tif codePoint >= 0x0000 and codePoint <= 0xFFFF:\t\treturn unichr(codePoint)\telif codePoint >= 0x010000 and codePoint <= 0x10FFFF:\t\thighSurrogate = int((codePoint - 0x10000) / 0x400) + 0xD800\t\tlowSurrogate = int((codePoint - 0x10000) % 0x400) + 0xDC00\t\treturn unichr(highSurrogate) + unichr(lowSurrogate)\telse:\t\treturn 'Error'","code_tokens":["def","unisymbol","(","code","point",")",":","if","code","point",">","=","0x0000","and","code","point","<","=","0x","ffff",":","return","unichr","(","code","point",")","elif","code","point",">","=","0x010000","and","code","point","<","=","0x10ffff",":","high","surrogate","=","int","(","(","code","point","-","0x10000",")","/","0x400",")","+","0x","d800","low","surrogate","=","int","(","(","code","point","-","0x10000",")","%","0x400",")","+","0x","dc00","return","unichr","(","high","surrogate",")","+","unichr","(","low","surrogate",")","else",":","return","'","error","'"],"func_name":"unisymbol","func_name_tokens":["unisymbol"],"docstring":"http://mathiasbynens.be/notes/javascript-encoding\nsurrogate-formulae\nhttp://stackoverflow.com/a/13436167/96656","docstring_tokens":["surrogate","-","formulae"],"query":"supplemental codepoints to unicode string in python","query_tokens":["supplemental","codepoints","to","unicode","string","in","python"]}
{"code":"def get_reservations(module, ec2, tags=None, state=None, zone=None):    filters = dict()    if tags is not None:        if type(tags) is str:            try:                tags = literal_eval(tags)            except:                pass        if type(tags) is str:            filters.update({\"tag-key\": tags})        if type(tags) is list:            for x in tags:                if type(x) is dict:                    x = _set_none_to_blank(x)                    filters.update(dict((\"tag:\"+tn, tv) for (tn,tv) in x.iteritems()))                else:                    filters.update({\"tag-key\": x})        if type(tags) is dict:            tags = _set_none_to_blank(tags)            filters.update(dict((\"tag:\"+tn, tv) for (tn,tv) in tags.iteritems()))    if state:        filters.update({'instance-state-name': state})    if zone:        filters.update({'availability-zone': zone})    results = ec2.get_all_instances(filters=filters)    return results","code_tokens":["def","get","reservations","(","module",",","ec2",",","tags","=","none",",","state","=","none",",","zone","=","none",")",":","filters","=","dict","(",")","if","tags","is","not","none",":","if","type","(","tags",")","is","str",":","try",":","tags","=","literal","eval","(","tags",")","except",":","pass","if","type","(","tags",")","is","str",":","filters",".","update","(","{","\"","tag","-","key","\"",":","tags","}",")","if","type","(","tags",")","is","list",":","for","x","in","tags",":","if","type","(","x",")","is","dict",":","x","=","set","none","to","blank","(","x",")","filters",".","update","(","dict","(","(","\"","tag",":","\"","+","tn",",","tv",")","for","(","tn",",","tv",")","in","x",".","iteritems","(",")",")",")","else",":","filters",".","update","(","{","\"","tag","-","key","\"",":","x","}",")","if","type","(","tags",")","is","dict",":","tags","=","set","none","to","blank","(","tags",")","filters",".","update","(","dict","(","(","\"","tag",":","\"","+","tn",",","tv",")","for","(","tn",",","tv",")","in","tags",".","iteritems","(",")",")",")","if","state",":","filters",".","update","(","{","'","instance","-","state","-","name","'",":","state","}",")","if","zone",":","filters",".","update","(","{","'","availability","-","zone","'",":","zone","}",")","results","=","ec2",".","get","all","instances","(","filters","=","filters",")","return","results"],"func_name":"get_reservations","func_name_tokens":["get","reservations"],"docstring":"TODO: filters do not work with tags that have underscores\nif string, we only care that a tag of that name exists\nif list, append each item to filters\nif dict, add the key and value to the filter\nhttp://stackoverflow.com/questions/437511/what-are-the-valid-instancestates-for-the-amazon-ec2-api","docstring_tokens":["todo",":","filters","do","not","work","with","tags","that","have","underscores","if","string",",","we","only","care","that","a","tag","of","that","name","exists","if","list",",","append","each","item","to","filters","if","dict",",","add","the","key","and","value","to","the","filter"],"query":"What are the valid instanceState's for the Amazon EC2 API?","query_tokens":["what","are","the","valid","instance","state","'","s","for","the","amazon","ec2","api","?"]}
{"code":"def to_snake_case(name):","code_tokens":["def","to","snake","case","(","name",")",":"],"func_name":"to_snake_case","func_name_tokens":["to","snake","case"],"docstring":"from https://stackoverflow.com/questions/1175208/\\            elegant-python-function-to-convert-camelcase-to-snake-case     s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()","docstring_tokens":["from","\\","elegant","-","python","-","function","-","to","-","convert","-","camelcase","-","to","-","snake","-","case","s1","=","re",".","sub","(","'","(",".",")","(","[","a","-","z","]","[","a","-","z","]","+",")","'",",","r","'","\\","1","\\","2","'",",","name",")","return","re",".","sub","(","'","(","[","a","-","z0","-","9","]",")","(","[","a","-","z","]",")","'",",","r","'","\\","1","\\","2","'",",","s1",")",".","lower","(",")"],"query":"Elegant Python function to convert CamelCase to snake_case?","query_tokens":["elegant","python","function","to","convert","camel","case","to","snake","case","?"]}
{"code":"    def _clean_illegal_xml_chars(string_to_clean):        illegal_unichrs = [            (0x00, 0x08), (0x0B, 0x1F), (0x7F, 0x84), (0x86, 0x9F),            (0xD800, 0xDFFF), (0xFDD0, 0xFDDF), (0xFFFE, 0xFFFF),            (0x1FFFE, 0x1FFFF), (0x2FFFE, 0x2FFFF), (0x3FFFE, 0x3FFFF),            (0x4FFFE, 0x4FFFF), (0x5FFFE, 0x5FFFF), (0x6FFFE, 0x6FFFF),            (0x7FFFE, 0x7FFFF), (0x8FFFE, 0x8FFFF), (0x9FFFE, 0x9FFFF),            (0xAFFFE, 0xAFFFF), (0xBFFFE, 0xBFFFF), (0xCFFFE, 0xCFFFF),            (0xDFFFE, 0xDFFFF), (0xEFFFE, 0xEFFFF), (0xFFFFE, 0xFFFFF),            (0x10FFFE, 0x10FFFF)]        illegal_ranges = [\"%s-%s\" % (unichr(low), unichr(high))                          for (low, high) in illegal_unichrs                          if low < sys.maxunicode]        illegal_xml_re = re.compile(u('[%s]') % u('').join(illegal_ranges))        return illegal_xml_re.sub('', string_to_clean)","code_tokens":["def","clean","illegal","xml","chars","(","string","to","clean",")",":","illegal","unichrs","=","[","(","0x00",",","0x08",")",",","(","0x0b",",","0x1f",")",",","(","0x7f",",","0x84",")",",","(","0x86",",","0x9f",")",",","(","0x","d800",",","0x","dfff",")",",","(","0x","fdd0",",","0x","fddf",")",",","(","0x","fffe",",","0x","ffff",")",",","(","0x1fffe",",","0x1ffff",")",",","(","0x2fffe",",","0x2ffff",")",",","(","0x3fffe",",","0x3ffff",")",",","(","0x4fffe",",","0x4ffff",")",",","(","0x5fffe",",","0x5ffff",")",",","(","0x6fffe",",","0x6ffff",")",",","(","0x7fffe",",","0x7ffff",")",",","(","0x8fffe",",","0x8ffff",")",",","(","0x9fffe",",","0x9ffff",")",",","(","0x","afffe",",","0x","affff",")",",","(","0x","bfffe",",","0x","bffff",")",",","(","0x","cfffe",",","0x","cffff",")",",","(","0x","dfffe",",","0x","dffff",")",",","(","0x","efffe",",","0x","effff",")",",","(","0x","ffffe",",","0x","fffff",")",",","(","0x10fffe",",","0x10ffff",")","]","illegal","ranges","=","[","\"","%","s","-","%","s","\"","%","(","unichr","(","low",")",",","unichr","(","high",")",")","for","(","low",",","high",")","in","illegal","unichrs","if","low","<","sys",".","maxunicode","]","illegal","xml","re","=","re",".","compile","(","u","(","'","[","%","s","]","'",")","%","u","(","'","'",")",".","join","(","illegal","ranges",")",")","return","illegal","xml","re",".","sub","(","'","'",",","string","to","clean",")"],"func_name":"_clean_illegal_xml_chars","func_name_tokens":["clean","illegal","xml","chars"],"docstring":"Removes any illegal unicode characters from the given XML string.                @see: http://stackoverflow.com/questions/1707890/fast-way-to-filter-illegal-xml-unicode-chars-in-python","docstring_tokens":["removes","any","illegal","unicode","characters","from","the","given","xml","string",".","@","see",":"],"query":"Fast way to filter illegal xml unicode chars in python?","query_tokens":["fast","way","to","filter","illegal","xml","unicode","chars","in","python","?"]}
{"code":"def run_graphviz(program, code, options=[], format='png'):    import os    from subprocess import Popen, PIPE    dot_args = [program] + options + ['-T', format]    if os.name == 'nt':        p = Popen(dot_args, stdout=PIPE, stdin=PIPE, stderr=PIPE, creationflags=0x08000000)    else:        p = Popen(dot_args, stdout=PIPE, stdin=PIPE, stderr=PIPE)        wentwrong = False    try:        stdout, stderr = p.communicate(code.encode('utf-8'))    except (OSError, IOError) as err:        if err.errno != EPIPE:            raise        wentwrong = True    except IOError as err:        if err.errno != EINVAL:            raise        wentwrong = True    if wentwrong:        stdout, stderr = p.stdout.read(), p.stderr.read()        p.wait()    if p.returncode != 0:        raise RuntimeError('dot exited with error:\\n[stderr]\\n{0}'.format(stderr.decode('utf-8')))    return stdout@LiquidTags.register('graphviz')","code_tokens":["def","run","graphviz","(","program",",","code",",","options","=","[","]",",","format","=","'","png","'",")",":","import","os","from","subprocess","import","popen",",","pipe","dot","args","=","[","program","]","+","options","+","[","'","-","t","'",",","format","]","if","os",".","name","=","=","'","nt","'",":","p","=","popen","(","dot","args",",","stdout","=","pipe",",","stdin","=","pipe",",","stderr","=","pipe",",","creationflags","=","0x08000000",")","else",":","p","=","popen","(","dot","args",",","stdout","=","pipe",",","stdin","=","pipe",",","stderr","=","pipe",")","wentwrong","=","false","try",":","stdout",",","stderr","=","p",".","communicate","(","code",".","encode","(","'","utf","-","8","'",")",")","except","(","os","error",",","io","error",")","as","err",":","if","err",".","errno","!","=","epipe",":","raise","wentwrong","=","true","except","io","error","as","err",":","if","err",".","errno","!","=","einval",":","raise","wentwrong","=","true","if","wentwrong",":","stdout",",","stderr","=","p",".","stdout",".","read","(",")",",","p",".","stderr",".","read","(",")","p",".","wait","(",")","if","p",".","returncode","!","=","0",":","raise","runtime","error","(","'","dot","exited","with","error",":","\\n","[","stderr","]","\\n","{","0","}","'",".","format","(","stderr",".","decode","(","'","utf","-","8","'",")",")",")","return","stdout","@","liquid","tags",".","register","(","'","graphviz","'",")"],"func_name":"run_graphviz","func_name_tokens":["run","graphviz"],"docstring":"Runs graphviz programs and returns image data        Copied from https://github.com/tkf/ipython-hierarchymagic/blob/master/hierarchymagic.py\nAvoid opening shell window.\n* https://github.com/tkf/ipython-hierarchymagic/issues/1\n* http://stackoverflow.com/a/2935727/727827\nGraphviz may close standard input when an error occurs,\nresulting in a broken pipe on communicate()\nin this case, read the standard output and standard error streams\ndirectly, to get the error message(s)","docstring_tokens":["runs","graphviz","programs","and","returns","image","data","copied","from","avoid","opening","shell","window",".","*","*","graphviz","may","close","standard","input","when","an","error","occurs",",","resulting","in","a","broken","pipe","on","communicate","(",")","in","this","case",",","read","the","standard","output","and","standard","error","streams","directly",",","to","get","the","error","message","(","s",")"],"query":"Running shell commands without a shell window","query_tokens":["running","shell","commands","without","a","shell","window"]}
{"code":"    def makefile(self, *args, **kwargs):        return self._fileclass HTTPRequest(BaseHTTPServer.BaseHTTPRequestHandler):","code_tokens":["def","makefile","(","self",",","*","args",",","*","*","kwargs",")",":","return","self",".","fileclass","http","request","(","base","http","server",".","base","http","request","handler",")",":"],"func_name":"makefile","func_name_tokens":["makefile"],"docstring":"Original source:\nhttps://stackoverflow.com/questions/4685217/parse-raw-http-headers","docstring_tokens":["original","source",":"],"query":"Parse raw HTTP Headers","query_tokens":["parse","raw","http","headers"]}
{"code":"    def run(self):        with self.mic as source:            self.recognizer.adjust_for_ambient_noise(source)            while self.state.running:                try:                    audio = self.recognizer.listen(source, self.emitter)                    self.queue.put(audio)                except IOError, ex:                    self.emitter.emit(\"recognizer_loop:ioerror\", ex)","code_tokens":["def","run","(","self",")",":","with","self",".","mic","as","source",":","self",".","recognizer",".","adjust","for","ambient","noise","(","source",")","while","self",".","state",".","running",":","try",":","audio","=","self",".","recognizer",".","listen","(","source",",","self",".","emitter",")","self",".","queue",".","put","(","audio",")","except","io","error",",","ex",":","self",".","emitter",".","emit","(","\"","recognizer","loop",":","ioerror","\"",",","ex",")"],"func_name":"run","func_name_tokens":["run"],"docstring":"NOTE: Audio stack on raspi is slightly different, throws\nIOError every other listen, almost like it can't handle\nbuffering audio between listen loops.\nThe internet was not helpful.\nhttp://stackoverflow.com/questions/10733903/pyaudio-input-overflowed","docstring_tokens":["note",":","audio","stack","on","raspi","is","slightly","different",",","throws","io","error","every","other","listen",",","almost","like","it","can","'","t","handle","buffering","audio","between","listen","loops",".","the","internet","was","not","helpful","."],"query":"PyAudio Input overflowed","query_tokens":["py","audio","input","overflowed"]}
{"code":"def find_replace(filename, pattern, replace):    with open(filename, \"r\") as sources:        lines = sources.readlines()    with open(filename, \"w\") as sources:        for line in lines:            sources.write(re.sub(pattern, replace, line))        ","code_tokens":["def","find","replace","(","filename",",","pattern",",","replace",")",":","with","open","(","filename",",","\"","r","\"",")","as","sources",":","lines","=","sources",".","readlines","(",")","with","open","(","filename",",","\"","w","\"",")","as","sources",":","for","line","in","lines",":","sources",".","write","(","re",".","sub","(","pattern",",","replace",",","line",")",")"],"func_name":"find_replace","func_name_tokens":["find","replace"],"docstring":"sed-like find-replace function        taken from      http://stackoverflow.com/questions/4427542/how-to-do-sed-like-text-replace-in-python)","docstring_tokens":["sed","-","like","find","-","replace","function","taken","from",")"],"query":"How to do sed like text replace with python?","query_tokens":["how","to","do","sed","like","text","replace","with","python","?"]}
{"code":"def get_free_space_mb(dirname):","code_tokens":["def","get","free","space","mb","(","dirname",")",":"],"func_name":"get_free_space_mb","func_name_tokens":["get","free","space","mb"],"docstring":"https://stackoverflow.com/questions/51658/cross-platform-space-remaining-on-volume-using-python    Return folder/drive free space (in megabytes).    if platform.system() == 'Windows':        free_bytes = ctypes.c_ulonglong(0)        ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(dirname),                                                   None, None,                                                   ctypes.pointer(free_bytes))        return free_bytes.value / 1024 / 1024    else:        st = os.statvfs(dirname)        return st.f_bavail * st.f_frsize / 1024 / 1024","docstring_tokens":["return","folder","/","drive","free","space","(","in","megabytes",")",".","if","platform",".","system","(",")","=","=","'","windows","'",":","free","bytes","=","ctypes",".","c","ulonglong","(","0",")","ctypes",".","windll",".","kernel32",".","get","disk","free","space","ex","w","(","ctypes",".","c","wchar","p","(","dirname",")",",","none",",","none",",","ctypes",".","pointer","(","free","bytes",")",")","return","free","bytes",".","value","/","1024","/","1024","else",":","st","=","os",".","statvfs","(","dirname",")","return","st",".","f","bavail","*","st",".","f","frsize","/","1024","/","1024"],"query":"Cross-platform space remaining on volume using python","query_tokens":["cross","-","platform","space","remaining","on","volume","using","python"]}
{"code":"def missing_or_other_newer(path, other_path, cwd=None):    cwd = cwd or '.'    path = get_abspath(path, cwd=cwd)    other_path = get_abspath(other_path, cwd=cwd)    if not os.path.exists(path):        return True    if os.path.getmtime(other_path) - 1e-6 >= os.path.getmtime(path):        return True    return False","code_tokens":["def","missing","or","other","newer","(","path",",","other","path",",","cwd","=","none",")",":","cwd","=","cwd","or","'",".","'","path","=","get","abspath","(","path",",","cwd","=","cwd",")","other","path","=","get","abspath","(","other","path",",","cwd","=","cwd",")","if","not","os",".","path",".","exists","(","path",")",":","return","true","if","os",".","path",".","getmtime","(","other","path",")","-","1e","-","6",">","=","os",".","path",".","getmtime","(","path",")",":","return","true","return","false"],"func_name":"missing_or_other_newer","func_name_tokens":["missing","or","other","newer"],"docstring":"Investigate if path is non-existant or older than provided reference    path.    Parameters    ==========    path: string        path to path which might be missing or too old    other_path: string        reference path    cwd: string        working directory (root of relative paths)    Returns    =======    True if path is older or missing.\n1e-6 is needed beacuse http://stackoverflow.com/questions/17086426/","docstring_tokens":["investigate","if","path","is","non","-","existant","or","older","than","provided","reference","path",".","parameters","=","=","=","=","=","=","=","=","=","=","path",":","string","path","to","path","which","might","be","missing","or","too","old","other","path",":","string","reference","path","cwd",":","string","working","directory","(","root","of","relative","paths",")","returns","=","=","=","=","=","=","=","true","if","path","is","older","or","missing",".","1e","-","6","is","needed","beacuse"],"query":"File modification times not equal after calling shutil.copystat(file1, file2) under Windows","query_tokens":["file","modification","times","not","equal","after","calling","shutil",".","copystat","(","file1",",","file2",")","under","windows"]}
{"code":"def _resolve_lookup((model, lookup, arg_name), view_kwargs):    value = view_kwargs.get(arg_name)    if value is None:        raise ValueError(\"Expected kwarg '%s' not found.\" % arg_name)    if isinstance(model, basestring):        model_class = get_model(*model.split('.'))    else:        model_class = model    if model_class is None:        raise ValueError(\"The given argument '%s' is not a valid model.\" %                         model)    if inspect.isclass(model_class) and not issubclass(model_class, Model):        raise ValueError(\"The argument '%s' needs to be a model.\" % model)    return get_object_or_404(model_class, **{lookup: value})","code_tokens":["def","resolve","lookup","(","(","model",",","lookup",",","arg","name",")",",","view","kwargs",")",":","value","=","view","kwargs",".","get","(","arg","name",")","if","value","is","none",":","raise","value","error","(","\"","expected","kwarg","'","%","s","'","not","found",".","\"","%","arg","name",")","if","isinstance","(","model",",","basestring",")",":","model","class","=","get","model","(","*","model",".","split","(","'",".","'",")",")","else",":","model","class","=","model","if","model","class","is","none",":","raise","value","error","(","\"","the","given","argument","'","%","s","'","is","not","a","valid","model",".","\"","%","model",")","if","inspect",".","isclass","(","model","class",")","and","not","issubclass","(","model","class",",","model",")",":","raise","value","error","(","\"","the","argument","'","%","s","'","needs","to","be","a","model",".","\"","%","model",")","return","get","object","or","404","(","model","class",",","*","*","{","lookup",":","value","}",")"],"func_name":"_resolve_lookup","func_name_tokens":["resolve","lookup"],"docstring":"Return the object indicated by the lookup triple and the kwargs passed    to the view.\ndjango never_cache isn't as thorough as we might like\nhttp://stackoverflow.com/a/2095648/571420\nhttp://stackoverflow.com/a/2068407/571420\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ","docstring_tokens":["return","the","object","indicated","by","the","lookup","triple","and","the","kwargs","passed","to","the","view",".","django","never","cache","isn","'","t","as","thorough","as","we","might","like"],"query":"How do we control web page caching, across all browsers?","query_tokens":["how","do","we","control","web","page","caching",",","across","all","browsers","?"]}
{"code":"    def run(self):        if is_allowed_to_run():            unpack_settigns( self.channel_settings )            wizard_thread = InstallationWizardThread()            wizard_thread.start()            ThreadProgress( wizard_thread, 'Running the %s Installation Wizard...' % CHANNEL_PACKAGE_NAME,                    'The %s Installation Wizard finished.' % CHANNEL_PACKAGE_NAME )            wizard_thread.join()        global g_is_already_running        g_is_already_running = False","code_tokens":["def","run","(","self",")",":","if","is","allowed","to","run","(",")",":","unpack","settigns","(","self",".","channel","settings",")","wizard","thread","=","installation","wizard","thread","(",")","wizard","thread",".","start","(",")","thread","progress","(","wizard","thread",",","'","running","the","%","s","installation","wizard",".",".",".","'","%","channel","package","name",",","'","the","%","s","installation","wizard","finished",".","'","%","channel","package","name",")","wizard","thread",".","join","(",")","global","g","is","already","running","g","is","already","running","=","false"],"func_name":"run","func_name_tokens":["run"],"docstring":"Python thread exit code            https://stackoverflow.com/questions/986616/python-thread-exit-code","docstring_tokens":["python","thread","exit","code"],"query":"Python thread exit code","query_tokens":["python","thread","exit","code"]}
{"code":"        def random_text(nobs=100):            df = []            for i in range(nobs):                idx = np.random.randint(len(letters), size=2)                idx.sort()                df.append([letters[idx[0]:idx[1]]])            return DataFrame(df, columns=['letters'])        df = random_text(100000)        x = df.iloc[[0, 1, 2]]        assert x.is_copy is not None        x = df.iloc[[0, 1, 2, 4]]        assert x.is_copy is not None        indexer = df.letters.apply(lambda x: len(x) > 10)        df = df.loc[indexer].copy()        assert df.is_copy is None        df['letters'] = df['letters'].apply(str.lower)        df = random_text(100000)        indexer = df.letters.apply(lambda x: len(x) > 10)        df = df.loc[indexer]        assert df.is_copy is not None        df['letters'] = df['letters'].apply(str.lower)        df = random_text(100000)        indexer = df.letters.apply(lambda x: len(x) > 10)        df = df.loc[indexer]        assert df.is_copy is not None        df.loc[:, 'letters'] = df['letters'].apply(str.lower)        assert df.is_copy is None        df['letters'] = df['letters'].apply(str.lower)        assert df.is_copy is None        df = random_text(100000)        indexer = df.letters.apply(lambda x: len(x) > 10)        df.loc[indexer, 'letters'] = (            df.loc[indexer, 'letters'].apply(str.lower))        df = DataFrame({'a': [1]}).dropna()        assert df.is_copy is None        df['a'] += 1        a = [12, 23]        b = [123, None]        c = [1234, 2345]        d = [12345, 23456]        tuples = [('eyes', 'left'), ('eyes', 'right'), ('ears', 'left'),                  ('ears', 'right')]        events = {('eyes', 'left'): a,                  ('eyes', 'right'): b,                  ('ears', 'left'): c,                  ('ears', 'right'): d}        multiind = MultiIndex.from_tuples(tuples, names=['part', 'side'])        zed = DataFrame(events, index=['a', 'b'], columns=multiind)        with pytest.raises(com.SettingWithCopyError):            zed['eyes']['right'].fillna(value=555, inplace=True)        df = DataFrame(np.random.randn(10, 4))        s = df.iloc[:, 0].sort_values()        tm.assert_series_equal(s, df.iloc[:, 0].sort_values())        tm.assert_series_equal(s, df[0].sort_values())        df = DataFrame({'column1': ['a', 'a', 'a'], 'column2': [4, 8, 9]})        str(df)        df['column1'] = df['column1'] + 'b'        str(df)        df = df[df['column2'] != 8]        str(df)        df['column1'] = df['column1'] + 'c'        str(df)","code_tokens":["def","random","text","(","nobs","=","100",")",":","df","=","[","]","for","i","in","range","(","nobs",")",":","idx","=","np",".","random",".","randint","(","len","(","letters",")",",","size","=","2",")","idx",".","sort","(",")","df",".","append","(","[","letters","[","idx","[","0","]",":","idx","[","1","]","]","]",")","return","data","frame","(","df",",","columns","=","[","'","letters","'","]",")","df","=","random","text","(","100000",")","x","=","df",".","iloc","[","[","0",",","1",",","2","]","]","assert","x",".","is","copy","is","not","none","x","=","df",".","iloc","[","[","0",",","1",",","2",",","4","]","]","assert","x",".","is","copy","is","not","none","indexer","=","df",".","letters",".","apply","(","lambda","x",":","len","(","x",")",">","10",")","df","=","df",".","loc","[","indexer","]",".","copy","(",")","assert","df",".","is","copy","is","none","df","[","'","letters","'","]","=","df","[","'","letters","'","]",".","apply","(","str",".","lower",")","df","=","random","text","(","100000",")","indexer","=","df",".","letters",".","apply","(","lambda","x",":","len","(","x",")",">","10",")","df","=","df",".","loc","[","indexer","]","assert","df",".","is","copy","is","not","none","df","[","'","letters","'","]","=","df","[","'","letters","'","]",".","apply","(","str",".","lower",")","df","=","random","text","(","100000",")","indexer","=","df",".","letters",".","apply","(","lambda","x",":","len","(","x",")",">","10",")","df","=","df",".","loc","[","indexer","]","assert","df",".","is","copy","is","not","none","df",".","loc","[",":",",","'","letters","'","]","=","df","[","'","letters","'","]",".","apply","(","str",".","lower",")","assert","df",".","is","copy","is","none","df","[","'","letters","'","]","=","df","[","'","letters","'","]",".","apply","(","str",".","lower",")","assert","df",".","is","copy","is","none","df","=","random","text","(","100000",")","indexer","=","df",".","letters",".","apply","(","lambda","x",":","len","(","x",")",">","10",")","df",".","loc","[","indexer",",","'","letters","'","]","=","(","df",".","loc","[","indexer",",","'","letters","'","]",".","apply","(","str",".","lower",")",")","df","=","data","frame","(","{","'","a","'",":","[","1","]","}",")",".","dropna","(",")","assert","df",".","is","copy","is","none","df","[","'","a","'","]","+","=","1","a","=","[","12",",","23","]","b","=","[","123",",","none","]","c","=","[","1234",",","2345","]","d","=","[","12345",",","23456","]","tuples","=","[","(","'","eyes","'",",","'","left","'",")",",","(","'","eyes","'",",","'","right","'",")",",","(","'","ears","'",",","'","left","'",")",",","(","'","ears","'",",","'","right","'",")","]","events","=","{","(","'","eyes","'",",","'","left","'",")",":","a",",","(","'","eyes","'",",","'","right","'",")",":","b",",","(","'","ears","'",",","'","left","'",")",":","c",",","(","'","ears","'",",","'","right","'",")",":","d","}","multiind","=","multi","index",".","from","tuples","(","tuples",",","names","=","[","'","part","'",",","'","side","'","]",")","zed","=","data","frame","(","events",",","index","=","[","'","a","'",",","'","b","'","]",",","columns","=","multiind",")","with","pytest",".","raises","(","com",".","setting","with","copy","error",")",":","zed","[","'","eyes","'","]","[","'","right","'","]",".","fillna","(","value","=","555",",","inplace","=","true",")","df","=","data","frame","(","np",".","random",".","randn","(","10",",","4",")",")","s","=","df",".","iloc","[",":",",","0","]",".","sort","values","(",")","tm",".","assert","series","equal","(","s",",","df",".","iloc","[",":",",","0","]",".","sort","values","(",")",")","tm",".","assert","series","equal","(","s",",","df","[","0","]",".","sort","values","(",")",")","df","=","data","frame","(","{","'","column1","'",":","[","'","a","'",",","'","a","'",",","'","a","'","]",",","'","column2","'",":","[","4",",","8",",","9","]","}",")","str","(","df",")","df","[","'","column1","'","]","=","df","[","'","column1","'","]","+","'","b","'","str","(","df",")","df","=","df","[","df","[","'","column2","'","]","!","=","8","]","str","(","df",")","df","[","'","column1","'","]","=","df","[","'","column1","'","]","+","'","c","'","str","(","df",")"],"func_name":"random_text","func_name_tokens":["random","text"],"docstring":"Always a copy\nExplicitly copy\nImplicitly take\nImplicitly take 2\nShould be ok even though it's a copy!\nan identical take, so no copy\nInplace ops, originally from:\nhttp://stackoverflow.com/questions/20508968/series-fillna-in-a-multiindex-dataframe-does-not-fill-is-this-a-bug\nsee gh-6025: false positives\nfrom SO:","docstring_tokens":["always","a","copy","explicitly","copy","implicitly","take","implicitly","take","2","should","be","ok","even","though","it","'","s","a","copy","!","an","identical","take",",","so","no","copy","inplace","ops",",","originally","from",":","see","gh","-","6025",":","false","positives","from","so",":"],"query":"Series.fillna() in a MultiIndex DataFrame Does not Fill; Is This a Bug?","query_tokens":["series",".","fillna","(",")","in","a","multi","index","data","frame","does","not","fill",";","is","this","a","bug","?"]}
{"code":"import osimport pwdimport os.pathimport tempfileimport reimport shlexfrom operator import itemgetterfrom ansible.module_utils._text import to_nativefrom ansible.module_utils.basic import AnsibleModulefrom ansible.module_utils.pycompat24 import get_exceptionfrom ansible.module_utils.urls import fetch_urlclass keydict(dict):","code_tokens":["import","osimport","pwdimport","os",".","pathimport","tempfileimport","reimport","shlexfrom","operator","import","itemgetterfrom","ansible",".","module","utils",".","text","import","to","nativefrom","ansible",".","module","utils",".","basic","import","ansible","modulefrom","ansible",".","module","utils",".","pycompat24","import","get","exceptionfrom","ansible",".","module","utils",".","urls","import","fetch","urlclass","keydict","(","dict",")",":"],"func_name":"keydict","func_name_tokens":["keydict"],"docstring":"state = absent|present (default: present)\nsee example in examples/playbooks     a dictionary that maintains the order of keys as they are added    This has become an abuse of the dict interface.  Probably should be    rewritten to be an entirely custom object with methods instead of    bracket-notation.    Our requirements are for a data structure that:    * Preserves insertion order    * Can store multiple values for a single key.    The present implementation has the following functions used by the rest of    the code:    * __setitem__(): to add a key=value.  The value can never be disassociated      with the key, only new values can be added in addition.    * items(): to retrieve the key, value pairs.    Other dict methods should work but may be surprising.  For instance, there    will be multiple keys that are the same in keys() and __getitem__() will    return a list of the values that have been set via __setitem__.","docstring_tokens":["state","=","absent","|","present","(","default",":","present",")","see","example","in","examples","/","playbooks","a","dictionary","that","maintains","the","order","of","keys","as","they","are","added","this","has","become","an","abuse","of","the","dict","interface",".","probably","should","be","rewritten","to","be","an","entirely","custom","object","with","methods","instead","of","bracket","-","notation",".","our","requirements","are","for","a","data","structure","that",":","*","preserves","insertion","order","*","can","store","multiple","values","for","a","single","key",".","the","present","implementation","has","the","following","functions","used","by","the","rest","of","the","code",":","*","setitem","(",")",":","to","add","a","key","=","value",".","the","value","can","never","be","disassociated","with","the","key",",","only","new","values","can","be","added","in","addition",".","*","items","(",")",":","to","retrieve","the","key",",","value","pairs",".","other","dict","methods","should","work","but","may","be","surprising",".","for","instance",",","there","will","be","multiple","keys","that","are","the","same","in","keys","(",")","and","getitem","(",")","will","return","a","list","of","the","values","that","have","been","set","via","setitem","."],"query":"Python:Extend the 'dict' class","query_tokens":["python",":","extend","the","'","dict","'","class"]}
{"code":"    def get_queryset(self):        q = super(FeaturedPollList, self).get_queryset().filter(is_featured=True).order_by('-created_on')        return qclass NewsItemList(BaseListAPIView):    serializer_class = NewsItemReadSerializer    model = NewsItemclass NewsItemDetails(RetrieveAPIView):","code_tokens":["def","get","queryset","(","self",")",":","q","=","super","(","featured","poll","list",",","self",")",".","get","queryset","(",")",".","filter","(","is","featured","=","true",")",".","order","by","(","'","-","created","on","'",")","return","qclass","news","item","list","(","base","list","api","view",")",":","serializer","class","=","news","item","read","serializer","model","=","news","itemclass","news","item","details","(","retrieve","api","view",")",":"],"func_name":"get_queryset","func_name_tokens":["get","queryset"],"docstring":"This endpoint allows you to list news items.\nListing news items    By making a ```GET``` request you can list all the news items for an organization, filtering them as needed.  Each    news item has the following attributes:    * **id** - the ID of the item (int)    * **short_description** - the SHORT_DESCRIPTION of the news item (string)    * **title** - the TITLE of the news item (string)    * **org** - the ID of the org that owns this news item (int)    * **link** - the link to the source of this news item (string)    * **category** - the CATEGORY of of this news item (dictionary)    Example:        GET /api/v1/news/org/1/    Response is the list of news items of the organisation, most recent first:        {            \"count\": 389,            \"next\": \"/api/v1/news/org/1/?page=2\",            \"previous\": null,            \"results\": [            {                \"id\": 1,                \"short_description\": \"This is a test news item that I want to use to test my api and speed of typing\",                \"title\": \"test\",                \"description\": \"This is a test news item that I want to use to test my api and speed of typing\",                \"link\": \"http://stackoverflow.com/questions/3876977/update-git-branches-from-master\",                \"org\": 1,                \"category\": {                    \"image_url\": \"http://fake.ureport.in/media/categories/StraightOuttaSomewhere_2.jpg\",                    \"name\": \"tests\"                }            },            ...        }            This endpoint allows you to get a single news item\nA single news item    Example:        GET /api/v1/news/1/    Response is a single news item:        {            \"id\": 1,            \"short_description\": \"This is a test news item that I want to use to test my api and speed of typing\",            \"title\": \"test\",            \"description\": \"This is a test news item that I want to use to test my api and speed of typing\",            \"link\": \"http://stackoverflow.com/questions/3876977/update-git-branches-from-master\",            \"org\": 1,            \"category\": {                \"image_url\": \"http://fake.ureport.in/media/categories/StraightOuttaSomewhere_2.jpg\",                \"name\": \"tests\"            }        }","docstring_tokens":["this","endpoint","allows","you","to","list","news","items",".","listing","news","items","by","making","a","`","`","`","get","`","`","`","request","you","can","list","all","the","news","items","for","an","organization",",","filtering","them","as","needed",".","each","news","item","has","the","following","attributes",":","*","*","*","id","*","*","-","the","id","of","the","item","(","int",")","*","*","*","short","description","*","*","-","the","short","description","of","the","news","item","(","string",")","*","*","*","title","*","*","-","the","title","of","the","news","item","(","string",")","*","*","*","org","*","*","-","the","id","of","the","org","that","owns","this","news","item","(","int",")","*","*","*","link","*","*","-","the","link","to","the","source","of","this","news","item","(","string",")","*","*","*","category","*","*","-","the","category","of","of","this","news","item","(","dictionary",")","example",":","get","/","api","/","v1","/","news","/","org","/","1","/","response","is","the","list","of","news","items","of","the","organisation",",","most","recent","first",":","{","\"","count","\"",":","389",",","\"","next","\"",":","\"","/","api","/","v1","/","news","/","org","/","1","/","?","page","=","2","\"",",","\"","previous","\"",":","null",",","\"","results","\"",":","[","{","\"","id","\"",":","1",",","\"","short","description","\"",":","\"","this","is","a","test","news","item","that","i","want","to","use","to","test","my","api","and","speed","of","typing","\"",",","\"","title","\"",":","\"","test","\"",",","\"","description","\"",":","\"","this","is","a","test","news","item","that","i","want","to","use","to","test","my","api","and","speed","of","typing","\"",",","\"","link","\"",":","\"","\"",",","\"","org","\"",":","1",",","\"","category","\"",":","{","\"","image","url","\"",":","\"","\"",",","\"","name","\"",":","\"","tests","\"","}","}",",",".",".",".","}","this","endpoint","allows","you","to","get","a","single","news","item","a","single","news","item","example",":","get","/","api","/","v1","/","news","/","1","/","response","is","a","single","news","item",":","{","\"","id","\"",":","1",",","\"","short","description","\"",":","\"","this","is","a","test","news","item","that","i","want","to","use","to","test","my","api","and","speed","of","typing","\"",",","\"","title","\"",":","\"","test","\"",",","\"","description","\"",":","\"","this","is","a","test","news","item","that","i","want","to","use","to","test","my","api","and","speed","of","typing","\"",",","\"","link","\"",":","\"","\"",",","\"","org","\"",":","1",",","\"","category","\"",":","{","\"","image","url","\"",":","\"","\"",",","\"","name","\"",":","\"","tests","\"","}","}"],"query":"Update Git branches from master","query_tokens":["update","git","branches","from","master"]}
{"code":"def OnCygwin():  return sys.platform == 'cygwin'","code_tokens":["def","on","cygwin","(",")",":","return","sys",".","platform","=","=","'","cygwin","'"],"func_name":"OnCygwin","func_name_tokens":["on","cygwin"],"docstring":"From here: http://stackoverflow.com/a/8536476/1672783","docstring_tokens":["from","here",":"],"query":"In Python 2.5, how do I kill a subprocess?","query_tokens":["in","python","2",".","5",",","how","do","i","kill","a","subprocess","?"]}
{"code":"def EscapeShellArgument(s):  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"","code_tokens":["def","escape","shell","argument","(","s",")",":","return","\"","'","\"","+","s",".","replace","(","\"","'","\"",",","\"","'","\\","\\","'","'","\"",")","+","\"","'","\""],"func_name":"EscapeShellArgument","func_name_tokens":["escape","shell","argument"],"docstring":"Quotes an argument so that it will be interpreted literally by a POSIX     shell. Taken from     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python","docstring_tokens":["quotes","an","argument","so","that","it","will","be","interpreted","literally","by","a","posix","shell",".","taken","from"],"query":"How to escape os.system() calls?","query_tokens":["how","to","escape","os",".","system","(",")","calls","?"]}
{"code":"def hash_similarity(h1, h2, bits):    return 1 - bin(h1^h2).count('1')/float(bits)","code_tokens":["def","hash","similarity","(","h1",",","h2",",","bits",")",":","return","1","-","bin","(","h1","^","h2",")",".","count","(","'","1","'",")","/","float","(","bits",")"],"func_name":"hash_similarity","func_name_tokens":["hash","similarity"],"docstring":"1 - (Hamming distance/max Hamming distance).\nset bit count per http://stackoverflow.com/a/9831671","docstring_tokens":["1","-","(","hamming","distance","/","max","hamming","distance",")",".","set","bit","count","per"],"query":"Fast way of counting non-zero bits in positive integer","query_tokens":["fast","way","of","counting","non","-","zero","bits","in","positive","integer"]}
{"code":"    def heartbeat(self):        return {ModuleStoreEnum.Type.split: self.db_connection.heartbeat()}class SparseList(list):","code_tokens":["def","heartbeat","(","self",")",":","return","{","module","store","enum",".","type",".","split",":","self",".","db","connection",".","heartbeat","(",")","}","class","sparse","list","(","list",")",":"],"func_name":"heartbeat","func_name_tokens":["heartbeat"],"docstring":"Check that the db is reachable.                Enable inserting items into a list in arbitrary order and then retrieving them.\ntaken from http://stackoverflow.com/questions/1857780/sparse-assignment-list-in-python","docstring_tokens":["check","that","the","db","is","reachable",".","enable","inserting","items","into","a","list","in","arbitrary","order","and","then","retrieving","them",".","taken","from"],"query":"Sparse assignment list in python","query_tokens":["sparse","assignment","list","in","python"]}
{"code":"CLUSTERS = 8SPHERE_PTS = 1000000RANDOMIZE_SPHERE_PTS = TrueDIMENSIONS = 4 # 1,2 or 3JUMP_RANDOM_ALL_DIRS = TrueSHUFFLE_SPHERES = FalseR_NOISE = TrueALLOWED_CENTER_DELTA = 3def get_xyz_sphere(R):    u = random.random() # 0 to 1    r = R * (u ** (1.0/3))    if R_NOISE:        rNoise = random.random() * .1 * r        r += rNoise    costheta = random.uniform(-1,1)    theta = math.acos(costheta)    phi = random.uniform(0, 2 * math.pi)    x = r * math.sin(theta) * math.cos(phi)    y = r * math.sin(theta) * math.sin(phi)    z = r * math.cos(theta)     zz = 0    yy = 0    xyzzy = [x, y, z, zz, yy]    return xyzzy[:DIMENSIONS]","code_tokens":["clusters","=","8sphere","pts","=","1000000randomize","sphere","pts","=","true","dimensions","=","4","#","1",",","2","or","3jump","random","all","dirs","=","true","shuffle","spheres","=","false","r","noise","=","true","allowed","center","delta","=","3def","get","xyz","sphere","(","r",")",":","u","=","random",".","random","(",")","#","0","to","1","r","=","r","*","(","u","*","*","(","1",".","0","/","3",")",")","if","r","noise",":","r","noise","=","random",".","random","(",")","*",".","1","*","r","r","+","=","r","noise","costheta","=","random",".","uniform","(","-","1",",","1",")","theta","=","math",".","acos","(","costheta",")","phi","=","random",".","uniform","(","0",",","2","*","math",".","pi",")","x","=","r","*","math",".","sin","(","theta",")","*","math",".","cos","(","phi",")","y","=","r","*","math",".","sin","(","theta",")","*","math",".","sin","(","phi",")","z","=","r","*","math",".","cos","(","theta",")","zz","=","0","yy","=","0","xyzzy","=","[","x",",","y",",","z",",","zz",",","yy","]","return","xyzzy","[",":","dimensions","]"],"func_name":"get_xyz_sphere","func_name_tokens":["get","xyz","sphere"],"docstring":"a truly uniform sphere\nhttp://stackoverflow.com/questions/5408276/python-uniform-spherical-distribution\nhe offers the exact solution: http://stackoverflow.com/questions/918736/random-number-generator-that-produces-a-power-law-distribution/918782\n918782\nIn spherical coordinates, taking advantage of the sampling rule:\nhttp://stackoverflow.com/questions/2106503/pseudorandom-number-generator-exponential-distribution/2106568\n2106568\nshould do this, but does it make h2o kmeans fail?\nadd a little noise\nnow you have a (r, theta, phi) group which can be transformed to (x, y, z)\nuse these for jump dimensions? (picture \"time\" and other dimensions)\nprint xyz[:DIMENSIONS]","docstring_tokens":["a","truly","uniform","sphere","he","offers","the","exact","solution",":","918782","in","spherical","coordinates",",","taking","advantage","of","the","sampling","rule",":","2106568","should","do","this",",","but","does","it","make","h2o","kmeans","fail","?","add","a","little","noise","now","you","have","a","(","r",",","theta",",","phi",")","group","which","can","be","transformed","to","(","x",",","y",",","z",")","use","these","for","jump","dimensions","?","(","picture","\"","time","\"","and","other","dimensions",")","print","xyz","[",":","dimensions","]"],"query":"Pseudorandom Number Generator - Exponential Distribution","query_tokens":["pseudorandom","number","generator","-","exponential","distribution"]}
{"code":"    def rw_cavalli(self, dtm_r, f_s, ri_out, w_out, sk_flag = 0):        filename = dtm_r.replace('\\\\','/')        filename = str(filename)        tif = osgeo.gdal.Open(filename)#opening the file (1 band, bit not specified, but usually 32)        dir_pat = os.path.dirname(os.path.realpath(filename))#path of the selected input file        dir_path = dir_pat.encode('ascii','ignore')        dir_path = dir_path.replace('\\\\','/')        if tif is None:          print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"), \"couldn't open input DTM dataset, for Weighting factor computatin\")          sys.exit(1)        else:          print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"), \"opening DTM for weighting factor computation was successful!\")        cols = tif.RasterXSize        rows = tif.RasterYSize        bands =  tif.RasterCount        I_ar = tif.ReadAsArray() #con GDAL 1.6 e 1.7 non funzia 90%, con gdal bindings per windows 1.9.2 sembra funzionare provare anche a metter su ultime versioni di numpy        I_ar = I_ar.astype(float)        band = tif.GetRasterBand(1)#bands retrieving        geoinf = tif.GetGeoTransform()#upper left coordinates, cellsize        proj = tif.GetProjection()        tipo = I_ar.dtype        del(tif)        ndv = numpy.min(I_ar)        I_ar[I_ar == ndv] = numpy.nan        size_filter = numpy.float32(int(f_s))#importante che resti float32, per omogeneita'        start =clock()#take the time        I_ar_p = numpy.ones((rows,cols), dtype=tipo) #matrice di numeri uno e zero sui nodata da usare per far la media poi        I_ar_p[numpy.isnan(I_ar)==1] = 0        I_ar_d = numpy.ones((rows,cols), dtype=tipo) #build up array for summing correctly elevation data later        I_ar_d[numpy.isnan(I_ar)==1] = 0        I_ar_d[numpy.isnan(I_ar)==0] = I_ar[numpy.isnan(I_ar)==0]        ker = numpy.ones((size_filter,size_filter))#creating weights for sum and then an averaging filter        D_num_el = scipy.signal.convolve2d(I_ar_p, ker, 'same')#i get the number of elements per window        D_num_el[numpy.isnan(I_ar)==1] = numpy.nan                E_sum = scipy.signal.convolve2d(I_ar_d,ker, 'same') #sum of values in the DTM        E_sum[numpy.isnan(I_ar)==1] = numpy.nan                M = E_sum/D_num_el #average =sum/number of elements        DTM_R  = numpy.float64(I_ar) - numpy.float64(M) #residual DTM, now I need to compute the Std dev of this averaged DTM (so I need again mean values of this and then squared values to fasten the computation)                        del (I_ar_p, I_ar_d, D_num_el, ker, E_sum, M, DTM_R, E_R, M_R, DTM_R_SQ, M_R_SQ, E_R_SQ, MRSQ)        if sk_flag == 0:            pass        else:            sk_tmp = path_sink_dtm+\"/sinked_dtm.tif\"            sk_tmp = str(sk_tmp)            sk_dtm = osgeo.gdal.Open(sk_tmp)#opening the flowdir file (1 band, bit not specified, but usually 32)            if sk_dtm is None:              print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"),\"couldn't open input sinked_dtm dataset\")              sys.exit(1)            else:              print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"),\"sinked_dtm opening was successful!\")            sk_dtm_ar=sk_dtm.ReadAsArray()            sk_dtm_ar=sk_dtm_ar.astype(numpy.float)            ndv=numpy.min(sk_dtm_ar)            sk_dtm_ar[sk_dtm_ar==ndv] = numpy.NaN #to Basin Code            del(sk_dtm)            Ri[sk_dtm_ar == numpy.NaN] = numpy.NaN        sur_rough = gdal.GetDriverByName('GTiff').Create(str(ri_out), I_ar.shape[1], I_ar.shape[0], 1, GDT_Float32)#shape sono righe e colonne, 1 è il numero di bande        sur_rough.SetGeoTransform(geoinf)#conferisco coordinate e proiezione del raster in input        sur_rough.SetProjection(proj)        sur_rough.GetRasterBand(1).WriteArray(Ri,0,0)#scrivo effettivamente il raster, prima avevo solo allocato la memoria        sur_rough.GetRasterBand(1).GetStatistics(0,1) #calculate statistics for visualization        sur_rough = None#Sometimes I add this to ensure the file is fully deallocated, and to prevent running into some gotchas:        del sur_rough        print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"), 'computing weighting factor ... ...')        maxr = float(Ri[numpy.isnan(Ri) == False].max())#max element in surface roughness        if self.normseba.isChecked():            Ri[numpy.where(Ri < 0.001)] = 0.001            minr = float(Ri[numpy.isnan(Ri) == False].min())# min element in surface roughness            weig_fac = 1.0 - ((numpy.log(Ri) - numpy.log(minr)) / (numpy.log(maxr) - numpy.log(minr)))            weig_fac[numpy.where(weig_fac < 0.001)] = 0.001 #all avalues in the range 0-0-001 are shifted to 0.001, the rest remains NoData        else:            weig_fac = 1.0 - (Ri/maxr)#1-... to avoid 1-1=0 at denominator in downslope component            weig_fac[numpy.where(weig_fac < 0.001)] = 0.001 #all avalues in the range 0-0-001 are shifted to 0.001, the rest remains NoData        print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"), 'Weighting factor calculated!')        wf = gdal.GetDriverByName('GTiff').Create(str(w_out), I_ar.shape[1], I_ar.shape[0], 1, GDT_Float32)#shape sono righe e colonne, 1 è il numero di bande        wf.SetGeoTransform(geoinf)#conferisco coordinate e proiezione del raster in input        wf.SetProjection(proj)        wf.GetRasterBand(1).WriteArray(weig_fac,0,0)#scrivo effettivamente il raster, prima avevo solo allocato la memoria        wf.GetRasterBand(1).GetStatistics(0,1) #calculate statistics for visualization        wf = None#Sometimes I add this to ensure the file is fully deallocated, and to prevent running into some gotchas:        del wf        del I_ar        del Ri        del weig_fac        print (time.strftime(\"%d/%m/%Y %H:%M:%S    \"),'RI and W files saved!')","code_tokens":["def","rw","cavalli","(","self",",","dtm","r",",","f","s",",","ri","out",",","w","out",",","sk","flag","=","0",")",":","filename","=","dtm","r",".","replace","(","'","\\","\\","'",",","'","/","'",")","filename","=","str","(","filename",")","tif","=","osgeo",".","gdal",".","open","(","filename",")","#","opening","the","file","(","1","band",",","bit","not","specified",",","but","usually","32",")","dir","pat","=","os",".","path",".","dirname","(","os",".","path",".","realpath","(","filename",")",")","#","path","of","the","selected","input","file","dir","path","=","dir","pat",".","encode","(","'","ascii","'",",","'","ignore","'",")","dir","path","=","dir","path",".","replace","(","'","\\","\\","'",",","'","/","'",")","if","tif","is","none",":","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","\"","couldn","'","t","open","input","dtm","dataset",",","for","weighting","factor","computatin","\"",")","sys",".","exit","(","1",")","else",":","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","\"","opening","dtm","for","weighting","factor","computation","was","successful","!","\"",")","cols","=","tif",".","raster","x","size","rows","=","tif",".","raster","y","size","bands","=","tif",".","raster","count","i","ar","=","tif",".","read","as","array","(",")","#","con","gdal","1",".","6","e","1",".","7","non","funzia","90","%",",","con","gdal","bindings","per","windows","1",".","9",".","2","sembra","funzionare","provare","anche","a","metter","su","ultime","versioni","di","numpy","i","ar","=","i","ar",".","astype","(","float",")","band","=","tif",".","get","raster","band","(","1",")","#","bands","retrieving","geoinf","=","tif",".","get","geo","transform","(",")","#","upper","left","coordinates",",","cellsize","proj","=","tif",".","get","projection","(",")","tipo","=","i","ar",".","dtype","del","(","tif",")","ndv","=","numpy",".","min","(","i","ar",")","i","ar","[","i","ar","=","=","ndv","]","=","numpy",".","nan","size","filter","=","numpy",".","float32","(","int","(","f","s",")",")","#","importante","che","resti","float32",",","per","omogeneita","'","start","=","clock","(",")","#","take","the","time","i","ar","p","=","numpy",".","ones","(","(","rows",",","cols",")",",","dtype","=","tipo",")","#","matrice","di","numeri","uno","e","zero","sui","nodata","da","usare","per","far","la","media","poi","i","ar","p","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","0","i","ar","d","=","numpy",".","ones","(","(","rows",",","cols",")",",","dtype","=","tipo",")","#","build","up","array","for","summing","correctly","elevation","data","later","i","ar","d","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","0","i","ar","d","[","numpy",".","isnan","(","i","ar",")","=","=","0","]","=","i","ar","[","numpy",".","isnan","(","i","ar",")","=","=","0","]","ker","=","numpy",".","ones","(","(","size","filter",",","size","filter",")",")","#","creating","weights","for","sum","and","then","an","averaging","filter","d","num","el","=","scipy",".","signal",".","convolve2d","(","i","ar","p",",","ker",",","'","same","'",")","#","i","get","the","number","of","elements","per","window","d","num","el","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","numpy",".","nan","e","sum","=","scipy",".","signal",".","convolve2d","(","i","ar","d",",","ker",",","'","same","'",")","#","sum","of","values","in","the","dtm","e","sum","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","numpy",".","nan","m","=","e","sum","/","d","num","el","#","average","=","sum","/","number","of","elements","dtm","r","=","numpy",".","float64","(","i","ar",")","-","numpy",".","float64","(","m",")","#","residual","dtm",",","now","i","need","to","compute","the","std","dev","of","this","averaged","dtm","(","so","i","need","again","mean","values","of","this","and","then","squared","values","to","fasten","the","computation",")","del","(","i","ar","p",",","i","ar","d",",","d","num","el",",","ker",",","e","sum",",","m",",","dtm","r",",","e","r",",","m","r",",","dtm","r","sq",",","m","r","sq",",","e","r","sq",",","mrsq",")","if","sk","flag","=","=","0",":","pass","else",":","sk","tmp","=","path","sink","dtm","+","\"","/","sinked","dtm",".","tif","\"","sk","tmp","=","str","(","sk","tmp",")","sk","dtm","=","osgeo",".","gdal",".","open","(","sk","tmp",")","#","opening","the","flowdir","file","(","1","band",",","bit","not","specified",",","but","usually","32",")","if","sk","dtm","is","none",":","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","\"","couldn","'","t","open","input","sinked","dtm","dataset","\"",")","sys",".","exit","(","1",")","else",":","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","\"","sinked","dtm","opening","was","successful","!","\"",")","sk","dtm","ar","=","sk","dtm",".","read","as","array","(",")","sk","dtm","ar","=","sk","dtm","ar",".","astype","(","numpy",".","float",")","ndv","=","numpy",".","min","(","sk","dtm","ar",")","sk","dtm","ar","[","sk","dtm","ar","=","=","ndv","]","=","numpy",".","na","n","#","to","basin","code","del","(","sk","dtm",")","ri","[","sk","dtm","ar","=","=","numpy",".","na","n","]","=","numpy",".","na","n","sur","rough","=","gdal",".","get","driver","by","name","(","'","g","tiff","'",")",".","create","(","str","(","ri","out",")",",","i","ar",".","shape","[","1","]",",","i","ar",".","shape","[","0","]",",","1",",","gdt","float32",")","#","shape","sono","righe","e","colonne",",","1","il","numero","di","bande","sur","rough",".","set","geo","transform","(","geoinf",")","#","conferisco","coordinate","e","proiezione","del","raster","in","input","sur","rough",".","set","projection","(","proj",")","sur","rough",".","get","raster","band","(","1",")",".","write","array","(","ri",",","0",",","0",")","#","scrivo","effettivamente","il","raster",",","prima","avevo","solo","allocato","la","memoria","sur","rough",".","get","raster","band","(","1",")",".","get","statistics","(","0",",","1",")","#","calculate","statistics","for","visualization","sur","rough","=","none","#","sometimes","i","add","this","to","ensure","the","file","is","fully","deallocated",",","and","to","prevent","running","into","some","gotchas",":","del","sur","rough","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","'","computing","weighting","factor",".",".",".",".",".",".","'",")","maxr","=","float","(","ri","[","numpy",".","isnan","(","ri",")","=","=","false","]",".","max","(",")",")","#","max","element","in","surface","roughness","if","self",".","normseba",".","is","checked","(",")",":","ri","[","numpy",".","where","(","ri","<","0",".","001",")","]","=","0",".","001","minr","=","float","(","ri","[","numpy",".","isnan","(","ri",")","=","=","false","]",".","min","(",")",")","#","min","element","in","surface","roughness","weig","fac","=","1",".","0","-","(","(","numpy",".","log","(","ri",")","-","numpy",".","log","(","minr",")",")","/","(","numpy",".","log","(","maxr",")","-","numpy",".","log","(","minr",")",")",")","weig","fac","[","numpy",".","where","(","weig","fac","<","0",".","001",")","]","=","0",".","001","#","all","avalues","in","the","range","0","-","0","-","001","are","shifted","to","0",".","001",",","the","rest","remains","no","data","else",":","weig","fac","=","1",".","0","-","(","ri","/","maxr",")","#","1","-",".",".",".","to","avoid","1","-","1","=","0","at","denominator","in","downslope","component","weig","fac","[","numpy",".","where","(","weig","fac","<","0",".","001",")","]","=","0",".","001","#","all","avalues","in","the","range","0","-","0","-","001","are","shifted","to","0",".","001",",","the","rest","remains","no","data","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","'","weighting","factor","calculated","!","'",")","wf","=","gdal",".","get","driver","by","name","(","'","g","tiff","'",")",".","create","(","str","(","w","out",")",",","i","ar",".","shape","[","1","]",",","i","ar",".","shape","[","0","]",",","1",",","gdt","float32",")","#","shape","sono","righe","e","colonne",",","1","il","numero","di","bande","wf",".","set","geo","transform","(","geoinf",")","#","conferisco","coordinate","e","proiezione","del","raster","in","input","wf",".","set","projection","(","proj",")","wf",".","get","raster","band","(","1",")",".","write","array","(","weig","fac",",","0",",","0",")","#","scrivo","effettivamente","il","raster",",","prima","avevo","solo","allocato","la","memoria","wf",".","get","raster","band","(","1",")",".","get","statistics","(","0",",","1",")","#","calculate","statistics","for","visualization","wf","=","none","#","sometimes","i","add","this","to","ensure","the","file","is","fully","deallocated",",","and","to","prevent","running","into","some","gotchas",":","del","wf","del","i","ar","del","ri","del","weig","fac","print","(","time",".","strftime","(","\"","%","d","/","%","m","/","%","y","%","h",":","%","m",":","%","s","\"",")",",","'","ri","and","w","files","saved","!","'",")"],"func_name":"rw_cavalli","func_name_tokens":["rw","cavalli"],"docstring":"folder path\nOpening Messages\ndtm as an array\nATTENZIONE\nmask_nodata\nkernel size\nborders kept the same but not realistic values, it divides by n^2 even if it finds only 2 elements scipy version\nUse float64 to have more precision in decimals\nmean of residual topography        E_R = scipy.signal.convolve2d(DTM_R, ker, 'same')\nsum of values in the DTM        E_R[numpy.isnan(I_ar)==1] = numpy.nan        M_R = E_R/D_num_el\naverage =sum/number of elements\nNow playing for standard deviation following: http://stackoverflow.com/questions/18419871/improving-code-efficiency-standard-deviation-on-sliding-windows\nbuild up array for summing correctly elevation data later, this way I squared the values otherwise I loose the decimal precision if array is starting with 4 digits+ decimal + sign\nresiduals squared\nM_R_SQ = numpy.power(M_R, 2)        E_R_SQ = scipy.signal.convolve2d(DTM_R_SQ, ker, 'same')\nsum of values in the DTM        E_R_SQ[numpy.isnan(I_ar)==1] = numpy.nan\nE[X^2] average of squared residual DTM values        MRSQ = numpy.power(M_R, 2)\nsquare of average residual DTM values        Ri = numpy.sqrt(M_R_SQ - MRSQ)\nE[X^2] - E[X]^2       WC = Weight Cavalli\nPay attention to the number we're treating, if we need to compute std dev via convolve and squared trick, for a DTM we need to use numpy.float64(DTM), otherwise the digits are not enough\nCheck flag for use of sinks and sink the wighting factor accordingly\nArray\ncompute the weighting factor as 1-(R/(R+0.001))\nincrease a bit, in this release, old style of standardization\nminima in Roughness set to 0.001\ndetect Roughness minimum or pick a 0.001 minimum\n--------------------------------------\nCONNECTIVITY TO THE OUTLET\n--------------------------------------","docstring_tokens":["folder","path","opening","messages","dtm","as","an","array","attenzione","mask","nodata","kernel","size","borders","kept","the","same","but","not","realistic","values",",","it","divides","by","n","^","2","even","if","it","finds","only","2","elements","scipy","version","use","float64","to","have","more","precision","in","decimals","mean","of","residual","topography","e","r","=","scipy",".","signal",".","convolve2d","(","dtm","r",",","ker",",","'","same","'",")","sum","of","values","in","the","dtm","e","r","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","numpy",".","nan","m","r","=","e","r","/","d","num","el","average","=","sum","/","number","of","elements","now","playing","for","standard","deviation","following",":","build","up","array","for","summing","correctly","elevation","data","later",",","this","way","i","squared","the","values","otherwise","i","loose","the","decimal","precision","if","array","is","starting","with","4","digits","+","decimal","+","sign","residuals","squared","m","r","sq","=","numpy",".","power","(","m","r",",","2",")","e","r","sq","=","scipy",".","signal",".","convolve2d","(","dtm","r","sq",",","ker",",","'","same","'",")","sum","of","values","in","the","dtm","e","r","sq","[","numpy",".","isnan","(","i","ar",")","=","=","1","]","=","numpy",".","nan","e","[","x","^","2","]","average","of","squared","residual","dtm","values","mrsq","=","numpy",".","power","(","m","r",",","2",")","square","of","average","residual","dtm","values","ri","=","numpy",".","sqrt","(","m","r","sq","-","mrsq",")","e","[","x","^","2","]","-","e","[","x","]","^","2","wc","=","weight","cavalli","pay","attention","to","the","number","we","'","re","treating",",","if","we","need","to","compute","std","dev","via","convolve","and","squared","trick",",","for","a","dtm","we","need","to","use","numpy",".","float64","(","dtm",")",",","otherwise","the","digits","are","not","enough","check","flag","for","use","of","sinks","and","sink","the","wighting","factor","accordingly","array","compute","the","weighting","factor","as","1","-","(","r","/","(","r","+","0",".","001",")",")","increase","a","bit",",","in","this","release",",","old","style","of","standardization","minima","in","roughness","set","to","0",".","001","detect","roughness","minimum","or","pick","a","0",".","001","minimum","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","connectivity","to","the","outlet","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],"query":"improving code efficiency: standard deviation on sliding windows","query_tokens":["improving","code","efficiency",":","standard","deviation","on","sliding","windows"]}
{"code":"    def import_run(self, cr, uid, ids=None, context=None):\r        db_model = self.pool.get('base.external.dbsource')\r        actions = self.read(cr, uid, ids, ['id', 'exec_order'])\r        actions.sort(key=lambda x: (x['exec_order'], x['id']))\r\r        for action_ref in actions:\r            obj = self.browse(cr, uid, action_ref['id'])\r            if not obj.enabled:\r                continue  # skip\r\r            _logger.setLevel(obj.raise_import_errors and\r                             logging.DEBUG or _loglvl)\r            _logger.debug('Importing %s...' % obj.name)\r\r            model_name = obj.model_target.model\r            model_obj = self.pool.get(model_name)\r            xml_prefix = model_name.replace('.', '_') + \"_id_\"\r            log = {'start_run': datetime.now().replace(microsecond=0),\r                   'last_run': None,\r                   'last_record_count': 0,\r                   'last_error_count': 0,\r                   'last_warn_count': 0,\r                   'last_log': list()}\r            self.write(cr, uid, [obj.id], log)\r\r            if obj.last_sync:\r                sync = datetime.strptime(obj.last_sync, \"%Y-%m-%d %H:%M:%S\")\r            else:\r                sync = datetime(1900, 1, 1, 0, 0, 0)\r            params = {'sync': sync}\r            res = db_model.execute(cr, uid, [obj.dbsource_id.id],\r                                   obj.sql_source, params, metadata=True)\r\r            cidx = ([i for i, x in enumerate(res['cols'])\r                    if x.upper() != 'NONE'])\r            cols = ([x for i, x in enumerate(res['cols'])\r                    if x.upper() != 'NONE'] + ['id'])\r\r            for row in res['rows']:\r                data = list()\r                for i in cidx:\r                    v = row[i]\r                    if isinstance(v, str):\r                        v = v.strip()\r                    data.append(v)\r                data.append(xml_prefix + str(row[0]).strip())\r\r                log['last_record_count'] += 1\r                self._import_data(cr, uid, cols, data, model_obj, obj, log)\r                if log['last_record_count'] % 500 == 0:\r                    _logger.info('...%s rows processed...'\r                                 % (log['last_record_count']))\r\r            if not (log['last_error_count'] or log['last_warn_count']):\r                log['last_sync'] = log['start_run']\r            level = logging.DEBUG\r            if log['last_warn_count']:\r                level = logging.WARN\r            if log['last_error_count']:\r                level = logging.ERROR\r            _logger.log(level,\r                        'Imported %s , %d rows, %d errors, %d warnings.' %\r                        (model_name, log['last_record_count'],\r                            log['last_error_count'],\r                            log['last_warn_count']))\r            if log['last_log']:\r                log['last_log'].insert(0,\r                                       'LEVEL|== Line ==    |== Relationship \\\r                                       ==|== Message ==')\r            log.update({'last_log': '\\n'.join(log['last_log'])})\r            log.update({'last_run': datetime.now().replace(microsecond=0)})\r            self.write(cr, uid, [obj.id], log)\r\r        _logger.debug('Import job FINISHED.')\r        return True\r\r","code_tokens":["def","import","run","(","self",",","cr",",","uid",",","ids","=","none",",","context","=","none",")",":","db","model","=","self",".","pool",".","get","(","'","base",".","external",".","dbsource","'",")","actions","=","self",".","read","(","cr",",","uid",",","ids",",","[","'","id","'",",","'","exec","order","'","]",")","actions",".","sort","(","key","=","lambda","x",":","(","x","[","'","exec","order","'","]",",","x","[","'","id","'","]",")",")","for","action","ref","in","actions",":","obj","=","self",".","browse","(","cr",",","uid",",","action","ref","[","'","id","'","]",")","if","not","obj",".","enabled",":","continue","#","skip","logger",".","set","level","(","obj",".","raise","import","errors","and","logging",".","debug","or","loglvl",")","logger",".","debug","(","'","importing","%","s",".",".",".","'","%","obj",".","name",")","model","name","=","obj",".","model","target",".","model","model","obj","=","self",".","pool",".","get","(","model","name",")","xml","prefix","=","model","name",".","replace","(","'",".","'",",","'","'",")","+","\"","id","\"","log","=","{","'","start","run","'",":","datetime",".","now","(",")",".","replace","(","microsecond","=","0",")",",","'","last","run","'",":","none",",","'","last","record","count","'",":","0",",","'","last","error","count","'",":","0",",","'","last","warn","count","'",":","0",",","'","last","log","'",":","list","(",")","}","self",".","write","(","cr",",","uid",",","[","obj",".","id","]",",","log",")","if","obj",".","last","sync",":","sync","=","datetime",".","strptime","(","obj",".","last","sync",",","\"","%","y","-","%","m","-","%","d","%","h",":","%","m",":","%","s","\"",")","else",":","sync","=","datetime","(","1900",",","1",",","1",",","0",",","0",",","0",")","params","=","{","'","sync","'",":","sync","}","res","=","db","model",".","execute","(","cr",",","uid",",","[","obj",".","dbsource","id",".","id","]",",","obj",".","sql","source",",","params",",","metadata","=","true",")","cidx","=","(","[","i","for","i",",","x","in","enumerate","(","res","[","'","cols","'","]",")","if","x",".","upper","(",")","!","=","'","none","'","]",")","cols","=","(","[","x","for","i",",","x","in","enumerate","(","res","[","'","cols","'","]",")","if","x",".","upper","(",")","!","=","'","none","'","]","+","[","'","id","'","]",")","for","row","in","res","[","'","rows","'","]",":","data","=","list","(",")","for","i","in","cidx",":","v","=","row","[","i","]","if","isinstance","(","v",",","str",")",":","v","=","v",".","strip","(",")","data",".","append","(","v",")","data",".","append","(","xml","prefix","+","str","(","row","[","0","]",")",".","strip","(",")",")","log","[","'","last","record","count","'","]","+","=","1","self",".","import","data","(","cr",",","uid",",","cols",",","data",",","model","obj",",","obj",",","log",")","if","log","[","'","last","record","count","'","]","%","500","=","=","0",":","logger",".","info","(","'",".",".",".","%","s","rows","processed",".",".",".","'","%","(","log","[","'","last","record","count","'","]",")",")","if","not","(","log","[","'","last","error","count","'","]","or","log","[","'","last","warn","count","'","]",")",":","log","[","'","last","sync","'","]","=","log","[","'","start","run","'","]","level","=","logging",".","debug","if","log","[","'","last","warn","count","'","]",":","level","=","logging",".","warn","if","log","[","'","last","error","count","'","]",":","level","=","logging",".","error","logger",".","log","(","level",",","'","imported","%","s",",","%","d","rows",",","%","d","errors",",","%","d","warnings",".","'","%","(","model","name",",","log","[","'","last","record","count","'","]",",","log","[","'","last","error","count","'","]",",","log","[","'","last","warn","count","'","]",")",")","if","log","[","'","last","log","'","]",":","log","[","'","last","log","'","]",".","insert","(","0",",","'","level","|","=","=","line","=","=","|","=","=","relationship","\\","=","=","|","=","=","message","=","=","'",")","log",".","update","(","{","'","last","log","'",":","'","\\n","'",".","join","(","log","[","'","last","log","'","]",")","}",")","log",".","update","(","{","'","last","run","'",":","datetime",".","now","(",")",".","replace","(","microsecond","=","0",")","}",")","self",".","write","(","cr",",","uid",",","[","obj",".","id","]",",","log",")","logger",".","debug","(","'","import","job","finished",".","'",")","return","true"],"func_name":"import_run","func_name_tokens":["import","run"],"docstring":"Consider each dbtable:\nnow() microseconds are stripped\nto avoid problem with SQL smalldate\nTODO: convert UTC Now to local timezone\nhttp://stackoverflow.com/questions/4770297/python-convert-utc-datetime-string-to-local-datetime\nPrepare SQL sentence; replace \"%s\" with the last_sync date\nExclude columns titled \"None\"; add (xml_)\"id\" column\nImport each row:\nBuild data row;\nimport only columns present in the \"cols\" list\nTODO: Handle imported datetimes properly\nconvert from localtime to UTC!\nImport the row; on error, write line to the log\nFinished importing all rows\nIf no errors, write new sync date\nWrite run log, either if the table import is active or inactive\nFinished","docstring_tokens":["consider","each","dbtable",":","now","(",")","microseconds","are","stripped","to","avoid","problem","with","sql","smalldate","todo",":","convert","utc","now","to","local","timezone","prepare","sql","sentence",";","replace","\"","%","s","\"","with","the","last","sync","date","exclude","columns","titled","\"","none","\"",";","add","(","xml",")","\"","id","\"","column","import","each","row",":","build","data","row",";","import","only","columns","present","in","the","\"","cols","\"","list","todo",":","handle","imported","datetimes","properly","convert","from","localtime","to","utc","!","import","the","row",";","on","error",",","write","line","to","the","log","finished","importing","all","rows","if","no","errors",",","write","new","sync","date","write","run","log",",","either","if","the","table","import","is","active","or","inactive","finished"],"query":"Convert UTC datetime string to local datetime","query_tokens":["convert","utc","datetime","string","to","local","datetime"]}
{"code":"    def upload_file(self, f, progress=None):        f = find_file(f)        if f not in self.uploaded:            start = time.time()            import md5            m = md5.new()            m.update(open(f).read())            m.update(getpass.getuser())            dest = '/tmp/' + m.hexdigest() + \"-\" + os.path.basename(f)            sftp = self.ssh.open_sftp()            try:                sftp.stat(dest)                print \"{0} Skipping upload of file {1}. File {2} exists on remote side!\".format(self, f, dest)            except IOError, e:                if e.errno == errno.ENOENT: # no such file or directory                    verboseprint(\"{0} uploading file {1}\".format(self, f))                    sftp.put(f, dest, callback=progress)                elif e.errno == errno.EEXIST: # File Exists                    pass                else:                    print \"Got unexpected errno: %s on paramiko sftp.\" % e.errno                    print \"Lookup here: https://docs.python.org/2/library/errno.html\"                    exc_info = sys.exc_info()                    raise exc_info[1], None, exc_info[2]            finally:                sftp.close()            self.uploaded[f] = dest        sys.stdout.flush()        return self.uploaded[f]","code_tokens":["def","upload","file","(","self",",","f",",","progress","=","none",")",":","f","=","find","file","(","f",")","if","f","not","in","self",".","uploaded",":","start","=","time",".","time","(",")","import","md5","m","=","md5",".","new","(",")","m",".","update","(","open","(","f",")",".","read","(",")",")","m",".","update","(","getpass",".","getuser","(",")",")","dest","=","'","/","tmp","/","'","+","m",".","hexdigest","(",")","+","\"","-","\"","+","os",".","path",".","basename","(","f",")","sftp","=","self",".","ssh",".","open","sftp","(",")","try",":","sftp",".","stat","(","dest",")","print","\"","{","0","}","skipping","upload","of","file","{","1","}",".","file","{","2","}","exists","on","remote","side","!","\"",".","format","(","self",",","f",",","dest",")","except","io","error",",","e",":","if","e",".","errno","=","=","errno",".","enoent",":","#","no","such","file","or","directory","verboseprint","(","\"","{","0","}","uploading","file","{","1","}","\"",".","format","(","self",",","f",")",")","sftp",".","put","(","f",",","dest",",","callback","=","progress",")","elif","e",".","errno","=","=","errno",".","eexist",":","#","file","exists","pass","else",":","print","\"","got","unexpected","errno",":","%","s","on","paramiko","sftp",".","\"","%","e",".","errno","print","\"","lookup","here",":","\"","exc","info","=","sys",".","exc","info","(",")","raise","exc","info","[","1","]",",","none",",","exc","info","[","2","]","finally",":","sftp",".","close","(",")","self",".","uploaded","[","f","]","=","dest","sys",".","stdout",".","flush","(",")","return","self",".","uploaded","[","f","]"],"func_name":"upload_file","func_name_tokens":["upload","file"],"docstring":"FIX! we won't find it here if it's hdfs://172.16.2.151/ file\nsigh. we rm/create sandbox in build_cloud now\n(because nosetests doesn't exec h2o_main and we\ndon't want to code \"clean_sandbox()\" in all the tests.\nSo: we don't have a sandbox here, or if we do, we're going to delete it.\nJust don't log anything until build_cloud()? that should be okay?\nwe were just logging this upload message..not needed.\ncheck if file exists on remote side\ndoes paramiko have issues with big files? (>1GB, or 650MB?). maybe we don't care.\nThis would arise (as mentioned in the source, line no 667,\nhttp://www.lag.net/paramiko/docs/paramiko.sftp_client-pysrc.html) when there is\nany error reading the packet or when there is EOFError\nbut I'm getting sftp close here randomly at sm.\nhttp://stackoverflow.com/questions/22708942/python-paramiko-module-error-with-callback\nhttp://stackoverflow.com/questions/15010540/paramiko-sftp-server-connection-dropped\nhttp://stackoverflow.com/questions/12322210/handling-paramiko-sshexception-server-connection-dropped\nnote we don't do a md5 compare. so if a corrupted file was uploaded we won't re-upload\nuntil we do another build.\nif self.channel.closed or self.channel.exit_status_ready():\nraise Exception(\"something bad happened to our %s being used for sftp. keepalive? %s %s\" % \\\n(self, self.channel.closed, self.channel.exit_status_ready()))\nif you want to track upload times\nprint \"\\n{0:.3f} seconds\".format(time.time() - start)\nthrow the exception again, if not what we expected","docstring_tokens":["fix","!","we","won","'","t","find","it","here","if","it","'","s","hdfs",":","/","/","172",".","16",".","2",".","151","/","file","sigh",".","we","rm","/","create","sandbox","in","build","cloud","now","(","because","nosetests","doesn","'","t","exec","h2o","main","and","we","don","'","t","want","to","code","\"","clean","sandbox","(",")","\"","in","all","the","tests",".","so",":","we","don","'","t","have","a","sandbox","here",",","or","if","we","do",",","we","'","re","going","to","delete","it",".","just","don","'","t","log","anything","until","build","cloud","(",")","?","that","should","be","okay","?","we","were","just","logging","this","upload","message",".",".","not","needed",".","check","if","file","exists","on","remote","side","does","paramiko","have","issues","with","big","files","?","(",">","1gb",",","or","650mb","?",")",".","maybe","we","don","'","t","care",".","this","would","arise","(","as","mentioned","in","the","source",",","line","no","667",",",")","when","there","is","any","error","reading","the","packet","or","when","there","is","eof","error","but","i","'","m","getting","sftp","close","here","randomly","at","sm",".","note","we","don","'","t","do","a","md5","compare",".","so","if","a","corrupted","file","was","uploaded","we","won","'","t","re","-","upload","until","we","do","another","build",".","if","self",".","channel",".","closed","or","self",".","channel",".","exit","status","ready","(",")",":","raise","exception","(","\"","something","bad","happened","to","our","%","s","being","used","for","sftp",".","keepalive","?","%","s","%","s","\"","%","\\","(","self",",","self",".","channel",".","closed",",","self",".","channel",".","exit","status","ready","(",")",")",")","if","you","want","to","track","upload","times","print","\"","\\","n","{","0",":",".","3f","}","seconds","\"",".","format","(","time",".","time","(",")","-","start",")","throw","the","exception","again",",","if","not","what","we","expected"],"query":"paramiko sftp server connection dropped","query_tokens":["paramiko","sftp","server","connection","dropped"]}
{"code":"def make_dummy_objects(request: HttpRequest) -> DummyObjectCollection:","code_tokens":["def","make","dummy","objects","(","request",":","http","request",")","-",">","dummy","object","collection",":"],"func_name":"make_dummy_objects","func_name_tokens":["make","dummy","objects"],"docstring":"Returns a collection of dummy objects, for testing consent-to-contact    templates without using live patient data.    Args:        request: the :class:`django.http.request.HttpRequest`    Returns:        a :class:`DummyObjectCollection`    We want to create these objects in memory, without saving to the DB.    However, Django is less good at SQLAlchemy for this, and saves.    - http://stackoverflow.com/questions/7908349/django-making-relationships-in-memory-without-saving-to-db\nnoqa    - https://code.djangoproject.com/ticket/17253    - http://stackoverflow.com/questions/23372786/django-models-assigning-foreignkey-object-without-saving-to-database\nnoqa    - http://stackoverflow.com/questions/7121341/django-adding-objects-to-a-related-set-without-saving-to-db\nnoqa    A simple method works for an SQLite backend database but fails with    an IntegrityError for MySQL/SQL Server. For example:    .. code-block:: none        IntegrityError at /draft_traffic_light_decision_form/-1/html/        (1452, 'Cannot add or update a child row: a foreign key constraint        fails (`crate_django`.`consent_study_researchers`, CONSTRAINT        `consent_study_researchers_study_id_19bb255f_fk_consent_study_id`        FOREIGN KEY (`study_id`) REFERENCES `consent_study` (`id`))')","docstring_tokens":["returns","a","collection","of","dummy","objects",",","for","testing","consent","-","to","-","contact","templates","without","using","live","patient","data",".","args",":","request",":","the",":","class",":","`","django",".","http",".","request",".","http","request","`","returns",":","a",":","class",":","`","dummy","object","collection","`","we","want","to","create","these","objects","in","memory",",","without","saving","to","the","db",".","however",",","django","is","less","good","at","sql","alchemy","for","this",",","and","saves",".","-","noqa","-","-","noqa","-","noqa","a","simple","method","works","for","an","sq","lite","backend","database","but","fails","with","an","integrity","error","for","my","sql","/","sql","server",".","for","example",":",".",".","code","-","block",":",":","none","integrity","error","at","/","draft","traffic","light","decision","form","/","-","1","/","html","/","(","1452",",","'","cannot","add","or","update","a","child","row",":","a","foreign","key","constraint","fails","(","`","crate","django","`",".","`","consent","study","researchers","`",",","constraint","`","consent","study","researchers","study","id","19bb255f","fk","consent","study","id","`","foreign","key","(","`","study","id","`",")","references","`","consent","study","`","(","`","id","`",")",")","'",")"],"query":"Django: Adding objects to a related set without saving to DB","query_tokens":["django",":","adding","objects","to","a","related","set","without","saving","to","db"]}
{"code":"    def get_method(self):        if self._method:            return self._method        else:            return urllib2.Request.get_method(self)class SSLValidationHandler(urllib2.BaseHandler):    CONNECT_COMMAND = \"CONNECT %s:%s HTTP/1.0\\r\\nConnection: close\\r\\n\"","code_tokens":["def","get","method","(","self",")",":","if","self",".","method",":","return","self",".","method","else",":","return","urllib2",".","request",".","get","method","(","self",")","class","ssl","validation","handler","(","urllib2",".","base","handler",")",":","connect","command","=","\"","connect","%","s",":","%","s","http","/","1",".","0","\\r","\\n","connection",":","close","\\r","\\n","\""],"func_name":"get_method","func_name_tokens":["get","method"],"docstring":"A custom handler class for SSL validation.    Based on:    http://stackoverflow.com/questions/1087227/validate-ssl-certificates-with-python    http://techknack.net/python-urllib2-handlers/","docstring_tokens":["a","custom","handler","class","for","ssl","validation",".","based","on",":"],"query":"Validate SSL certificates with Python","query_tokens":["validate","ssl","certificates","with","python"]}
{"code":"def main():    procLock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)    try:        procLock.bind('\\0' + 'indicator-stickynotes')    except socket.error:        print('Indicator stickynotes already running.')        sys.exit()    try:        locale.setlocale(locale.LC_ALL, '')    except:        locale.setlocale(locale.LC_ALL, 'C')    if os.path.abspath(__file__)[:4] == '/usr':","code_tokens":["def","main","(",")",":","proc","lock","=","socket",".","socket","(","socket",".","af","unix",",","socket",".","sock","dgram",")","try",":","proc","lock",".","bind","(","'","\\0","'","+","'","indicator","-","stickynotes","'",")","except","socket",".","error",":","print","(","'","indicator","stickynotes","already","running",".","'",")","sys",".","exit","(",")","try",":","locale",".","setlocale","(","locale",".","lc","all",",","'","'",")","except",":","locale",".","setlocale","(","locale",".","lc","all",",","'","c","'",")","if","os",".","path",".","abspath","(","file",")","[",":","4","]","=","=","'","/","usr","'",":"],"func_name":"main","func_name_tokens":["main"],"docstring":"Avoid duplicate process\nFrom https://stackoverflow.com/questions/788411/check-to-see-if-python-script-is-running\nIf we're running from /usr, then .mo files are not in MO_DIR.","docstring_tokens":["avoid","duplicate","process","from","if","we","'","re","running","from","/","usr",",","then",".","mo","files","are","not","in","mo","dir","."],"query":"Check to see if python script is running","query_tokens":["check","to","see","if","python","script","is","running"]}
{"code":"def smart_truncate(content, length=100, suffix=\"....(more)\"):    content = smart_text(content)    if len(content) <= length:        return content    else:        return \" \".join(content[: length + 1].split(\" \")[0:-1]) + suffix","code_tokens":["def","smart","truncate","(","content",",","length","=","100",",","suffix","=","\"",".",".",".",".","(","more",")","\"",")",":","content","=","smart","text","(","content",")","if","len","(","content",")","<","=","length",":","return","content","else",":","return","\"","\"",".","join","(","content","[",":","length","+","1","]",".","split","(","\"","\"",")","[","0",":","-","1","]",")","+","suffix"],"func_name":"smart_truncate","func_name_tokens":["smart","truncate"],"docstring":"Small function to truncate a string in a sensible way, sourced from:    http://stackoverflow.com/questions/250357/smart-truncate-in-python","docstring_tokens":["small","function","to","truncate","a","string","in","a","sensible","way",",","sourced","from",":"],"query":"Truncate a string without ending in the middle of a word","query_tokens":["truncate","a","string","without","ending","in","the","middle","of","a","word"]}
{"code":"def get_trailing_number(s):    m = re.search(r'\\d+$', s)    return int(m.group()) if m else Nonef=open('ff_draft_picks.csv', 'w')w=csv.writer(f)w.writerow(['League #', 'Winner draft pick #', '# Teams in league']) #write the header rowleague_number=0while league_number<NUMBER_OF_LEAGUES_TO_SEARCH: #keep checking until NUMBER_OF_LEAGUES_TO_SEARCH are searched\tprint \"Currently checking league #\" + str(league_number)\tpage=requests.get('http://games.espn.com/ffl/leagueoffice?leagueId=' + str(league_number) + \"&seasonId=2015\").text\tif \"2015 League Champion!\" in page: #a way to check if the league is public\t\tsoup=BeautifulSoup(page, 'html.parser')\t\tteam_name=soup.find_all('strong')[4].text #the winning team name is the fifth 'strong' element on the page","code_tokens":["def","get","trailing","number","(","s",")",":","m","=","re",".","search","(","r","'","\\d","+","$","'",",","s",")","return","int","(","m",".","group","(",")",")","if","m","else","nonef","=","open","(","'","ff","draft","picks",".","csv","'",",","'","w","'",")","w","=","csv",".","writer","(","f",")","w",".","writerow","(","[","'","league","#","'",",","'","winner","draft","pick","#","'",",","'","#","teams","in","league","'","]",")","#","write","the","header","rowleague","number","=","0while","league","number","<","number","of","leagues","to","search",":","#","keep","checking","until","number","of","leagues","to","search","are","searched","print","\"","currently","checking","league","#","\"","+","str","(","league","number",")","page","=","requests",".","get","(","'","'","+","str","(","league","number",")","+","\"","&","season","id","=","2015","\"",")",".","text","if","\"","2015","league","champion","!","\"","in","page",":","#","a","way","to","check","if","the","league","is","public","soup","=","beautiful","soup","(","page",",","'","html",".","parser","'",")","team","name","=","soup",".","find","all","(","'","strong","'",")","[","4","]",".","text","#","the","winning","team","name","is","the","fifth","'","strong","'","element","on","the","page"],"func_name":"get_trailing_number","func_name_tokens":["get","trailing","number"],"docstring":"taken from https://stackoverflow.com/a/7085715/2150542\nthis code will get the numbers at the end of a string:","docstring_tokens":["taken","from","this","code","will","get","the","numbers","at","the","end","of","a","string",":"],"query":"Check what number a string ends with in Python","query_tokens":["check","what","number","a","string","ends","with","in","python"]}
{"code":"  def run(self):    cmd_args = shlex.split(self.run_cmd)    logger.info('Local command RUN-STEP starting with rank %d', self.run_rank)    logger.info('Running subprocess command with following args: ' + str(cmd_args))    self.ts_start = time.strftime(\"%Y-%m-%d %H:%M:%S\")    try:      self.process = subprocess.Popen(cmd_args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=1)      if self.kill_after_seconds:        self.timer = Timer(self.kill_after_seconds, self.kill)        self.timer.start()      for line in iter(self.process.stdout.readline, b''):        logger.info(line.strip())      self.process.communicate()    except KeyboardInterrupt:      logger.warning('Handling keyboard interrupt (Ctrl-C)')      self.kill()    if self.timer:      self.timer.cancel()    self.ts_end = time.strftime(\"%Y-%m-%d %H:%M:%S\")    logger.info('subprocess finished')    logger.info('run_step started at ' + self.ts_start + ' and ended at ' + self.ts_end)","code_tokens":["def","run","(","self",")",":","cmd","args","=","shlex",".","split","(","self",".","run","cmd",")","logger",".","info","(","'","local","command","run","-","step","starting","with","rank","%","d","'",",","self",".","run","rank",")","logger",".","info","(","'","running","subprocess","command","with","following","args",":","'","+","str","(","cmd","args",")",")","self",".","ts","start","=","time",".","strftime","(","\"","%","y","-","%","m","-","%","d","%","h",":","%","m",":","%","s","\"",")","try",":","self",".","process","=","subprocess",".","popen","(","cmd","args",",","stdout","=","subprocess",".","pipe",",","stderr","=","subprocess",".","stdout",",","bufsize","=","1",")","if","self",".","kill","after","seconds",":","self",".","timer","=","timer","(","self",".","kill","after","seconds",",","self",".","kill",")","self",".","timer",".","start","(",")","for","line","in","iter","(","self",".","process",".","stdout",".","readline",",","b","'","'",")",":","logger",".","info","(","line",".","strip","(",")",")","self",".","process",".","communicate","(",")","except","keyboard","interrupt",":","logger",".","warning","(","'","handling","keyboard","interrupt","(","ctrl","-","c",")","'",")","self",".","kill","(",")","if","self",".","timer",":","self",".","timer",".","cancel","(",")","self",".","ts","end","=","time",".","strftime","(","\"","%","y","-","%","m","-","%","d","%","h",":","%","m",":","%","s","\"",")","logger",".","info","(","'","subprocess","finished","'",")","logger",".","info","(","'","run","step","started","at","'","+","self",".","ts","start","+","'","and","ended","at","'","+","self",".","ts","end",")"],"func_name":"run","func_name_tokens":["run"],"docstring":"Run the command, infer time period to be used in metric analysis phase.    :return: None\nTODO: Add try catch blocks. Kill process on CTRL-C\nInfer time period for analysis. Assume same timezone between client and servers.\nUsing 2nd method here to stream output:\nhttp://stackoverflow.com/questions/2715847/python-read-streaming-input-from-subprocess-communicate","docstring_tokens":["run","the","command",",","infer","time","period","to","be","used","in","metric","analysis","phase",".","todo",":","add","try","catch","blocks",".","kill","process","on","ctrl","-","c","infer","time","period","for","analysis",".","assume","same","timezone","between","client","and","servers",".","using","2nd","method","here","to","stream","output",":"],"query":"Read streaming input from subprocess.communicate()","query_tokens":["read","streaming","input","from","subprocess",".","communicate","(",")"]}
{"code":"def _number_of_set_bits(x):    x -= (x >> 1) & 0x55555555    x = ((x >> 2) & 0x33333333) + (x & 0x33333333)    x = ((x >> 4) + x) & 0x0f0f0f0f    x += x >> 8    x += x >> 16    return x & 0x0000003f","code_tokens":["def","number","of","set","bits","(","x",")",":","x","-","=","(","x",">",">","1",")","&","0x55555555","x","=","(","(","x",">",">","2",")","&","0x33333333",")","+","(","x","&","0x33333333",")","x","=","(","(","x",">",">","4",")","+","x",")","&","0x0f0f0f0f","x","+","=","x",">",">","8","x","+","=","x",">",">","16","return","x","&","0x0000003f"],"func_name":"_number_of_set_bits","func_name_tokens":["number","of","set","bits"],"docstring":"Returns the number of bits that are set in a 32bit int\nTaken from http://stackoverflow.com/a/4912729. Many thanks!","docstring_tokens":["returns","the","number","of","bits","that","are","set","in","a","32bit","int","taken","from","many","thanks","!"],"query":"Python Network/cidr Calculations","query_tokens":["python","network","/","cidr","calculations"]}
{"code":"import reimport fileinputdef this_line_is_useless(line):    useless_es = [        'BEGIN TRANSACTION',        'COMMIT',        'sqlite_sequence',        'CREATE UNIQUE INDEX',        'PRAGMA',        ]    for useless in useless_es:        if re.search(useless, line):            return True","code_tokens":["import","reimport","fileinputdef","this","line","is","useless","(","line",")",":","useless","es","=","[","'","begin","transaction","'",",","'","commit","'",",","'","sqlite","sequence","'",",","'","create","unique","index","'",",","'","pragma","'",",","]","for","useless","in","useless","es",":","if","re",".","search","(","useless",",","line",")",":","return","true"],"func_name":"this_line_is_useless","func_name_tokens":["this","line","is","useless"],"docstring":"Lifted from:http://stackoverflow.com/questions/18671/quick-easy-way-to-migrate-sqlite3-to-mysqlRun like so:sqlite3 .db .dump | python sqlite2mysql.py > .sqlThen you can import the .sql file into MySqlNote - you need to add foreign key constrains manually since sqlite doesn't actually support them","docstring_tokens":["lifted","from",":","like","so",":","sqlite3",".","db",".","dump","|","python","sqlite2mysql",".","py",">",".","sql","then","you","can","import","the",".","sql","file","into","my","sql","note","-","you","need","to","add","foreign","key","constrains","manually","since","sqlite","doesn","'","t","actually","support","them"],"query":"Quick easy way to migrate SQLite3 to MySQL? [closed]","query_tokens":["quick","easy","way","to","migrate","sq","lite3","to","my","sql","?","[","closed","]"]}
{"code":"def batchwise(t, size):    it = iter(t)    return zip(*[it] * size)","code_tokens":["def","batchwise","(","t",",","size",")",":","it","=","iter","(","t",")","return","zip","(","*","[","it","]","*","size",")"],"func_name":"batchwise","func_name_tokens":["batchwise"],"docstring":"Iterate a collection in arbitrary batches\nfrom: http://stackoverflow.com/questions/4628290/pairs-from-single-list\nReturns true if the pair of records are properly pairs","docstring_tokens":["iterate","a","collection","in","arbitrary","batches","from",":","returns","true","if","the","pair","of","records","are","properly","pairs"],"query":"Pairs from single list","query_tokens":["pairs","from","single","list"]}
{"code":"def su(newuser, set_home_dir=True):","code_tokens":["def","su","(","newuser",",","set","home","dir","=","true",")",":"],"func_name":"su","func_name_tokens":["su"],"docstring":"Login as newuser.        Use sudo() if you want to return to the original user later.        This will usually only work if you call sudo() as root.        This function only successfully changes the euid, not the uid.        Programs which use the uid, such as ssh and gpg, need extra help.        One solution is to prefix commands with \"sudo -u USER\".        See the jean.ssh module.        This function is unreliable with ssh, os.openpty(), and more.        A workaround is to use sudo in an enclosing bash script. Or::\nif not user VM_OWNER then relaunch this program            if sh.whoami().strip() != VM_OWNER:                os.execvp( 'sudo' , ['sudo', '-u', VM_OWNER] + sys.argv)        Raises OsError if user does not exist or current        user does not has permission to log in as new user.     if whoami() != newuser:        uid = getuid(newuser)        os.seteuid(uid)\nwhy doesn't this work?        try:\nSee http://stackoverflow.com/questions/7529252/operation-not-permitted-on-using-os-setuid-python\nif os.fork():\nos._exit(0)            os.setuid(uid)        except:\nDEBUG\nDEBUG            pass    require_user(newuser)    if set_home_dir:        os.environ['HOME'] = getdir(newuser)","docstring_tokens":["login","as","newuser",".","use","sudo","(",")","if","you","want","to","return","to","the","original","user","later",".","this","will","usually","only","work","if","you","call","sudo","(",")","as","root",".","this","function","only","successfully","changes","the","euid",",","not","the","uid",".","programs","which","use","the","uid",",","such","as","ssh","and","gpg",",","need","extra","help",".","one","solution","is","to","prefix","commands","with","\"","sudo","-","u","user","\"",".","see","the","jean",".","ssh","module",".","this","function","is","unreliable","with","ssh",",","os",".","openpty","(",")",",","and","more",".","a","workaround","is","to","use","sudo","in","an","enclosing","bash","script",".","or",":",":","if","not","user","vm","owner","then","relaunch","this","program","if","sh",".","whoami","(",")",".","strip","(",")","!","=","vm","owner",":","os",".","execvp","(","'","sudo","'",",","[","'","sudo","'",",","'","-","u","'",",","vm","owner","]","+","sys",".","argv",")","raises","os","error","if","user","does","not","exist","or","current","user","does","not","has","permission","to","log","in","as","new","user",".","if","whoami","(",")","!","=","newuser",":","uid","=","getuid","(","newuser",")","os",".","seteuid","(","uid",")","why","doesn","'","t","this","work","?","try",":","see","if","os",".","fork","(",")",":","os",".","exit","(","0",")","os",".","setuid","(","uid",")","except",":","debug","debug","pass","require","user","(","newuser",")","if","set","home","dir",":","os",".","environ","[","'","home","'","]","=","getdir","(","newuser",")"],"query":"“Operation not permitted” on using os.setuid( ) [python]","query_tokens":["“","operation","not","permitted","”","on","using","os",".","setuid","(",")","[","python","]"]}
{"code":"    def _raise_wa_error(self, response):","code_tokens":["def","raise","wa","error","(","self",",","response",")",":"],"func_name":"_raise_wa_error","func_name_tokens":["raise","wa","error"],"docstring":"Raise a WASMError exception populated with values derived from        _get_wa_error.        raise WASMError(httperror=response, *self._get_wa_error(response))class HTTPSClientAuthHandler(urllib2.HTTPSHandler):\nthanks to: http://stackoverflow.com/questions/5896380/https-connection-\n5899320","docstring_tokens":["raise","a","wasm","error","exception","populated","with","values","derived","from","get","wa","error",".","raise","wasm","error","(","httperror","=","response",",","*","self",".","get","wa","error","(","response",")",")","class","https","client","auth","handler","(","urllib2",".","https","handler",")",":","thanks","to",":","5899320"],"query":"HTTPS connection using PEM Certificate","query_tokens":["https","connection","using","pem","certificate"]}
{"code":"def get_layer(request, layername):","code_tokens":["def","get","layer","(","request",",","layername",")",":"],"func_name":"get_layer","func_name_tokens":["get","layer"],"docstring":"Get Layer object as JSON\nFunction to treat Decimal in json.dumps.\nhttp://stackoverflow.com/a/16957370/1198772","docstring_tokens":["get","layer","object","as","json","function","to","treat","decimal","in","json",".","dumps","."],"query":"Python to JSON Serialization fails on Decimal [duplicate]","query_tokens":["python","to","json","serialization","fails","on","decimal","[","duplicate","]"]}
{"code":"    def __call__(self):        self.call('python3 -m pep8 sets test setup.py')        self.call('python3 -m pylint sets ' + self.args)        self.call('python3 -m pylint test ' + self.args)        self.call('python3 -m pylint setup.py ' + self.args)class BuildExtCommand(build_ext):","code_tokens":["def","call","(","self",")",":","self",".","call","(","'","python3","-","m","pep8","sets","test","setup",".","py","'",")","self",".","call","(","'","python3","-","m","pylint","sets","'","+","self",".","args",")","self",".","call","(","'","python3","-","m","pylint","test","'","+","self",".","args",")","self",".","call","(","'","python3","-","m","pylint","setup",".","py","'","+","self",".","args",")","class","build","ext","command","(","build","ext",")",":"],"func_name":"__call__","func_name_tokens":["call"],"docstring":"Fix Numpy build error when bundled as a dependency.    From http://stackoverflow.com/a/21621689/1079110","docstring_tokens":["fix","numpy","build","error","when","bundled","as","a","dependency",".","from"],"query":"How to Bootstrap numpy installation in setup.py","query_tokens":["how","to","bootstrap","numpy","installation","in","setup",".","py"]}
{"code":"def getClass(name):\tparts = name.split(\".\")\tmodule = \".\".join(parts[:-1])\tm = __import__(module)\tfor comp in parts[1:]:\t\tm = getattr(m, comp)\treturn m","code_tokens":["def","get","class","(","name",")",":","parts","=","name",".","split","(","\"",".","\"",")","module","=","\"",".","\"",".","join","(","parts","[",":","-","1","]",")","m","=","import","(","module",")","for","comp","in","parts","[","1",":","]",":","m","=","getattr","(","m",",","comp",")","return","m"],"func_name":"getClass","func_name_tokens":["get","class"],"docstring":"Taken from http://stackoverflow.com/a/452981/2028598","docstring_tokens":["taken","from"],"query":"Does python have an equivalent to Java Class.forName()?","query_tokens":["does","python","have","an","equivalent","to","java","class",".","for","name","(",")","?"]}
{"code":"def rsa_xml_to_key(xml):    try:        dom = parseString(xml)        e = base64.b64decode(dom.getElementsByTagName('Exponent')[0].childNodes[0].data)        n = base64.b64decode(dom.getElementsByTagName('Modulus')[0].childNodes[0].data)        key = M2Crypto.RSA.new_pub_key((            M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hexlify(e))),            M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hexlify(n))),            ))        return key    except:        return None","code_tokens":["def","rsa","xml","to","key","(","xml",")",":","try",":","dom","=","parse","string","(","xml",")","e","=","base64",".","b64decode","(","dom",".","get","elements","by","tag","name","(","'","exponent","'",")","[","0","]",".","child","nodes","[","0","]",".","data",")","n","=","base64",".","b64decode","(","dom",".","get","elements","by","tag","name","(","'","modulus","'",")","[","0","]",".","child","nodes","[","0","]",".","data",")","key","=","m2crypto",".","rsa",".","new","pub","key","(","(","m2crypto",".","m2",".","bn","to","mpi","(","m2crypto",".","m2",".","hex","to","bn","(","hexlify","(","e",")",")",")",",","m2crypto",".","m2",".","bn","to","mpi","(","m2crypto",".","m2",".","hex","to","bn","(","hexlify","(","n",")",")",")",",",")",")","return","key","except",":","return","none"],"func_name":"rsa_xml_to_key","func_name_tokens":["rsa","xml","to","key"],"docstring":"Parse powershell RSA.ToXmlString() public key string and    return a M2Crypto key object.    Reference- http://stackoverflow.com/questions/10367072/m2crypto-import-keys-from-non-standard-file\nparse the xml DOM and extract the exponent/modulus\nbuild the new key\nif there's an XML parsing error, return None","docstring_tokens":["parse","powershell","rsa",".","to","xml","string","(",")","public","key","string","and","return","a","m2crypto","key","object",".","reference","-","parse","the","xml","dom","and","extract","the","exponent","/","modulus","build","the","new","key","if","there","'","s","an","xml","parsing","error",",","return","none"],"query":"M2Crypto - import keys from non-standard file?","query_tokens":["m2crypto","-","import","keys","from","non","-","standard","file","?"]}
{"code":"def make_read_wrapper(attrkey, typekey, view_name):","code_tokens":["def","make","read","wrapper","(","attrkey",",","typekey",",","view","name",")",":"],"func_name":"make_read_wrapper","func_name_tokens":["make","read","wrapper"],"docstring":"See http://stackoverflow.com/a/3431699/654755 for why.","docstring_tokens":["see","for","why","."],"query":"Creating functions in a loop","query_tokens":["creating","functions","in","a","loop"]}
{"code":"    @staticmethod    def solution(x      ,                  y      ,                 z      ,                 mapping,                 use_mapping = True):","code_tokens":["@","staticmethod","def","solution","(","x",",","y",",","z",",","mapping",",","use","mapping","=","true",")",":"],"func_name":"solution","func_name_tokens":["solution"],"docstring":"Exact solution = sin((x - 0.5)^2 + (y - 0.5)^2).\nhttp://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python        Static method which returns the solution:             sin((x - 0.5)^2 + (y - 0.5)^2).                      Arguments:               x (number or list[numbers]) : abscissa coordinate.               y (number or list[numbers]) : ordinate coordinate.                          Returns:               a numpy vector with the solution.        dim = 2        log_file = None        logger = None        x_n, y_n = ([] for i in xrange(0, 2))        x_t = x        y_t = y        if (use_mapping):            if (type(x) is not list):                x_t = [x]                y_t = [y]            n_x = len(x_t)            for i in xrange(0, n_x):                numpy_point = numpy.array([x_t[i], y_t[i]])                values = utilities.apply_persp_trans(dim        ,                                                     numpy_point,                                                     mapping)                x_n.append(values[0])                y_n.append(values[1])                        x_t = x_n            y_t = y_n        return numpy.sin(numpy.power(numpy.array(x_t) - 0.5, 2) +                      numpy.power(numpy.array(y_t) - 0.5, 2))\nSolution second derivative = 4 * cos((x - 0.5)^2 + (y - 0.5)^2) -\n4 * sin((x - 0.5)^2 + (y - 0.5)^2) *\n((x - 0.5)^2 + (y - 0.5)^2).    @staticmethod","docstring_tokens":["exact","solution","=","sin","(","(","x","-","0",".","5",")","^","2","+","(","y","-","0",".","5",")","^","2",")",".","static","method","which","returns","the","solution",":","sin","(","(","x","-","0",".","5",")","^","2","+","(","y","-","0",".","5",")","^","2",")",".","arguments",":","x","(","number","or","list","[","numbers","]",")",":","abscissa","coordinate",".","y","(","number","or","list","[","numbers","]",")",":","ordinate","coordinate",".","returns",":","a","numpy","vector","with","the","solution",".","dim","=","2","log","file","=","none","logger","=","none","x","n",",","y","n","=","(","[","]","for","i","in","xrange","(","0",",","2",")",")","x","t","=","x","y","t","=","y","if","(","use","mapping",")",":","if","(","type","(","x",")","is","not","list",")",":","x","t","=","[","x","]","y","t","=","[","y","]","n","x","=","len","(","x","t",")","for","i","in","xrange","(","0",",","n","x",")",":","numpy","point","=","numpy",".","array","(","[","x","t","[","i","]",",","y","t","[","i","]","]",")","values","=","utilities",".","apply","persp","trans","(","dim",",","numpy","point",",","mapping",")","x","n",".","append","(","values","[","0","]",")","y","n",".","append","(","values","[","1","]",")","x","t","=","x","n","y","t","=","y","n","return","numpy",".","sin","(","numpy",".","power","(","numpy",".","array","(","x","t",")","-","0",".","5",",","2",")","+","numpy",".","power","(","numpy",".","array","(","y","t",")","-","0",".","5",",","2",")",")","solution","second","derivative","=","4","*","cos","(","(","x","-","0",".","5",")","^","2","+","(","y","-","0",".","5",")","^","2",")","-","4","*","sin","(","(","x","-","0",".","5",")","^","2","+","(","y","-","0",".","5",")","^","2",")","*","(","(","x","-","0",".","5",")","^","2","+","(","y","-","0",".","5",")","^","2",")",".","@","staticmethod"],"query":"Difference between staticmethod and classmethod","query_tokens":["difference","between","staticmethod","and","classmethod"]}
{"code":"    def _paypal_s2s_get_access_token(self, cr, uid, ids, context=None):        res = dict.fromkeys(ids, False)        parameters = werkzeug.url_encode({'grant_type': 'client_credentials'})        for acquirer in self.browse(cr, uid, ids, context=context):            tx_url = self._get_paypal_urls(cr, uid, acquirer.environment)['paypal_rest_url']            request = urllib2.Request(tx_url, parameters)            request.add_header('Accept', 'application/json')            request.add_header('Accept-Language', 'en_US')            base64string = base64.encodestring('%s:%s' % (                acquirer.paypal_api_username,                acquirer.paypal_api_password)            ).replace('\\n', '')            request.add_header(\"Authorization\", \"Basic %s\" % base64string)            request = urllib2.urlopen(request)            result = request.read()            res[acquirer.id] = json.loads(result).get('access_token')            request.close()        return res","code_tokens":["def","paypal","s2s","get","access","token","(","self",",","cr",",","uid",",","ids",",","context","=","none",")",":","res","=","dict",".","fromkeys","(","ids",",","false",")","parameters","=","werkzeug",".","url","encode","(","{","'","grant","type","'",":","'","client","credentials","'","}",")","for","acquirer","in","self",".","browse","(","cr",",","uid",",","ids",",","context","=","context",")",":","tx","url","=","self",".","get","paypal","urls","(","cr",",","uid",",","acquirer",".","environment",")","[","'","paypal","rest","url","'","]","request","=","urllib2",".","request","(","tx","url",",","parameters",")","request",".","add","header","(","'","accept","'",",","'","application","/","json","'",")","request",".","add","header","(","'","accept","-","language","'",",","'","en","us","'",")","base64string","=","base64",".","encodestring","(","'","%","s",":","%","s","'","%","(","acquirer",".","paypal","api","username",",","acquirer",".","paypal","api","password",")",")",".","replace","(","'","\\n","'",",","'","'",")","request",".","add","header","(","\"","authorization","\"",",","\"","basic","%","s","\"","%","base64string",")","request","=","urllib2",".","urlopen","(","request",")","result","=","request",".","read","(",")","res","[","acquirer",".","id","]","=","json",".","loads","(","result",")",".","get","(","'","access","token","'",")","request",".","close","(",")","return","res"],"func_name":"_paypal_s2s_get_access_token","func_name_tokens":["paypal","s2s","get","access","token"],"docstring":"see http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem        for explanation why we use Authorization header instead of urllib2        password manager\nadd other headers (https://developer.paypal.com/webapps/developer/docs/integration/direct/make-your-first-call/)\nadd authorization header","docstring_tokens":["see","for","explanation","why","we","use","authorization","header","instead","of","urllib2","password","manager","add","other","headers","(",")","add","authorization","header"],"query":"Python urllib2 Basic Auth Problem","query_tokens":["python","urllib2","basic","auth","problem"]}
{"code":"def getImageDescriptor(model, im, idx, imageName): #gets histograms\textension = -(len(imageName.rpartition('.')[2])+1) #find how long the extension is, ie .jpg\timageName = imageName.rpartition('/')[2][:extension] #get just the image name minus the extension and path\tsift = str('-'.join(map(str, conf.phowOpts.Sizes)))\tif not isdir(conf.imageCropPath+\"histos/\"):\t\tmkdir(conf.imageCropPath+\"histos/\")\tif isfile(conf.imageCropPath+\"histos/\"+imageName+'_'+sift+'.histo'):\t\twith open(conf.imageCropPath+\"histos/\"+imageName+'_'+sift+'.histo', 'rb') as fp:\t\t\thisto = load(fp)\t\t\treturn [idx, histo]\tim = standardizeImage(im) #scale image to 640x480\theight, width = im.shape[:2]\tnumWords = model.vocab.shape[1]\tframes, descrs = getPhowFeatures(im, conf.phowOpts) #extract features\tif model.quantizer == 'vq':\t\tbinsa, _ = vq(descrs.T, model.vocab.T) #slowest function - assigns words from vocab to features in descrs\telif model.quantizer == 'kdtree':\t\traise ValueError('quantizer kdtree not implemented')\telse:\t\traise ValueError('quantizer {0} not known or understood'.format(model.quantizer))\thist = []\tfor n_spatial_bins_x, n_spatial_bins_y in zip(model.numSpatialX, model.numSpatialX):\t\tbinsx, distsx = vq(frames[0, :], linspace(0, width, n_spatial_bins_x))\t\tbinsy, distsy = vq(frames[1, :], linspace(0, height, n_spatial_bins_y))\t\tif (numpy.any(distsx < 0)) | (numpy.any(distsx > (width/n_spatial_bins_x+0.5))) | (numpy.any(distsy > (height/n_spatial_bins_y+0.5))):\t\t\tprint (\"something went wrong\")\t\t\timport pdb; pdb.set_trace()\t\tnumber_of_bins = n_spatial_bins_x * n_spatial_bins_y * numWords\t\ttemp = arange(number_of_bins)\t\ttemp = temp.reshape([n_spatial_bins_x, n_spatial_bins_y, numWords])\t\tbin_comb = temp[binsx, binsy, binsa]\t\thist_temp, _ = histogram(bin_comb, bins=range(number_of_bins+1), density=True) #generate histogram\t\thist.append(hist_temp)\thist = hstack(hist)\thist = array(hist, 'float32') / sum(hist)\tnumTot = float(conf.numClasses*(conf.numTrain+conf.numTest)*(len(conf.rotation)+1))\tsys.stdout.write (\"\\r\"+str(datetime.now())+\" Histograms Calculated: \"+str(((idx+1)/numTot)*100.0)[:5]+\"%\") #make progress percentage\tsys.stdout.flush()\twith open(conf.imageCropPath+\"histos/\"+imageName+'_'+sift+'.histo', 'wb') as fp:\t\tdump(hist, fp)\treturn [idx, hist]","code_tokens":["def","get","image","descriptor","(","model",",","im",",","idx",",","image","name",")",":","#","gets","histograms","extension","=","-","(","len","(","image","name",".","rpartition","(","'",".","'",")","[","2","]",")","+","1",")","#","find","how","long","the","extension","is",",","ie",".","jpg","image","name","=","image","name",".","rpartition","(","'","/","'",")","[","2","]","[",":","extension","]","#","get","just","the","image","name","minus","the","extension","and","path","sift","=","str","(","'","-","'",".","join","(","map","(","str",",","conf",".","phow","opts",".","sizes",")",")",")","if","not","isdir","(","conf",".","image","crop","path","+","\"","histos","/","\"",")",":","mkdir","(","conf",".","image","crop","path","+","\"","histos","/","\"",")","if","isfile","(","conf",".","image","crop","path","+","\"","histos","/","\"","+","image","name","+","'","'","+","sift","+","'",".","histo","'",")",":","with","open","(","conf",".","image","crop","path","+","\"","histos","/","\"","+","image","name","+","'","'","+","sift","+","'",".","histo","'",",","'","rb","'",")","as","fp",":","histo","=","load","(","fp",")","return","[","idx",",","histo","]","im","=","standardize","image","(","im",")","#","scale","image","to","640x480","height",",","width","=","im",".","shape","[",":","2","]","num","words","=","model",".","vocab",".","shape","[","1","]","frames",",","descrs","=","get","phow","features","(","im",",","conf",".","phow","opts",")","#","extract","features","if","model",".","quantizer","=","=","'","vq","'",":","binsa",",","=","vq","(","descrs",".","t",",","model",".","vocab",".","t",")","#","slowest","function","-","assigns","words","from","vocab","to","features","in","descrs","elif","model",".","quantizer","=","=","'","kdtree","'",":","raise","value","error","(","'","quantizer","kdtree","not","implemented","'",")","else",":","raise","value","error","(","'","quantizer","{","0","}","not","known","or","understood","'",".","format","(","model",".","quantizer",")",")","hist","=","[","]","for","n","spatial","bins","x",",","n","spatial","bins","y","in","zip","(","model",".","num","spatial","x",",","model",".","num","spatial","x",")",":","binsx",",","distsx","=","vq","(","frames","[","0",",",":","]",",","linspace","(","0",",","width",",","n","spatial","bins","x",")",")","binsy",",","distsy","=","vq","(","frames","[","1",",",":","]",",","linspace","(","0",",","height",",","n","spatial","bins","y",")",")","if","(","numpy",".","any","(","distsx","<","0",")",")","|","(","numpy",".","any","(","distsx",">","(","width","/","n","spatial","bins","x","+","0",".","5",")",")",")","|","(","numpy",".","any","(","distsy",">","(","height","/","n","spatial","bins","y","+","0",".","5",")",")",")",":","print","(","\"","something","went","wrong","\"",")","import","pdb",";","pdb",".","set","trace","(",")","number","of","bins","=","n","spatial","bins","x","*","n","spatial","bins","y","*","num","words","temp","=","arange","(","number","of","bins",")","temp","=","temp",".","reshape","(","[","n","spatial","bins","x",",","n","spatial","bins","y",",","num","words","]",")","bin","comb","=","temp","[","binsx",",","binsy",",","binsa","]","hist","temp",",","=","histogram","(","bin","comb",",","bins","=","range","(","number","of","bins","+","1",")",",","density","=","true",")","#","generate","histogram","hist",".","append","(","hist","temp",")","hist","=","hstack","(","hist",")","hist","=","array","(","hist",",","'","float32","'",")","/","sum","(","hist",")","num","tot","=","float","(","conf",".","num","classes","*","(","conf",".","num","train","+","conf",".","num","test",")","*","(","len","(","conf",".","rotation",")","+","1",")",")","sys",".","stdout",".","write","(","\"","\\r","\"","+","str","(","datetime",".","now","(",")",")","+","\"","histograms","calculated",":","\"","+","str","(","(","(","idx","+","1",")","/","num","tot",")","*","100",".","0",")","[",":","5","]","+","\"","%","\"",")","#","make","progress","percentage","sys",".","stdout",".","flush","(",")","with","open","(","conf",".","image","crop","path","+","\"","histos","/","\"","+","image","name","+","'","'","+","sift","+","'",".","histo","'",",","'","wb","'",")","as","fp",":","dump","(","hist",",","fp",")","return","[","idx",",","hist","]"],"func_name":"getImageDescriptor","func_name_tokens":["get","image","descriptor"],"docstring":"quantize appearance\ngenerate the histogram bins\nbinsx and binsy list to what spatial bin each feature point belongs to\ncombined quantization\nupdate using this: http://stackoverflow.com/questions/15230179/how-to-get-the-linear-index-for-a-numpy-array-sub2ind","docstring_tokens":["quantize","appearance","generate","the","histogram","bins","binsx","and","binsy","list","to","what","spatial","bin","each","feature","point","belongs","to","combined","quantization","update","using","this",":"],"query":"How to get the linear index for a numpy array (sub2ind)","query_tokens":["how","to","get","the","linear","index","for","a","numpy","array","(","sub2ind",")"]}
{"code":"    def haversine(self, lat1, lon1, lat2, lon2):        lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])        dlon = lon2 - lon1        dlat = lat2 - lat1        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2        c = 2 * asin(sqrt(a))        meters = 6367 * 1000 * c        return meters","code_tokens":["def","haversine","(","self",",","lat1",",","lon1",",","lat2",",","lon2",")",":","lon1",",","lat1",",","lon2",",","lat2","=","map","(","radians",",","[","lon1",",","lat1",",","lon2",",","lat2","]",")","dlon","=","lon2","-","lon1","dlat","=","lat2","-","lat1","a","=","sin","(","dlat","/","2",")","*","*","2","+","cos","(","lat1",")","*","cos","(","lat2",")","*","sin","(","dlon","/","2",")","*","*","2","c","=","2","*","asin","(","sqrt","(","a",")",")","meters","=","6367","*","1000","*","c","return","meters"],"func_name":"haversine","func_name_tokens":["haversine"],"docstring":"Calculate the great circle distance between two points        on the earth (specified in decimal degrees)        http://stackoverflow.com/a/4913653\nconvert decimal degrees to radians\nhaversine formula\n6367 km is the radius of the Earth","docstring_tokens":["calculate","the","great","circle","distance","between","two","points","on","the","earth","(","specified","in","decimal","degrees",")","convert","decimal","degrees","to","radians","haversine","formula","6367","km","is","the","radius","of","the","earth"],"query":"Haversine Formula in Python (Bearing and Distance between two GPS points)","query_tokens":["haversine","formula","in","python","(","bearing","and","distance","between","two","gps","points",")"]}
{"code":"def strip_comments(text):","code_tokens":["def","strip","comments","(","text",")",":"],"func_name":"strip_comments","func_name_tokens":["strip","comments"],"docstring":"Strips C and C++ comments from the given string.\nCopied from http://stackoverflow.com/a/241506/627587.","docstring_tokens":["strips","c","and","c","+","+","comments","from","the","given","string",".","copied","from"],"query":"Remove C and C++ comments using Python?","query_tokens":["remove","c","and","c","+","+","comments","using","python","?"]}
{"code":"    def __init__(self):        self.decompressobj = zlib.decompressobj(16 + zlib.MAX_WBITS)","code_tokens":["def","init","(","self",")",":","self",".","decompressobj","=","zlib",".","decompressobj","(","16","+","zlib",".","max","wbits",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Magic parameter makes zlib module understand gzip header\nhttp://stackoverflow.com/questions/1838699/how-can-i-decompress-a-gzip-stream-with-zlib\nThis works on cpython and pypy, but not jython.","docstring_tokens":["magic","parameter","makes","zlib","module","understand","gzip","header","this","works","on","cpython","and","pypy",",","but","not","jython","."],"query":"How can I decompress a gzip stream with zlib?","query_tokens":["how","can","i","decompress","a","gzip","stream","with","zlib","?"]}
{"code":"def test_assumptions():    m, n = symbols('m n', integer=True, positive=True)    diof = diophantine(n ** 2 + m * n - 500)    assert diof == set([(5, 20), (40, 10), (95, 5), (121, 4), (248, 2), (499, 1)])    a, b = symbols('a b', integer=True, positive=False)    diof = diophantine(a*b + 2*a + 3*b - 6)    assert diof == set([(-15, -3), (-9, -4), (-7, -5), (-6, -6), (-5, -8), (-4, -14)])","code_tokens":["def","test","assumptions","(",")",":","m",",","n","=","symbols","(","'","m","n","'",",","integer","=","true",",","positive","=","true",")","diof","=","diophantine","(","n","*","*","2","+","m","*","n","-","500",")","assert","diof","=","=","set","(","[","(","5",",","20",")",",","(","40",",","10",")",",","(","95",",","5",")",",","(","121",",","4",")",",","(","248",",","2",")",",","(","499",",","1",")","]",")","a",",","b","=","symbols","(","'","a","b","'",",","integer","=","true",",","positive","=","false",")","diof","=","diophantine","(","a","*","b","+","2","*","a","+","3","*","b","-","6",")","assert","diof","=","=","set","(","[","(","-","15",",","-","3",")",",","(","-","9",",","-","4",")",",","(","-","7",",","-","5",")",",","(","-","6",",","-","6",")",",","(","-","5",",","-","8",")",",","(","-","4",",","-","14",")","]",")"],"func_name":"test_assumptions","func_name_tokens":["test","assumptions"],"docstring":"Test whether diophantine respects the assumptions.\nTest case taken from the below so question regarding assumptions in diophantine module\nhttp://stackoverflow.com/questions/23301941/how-can-i-declare-natural-symbols-with-sympy","docstring_tokens":["test","whether","diophantine","respects","the","assumptions",".","test","case","taken","from","the","below","so","question","regarding","assumptions","in","diophantine","module"],"query":"How can I declare natural symbols with sympy?","query_tokens":["how","can","i","declare","natural","symbols","with","sympy","?"]}
{"code":"    def fully_normalize_path(path):        return os.path.normpath(path)    join = os.path.joinexcept:  # ImportError or AttributeError.","code_tokens":["def","fully","normalize","path","(","path",")",":","return","os",".","path",".","normpath","(","path",")","join","=","os",".","path",".","joinexcept",":","#","import","error","or","attribute","error","."],"func_name":"fully_normalize_path","func_name_tokens":["fully","normalize","path"],"docstring":"fixes the path so that the format of the path really reflects the directories in the system\nSee: http://stackoverflow.com/questions/10254353/error-while-installing-jython-for-pydev","docstring_tokens":["fixes","the","path","so","that","the","format","of","the","path","really","reflects","the","directories","in","the","system","see",":"],"query":"Error while installing Jython for PyDev","query_tokens":["error","while","installing","jython","for","py","dev"]}
{"code":"def convert_docx_to_text(        filename: str = None, blob: bytes = None,        config: TextProcessingConfig = _DEFAULT_CONFIG) -> str:    text = ''    with get_filelikeobject(filename, blob) as fp:        for xml in gen_xml_files_from_docx(fp):            text += docx_text_from_xml(xml, config)    return text","code_tokens":["def","convert","docx","to","text","(","filename",":","str","=","none",",","blob",":","bytes","=","none",",","config",":","text","processing","config","=","default","config",")","-",">","str",":","text","=","'","'","with","get","filelikeobject","(","filename",",","blob",")","as","fp",":","for","xml","in","gen","xml","files","from","docx","(","fp",")",":","text","+","=","docx","text","from","xml","(","xml",",","config",")","return","text"],"func_name":"convert_docx_to_text","func_name_tokens":["convert","docx","to","text"],"docstring":"Converts a DOCX file to text.    Pass either a filename or a binary object.    Args:        filename: filename to process        blob: binary ``bytes`` object to process        config: :class:`TextProcessingConfig` control object    Returns:        text contents    Notes:    - Old ``docx`` (https://pypi.python.org/pypi/python-docx) has been      superseded (see https://github.com/mikemaccana/python-docx).      - ``docx.opendocx(file)`` uses :class:`zipfile.ZipFile`, which can take        either a filename or a file-like object        (https://docs.python.org/2/library/zipfile.html).      - Method was:        .. code-block:: python            with get_filelikeobject(filename, blob) as fp:                document = docx.opendocx(fp)                paratextlist = docx.getdocumenttext(document)            return '\\n\\n'.join(paratextlist)    - Newer ``docx`` is python-docx      - https://pypi.python.org/pypi/python-docx      - https://python-docx.readthedocs.org/en/latest/      - http://stackoverflow.com/questions/25228106      However, it uses ``lxml``, which has C dependencies, so it doesn't always      install properly on e.g. bare Windows machines.      PERFORMANCE of my method:      - nice table formatting      - but tables grouped at end, not in sensible places      - can iterate via ``doc.paragraphs`` and ``doc.tables`` but not in        true document order, it seems      - others have noted this too:        - https://github.com/python-openxml/python-docx/issues/40        - https://github.com/deanmalmgren/textract/pull/92    - ``docx2txt`` is at https://pypi.python.org/pypi/docx2txt/0.6; this is      pure Python. Its command-line function appears to be for Python 2 only      (2016-04-21: crashes under Python 3; is due to an encoding bug). However,      it seems fine as a library. It doesn't handle in-memory blobs properly,      though, so we need to extend it.      PERFORMANCE OF ITS ``process()`` function:      - all text comes out      - table text is in a sensible place      - table formatting is lost.    - Other manual methods (not yet implemented):      http://etienned.github.io/posts/extract-text-from-word-docx-simply/.      Looks like it won't deal with header stuff (etc.) that ``docx2txt``      handles.    - Upshot: we need a DIY version.    - See also this \"compile lots of techniques\" libraries, which has C      dependencies: http://textract.readthedocs.org/en/latest/\nelif docx:\nwith get_filelikeobject(filename, blob) as fp:\nnoinspection PyUnresolvedReferences\nreturn '\\n\\n'.join(\ndocx_docx_gen_text(document, config))\nelif docx2txt:\nif filename:\nreturn docx2txt.process(filename)\nelse:\nelse:\n=============================================================================\nODT\n=============================================================================\nnoinspection PyUnusedLocal","docstring_tokens":["converts","a","docx","file","to","text",".","pass","either","a","filename","or","a","binary","object",".","args",":","filename",":","filename","to","process","blob",":","binary","`","`","bytes","`","`","object","to","process","config",":",":","class",":","`","text","processing","config","`","control","object","returns",":","text","contents","notes",":","-","old","`","`","docx","`","`","(",")","has","been","superseded","(","see",")",".","-","`","`","docx",".","opendocx","(","file",")","`","`","uses",":","class",":","`","zipfile",".","zip","file","`",",","which","can","take","either","a","filename","or","a","file","-","like","object","(",")",".","-","method","was",":",".",".","code","-","block",":",":","python","with","get","filelikeobject","(","filename",",","blob",")","as","fp",":","document","=","docx",".","opendocx","(","fp",")","paratextlist","=","docx",".","getdocumenttext","(","document",")","return","'","\\","n","\\","n","'",".","join","(","paratextlist",")","-","newer","`","`","docx","`","`","is","python","-","docx","-","-","-","however",",","it","uses","`","`","lxml","`","`",",","which","has","c","dependencies",",","so","it","doesn","'","t","always","install","properly","on","e",".","g",".","bare","windows","machines",".","performance","of","my","method",":","-","nice","table","formatting","-","but","tables","grouped","at","end",",","not","in","sensible","places","-","can","iterate","via","`","`","doc",".","paragraphs","`","`","and","`","`","doc",".","tables","`","`","but","not","in","true","document","order",",","it","seems","-","others","have","noted","this","too",":","-","-","-","`","`","docx2txt","`","`","is","at",";","this","is","pure","python",".","its","command","-","line","function","appears","to","be","for","python","2","only","(","2016","-","04","-","21",":","crashes","under","python","3",";","is","due","to","an","encoding","bug",")",".","however",",","it","seems","fine","as","a","library",".","it","doesn","'","t","handle","in","-","memory","blobs","properly",",","though",",","so","we","need","to","extend","it",".","performance","of","its","`","`","process","(",")","`","`","function",":","-","all","text","comes","out","-","table","text","is","in","a","sensible","place","-","table","formatting","is","lost",".","-","other","manual","methods","(","not","yet","implemented",")",":","looks","like","it","won","'","t","deal","with","header","stuff","(","etc",".",")","that","`","`","docx2txt","`","`","handles",".","-","upshot",":","we","need","a","diy","version",".","-","see","also","this","\"","compile","lots","of","techniques","\"","libraries",",","which","has","c","dependencies",":","elif","docx",":","with","get","filelikeobject","(","filename",",","blob",")","as","fp",":","noinspection","py","unresolved","references","return","'","\\","n","\\","n","'",".","join","(","docx","docx","gen","text","(","document",",","config",")",")","elif","docx2txt",":","if","filename",":","return","docx2txt",".","process","(","filename",")","else",":","else",":","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","odt","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","noinspection","py","unused","local"],"query":"How to extract text from an existing docx file using python-docx","query_tokens":["how","to","extract","text","from","an","existing","docx","file","using","python","-","docx"]}
{"code":"def setup(app):\r   app.add_config_value('no_network', False, True)\r\rno_network = None\r\rhtml_context = {\r   'widgeturl': None,\r   'no_network': False,\r   'cstatic': '//tavendo-common-static.s3-eu-west-1.amazonaws.com',\r}\r\rhtml_logo = None\r\r\r\r\rhtml_sidebars = {\r   '**': [\r      'side-primary.html'\r   ]\r}\r\r\r\r\r\r\r\r\r\r\rhtmlhelp_basename = 'AutobahnPython'\r\r\rintersphinx_mapping = {\r   'py2': ('http://docs.python.org/2', None),\r   'py3': ('http://docs.python.org/3', None),\r   'six': ('https://pythonhosted.org/six/', None),\r}\r\rrst_epilog = \"\"\"\r.. |ab| replace:: Autobahn\r.. |Ab| replace:: **Autobahn**\r.. |abL| replace:: Autobahn|Python\r.. |AbL| replace:: **Autobahn**\\|Python\r.. _Autobahn: http://autobahn.ws\r.. _AutobahnJS: http://autobahn.ws/js\r.. _AutobahnPython: **Autobahn**\\|Python\r.. _WebSocket: http://tools.ietf.org/html/rfc6455\r.. _RFC6455: http://tools.ietf.org/html/rfc6455\r.. _WAMP: http://wamp.ws/\r.. _Twisted: http://twistedmatrix.com/\r.. _asyncio: http://docs.python.org/3.4/library/asyncio.html\r.. _CPython: http://python.org/\r.. _PyPy: http://pypy.org/\r.. _Jython: http://jython.org/\r.. _WAMP: http://wamp.ws/\r.. _WAMPv1: http://wamp.ws/spec/wamp1/\r.. _WAMPv2: https://github.com/tavendo/WAMP/blob/master/spec/README.md\r.. _AutobahnTestsuite: http://autobahn.ws/testsuite\r.. _trollius: https://pypi.python.org/pypi/trollius/\r.. _tulip: https://pypi.python.org/pypi/asyncio/\r\r","code_tokens":["def","setup","(","app",")",":","app",".","add","config","value","(","'","no","network","'",",","false",",","true",")","no","network","=","none","html","context","=","{","'","widgeturl","'",":","none",",","'","no","network","'",":","false",",","'","cstatic","'",":","'","/","/","tavendo","-","common","-","static",".","s3","-","eu","-","west","-","1",".","amazonaws",".","com","'",",","}","html","logo","=","none","html","sidebars","=","{","'","*","*","'",":","[","'","side","-","primary",".","html","'","]","}","htmlhelp","basename","=","'","autobahn","python","'","intersphinx","mapping","=","{","'","py2","'",":","(","'","'",",","none",")",",","'","py3","'",":","(","'","'",",","none",")",",","'","six","'",":","(","'","'",",","none",")",",","}","rst","epilog","=","\"","\"","\"",".",".","|","ab","|","replace",":",":","autobahn",".",".","|","ab","|","replace",":",":","*","*","autobahn","*","*",".",".","|","ab","l","|","replace",":",":","autobahn","|","python",".",".","|","ab","l","|","replace",":",":","*","*","autobahn","*","*","\\","|","python",".",".","autobahn",":",".",".","autobahn","js",":",".",".","autobahn","python",":","*","*","autobahn","*","*","\\","|","python",".",".","web","socket",":",".",".","rfc6455",":",".",".","wamp",":",".",".","twisted",":",".",".","asyncio",":",".",".","c","python",":",".",".","py","py",":",".",".","jython",":",".",".","wamp",":",".",".","wam","pv1",":",".",".","wam","pv2",":",".",".","autobahn","testsuite",":",".",".","trollius",":",".",".","tulip",":"],"func_name":"setup","func_name_tokens":["setup"],"docstring":"additional variables which become accessible in the template engine's\ncontext for all pages\n'widgeturl': 'https://demo.crossbar.io/clandeckwidget'\n'widgeturl': 'http://127.0.0.1:8090/widget'\n'cstatic': 'http://127.0.0.1:8888',\n(Optional) Logo. Should be small enough to fit the navbar (ideally 24x24).\nPath should be relative to the ``_static`` files directory.\nIf not '', a 'Last updated on:' timestamp is inserted at every page bottom,\nusing the given strftime format.\nIf true, SmartyPants will be used to convert quotes and dashes to\ntypographically correct entities.\nCustom sidebar templates, maps document names to template names.\nAdditional templates that should be rendered to pages, maps page names to\ntemplate names.\nIf false, no module index is generated.\nIf false, no index is generated.\nIf true, the index is split into individual pages for each letter.\nIf true, links to the reST sources are added to the pages.\nIf true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\nIf true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\nIf true, an OpenSearch description file will be output, and all pages will\ncontain a  tag referring to it.  The value of this option must be the\nbase URL from which the finished HTML is served.\nThis is the file name suffix for HTML files (e.g. \".xhtml\").\nOutput file base name for HTML help builder.\nhttp://sphinx-doc.org/ext/intersphinx.html\r\r\rrst_prolog =","docstring_tokens":["additional","variables","which","become","accessible","in","the","template","engine","'","s","context","for","all","pages","'","widgeturl","'",":","'","'","'","widgeturl","'",":","'","http",":","/","/","127",".","0",".","0",".","1",":","8090","/","widget","'","'","cstatic","'",":","'","http",":","/","/","127",".","0",".","0",".","1",":","8888","'",",","(","optional",")","logo",".","should","be","small","enough","to","fit","the","navbar","(","ideally","24x24",")",".","path","should","be","relative","to","the","`","`","static","`","`","files","directory",".","if","not","'","'",",","a","'","last","updated","on",":","'","timestamp","is","inserted","at","every","page","bottom",",","using","the","given","strftime","format",".","if","true",",","smarty","pants","will","be","used","to","convert","quotes","and","dashes","to","typographically","correct","entities",".","custom","sidebar","templates",",","maps","document","names","to","template","names",".","additional","templates","that","should","be","rendered","to","pages",",","maps","page","names","to","template","names",".","if","false",",","no","module","index","is","generated",".","if","false",",","no","index","is","generated",".","if","true",",","the","index","is","split","into","individual","pages","for","each","letter",".","if","true",",","links","to","the","re","st","sources","are","added","to","the","pages",".","if","true",",","\"","created","using","sphinx","\"","is","shown","in","the","html","footer",".","default","is","true",".","if","true",",","\"","(","c",")","copyright",".",".",".","\"","is","shown","in","the","html","footer",".","default","is","true",".","if","true",",","an","open","search","description","file","will","be","output",",","and","all","pages","will","contain","a","tag","referring","to","it",".","the","value","of","this","option","must","be","the","base","url","from","which","the","finished","html","is","served",".","this","is","the","file","name","suffix","for","html","files","(","e",".","g",".","\"",".","xhtml","\"",")",".","output","file","base","name","for","html","help","builder",".","rst","prolog","="],"query":"How to use Sphinx's autodoc to document a class's __init__(self) method?","query_tokens":["how","to","use","sphinx","'","s","autodoc","to","document","a","class","'","s","init","(","self",")","method","?"]}
{"code":"def represent_ordereddict(dumper, data):    value = []    for item_key, item_value in data.items():        node_key = dumper.represent_data(item_key)        node_value = dumper.represent_data(item_value)        value.append((node_key, node_value))    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)","code_tokens":["def","represent","ordereddict","(","dumper",",","data",")",":","value","=","[","]","for","item","key",",","item","value","in","data",".","items","(",")",":","node","key","=","dumper",".","represent","data","(","item","key",")","node","value","=","dumper",".","represent","data","(","item","value",")","value",".","append","(","(","node","key",",","node","value",")",")","return","yaml",".","nodes",".","mapping","node","(","u","'","tag",":","yaml",".","org",",","2002",":","map","'",",","value",")"],"func_name":"represent_ordereddict","func_name_tokens":["represent","ordereddict"],"docstring":"Allow OrderedDicts to be used when dumping YAML\nhttps://stackoverflow.com/a/16782282/3538079","docstring_tokens":["allow","ordered","dicts","to","be","used","when","dumping","yaml"],"query":"Can PyYAML dump dict items in non-alphabetical order?","query_tokens":["can","py","yaml","dump","dict","items","in","non","-","alphabetical","order","?"]}
{"code":"def read(*parts):    return codecs.open(os.path.join(os.path.dirname(__file__), *parts),                       encoding='utf8').read()try:    bytesexcept NameError:    bytes = strclass UltraMagicString(object):","code_tokens":["def","read","(","*","parts",")",":","return","codecs",".","open","(","os",".","path",".","join","(","os",".","path",".","dirname","(","file",")",",","*","parts",")",",","encoding","=","'","utf8","'",")",".","read","(",")","try",":","bytesexcept","name","error",":","bytes","=","strclass","ultra","magic","string","(","object",")",":"],"func_name":"read","func_name_tokens":["read"],"docstring":"Taken from    http://stackoverflow.com/questions/1162338/whats-the-right-way-to-use-unicode-metadata-in-setup-py","docstring_tokens":["taken","from"],"query":"What's the right way to use Unicode metadata in setup.py?","query_tokens":["what","'","s","the","right","way","to","use","unicode","metadata","in","setup",".","py","?"]}
{"code":"  def pipe(self, cmd, text):    cwd = os.path.dirname(self.filename)    beautifier = subprocess.Popen(cmd, shell=True, cwd=cwd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)    out = beautifier.communicate(text.encode(\"utf-8\"))[0]    return out.decode('utf8')","code_tokens":["def","pipe","(","self",",","cmd",",","text",")",":","cwd","=","os",".","path",".","dirname","(","self",".","filename",")","beautifier","=","subprocess",".","popen","(","cmd",",","shell","=","true",",","cwd","=","cwd",",","stdin","=","subprocess",".","pipe",",","stdout","=","subprocess",".","pipe",")","out","=","beautifier",".","communicate","(","text",".","encode","(","\"","utf","-","8","\"",")",")","[","0","]","return","out",".","decode","(","'","utf8","'",")"],"func_name":"pipe","func_name_tokens":["pipe"],"docstring":"http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python/377028\n377028","docstring_tokens":["377028"],"query":"Test if executable exists in Python?","query_tokens":["test","if","executable","exists","in","python","?"]}
{"code":"    def Read(self):        if kaldi.SBFMReader_Done(self.feature_reader):            self._markDone()            return None        utt = kaldi.SBFMReader_Key(self.feature_reader)        self.utt_id = utt        feat_value = kaldi.SBFMReader_Value(self.feature_reader)        if self.nnet_transf is not None:            feat_value = kaldi.Nnet_Feedforward(self.nnet_transf, feat_value)        feat_rows = kaldi.MatrixF_NumRows(feat_value)        feat_cols = kaldi.MatrixF_NumCols(feat_value)        feat_data = kaldi.MatrixF_Data(feat_value)                feats = numpy.empty((feat_rows,feat_cols), dtype=numpy.float32)        feats_numpy_ptr = ctypes.cast(feats.ctypes.data, c_float_ptr)        kaldi.MatrixF_cpy_to_ptr(feat_value, feats_numpy_ptr, feats.strides[0]/4)        if self.targets_rspecifier is not None:            if kaldi.RAPReader_HasKey(self.targets_reader, utt):                tgt_value = kaldi.RAPReader_Value(self.targets_reader, utt)                                tgts = numpy.empty((feat_rows,), dtype=numpy.int32)                tgts_numpy_ptr = ctypes.cast(tgts.ctypes.data, c_int_ptr)                ctypes.memmove(tgts_numpy_ptr, tgt_value, 4 * feat_rows)                kaldi.RAPReader_DeleteValue(self.targets_reader, tgt_value)            else:                tgts = None        else:            tgts = None                kaldi.SBFMReader_Next(self.feature_reader)        return feats, tgts","code_tokens":["def","read","(","self",")",":","if","kaldi",".","sbfm","reader","done","(","self",".","feature","reader",")",":","self",".","mark","done","(",")","return","none","utt","=","kaldi",".","sbfm","reader","key","(","self",".","feature","reader",")","self",".","utt","id","=","utt","feat","value","=","kaldi",".","sbfm","reader","value","(","self",".","feature","reader",")","if","self",".","nnet","transf","is","not","none",":","feat","value","=","kaldi",".","nnet","feedforward","(","self",".","nnet","transf",",","feat","value",")","feat","rows","=","kaldi",".","matrix","f","num","rows","(","feat","value",")","feat","cols","=","kaldi",".","matrix","f","num","cols","(","feat","value",")","feat","data","=","kaldi",".","matrix","f","data","(","feat","value",")","feats","=","numpy",".","empty","(","(","feat","rows",",","feat","cols",")",",","dtype","=","numpy",".","float32",")","feats","numpy","ptr","=","ctypes",".","cast","(","feats",".","ctypes",".","data",",","c","float","ptr",")","kaldi",".","matrix","f","cpy","to","ptr","(","feat","value",",","feats","numpy","ptr",",","feats",".","strides","[","0","]","/","4",")","if","self",".","targets","rspecifier","is","not","none",":","if","kaldi",".","rap","reader","has","key","(","self",".","targets","reader",",","utt",")",":","tgt","value","=","kaldi",".","rap","reader","value","(","self",".","targets","reader",",","utt",")","tgts","=","numpy",".","empty","(","(","feat","rows",",",")",",","dtype","=","numpy",".","int32",")","tgts","numpy","ptr","=","ctypes",".","cast","(","tgts",".","ctypes",".","data",",","c","int","ptr",")","ctypes",".","memmove","(","tgts","numpy","ptr",",","tgt","value",",","4","*","feat","rows",")","kaldi",".","rap","reader","delete","value","(","self",".","targets","reader",",","tgt","value",")","else",":","tgts","=","none","else",":","tgts","=","none","kaldi",".","sbfm","reader","next","(","self",".","feature","reader",")","return","feats",",","tgts"],"func_name":"Read","func_name_tokens":["read"],"docstring":"return numpy.ones((256, 819)).astype('float32'), numpy.ones(256).astype('int32')\nnever use numpy.ndarray(buf=) or numpy.ctypeslib.as_array\nbecause you don't know if Python or C owns buffer\n(even if you numpy.copy() resulting array)\nhttp://stackoverflow.com/questions/4355524/getting-data-from-ctypes-array-into-numpy\nCan't use memmove/memcpy because arrays are strided\nUse special function -_-\nMUST: cast Python int to pointer, otherwise C interprets as 32-bit\nif you print the pointer value before casting, you might see weird value before seg fault\ncasting fixes that\nok to use memmove because this is 1-dimensional array I made in C (no stride)\nprint \"FEATS:\", feats[0:5][0:5]\nprint \"TGTS :\", tgts[0:5]","docstring_tokens":["return","numpy",".","ones","(","(","256",",","819",")",")",".","astype","(","'","float32","'",")",",","numpy",".","ones","(","256",")",".","astype","(","'","int32","'",")","never","use","numpy",".","ndarray","(","buf","=",")","or","numpy",".","ctypeslib",".","as","array","because","you","don","'","t","know","if","python","or","c","owns","buffer","(","even","if","you","numpy",".","copy","(",")","resulting","array",")","can","'","t","use","memmove","/","memcpy","because","arrays","are","strided","use","special","function","-","-","must",":","cast","python","int","to","pointer",",","otherwise","c","interprets","as","32","-","bit","if","you","print","the","pointer","value","before","casting",",","you","might","see","weird","value","before","seg","fault","casting","fixes","that","ok","to","use","memmove","because","this","is","1","-","dimensional","array","i","made","in","c","(","no","stride",")","print","\"","feats",":","\"",",","feats","[","0",":","5","]","[","0",":","5","]","print","\"","tgts",":","\"",",","tgts","[","0",":","5","]"],"query":"Getting data from ctypes array into numpy","query_tokens":["getting","data","from","ctypes","array","into","numpy"]}
{"code":"class ParsingFileException(Exception):","code_tokens":["class","parsing","file","exception","(","exception",")",":"],"func_name":"ParsingFileException","func_name_tokens":["parsing","file","exception"],"docstring":"------------------------------------------------------------------------------\nhttp://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python    Class which derives from \\\"Exception\\\" which is raised when something       with the config file is wrong.\n------------------------------------------------------------------------------config_file = \"./config/PABLO.ini\"log_file = \"./log/Laplacian.log\"\nInitialize the parser for the configuration file and read it.config = ConfigParser.ConfigParser()files_list = config.read(config_file)\nThe previous \"ConfigParser.read()\" returns a list of file correctly read.if len(files_list) == 0:    msg = utilities.join_strings(\"Unable to read configuration file \\\"\",                                 config_file                           ,                                 \"\\\".\"                                 ,\nhttps://docs.python.org/3/library/os.html                                 os.linesep                            ,                                 \"Program exited.\")                    print(msg)    sys.exit(1)\nIf some options or sections are not present, then the corresponding exception\nis catched, printed and the program exits.try:    n_grids = config.getint(\"PABLO\",                             \"NumberOfGrids\")\nEach grid will be anchored on (0, 0, 0).    anchors = []    anchor = [0, 0, 0]    for i in xrange(0, n_grids):        anchors.append(anchor)        edges = utilities.get_list_from_string(config.get(\"PABLO\", \"Edges\"),                                            \",\"                         ,                                            False)\n\\\"t_points\\\" stands for \\\"transformed points\\\" because the mapping is done\nbetween the computational domain (0, 0, 0) + edge and the physical one\ngiven by \"\\GridPoints\\\".    t_points = utilities.get_lists_from_string(config.get(\"PABLO\",                                                          \"GridPoints\"),                                               \";\"                     ,                                               \",\"                     ,                                               False)    refinements = utilities.get_list_from_string(config.get(\"PABLO\",                                                             \"Refinements\"),                                                  \",\")    dimension = config.getint(\"PROBLEM\", \"Dimension\")\nOctants for grid.    oct_f_g = [pow(2**dimension, ref) for ref in refinements]\nTotal number of octants on the totality of the grids.    tot_oct = sum(oct_f_g)    assert (len(anchors) == n_grids)    assert (len(edges) == n_grids)    assert (len(refinements) == n_grids)\nThe form \\\"not anchors\\\" give us the possibility to check if \\\"anchors\\\"\nis neither \\\"None\\\" or empty.\nhttp://stackoverflow.com/questions/53513/best-way-to-check-if-a-list-is-empty    if ((not anchors) or        (not edges)   or        (not refinements)):        raise ParsingFileException\nParticles interaction.    p_inter = config.getboolean(\"PROBLEM\", \"ParticlesInteraction\")\nLog infos to log file or not.    to_log = config.getboolean(\"PROBLEM\", \"Log\")except (ConfigParser.NoOptionError ,         ConfigParser.NoSectionError,        ParsingFileException       ,        AssertionError):    exc_info = str(sys.exc_info()[1])    msg = utilities.join_strings(\"Program exited. Problems with config file \\\"\",                                 config_file                                   ,                                 \"\\\": \"                                        ,                                 exc_info                                      ,                                 \".\")    print(msg)    sys.exit(1)\nList of names for the MPI intercommunicators.comm_names = [\"comm_\" + str(j) for j in range(n_grids)]\nInitialize MPI.comm_w = MPI.COMM_WORLDrank_w = comm_w.Get_rank()\n------------------------------------------------------------------------------def set_trans_dicts(n_grids,                    dim    ,                    logger ,                    log_file):    trans_dictionary = {}    trans_adj_dictionary = {}    for grid in xrange(0, n_grids):\nOriginal points.        or_points = [anchors[grid][0],                      anchors[grid][1],                      anchors[grid][2],\nLeft low anchor.                     anchors[grid][0] + edges[grid],                      anchors[grid][1],                      anchors[grid][2],\nRight low anchor.                     anchors[grid][0] + edges[grid],                      anchors[grid][1] + edges[grid],                      anchors[grid][2],\nRight high anchor.                     anchors[grid][0],                      anchors[grid][1] + edges[grid],                      anchors[grid][2]]\nLeft high anchor.        n_or_points = numpy.array(or_points)        n_or_points = numpy.reshape(n_or_points, (4,3))        n_t_points = numpy.array(t_points[grid])        n_t_points = numpy.reshape(n_t_points, (4,3))\nMatrix of tranformation coefficients from logical to physical.        t_coeffs = utilities.p_t_coeffs(dim           ,\nProblem's dimension                                        n_or_points   ,\nOriginal points                                        n_t_points)\nMapped points\nAdjoint matrix of tranformation coefficients from physical to logical.        t_coeffs_adj = utilities.p_t_coeffs_adj(dim     ,\nProblem's dimension                                                t_coeffs)\nTransformation coeffs            trans_dictionary.update({grid : t_coeffs})        trans_adj_dictionary.update({grid : t_coeffs_adj})    return (trans_dictionary, trans_adj_dictionary)\n------------------------------------------------------------------------------","docstring_tokens":["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","class","which","derives","from","\\","\"","exception","\\","\"","which","is","raised","when","something","with","the","config","file","is","wrong",".","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","config","file","=","\"",".","/","config","/","pablo",".","ini","\"","log","file","=","\"",".","/","log","/","laplacian",".","log","\"","initialize","the","parser","for","the","configuration","file","and","read","it",".","config","=","config","parser",".","config","parser","(",")","files","list","=","config",".","read","(","config","file",")","the","previous","\"","config","parser",".","read","(",")","\"","returns","a","list","of","file","correctly","read",".","if","len","(","files","list",")","=","=","0",":","msg","=","utilities",".","join","strings","(","\"","unable","to","read","configuration","file","\\","\"","\"",",","config","file",",","\"","\\","\"",".","\"",",","os",".","linesep",",","\"","program","exited",".","\"",")","print","(","msg",")","sys",".","exit","(","1",")","if","some","options","or","sections","are","not","present",",","then","the","corresponding","exception","is","catched",",","printed","and","the","program","exits",".","try",":","n","grids","=","config",".","getint","(","\"","pablo","\"",",","\"","number","of","grids","\"",")","each","grid","will","be","anchored","on","(","0",",","0",",","0",")",".","anchors","=","[","]","anchor","=","[","0",",","0",",","0","]","for","i","in","xrange","(","0",",","n","grids",")",":","anchors",".","append","(","anchor",")","edges","=","utilities",".","get","list","from","string","(","config",".","get","(","\"","pablo","\"",",","\"","edges","\"",")",",","\"",",","\"",",","false",")","\\","\"","t","points","\\","\"","stands","for","\\","\"","transformed","points","\\","\"","because","the","mapping","is","done","between","the","computational","domain","(","0",",","0",",","0",")","+","edge","and","the","physical","one","given","by","\"","\\","grid","points","\\","\"",".","t","points","=","utilities",".","get","lists","from","string","(","config",".","get","(","\"","pablo","\"",",","\"","grid","points","\"",")",",","\"",";","\"",",","\"",",","\"",",","false",")","refinements","=","utilities",".","get","list","from","string","(","config",".","get","(","\"","pablo","\"",",","\"","refinements","\"",")",",","\"",",","\"",")","dimension","=","config",".","getint","(","\"","problem","\"",",","\"","dimension","\"",")","octants","for","grid",".","oct","f","g","=","[","pow","(","2","*","*","dimension",",","ref",")","for","ref","in","refinements","]","total","number","of","octants","on","the","totality","of","the","grids",".","tot","oct","=","sum","(","oct","f","g",")","assert","(","len","(","anchors",")","=","=","n","grids",")","assert","(","len","(","edges",")","=","=","n","grids",")","assert","(","len","(","refinements",")","=","=","n","grids",")","the","form","\\","\"","not","anchors","\\","\"","give","us","the","possibility","to","check","if","\\","\"","anchors","\\","\"","is","neither","\\","\"","none","\\","\"","or","empty",".","if","(","(","not","anchors",")","or","(","not","edges",")","or","(","not","refinements",")",")",":","raise","parsing","file","exception","particles","interaction",".","p","inter","=","config",".","getboolean","(","\"","problem","\"",",","\"","particles","interaction","\"",")","log","infos","to","log","file","or","not",".","to","log","=","config",".","getboolean","(","\"","problem","\"",",","\"","log","\"",")","except","(","config","parser",".","no","option","error",",","config","parser",".","no","section","error",",","parsing","file","exception",",","assertion","error",")",":","exc","info","=","str","(","sys",".","exc","info","(",")","[","1","]",")","msg","=","utilities",".","join","strings","(","\"","program","exited",".","problems","with","config","file","\\","\"","\"",",","config","file",",","\"","\\","\"",":","\"",",","exc","info",",","\"",".","\"",")","print","(","msg",")","sys",".","exit","(","1",")","list","of","names","for","the","mpi","intercommunicators",".","comm","names","=","[","\"","comm","\"","+","str","(","j",")","for","j","in","range","(","n","grids",")","]","initialize","mpi",".","comm","w","=","mpi",".","comm","worl","drank","w","=","comm","w",".","get","rank","(",")","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","def","set","trans","dicts","(","n","grids",",","dim",",","logger",",","log","file",")",":","trans","dictionary","=","{","}","trans","adj","dictionary","=","{","}","for","grid","in","xrange","(","0",",","n","grids",")",":","original","points",".","or","points","=","[","anchors","[","grid","]","[","0","]",",","anchors","[","grid","]","[","1","]",",","anchors","[","grid","]","[","2","]",",","left","low","anchor",".","anchors","[","grid","]","[","0","]","+","edges","[","grid","]",",","anchors","[","grid","]","[","1","]",",","anchors","[","grid","]","[","2","]",",","right","low","anchor",".","anchors","[","grid","]","[","0","]","+","edges","[","grid","]",",","anchors","[","grid","]","[","1","]","+","edges","[","grid","]",",","anchors","[","grid","]","[","2","]",",","right","high","anchor",".","anchors","[","grid","]","[","0","]",",","anchors","[","grid","]","[","1","]","+","edges","[","grid","]",",","anchors","[","grid","]","[","2","]","]","left","high","anchor",".","n","or","points","=","numpy",".","array","(","or","points",")","n","or","points","=","numpy",".","reshape","(","n","or","points",",","(","4",",","3",")",")","n","t","points","=","numpy",".","array","(","t","points","[","grid","]",")","n","t","points","=","numpy",".","reshape","(","n","t","points",",","(","4",",","3",")",")","matrix","of","tranformation","coefficients","from","logical","to","physical",".","t","coeffs","=","utilities",".","p","t","coeffs","(","dim",",","problem","'","s","dimension","n","or","points",",","original","points","n","t","points",")","mapped","points","adjoint","matrix","of","tranformation","coefficients","from","physical","to","logical",".","t","coeffs","adj","=","utilities",".","p","t","coeffs","adj","(","dim",",","problem","'","s","dimension","t","coeffs",")","transformation","coeffs","trans","dictionary",".","update","(","{","grid",":","t","coeffs","}",")","trans","adj","dictionary",".","update","(","{","grid",":","t","coeffs","adj","}",")","return","(","trans","dictionary",",","trans","adj","dictionary",")","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],"query":"Proper way to declare custom exceptions in modern Python?","query_tokens":["proper","way","to","declare","custom","exceptions","in","modern","python","?"]}
{"code":"class bcolors:    HEADER = '\\033[95m'    OKBLUE = '\\033[94m'    OKGREEN = '\\033[92m'    WARNING = '\\033[93m'    FAIL = '\\033[91m'    ENDC = '\\033[0m'    def disable(self):        self.HEADER = ''        self.OKBLUE = ''        self.OKGREEN = ''        self.WARNING = ''        self.FAIL = ''        self.ENDC = ''","code_tokens":["class","bcolors",":","header","=","'","\\0","33","[","95m","'","okblue","=","'","\\0","33","[","94m","'","okgreen","=","'","\\0","33","[","92m","'","warning","=","'","\\0","33","[","93m","'","fail","=","'","\\0","33","[","91m","'","endc","=","'","\\0","33","[","0m","'","def","disable","(","self",")",":","self",".","header","=","'","'","self",".","okblue","=","'","'","self",".","okgreen","=","'","'","self",".","warning","=","'","'","self",".","fail","=","'","'","self",".","endc","=","'","'"],"func_name":"disable","func_name_tokens":["disable"],"docstring":"colors -> sourced: http://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python","docstring_tokens":["colors","-",">","sourced",":"],"query":"How to print colored text in Python?","query_tokens":["how","to","print","colored","text","in","python","?"]}
{"code":"    def _stat_group(self, fp):        try:            groupID = fp.getGroupID()        except NotImplementedError:            return \"0\"        else:            if grp is not None:                try:                    return grp.getgrgid(groupID)[0]                except KeyError:                    pass            return str(groupID)","code_tokens":["def","stat","group","(","self",",","fp",")",":","try",":","group","id","=","fp",".","get","group","id","(",")","except","not","implemented","error",":","return","\"","0","\"","else",":","if","grp","is","not","none",":","try",":","return","grp",".","getgrgid","(","group","id",")","[","0","]","except","key","error",":","pass","return","str","(","group","id",")"],"func_name":"_stat_group","func_name_tokens":["stat","group"],"docstring":"Get the filepath's owner's group.  If this is not implemented        (say in Windows) return the string \"0\" since stat-ing a file in        Windows seems to return C{st_gid=0}.        (Reference:        U{http://stackoverflow.com/questions/5275731/os-stat-on-windows})        @param fp: L{twisted.python.filepath.FilePath}        @return: C{str} representing the owner's group","docstring_tokens":["get","the","filepath","'","s","owner","'","s","group",".","if","this","is","not","implemented","(","say","in","windows",")","return","the","string","\"","0","\"","since","stat","-","ing","a","file","in","windows","seems","to","return","c","{","st","gid","=","0","}",".","(","reference",":","u","{","}",")","@","param","fp",":","l","{","twisted",".","python",".","filepath",".","file","path","}","@","return",":","c","{","str","}","representing","the","owner","'","s","group"],"query":"os.stat() on Windows","query_tokens":["os",".","stat","(",")","on","windows"]}
{"code":"\tdef getFileExtension(self, path):\t\treturn splitext(path)[1].split('.')[-1]","code_tokens":["def","get","file","extension","(","self",",","path",")",":","return","splitext","(","path",")","[","1","]",".","split","(","'",".","'",")","[","-","1","]"],"func_name":"getFileExtension","func_name_tokens":["get","file","extension"],"docstring":"Return the extension of path (i.e. return 'txt' for path='directory/test.txt')\t\tFrom: http://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python\t\t\t\tArgs:\t\t\tpath: the full path to the file\t\t\t\tReturns:\t\t\tthe extension of the file in the path","docstring_tokens":["return","the","extension","of","path","(","i",".","e",".","return","'","txt","'","for","path","=","'","directory","/","test",".","txt","'",")","from",":","args",":","path",":","the","full","path","to","the","file","returns",":","the","extension","of","the","file","in","the","path"],"query":"Extracting extension from filename in Python","query_tokens":["extracting","extension","from","filename","in","python"]}
{"code":"    def __init__(self, *args, **kwargs):        super(Paragraph, self).__init__(**kwargs)        self.text = Text(*args)","code_tokens":["def","init","(","self",",","*","args",",","*","*","kwargs",")",":","super","(","paragraph",",","self",")",".","init","(","*","*","kwargs",")","self",".","text","=","text","(","*","args",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Creates a Paragraph object        Strings can be passed and are automatically converted in to item.Text()        :args: Text text, text to add to the message        We pass the kwargs on to the base class so an exception is raised        if invalid keywords were passed. See:        http://stackoverflow.com/questions/13124961/        how-to-pass-arguments-efficiently-kwargs-in-python","docstring_tokens":["creates","a","paragraph","object","strings","can","be","passed","and","are","automatically","converted","in","to","item",".","text","(",")",":","args",":","text","text",",","text","to","add","to","the","message","we","pass","the","kwargs","on","to","the","base","class","so","an","exception","is","raised","if","invalid","keywords","were","passed",".","see",":","how","-","to","-","pass","-","arguments","-","efficiently","-","kwargs","-","in","-","python"],"query":"how to pass arguments efficiently (**kwargs in python)","query_tokens":["how","to","pass","arguments","efficiently","(","*","*","kwargs","in","python",")"]}
{"code":"def violinplot(xs, ys, rotation='horizontal', points=100, x_tick_offset=0,               facecolour='lightgreen', edgecolour='green'):    vp = plt.violinplot(ys, showmeans=True, showextrema=False, points=points)    for pc in vp['bodies']:        pc.set_facecolor(facecolour)        pc.set_edgecolor(edgecolour)    vp['cmeans'].set_color(edgecolour)    plt.xticks([1 + i + x_tick_offset for i in range(len(xs))],               xs, rotation=rotation)    plt.xlim((0.5, len(xs) + 0.5))  # Adds a little buffer.","code_tokens":["def","violinplot","(","xs",",","ys",",","rotation","=","'","horizontal","'",",","points","=","100",",","x","tick","offset","=","0",",","facecolour","=","'","lightgreen","'",",","edgecolour","=","'","green","'",")",":","vp","=","plt",".","violinplot","(","ys",",","showmeans","=","true",",","showextrema","=","false",",","points","=","points",")","for","pc","in","vp","[","'","bodies","'","]",":","pc",".","set","facecolor","(","facecolour",")","pc",".","set","edgecolor","(","edgecolour",")","vp","[","'","cmeans","'","]",".","set","color","(","edgecolour",")","plt",".","xticks","(","[","1","+","i","+","x","tick","offset","for","i","in","range","(","len","(","xs",")",")","]",",","xs",",","rotation","=","rotation",")","plt",".","xlim","(","(","0",".","5",",","len","(","xs",")","+","0",".","5",")",")","#","adds","a","little","buffer","."],"func_name":"violinplot","func_name_tokens":["violinplot"],"docstring":"Plots a vertical scatter plot.    xs: List of x labels.    ys: List of lists of points to scatter vertically.    rotation: x label rotation. Default 'horizontal'.    points: Number of points to use in the density estimate.    x_tick_offset: How far to offset the x tick labels. Default 0.    facecolour: Colour of the violin plots. Default light green.    edgecolour: Colour of the violin lines. Default green.\nplt.violinplot has no arguments that let us set colours, so we have to do\nit ourselves. http://stackoverflow.com/a/26291582/1105803","docstring_tokens":["plots","a","vertical","scatter","plot",".","xs",":","list","of","x","labels",".","ys",":","list","of","lists","of","points","to","scatter","vertically",".","rotation",":","x","label","rotation",".","default","'","horizontal","'",".","points",":","number","of","points","to","use","in","the","density","estimate",".","x","tick","offset",":","how","far","to","offset","the","x","tick","labels",".","default","0",".","facecolour",":","colour","of","the","violin","plots",".","default","light","green",".","edgecolour",":","colour","of","the","violin","lines",".","default","green",".","plt",".","violinplot","has","no","arguments","that","let","us","set","colours",",","so","we","have","to","do","it","ourselves","."],"query":"Changing the color of matplotlib's violin plots","query_tokens":["changing","the","color","of","matplotlib","'","s","violin","plots"]}
{"code":"    def exe(self, ret):        if not ret:            assert ret == ''        else:            assert os.path.isabs(ret), ret            if POSIX:                assert os.path.isfile(ret), ret                if hasattr(os, 'access') and hasattr(os, \"X_OK\"):                    self.assertTrue(os.access(ret, os.X_OK))","code_tokens":["def","exe","(","self",",","ret",")",":","if","not","ret",":","assert","ret","=","=","'","'","else",":","assert","os",".","path",".","isabs","(","ret",")",",","ret","if","posix",":","assert","os",".","path",".","isfile","(","ret",")",",","ret","if","hasattr","(","os",",","'","access","'",")","and","hasattr","(","os",",","\"","x","ok","\"",")",":","self",".","assert","true","(","os",".","access","(","ret",",","os",".","x","ok",")",")"],"func_name":"exe","func_name_tokens":["exe"],"docstring":"Note: os.stat() may return False even if the file is there\nhence we skip the test, see:\nhttp://stackoverflow.com/questions/3112546/os-path-exists-lies\nXXX may fail on OSX","docstring_tokens":["note",":","os",".","stat","(",")","may","return","false","even","if","the","file","is","there","hence","we","skip","the","test",",","see",":","xxx","may","fail","on","osx"],"query":"os.path.exists() lies","query_tokens":["os",".","path",".","exists","(",")","lies"]}
{"code":"class Horizon():    def __init__(self):        self.stdin_path = '/dev/null'        self.stdout_path = settings.LOG_PATH + '/horizon.log'        self.stderr_path = settings.LOG_PATH + '/horizon.log'        self.pidfile_path = settings.PID_PATH + '/horizon.pid'        self.pidfile_timeout = 5","code_tokens":["class","horizon","(",")",":","def","init","(","self",")",":","self",".","stdin","path","=","'","/","dev","/","null","'","self",".","stdout","path","=","settings",".","log","path","+","'","/","horizon",".","log","'","self",".","stderr","path","=","settings",".","log","path","+","'","/","horizon",".","log","'","self",".","pidfile","path","=","settings",".","pid","path","+","'","/","horizon",".","pid","'","self",".","pidfile","timeout","=","5"],"func_name":"Horizon","func_name_tokens":["horizon"],"docstring":"TODO: http://stackoverflow.com/questions/6728236/exception-thrown-in-multiprocessing-pool-not-detected","docstring_tokens":["todo",":"],"query":"Exception thrown in multiprocessing Pool not detected","query_tokens":["exception","thrown","in","multiprocessing","pool","not","detected"]}
{"code":"def safe_eval(expr, locals=None, include_exceptions=False):    locals = {} if locals is None else locals","code_tokens":["def","safe","eval","(","expr",",","locals","=","none",",","include","exceptions","=","false",")",":","locals","=","{","}","if","locals","is","none","else","locals"],"func_name":"safe_eval","func_name_tokens":["safe","eval"],"docstring":"This is intended for allowing things like:    with_items: a_list_variable    Where Jinja2 would return a string but we do not want to allow it to    call functions (outside of Jinja2, where the env is constrained).    Based on:    http://stackoverflow.com/questions/12523516/using-ast-and-whitelists-to-make-pythons-eval-safe","docstring_tokens":["this","is","intended","for","allowing","things","like",":","with","items",":","a","list","variable","where","jinja2","would","return","a","string","but","we","do","not","want","to","allow","it","to","call","functions","(","outside","of","jinja2",",","where","the","env","is","constrained",")",".","based","on",":"],"query":"Using ast and whitelists to make python's eval() safe?","query_tokens":["using","ast","and","whitelists","to","make","python","'","s","eval","(",")","safe","?"]}
{"code":"    def __init__(self, vstring=None, sep='.', prerel_tags=('alpha', 'beta', 'rc')):        version.Version.__init__(self)         if sep is None:            sep = '.'        if prerel_tags is None:            prerel_tags = ()        self.sep = sep        self.prerel_sep = ''        self.prerel_tags = tuple(prerel_tags) if prerel_tags is not None else ()        self._compile_pattern()        self.prerelease = None        self.version = ()        if vstring:            self._parse(str(vstring))        return    _nn_version = 'version'    _nn_prerel_sep = 'prerel_sep'    _nn_prerel_tag = 'tag'    _nn_prerel_num = 'tag_num'    _re_prerel_sep = r'(?P<{pn}>{sep})?'.format(        pn=_nn_prerel_sep,        sep='|'.join(map(re.escape, ('.', '-'))))    @property","code_tokens":["def","init","(","self",",","vstring","=","none",",","sep","=","'",".","'",",","prerel","tags","=","(","'","alpha","'",",","'","beta","'",",","'","rc","'",")",")",":","version",".","version",".","init","(","self",")","if","sep","is","none",":","sep","=","'",".","'","if","prerel","tags","is","none",":","prerel","tags","=","(",")","self",".","sep","=","sep","self",".","prerel","sep","=","'","'","self",".","prerel","tags","=","tuple","(","prerel","tags",")","if","prerel","tags","is","not","none","else","(",")","self",".","compile","pattern","(",")","self",".","prerelease","=","none","self",".","version","=","(",")","if","vstring",":","self",".","parse","(","str","(","vstring",")",")","return","nn","version","=","'","version","'","nn","prerel","sep","=","'","prerel","sep","'","nn","prerel","tag","=","'","tag","'","nn","prerel","num","=","'","tag","num","'","re","prerel","sep","=","r","'","(","?","p","<","{","pn","}",">","{","sep","}",")","?","'",".","format","(","pn","=","nn","prerel","sep",",","sep","=","'","|","'",".","join","(","map","(","re",".","escape",",","(","'",".","'",",","'","-","'",")",")",")",")","@","property"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"A more flexible implementation of distutils.version.StrictVersion    The implementation allows to specify:    - an arbitrary number of version numbers:        not only '1.2.3' , but also '1.2.3.4.5'    - the separator between version numbers:        '1-2-3' is allowed when '-' is specified as separator    - a flexible pre-release separator:        '1.2.3.alpha1', '1.2.3-alpha1', and '1.2.3alpha1' are considered equivalent    - an arbitrary ordering of pre-release tags:        1.1alpha3 < 1.1beta2 < 1.1rc1 < 1.1        when [\"alpha\", \"beta\", \"rc\"] is specified as pre-release tag list    Inspiration from this discussion at StackOverflow:        http://stackoverflow.com/questions/12255554/sort-versions-in-python","docstring_tokens":["a","more","flexible","implementation","of","distutils",".","version",".","strict","version","the","implementation","allows","to","specify",":","-","an","arbitrary","number","of","version","numbers",":","not","only","'","1",".","2",".","3","'",",","but","also","'","1",".","2",".","3",".","4",".","5","'","-","the","separator","between","version","numbers",":","'","1","-","2","-","3","'","is","allowed","when","'","-","'","is","specified","as","separator","-","a","flexible","pre","-","release","separator",":","'","1",".","2",".","3",".","alpha1","'",",","'","1",".","2",".","3","-","alpha1","'",",","and","'","1",".","2",".","3alpha1","'","are","considered","equivalent","-","an","arbitrary","ordering","of","pre","-","release","tags",":","1",".","1alpha3","<","1",".","1beta2","<","1",".","1rc1","<","1",".","1","when","[","\"","alpha","\"",",","\"","beta","\"",",","\"","rc","\"","]","is","specified","as","pre","-","release","tag","list","inspiration","from","this","discussion","at","stack","overflow",":"],"query":"Sort Versions in Python","query_tokens":["sort","versions","in","python"]}
{"code":"import loggingfrom AWSIoTPythonSDK.exception.AWSIoTExceptions import connectError, connectTimeoutExceptionfrom AWSIoTPythonSDK.exception.AWSIoTExceptions import disconnectError, disconnectTimeoutExceptionimport AWSIoTPythonSDK.MQTTLib as MQTTLibfrom scs_core.data.json import JSONifyclass MQTTClient(object):    __KEEP_ALIVE_INTERVAL =         600                     # recommended: 30 default: 600 (sec)    __PORT =                        8883    __QUEUE_SIZE =                  -1                      # recommended: infinite    __QUEUE_DROP_BEHAVIOUR =        MQTTLib.DROP_OLDEST     # not required for infinite queue    __QUEUE_DRAINING_FREQUENCY =    2                       # recommended: 2 (Hz)    __RECONN_BASE =                 1                       # recommended: 1 (sec)    __RECONN_MAX =                  32                      # recommended: 32 or 128 (sec), was 10    __RECONN_STABLE =               20                      # recommended: 20 (sec), was 10    __DISCONNECT_TIMEOUT =          10                      # recommended: 10 (sec), was 40    __OPERATION_TIMEOUT =           5                       # recommended: 5 (sec), was 20    __PUB_QOS =                     1    __SUB_QOS =                     1    @staticmethod","code_tokens":["import","loggingfrom","aws","io","t","python","sdk",".","exception",".","aws","io","t","exceptions","import","connect","error",",","connect","timeout","exceptionfrom","aws","io","t","python","sdk",".","exception",".","aws","io","t","exceptions","import","disconnect","error",",","disconnect","timeout","exceptionimport","aws","io","t","python","sdk",".","mqtt","lib","as","mqtt","libfrom","scs","core",".","data",".","json","import","jso","nifyclass","mqtt","client","(","object",")",":","keep","alive","interval","=","600","#","recommended",":","30","default",":","600","(","sec",")","port","=","8883","queue","size","=","-","1","#","recommended",":","infinite","queue","drop","behaviour","=","mqtt","lib",".","drop","oldest","#","not","required","for","infinite","queue","queue","draining","frequency","=","2","#","recommended",":","2","(","hz",")","reconn","base","=","1","#","recommended",":","1","(","sec",")","reconn","max","=","32","#","recommended",":","32","or","128","(","sec",")",",","was","10","reconn","stable","=","20","#","recommended",":","20","(","sec",")",",","was","10","disconnect","timeout","=","10","#","recommended",":","10","(","sec",")",",","was","40","operation","timeout","=","5","#","recommended",":","5","(","sec",")",",","was","20","pub","qos","=","1","sub","qos","=","1","@","staticmethod"],"func_name":"MQTTClient","func_name_tokens":["mqtt","client"],"docstring":"Created on 6 Oct 2017@author: Bruno Beloff (bruno.beloff@southcoastscience.com)https://github.com/aws/aws-iot-device-sdk-pythonhttps://s3.amazonaws.com/aws-iot-device-sdk-python-docs/sphinx/html/index.htmlhttps://github.com/aws/aws-iot-device-sdk-python/issues/57https://stackoverflow.com/questions/20083858/how-to-extract-value-from-bound-method-in-pythonhttps://github.com/aws/aws-iot-device-sdk-python-V2\n----------------------------------------------------------------------------------------------------------------","docstring_tokens":["created","on","6","oct","2017","@","author",":","bruno","beloff","(","bruno",".","beloff","@","southcoastscience",".","com",")","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],"query":"how to extract value from bound method in python? [duplicate]","query_tokens":["how","to","extract","value","from","bound","method","in","python","?","[","duplicate","]"]}
{"code":"def we_are_frozen():    return hasattr(sys, \"frozen\")","code_tokens":["def","we","are","frozen","(",")",":","return","hasattr","(","sys",",","\"","frozen","\"",")"],"func_name":"we_are_frozen","func_name_tokens":["we","are","frozen"],"docstring":"Source: http://stackoverflow.com/a/2632297/2872678\nAll of the modules are built-in to the interpreter, e.g., by py2exe","docstring_tokens":["source",":","all","of","the","modules","are","built","-","in","to","the","interpreter",",","e",".","g",".",",","by","py2exe"],"query":"How do I get the path of the current executed file in Python?","query_tokens":["how","do","i","get","the","path","of","the","current","executed","file","in","python","?"]}
{"code":"class hashabledict(dict):    def __key(self):        return tuple((k,self[k]) for k in sorted(self))","code_tokens":["class","hashabledict","(","dict",")",":","def","key","(","self",")",":","return","tuple","(","(","k",",","self","[","k","]",")","for","k","in","sorted","(","self",")",")"],"func_name":"hashabledict","func_name_tokens":["hashabledict"],"docstring":"Metrics tracking tests are in test_usage_metrics.py\nTaken from http://stackoverflow.com/questions/1151658/python-hashable-dicts\nby Alex Martelli","docstring_tokens":["metrics","tracking","tests","are","in","test","usage","metrics",".","py","taken","from","by","alex","martelli"],"query":"Python hashable dicts","query_tokens":["python","hashable","dicts"]}
{"code":"def split_speaker(user):  nick, vhost = string.split(user, '!', maxsplit=1)  if not vhost:    vhost = 'nick@unknown'  vhost = vhost.replace('~', '', 1)  return nick, vhost","code_tokens":["def","split","speaker","(","user",")",":","nick",",","vhost","=","string",".","split","(","user",",","'","!","'",",","maxsplit","=","1",")","if","not","vhost",":","vhost","=","'","nick","@","unknown","'","vhost","=","vhost",".","replace","(","'","~","'",",","'","'",",","1",")","return","nick",",","vhost"],"func_name":"split_speaker","func_name_tokens":["split","speaker"],"docstring":"split a nick most likely in the form:  \"SoapKills!~ring@banana.phone\"  or (nick)!~(realname)@(vhost)  into a tuble of (nick, vhost)\nafter http://stackoverflow.com/questions/938870/python-irc-bot-and-encoding-issue","docstring_tokens":["split","a","nick","most","likely","in","the","form",":","\"","soap","kills","!","~","ring","@","banana",".","phone","\"","or","(","nick",")","!","~","(","realname",")","@","(","vhost",")","into","a","tuble","of","(","nick",",","vhost",")","after"],"query":"Python IRC bot and encoding issue","query_tokens":["python","irc","bot","and","encoding","issue"]}
{"code":"import nltkfrom nltk.metrics.distance import edit_distancefrom nltk.corpus import wordnet as wndef strip_excluded_words():    if args.exclude and len(args.exclude) > 0:        for line in fileinput.input(files=args.exclude):            line = line.strip()            if non_word.search(line) != None:                continue            line = line.lower()            exclude_set.add(line)","code_tokens":["import","nltkfrom","nltk",".","metrics",".","distance","import","edit","distancefrom","nltk",".","corpus","import","wordnet","as","wndef","strip","excluded","words","(",")",":","if","args",".","exclude","and","len","(","args",".","exclude",")",">","0",":","for","line","in","fileinput",".","input","(","files","=","args",".","exclude",")",":","line","=","line",".","strip","(",")","if","non","word",".","search","(","line",")","!","=","none",":","continue","line","=","line",".","lower","(",")","exclude","set",".","add","(","line",")"],"func_name":"strip_excluded_words","func_name_tokens":["strip","excluded","words"],"docstring":"NLTK is strangely packaged, so \"import nltk\" is not enough:\nhttp://stackoverflow.com/q/33398282\nDefine functions\nMerge all valid lines in exclude file(s) into exclude_set","docstring_tokens":["nltk","is","strangely","packaged",",","so","\"","import","nltk","\"","is","not","enough",":","define","functions","merge","all","valid","lines","in","exclude","file","(","s",")","into","exclude","set"],"query":"AttributeError: ‘module’ object has no attribute 'scores'","query_tokens":["attribute","error",":","‘","module","’","object","has","no","attribute","'","scores","'"]}
{"code":"    def test_pandas_confusion_normalized_issue1(self):        y_true = ['business', 'business', 'business', 'business', 'business',                  'business', 'business', 'business', 'business', 'business',                  'business', 'business', 'business', 'business', 'business',                  'business', 'business', 'business', 'business', 'business']        y_pred = ['health', 'business', 'business', 'business', 'business',                  'business', 'health', 'health', 'business', 'business', 'business',                  'business', 'business', 'business', 'business', 'business',                  'health', 'health', 'business', 'health']        cm = ConfusionMatrix(y_true, y_pred)        assert isinstance(cm, pdml.confusion_matrix.BinaryConfusionMatrix)        df = cm.to_dataframe()        df_norm = cm.to_dataframe(normalized=True)        assert(df_norm.sum(axis=1, skipna=False).fillna(1).sum() == len(df))","code_tokens":["def","test","pandas","confusion","normalized","issue1","(","self",")",":","y","true","=","[","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'","]","y","pred","=","[","'","health","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","health","'",",","'","health","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","business","'",",","'","health","'",",","'","health","'",",","'","business","'",",","'","health","'","]","cm","=","confusion","matrix","(","y","true",",","y","pred",")","assert","isinstance","(","cm",",","pdml",".","confusion","matrix",".","binary","confusion","matrix",")","df","=","cm",".","to","dataframe","(",")","df","norm","=","cm",".","to","dataframe","(","normalized","=","true",")","assert","(","df","norm",".","sum","(","axis","=","1",",","skipna","=","false",")",".","fillna","(","1",")",".","sum","(",")","=","=","len","(","df",")",")"],"func_name":"test_pandas_confusion_normalized_issue1","func_name_tokens":["test","pandas","confusion","normalized","issue1"],"docstring":"should insure issue 1 is fixed\nsee http://stackoverflow.com/questions/19233771/sklearn-plot-confusion-matrix-with-labels/31720054\n31720054","docstring_tokens":["should","insure","issue","1","is","fixed","see","31720054"],"query":"sklearn plot confusion matrix with labels","query_tokens":["sklearn","plot","confusion","matrix","with","labels"]}
{"code":"import requestsimport jsonfrom bs4 import BeautifulSoupclass GooglePlay:        def __init__(self):        pass    ","code_tokens":["import","requestsimport","jsonfrom","bs4","import","beautiful","soupclass","google","play",":","def","init","(","self",")",":","pass"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Sources:https://play.google.com/storehttps://docs.python.org/2/howto/urllib2.htmlhttp://stackoverflow.com/questions/16870648/python-read-website-data-line-by-line-when-availablehttp://stackoverflow.com/questions/12943819/how-to-python-prettyprint-a-json-filehttp://stackoverflow.com/questions/1080411/retrieve-links-from-web-page-using-python-and-beautifulsouphttp://www.crummy.com/software/BeautifulSoup/http://www.crummy.com/software/BeautifulSoup/bs4/doc/http://stackoverflow.com/questions/5041008/handling-class-attribute-in-beautifulsouphttp://stackoverflow.com/questions/18851325/adding-more-values-on-existing-python-dictionary-keyhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/\nnext-sibling-and-previous-siblinghttp://stackoverflow.com/questions/23380171/using-beautifulsoup-extract-text-without-tagshttp://stackoverflow.com/questions/1024847/add-key-to-a-dictionary-in-pythonhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/https://docs.python.org/2/library/uuid.htmlhttps://github.com/behackett/presentations/blob/master/pycon_2012/Lesson%201.1:%20Getting%20Started.ipynbhttp://stackoverflow.com/questions/12309269/write-json-data-to-file-in-pythonhttp://stackoverflow.com/questions/4254039/how-to-retrieve-a-value-from-mongodb-by-its-key-namehttp://stackoverflow.com/questions/7431422/find-in-dictionary-by-value-in-mongohttp://stackoverflow.com/questions/17360423/getting-a-dictionary-inside-a-list-by-key-in-mongodb-mongoengine","docstring_tokens":["sources",":","next","-","sibling","-","and","-","previous","-","sibling"],"query":"retrieve links from web page using python and BeautifulSoup","query_tokens":["retrieve","links","from","web","page","using","python","and","beautiful","soup"]}
{"code":"    def render_markup(self, error_text=None):        uri = self.uris[0]                data = self.data.copy()        wmode = data.pop('wmode', 0)        if wmode:            data['wmode'] = 'opaque'        data_qs = urlencode(data)        iframe_attrs = dict(            frameborder=0,            width=self.adjusted_width,            height=self.adjusted_height,        )        if bool(data.get('fs')):            iframe_attrs.update(dict(                allowfullscreen='',                mozallowfullscreen='',                webkitallowfullscreen='',            ))        tag = Element('iframe', src='%s?%s' % (uri, data_qs), **iframe_attrs)        if error_text:            tag(error_text)        return tagAbstractIframeEmbedPlayer.register(YoutubePlayer)","code_tokens":["def","render","markup","(","self",",","error","text","=","none",")",":","uri","=","self",".","uris","[","0","]","data","=","self",".","data",".","copy","(",")","wmode","=","data",".","pop","(","'","wmode","'",",","0",")","if","wmode",":","data","[","'","wmode","'","]","=","'","opaque","'","data","qs","=","urlencode","(","data",")","iframe","attrs","=","dict","(","frameborder","=","0",",","width","=","self",".","adjusted","width",",","height","=","self",".","adjusted","height",",",")","if","bool","(","data",".","get","(","'","fs","'",")",")",":","iframe","attrs",".","update","(","dict","(","allowfullscreen","=","'","'",",","mozallowfullscreen","=","'","'",",","webkitallowfullscreen","=","'","'",",",")",")","tag","=","element","(","'","iframe","'",",","src","=","'","%","s","?","%","s","'","%","(","uri",",","data","qs",")",",","*","*","iframe","attrs",")","if","error","text",":","tag","(","error","text",")","return","tag","abstract","iframe","embed","player",".","register","(","youtube","player",")"],"func_name":"render_markup","func_name_tokens":["render","markup"],"docstring":"Render the XHTML markup for this player instance.        :param error_text: Optional error text that should be included in            the final markup if appropriate for the player.        :rtype: ``unicode`` or :class:`genshi.core.Markup`        :returns: XHTML that will not be escaped by Genshi.\n'wmode' is subject to a lot of myths and half-true statements,\nthese are the best resources I could find:\nhttp://stackoverflow.com/questions/886864/differences-between-using-wmode-transparent-opaque-or-window-for-an-embed\nhttp://kb2.adobe.com/cps/127/tn_12701.html\nmain_Using_Window_Mode__wmode__values_\nnon-standard attributes, required to enable YouTube's HTML5\nfull-screen capabilities","docstring_tokens":["render","the","xhtml","markup","for","this","player","instance",".","'","wmode","'","is","subject","to","a","lot","of","myths","and","half","-","true","statements",",","these","are","the","best","resources","i","could","find",":","main","using","window","mode","wmode","values","non","-","standard","attributes",",","required","to","enable","you","tube","'","s","html5","full","-","screen","capabilities"],"query":"differences between using wmode=“transparent”, “opaque”, or “window” for an embedded object on a webpage","query_tokens":["differences","between","using","wmode","=","“","transparent","”",",","“","opaque","”",",","or","“","window","”","for","an","embedded","object","on","a","webpage"]}
{"code":"    def childSearch(self, word):        cur = self.root        for c in word:            if c in cur.leaves:                cur = cur.leaves[c]            else:                return False, None        return True, cur","code_tokens":["def","child","search","(","self",",","word",")",":","cur","=","self",".","root","for","c","in","word",":","if","c","in","cur",".","leaves",":","cur","=","cur",".","leaves","[","c","]","else",":","return","false",",","none","return","true",",","cur"],"func_name":"childSearch","func_name_tokens":["child","search"],"docstring":"Question 4 - Polygon Function\nI have a function that takes a point and a polygon and returns True if the point lies inside\nthe polygon, and False if it does not. The function implementation is shown on the next page.\nIn a white box testing implement your test cases in python class and consider each test in\na separate method name starts with \"test\"\nJustify each test case implemented (\"Why is this test case important?\") and document it.\nReference:\nhttps://stackoverflow.com/questions/129507/how-do-you-test-that-a-python-function-throws-an-exception\nhttp://www.softwaretestinghelp.com/white-box-testing-techniques-with-example/","docstring_tokens":["question","4","-","polygon","function","i","have","a","function","that","takes","a","point","and","a","polygon","and","returns","true","if","the","point","lies","inside","the","polygon",",","and","false","if","it","does","not",".","the","function","implementation","is","shown","on","the","next","page",".","in","a","white","box","testing","implement","your","test","cases","in","python","class","and","consider","each","test","in","a","separate","method","name","starts","with","\"","test","\"","justify","each","test","case","implemented","(","\"","why","is","this","test","case","important","?","\"",")","and","document","it",".","reference",":"],"query":"How do you test that a Python function throws an exception?","query_tokens":["how","do","you","test","that","a","python","function","throws","an","exception","?"]}
{"code":"def get_local_ip():","code_tokens":["def","get","local","ip","(",")",":"],"func_name":"get_local_ip","func_name_tokens":["get","local","ip"],"docstring":"Try to determine the local IP address of the machine.    try:        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nUse Google Public DNS server to determine own IP        sock.connect(('8.8.8.8', 80))        return sock.getsockname()[0]    except socket.error:        return socket.gethostbyname(socket.gethostname())    finally:        sock.close()\nTaken from http://stackoverflow.com/a/23728630","docstring_tokens":["try","to","determine","the","local","ip","address","of","the","machine",".","try",":","sock","=","socket",".","socket","(","socket",".","af","inet",",","socket",".","sock","dgram",")","use","google","public","dns","server","to","determine","own","ip","sock",".","connect","(","(","'","8",".","8",".","8",".","8","'",",","80",")",")","return","sock",".","getsockname","(",")","[","0","]","except","socket",".","error",":","return","socket",".","gethostbyname","(","socket",".","gethostname","(",")",")","finally",":","sock",".","close","(",")","taken","from"],"query":"Random string generation with upper case letters and digits","query_tokens":["random","string","generation","with","upper","case","letters","and","digits"]}
{"code":"\tdef __init__(self, level, logger=None):\t\tself.logger = logging.getLogger() if logger is None else logger\t\tself.level = level\t\tself.pipe = os.pipe()\t\tself.thread = threading.Thread(target=self._flusher)\t\tself.thread.start()\t","code_tokens":["def","init","(","self",",","level",",","logger","=","none",")",":","self",".","logger","=","logging",".","get","logger","(",")","if","logger","is","none","else","logger","self",".","level","=","level","self",".","pipe","=","os",".","pipe","(",")","self",".","thread","=","threading",".","thread","(","target","=","self",".","flusher",")","self",".","thread",".","start","(",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"주어진 로깅 객체에 파일 처럼 쓸수 있는 객체를 생성합니다.\t\t예컨데, 다음과 같이 활용 할 수 있습니다.\t\t.. code-block:: python\t\t>>> import ufp.logging\t\t>>> import subprocess\t\t>>> import logging\t\t>>> logging.setLevel(logging.DEBUG)\t\t>>> with ufp.logging.StreamLogger(logging.INFO) as out:\t\t... \twith ufp.logging.StreamLogger(logging.ERROR) as err:\t\t... \t\tsubprocess.call(['ls', '-1'], stdout=out, stderr=err)\t\t... \t\t... \t\t\tINFO:root:test (d1).file\t\tINFO:root:test (d2).file\t\tINFO:root:test.file\t\t0\t\t.. 참조 : \t\thttp://stackoverflow.com/questions/4713932/decorate-delegate-a-file-object-to-add-functionality/4838875\n4838875\t\thttp://stackoverflow.com/questions/13923344/logging-from-an-external-application\t\t:param logger: 로깅 객체. 생략시 전역 로깅 객체를 사용합니다.\t:type logger: logging.Logger, None\t:param level: 로그 작성 레벨\t:type level: int","docstring_tokens":[".",",",".",".",".","code","-","block",":",":","python",">",">",">","import","ufp",".","logging",">",">",">","import","subprocess",">",">",">","import","logging",">",">",">","logging",".","set","level","(","logging",".","debug",")",">",">",">","with","ufp",".","logging",".","stream","logger","(","logging",".","info",")","as","out",":",".",".",".","with","ufp",".","logging",".","stream","logger","(","logging",".","error",")","as","err",":",".",".",".","subprocess",".","call","(","[","'","ls","'",",","'","-","1","'","]",",","stdout","=","out",",","stderr","=","err",")",".",".",".",".",".",".","info",":","root",":","test","(","d1",")",".","file","info",":","root",":","test","(","d2",")",".","file","info",":","root",":","test",".","file","0",".",".",":","4838875"],"query":"Logging from an External Application","query_tokens":["logging","from","an","external","application"]}
{"code":"    def exc():        raise Exception('Houston we have problems!')    exc()    Traceback (most recent call last):       ...    Exception: Houston we have problems!","code_tokens":["def","exc","(",")",":","raise","exception","(","'","houston","we","have","problems","!","'",")","exc","(",")","traceback","(","most","recent","call","last",")",":",".",".",".","exception",":","houston","we","have","problems","!"],"func_name":"exc","func_name_tokens":["exc"],"docstring":"Someuseful stuff\nhttp://stackoverflow.com/questions/492519/timeout-on-a-python-function-call/14924210\n14924210\nhttp://stackoverflow.com/a/14924210/2530083\nhttp://stackoverflow.com/questions/7194884/assigning-return-value-of-function-to-a-variable-with-multiprocessing-and-a-pr\nhttp://eli.thegreenplace.net/2012/01/16/python-parallelizing-cpu-bound-tasks-with-multiprocessing/\nhttp://code.activestate.com/recipes/577853-timeout-decorator-with-multiprocessing/import multiprocessingimport timeimport logging","docstring_tokens":["someuseful","stuff","14924210","multiprocessingimport","timeimport","logging"],"query":"Timeout on a function call","query_tokens":["timeout","on","a","function","call"]}
{"code":"DARWIN_ROOT_WARNING = \"\"\"In MacOS, pynput must to be running as root in order to get keystrokes.Try running your program like this:    sudo %s <your commands here>try:    import pynputexcept ImportError:    pynput = Listener = Noneelse:    class Listener(pynput.keyboard.Listener):        def join(self, timeout=None):            self._queue.put(None)            return super().join(timeout)","code_tokens":["darwin","root","warning","=","\"","\"","\"","in","mac","os",",","pynput","must","to","be","running","as","root","in","order","to","get","keystrokes",".","try","running","your","program","like","this",":","sudo","%","s","<","your","commands","here",">","try",":","import","pynputexcept","import","error",":","pynput","=","listener","=","noneelse",":","class","listener","(","pynput",".","keyboard",".","listener",")",":","def","join","(","self",",","timeout","=","none",")",":","self",".","queue",".","put","(","none",")","return","super","(",")",".","join","(","timeout",")"],"func_name":"Listener","func_name_tokens":["listener"],"docstring":"See https://stackoverflow.com/questions/42603000INSTALL_ERROR = Please install the pynput library with    $ pip install pynput\njoin() on pynput.keyboard.Listener waits on a queue...","docstring_tokens":["see","=","please","install","the","pynput","library","with","$","pip","install","pynput","join","(",")","on","pynput",".","keyboard",".","listener","waits","on","a","queue",".",".","."],"query":"Pynput Keylogger Only Returning Shift, Command, Space and Capslock Keys","query_tokens":["pynput","keylogger","only","returning","shift",",","command",",","space","and","capslock","keys"]}
{"code":"class MockResponse:","code_tokens":["class","mock","response",":"],"func_name":"MockResponse","func_name_tokens":["mock","response"],"docstring":"This is a way to mock requests functions.\nIt was taken from the following Stack Overflow answer by Johannes Fahrenkrug\nhttps://stackoverflow.com/questions/15753390/\npython-mock-requests-and-the-response\nRequests MockResponse class.     def __init__(self, json_data, status_code):        self.json_data = json_data        self.status_code = status_code","docstring_tokens":["this","is","a","way","to","mock","requests","functions",".","it","was","taken","from","the","following","stack","overflow","answer","by","johannes","fahrenkrug","python","-","mock","-","requests","-","and","-","the","-","response","requests","mock","response","class",".","def","init","(","self",",","json","data",",","status","code",")",":","self",".","json","data","=","json","data","self",".","status","code","=","status","code"],"query":"How can I mock requests and the response?","query_tokens":["how","can","i","mock","requests","and","the","response","?"]}
{"code":"def wait_for_ajax_complete():    javascript = \"\"\"        var callback = arguments[arguments.length - 1];        if(!window.jQuery) {callback(false);}        var intervalID = setInterval(function() {          if(jQuery.active == 0) {            clearInterval(intervalID);            callback(true);          }        }, 100);","code_tokens":["def","wait","for","ajax","complete","(",")",":","javascript","=","\"","\"","\"","var","callback","=","arguments","[","arguments",".","length","-","1","]",";","if","(","!","window",".","j","query",")","{","callback","(","false",")",";","}","var","interval","id","=","set","interval","(","function","(",")","{","if","(","j","query",".","active","=","=","0",")","{","clear","interval","(","interval","id",")",";","callback","(","true",")",";","}","}",",","100",")",";"],"func_name":"wait_for_ajax_complete","func_name_tokens":["wait","for","ajax","complete"],"docstring":"Wait until all jQuery AJAX calls have completed. \"Complete\" means that    either the server has sent a response (regardless of whether the response    indicates success or failure), or that the AJAX call timed out waiting for    a response. For more information about the `jQuery.active` counter that    keeps track of this information, go here:    http://stackoverflow.com/questions/3148225/jquery-active-function\n3148506\nSometimes the ajax when it returns will make the browser reload\nthe DOM, and throw a WebDriverException with the message:\n'javascript error: document unloaded while waiting for result'    for _ in range(5):\n5 attempts max        try:            result = world.browser.driver.execute_async_script(dedent(javascript))        except WebDriverException as wde:            if \"document unloaded while waiting for result\" in wde.msg:\nWait a bit, and try again, when the browser has reloaded the page.                world.wait(1)                continue            else:                raise        return result@world.absorb","docstring_tokens":["wait","until","all","j","query","ajax","calls","have","completed",".","\"","complete","\"","means","that","either","the","server","has","sent","a","response","(","regardless","of","whether","the","response","indicates","success","or","failure",")",",","or","that","the","ajax","call","timed","out","waiting","for","a","response",".","for","more","information","about","the","`","j","query",".","active","`","counter","that","keeps","track","of","this","information",",","go","here",":","3148506","sometimes","the","ajax","when","it","returns","will","make","the","browser","reload","the","dom",",","and","throw","a","web","driver","exception","with","the","message",":","'","javascript","error",":","document","unloaded","while","waiting","for","result","'","for","in","range","(","5",")",":","5","attempts","max","try",":","result","=","world",".","browser",".","driver",".","execute","async","script","(","dedent","(","javascript",")",")","except","web","driver","exception","as","wde",":","if","\"","document","unloaded","while","waiting","for","result","\"","in","wde",".","msg",":","wait","a","bit",",","and","try","again",",","when","the","browser","has","reloaded","the","page",".","world",".","wait","(","1",")","continue","else",":","raise","return","result","@","world",".","absorb"],"query":"jQuery.active function","query_tokens":["j","query",".","active","function"]}
{"code":"def my_print(line):\tunicode_line = ''\tif type(line) == str:\t\tunicode_line = line.decode(ENCODING_SRC_FILE)\telse:\t\tunicode_line = line\tprint(unicode_line.encode(ENCODING_STDOUT, errors='replace'))LIT_VERSION15 =           'v15'LIT_VERSION16 =           'v16'LIT_VERSION17 =           'v17'LIT_LINEMARK =      '_linemark'LIT_SPLIT =         '_split'LIT_SPLIT_LISTOBJECT = '_split_listobject'LIT_SPLIT_BIT =     '_split_bit'LIT_REGEXPATTERN =  '_regexpattern'LIT_OBJ =           '_obj'LIT_WINDOW =        'WINDOW'LIT_MULTIPOS =      'MULTIPOS'LIT_REFERENCE =     '_reference'","code_tokens":["def","my","print","(","line",")",":","unicode","line","=","'","'","if","type","(","line",")","=","=","str",":","unicode","line","=","line",".","decode","(","encoding","src","file",")","else",":","unicode","line","=","line","print","(","unicode","line",".","encode","(","encoding","stdout",",","errors","=","'","replace","'",")",")","lit","version15","=","'","v15","'","lit","version16","=","'","v16","'","lit","version17","=","'","v17","'","lit","linemark","=","'","linemark","'","lit","split","=","'","split","'","lit","split","listobject","=","'","split","listobject","'","lit","split","bit","=","'","split","bit","'","lit","regexpattern","=","'","regexpattern","'","lit","obj","=","'","obj","'","lit","window","=","'","window","'","lit","multipos","=","'","multipos","'","lit","reference","=","'","reference","'"],"func_name":"my_print","func_name_tokens":["my","print"],"docstring":"wrapper for print()-function:\t-does explicit conversion from unicode to encoded byte-string\t-when parameter is already a encoded byte-string, then convert to unicode using \"encoding cookie\" and then to encoded byte-string\nconversion byte-string -> unicode -> byte-string\n(first encoding is source file encoding, second one is encoding of console)\nassuming unicode-string (we don't care about other situations, when called with wrong datatype then print() will throw exception)\nwhen a character isn't available in given ENCODING, then it gets replaced by \"?\". Other options:\nhttp://stackoverflow.com/questions/3224268/python-unicode-encode-error\nliteral strings: these were embedded into configuration file","docstring_tokens":["wrapper","for","print","(",")","-","function",":","-","does","explicit","conversion","from","unicode","to","encoded","byte","-","string","-","when","parameter","is","already","a","encoded","byte","-","string",",","then","convert","to","unicode","using","\"","encoding","cookie","\"","and","then","to","encoded","byte","-","string","conversion","byte","-","string","-",">","unicode","-",">","byte","-","string","(","first","encoding","is","source","file","encoding",",","second","one","is","encoding","of","console",")","assuming","unicode","-","string","(","we","don","'","t","care","about","other","situations",",","when","called","with","wrong","datatype","then","print","(",")","will","throw","exception",")","when","a","character","isn","'","t","available","in","given","encoding",",","then","it","gets","replaced","by","\"","?","\"",".","other","options",":","literal","strings",":","these","were","embedded","into","configuration","file"],"query":"Python Unicode Encode Error","query_tokens":["python","unicode","encode","error"]}
{"code":"    __isabstractmethod__ = True    def __init__(self, target):        target.__isabstractmethod__ = True","code_tokens":["isabstractmethod","=","true","def","init","(","self",",","target",")",":","target",".","isabstractmethod","=","true"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Descriptor for an abstract classmethod.    It augments the :mod:`abc` framework with an abstract    classmethod. This is implemented as :class:`abc.abstractclassmethod`    in the standard Python library starting with version 3.2.    This particular implementation, allegedly based on Python 3.3 source    code, is stolen from    http://stackoverflow.com/questions/11217878/python-2-7-combine-abc-abstractmethod-and-classmethod.","docstring_tokens":["descriptor","for","an","abstract","classmethod",".","it","augments","the",":","mod",":","`","abc","`","framework","with","an","abstract","classmethod",".","this","is","implemented","as",":","class",":","`","abc",".","abstractclassmethod","`","in","the","standard","python","library","starting","with","version","3",".","2",".","this","particular","implementation",",","allegedly","based","on","python","3",".","3","source","code",",","is","stolen","from"],"query":"Python 2.7 Combine abc.abstractmethod and classmethod","query_tokens":["python","2",".","7","combine","abc",".","abstractmethod","and","classmethod"]}
{"code":"def refresh_search_view(mapper, connection, target):    if db.session.object_session(target).is_modified(target, include_collections=False):        if cache.get('refresh-lock') is None:            cache.set('refresh-lock', True)            from purchasing.tasks import rebuild_search_view            rebuild_search_view.delay()        else:            return","code_tokens":["def","refresh","search","view","(","mapper",",","connection",",","target",")",":","if","db",".","session",".","object","session","(","target",")",".","is","modified","(","target",",","include","collections","=","false",")",":","if","cache",".","get","(","'","refresh","-","lock","'",")","is","none",":","cache",".","set","(","'","refresh","-","lock","'",",","true",")","from","purchasing",".","tasks","import","rebuild","search","view","rebuild","search","view",".","delay","(",")","else",":","return"],"func_name":"refresh_search_view","func_name_tokens":["refresh","search","view"],"docstring":"only fire the trigger if the object itself was actually modified\nmodified from http://stackoverflow.com/questions/12753450/sqlalchemy-mixins-and-event-listener","docstring_tokens":["only","fire","the","trigger","if","the","object","itself","was","actually","modified","modified","from"],"query":"Sqlalchemy mixins / and event listener","query_tokens":["sqlalchemy","mixins","/","and","event","listener"]}
{"code":"  def subproc_map(self, f, items):    try:      res = SubprocPool.foreground().map_async(f, items)      while not res.ready():        res.wait(60)  # Repeatedly wait for up to a minute.        if not res.ready():          self.log.debug('subproc_map result still not ready...')      return res.get()    except KeyboardInterrupt:      SubprocPool.shutdown(True)      raise  @contextmanager","code_tokens":["def","subproc","map","(","self",",","f",",","items",")",":","try",":","res","=","subproc","pool",".","foreground","(",")",".","map","async","(","f",",","items",")","while","not","res",".","ready","(",")",":","res",".","wait","(","60",")","#","repeatedly","wait","for","up","to","a","minute",".","if","not","res",".","ready","(",")",":","self",".","log",".","debug","(","'","subproc","map","result","still","not","ready",".",".",".","'",")","return","res",".","get","(",")","except","keyboard","interrupt",":","subproc","pool",".","shutdown","(","true",")","raise","@","contextmanager"],"func_name":"subproc_map","func_name_tokens":["subproc","map"],"docstring":"Map function `f` over `items` in subprocesses and return the result.      :API: public      :param f: A multiproc-friendly (importable) work function.      :param items: A iterable of pickleable arguments to f.\nPool.map (and async_map().get() w/o timeout) can miss SIGINT.\nSee: http://stackoverflow.com/a/1408476, http://bugs.python.org/issue8844\nInstead, we map_async(...), wait *with a timeout* until ready, then .get()\nNB: in 2.x, wait() with timeout wakes up often to check, burning CPU. Oh well.","docstring_tokens":["map","function","`","f","`","over","`","items","`","in","subprocesses","and","return","the","result",".",":","api",":","public","pool",".","map","(","and","async","map","(",")",".","get","(",")","w","/","o","timeout",")","can","miss","sigint",".","see",":",",","instead",",","we","map","async","(",".",".",".",")",",","wait","*","with","a","timeout","*","until","ready",",","then",".","get","(",")","nb",":","in","2",".","x",",","wait","(",")","with","timeout","wakes","up","often","to","check",",","burning","cpu",".","oh","well","."],"query":"Keyboard Interrupts with python's multiprocessing Pool","query_tokens":["keyboard","interrupts","with","python","'","s","multiprocessing","pool"]}
{"code":"def _mode(x):    ndim = x.ndim    axis = 0    sort = np.sort(x, axis=axis)    transpose = np.roll(np.arange(ndim)[::-1], axis)    shape = list(sort.shape)    shape[axis] = 1    strides = (        np.concatenate(            [                np.zeros(shape=shape, dtype=\"bool\"),                np.diff(sort, axis=axis) == 0,                np.zeros(shape=shape, dtype=\"bool\"),            ],            axis=axis,        )        .transpose(transpose)        .ravel()    )    counts = np.cumsum(strides)    counts[~strides] = np.concatenate([[0], np.diff(counts[~strides])])    counts[strides] = 0    shape = np.array(sort.shape)    shape[axis] += 1    shape = shape[transpose]    slices = [slice(None)] * ndim    slices[axis] = slice(1, None)    counts = counts.reshape(shape).transpose(transpose)[tuple(slices)] + 1    slices = [slice(None, i) for i in sort.shape]    del slices[axis]    index = np.ogrid[slices]    index.insert(axis, np.argmax(counts, axis=axis))    return sort[tuple(index)]","code_tokens":["def","mode","(","x",")",":","ndim","=","x",".","ndim","axis","=","0","sort","=","np",".","sort","(","x",",","axis","=","axis",")","transpose","=","np",".","roll","(","np",".","arange","(","ndim",")","[",":",":","-","1","]",",","axis",")","shape","=","list","(","sort",".","shape",")","shape","[","axis","]","=","1","strides","=","(","np",".","concatenate","(","[","np",".","zeros","(","shape","=","shape",",","dtype","=","\"","bool","\"",")",",","np",".","diff","(","sort",",","axis","=","axis",")","=","=","0",",","np",".","zeros","(","shape","=","shape",",","dtype","=","\"","bool","\"",")",",","]",",","axis","=","axis",",",")",".","transpose","(","transpose",")",".","ravel","(",")",")","counts","=","np",".","cumsum","(","strides",")","counts","[","~","strides","]","=","np",".","concatenate","(","[","[","0","]",",","np",".","diff","(","counts","[","~","strides","]",")","]",")","counts","[","strides","]","=","0","shape","=","np",".","array","(","sort",".","shape",")","shape","[","axis","]","+","=","1","shape","=","shape","[","transpose","]","slices","=","[","slice","(","none",")","]","*","ndim","slices","[","axis","]","=","slice","(","1",",","none",")","counts","=","counts",".","reshape","(","shape",")",".","transpose","(","transpose",")","[","tuple","(","slices",")","]","+","1","slices","=","[","slice","(","none",",","i",")","for","i","in","sort",".","shape","]","del","slices","[","axis","]","index","=","np",".","ogrid","[","slices","]","index",".","insert","(","axis",",","np",".","argmax","(","counts",",","axis","=","axis",")",")","return","sort","[","tuple","(","index",")","]"],"func_name":"_mode","func_name_tokens":["mode"],"docstring":"Fast mode implementation from: https://stackoverflow.com/a/35674754\nCheck inputs\nSort array\nCreate array to transpose along the axis and get padding shape\nCreate a boolean array along strides of unique values\nCount the stride lengths\nGet shape of padded counts and slice to return to the original shape\nReshape and compute final counts\nFind maximum counts and return modals/counts","docstring_tokens":["fast","mode","implementation","from",":","check","inputs","sort","array","create","array","to","transpose","along","the","axis","and","get","padding","shape","create","a","boolean","array","along","strides","of","unique","values","count","the","stride","lengths","get","shape","of","padded","counts","and","slice","to","return","to","the","original","shape","reshape","and","compute","final","counts","find","maximum","counts","and","return","modals","/","counts"],"query":"Most efficient way to find mode in numpy array","query_tokens":["most","efficient","way","to","find","mode","in","numpy","array"]}
{"code":"def _create_subnets(conn, vpc, route_table):            subnets = conn.get_all_subnets()            for item in subnets:","code_tokens":["def","create","subnets","(","conn",",","vpc",",","route","table",")",":","subnets","=","conn",".","get","all","subnets","(",")","for","item","in","subnets",":"],"func_name":"_create_subnets","func_name_tokens":["create","subnets"],"docstring":"Create AWS subnets    regions = [r.name for r in boto.ec2.regions()]    zones = [z.name for z in conn.get_all_zones()]    current_ip = 0    for zone in zones:        tag = TRAINER + '-{0}-'.format(VPC) + zone        print \"10.0.{0}.0/20\".format(current_ip)        print 'Creating subnet: {0} ...'.format(tag)        subnet = conn.create_subnet(vpc.id,                                    \"10.0.{0}.0/20\".format(current_ip),                                    availability_zone=zone)\nstate polling copied from the following\nhttp://stackoverflow.com/questions/22263300/aws-boto-how-to-refresh-subnet-state-after-creating-it-its-stuck-in-pending        while subnet.state == 'pending':            Waiting for AWS subnet creation to complete                Getting AWS subnet status                if item.id == subnet.id:                    subnet.state = item.state                    time.sleep(1)        subnet.add_tag('Name', tag)\nassociate route table        conn.associate_route_table(route_table[0].id, subnet.id)","docstring_tokens":["create","aws","subnets","regions","=","[","r",".","name","for","r","in","boto",".","ec2",".","regions","(",")","]","zones","=","[","z",".","name","for","z","in","conn",".","get","all","zones","(",")","]","current","ip","=","0","for","zone","in","zones",":","tag","=","trainer","+","'","-","{","0","}","-","'",".","format","(","vpc",")","+","zone","print","\"","10",".","0",".","{","0","}",".","0","/","20","\"",".","format","(","current","ip",")","print","'","creating","subnet",":","{","0","}",".",".",".","'",".","format","(","tag",")","subnet","=","conn",".","create","subnet","(","vpc",".","id",",","\"","10",".","0",".","{","0","}",".","0","/","20","\"",".","format","(","current","ip",")",",","availability","zone","=","zone",")","state","polling","copied","from","the","following","while","subnet",".","state","=","=","'","pending","'",":","waiting","for","aws","subnet","creation","to","complete","getting","aws","subnet","status","if","item",".","id","=","=","subnet",".","id",":","subnet",".","state","=","item",".","state","time",".","sleep","(","1",")","subnet",".","add","tag","(","'","name","'",",","tag",")","associate","route","table","conn",".","associate","route","table","(","route","table","[","0","]",".","id",",","subnet",".","id",")"],"query":"AWS boto: how to refresh subnet.state after creating it? It's stuck in 'pending' forever and there's no update()","query_tokens":["aws","boto",":","how","to","refresh","subnet",".","state","after","creating","it","?","it","'","s","stuck","in","'","pending","'","forever","and","there","'","s","no","update","(",")"]}
{"code":"        def _execute_child(self, args, executable, preexec_fn, close_fds,                           cwd, env, universal_newlines,                           startupinfo, creationflags, shell,                           p2cread, p2cwrite,                           c2pread, c2pwrite,                           errread, errwrite,                           stdin, stdout, stderr):","code_tokens":["def","execute","child","(","self",",","args",",","executable",",","preexec","fn",",","close","fds",",","cwd",",","env",",","universal","newlines",",","startupinfo",",","creationflags",",","shell",",","p2cread",",","p2cwrite",",","c2pread",",","c2pwrite",",","errread",",","errwrite",",","stdin",",","stdout",",","stderr",")",":"],"func_name":"_execute_child","func_name_tokens":["execute","child"],"docstring":"Execute program (Java version)            if isinstance(args, types.StringTypes):                args = _cmdline2listimpl(args)            else:                args = list(args)\nNOTE: CPython posix (execv) will str() any unicode\nargs first, maybe we should do the same on\nposix. Windows passes unicode through, however                if any(not isinstance(arg, (str, unicode)) for arg in args):                    raise TypeError('args must contain only strings')            args = _escape_args(args)            if shell:                args = _shell_command + args            if executable is not None:                args[0] = executable            builder = java.lang.ProcessBuilder(args)            if stdin is None:                builder.redirectInput(java.lang.ProcessBuilder.Redirect.INHERIT)            if stdout is None:                builder.redirectOutput(java.lang.ProcessBuilder.Redirect.INHERIT)            if stderr is None:                builder.redirectError(java.lang.ProcessBuilder.Redirect.INHERIT)\nos.environ may be inherited for compatibility with CPython            _setup_env(dict(os.environ if env is None else env),                       builder.environment())            if cwd is None:                cwd = os.getcwd()            elif not os.path.exists(cwd):                raise OSError(errno.ENOENT, os.strerror(errno.ENOENT), cwd)            elif not os.path.isdir(cwd):                raise OSError(errno.ENOTDIR, os.strerror(errno.ENOTDIR), cwd)            builder.directory(java.io.File(cwd))\nLet Java manage redirection of stderr to stdout (it's more\naccurate at doing so than _CouplerThreads). We redirect\nnot only when stderr is marked as STDOUT, but also when\nc2pwrite is errwrite            if self._stderr_is_stdout(errwrite, c2pwrite):                builder.redirectErrorStream(True)            try:                self._process = builder.start()            except (java.io.IOException,                    java.lang.IllegalArgumentException), e:                msg = e.getMessage()\nDoes not raise the more descriptive FileNotFoundException, resort to string matching                if msg and 'error=2,' in msg:                    raise OSError(errno.ENOENT, os.strerror(errno.ENOENT))                raise OSError(msg or e)            self.pid = self._get_pid()            self._child_created = True\nGetting pid based on http://stackoverflow.com/questions/4750470","docstring_tokens":["execute","program","(","java","version",")","if","isinstance","(","args",",","types",".","string","types",")",":","args","=","cmdline2listimpl","(","args",")","else",":","args","=","list","(","args",")","note",":","c","python","posix","(","execv",")","will","str","(",")","any","unicode","args","first",",","maybe","we","should","do","the","same","on","posix",".","windows","passes","unicode","through",",","however","if","any","(","not","isinstance","(","arg",",","(","str",",","unicode",")",")","for","arg","in","args",")",":","raise","type","error","(","'","args","must","contain","only","strings","'",")","args","=","escape","args","(","args",")","if","shell",":","args","=","shell","command","+","args","if","executable","is","not","none",":","args","[","0","]","=","executable","builder","=","java",".","lang",".","process","builder","(","args",")","if","stdin","is","none",":","builder",".","redirect","input","(","java",".","lang",".","process","builder",".","redirect",".","inherit",")","if","stdout","is","none",":","builder",".","redirect","output","(","java",".","lang",".","process","builder",".","redirect",".","inherit",")","if","stderr","is","none",":","builder",".","redirect","error","(","java",".","lang",".","process","builder",".","redirect",".","inherit",")","os",".","environ","may","be","inherited","for","compatibility","with","c","python","setup","env","(","dict","(","os",".","environ","if","env","is","none","else","env",")",",","builder",".","environment","(",")",")","if","cwd","is","none",":","cwd","=","os",".","getcwd","(",")","elif","not","os",".","path",".","exists","(","cwd",")",":","raise","os","error","(","errno",".","enoent",",","os",".","strerror","(","errno",".","enoent",")",",","cwd",")","elif","not","os",".","path",".","isdir","(","cwd",")",":","raise","os","error","(","errno",".","enotdir",",","os",".","strerror","(","errno",".","enotdir",")",",","cwd",")","builder",".","directory","(","java",".","io",".","file","(","cwd",")",")","let","java","manage","redirection","of","stderr","to","stdout","(","it","'","s","more","accurate","at","doing","so","than","coupler","threads",")",".","we","redirect","not","only","when","stderr","is","marked","as","stdout",",","but","also","when","c2pwrite","is","errwrite","if","self",".","stderr","is","stdout","(","errwrite",",","c2pwrite",")",":","builder",".","redirect","error","stream","(","true",")","try",":","self",".","process","=","builder",".","start","(",")","except","(","java",".","io",".","io","exception",",","java",".","lang",".","illegal","argument","exception",")",",","e",":","msg","=","e",".","get","message","(",")","does","not","raise","the","more","descriptive","file","not","found","exception",",","resort","to","string","matching","if","msg","and","'","error","=","2",",","'","in","msg",":","raise","os","error","(","errno",".","enoent",",","os",".","strerror","(","errno",".","enoent",")",")","raise","os","error","(","msg","or","e",")","self",".","pid","=","self",".","get","pid","(",")","self",".","child","created","=","true","getting","pid","based","on"],"query":"How to get PID of process I've just started within java program?","query_tokens":["how","to","get","pid","of","process","i","'","ve","just","started","within","java","program","?"]}
{"code":"def getattrd(obj, name, default=NoDefaultProvided):    try:        return reduce(getattr, name.split(\".\"), obj)    except AttributeError:","code_tokens":["def","getattrd","(","obj",",","name",",","default","=","no","default","provided",")",":","try",":","return","reduce","(","getattr",",","name",".","split","(","\"",".","\"",")",",","obj",")","except","attribute","error",":"],"func_name":"getattrd","func_name_tokens":["getattrd"],"docstring":"Same as getattr(), but allows dot notation lookup    Discussed in:    http://stackoverflow.com/questions/11975781","docstring_tokens":["same","as","getattr","(",")",",","but","allows","dot","notation","lookup","discussed","in",":"],"query":"Why does `getattr` not support consecutive attribute retrievals?","query_tokens":["why","does","`","getattr","`","not","support","consecutive","attribute","retrievals","?"]}
{"code":"    def download(self, url, show_status=True):        import os        import sys        import requests        file_name = url.split('/')[-1]        file_path = os.path.join(self.data_directory, file_name)        if os.path.exists(file_path):            self.logger.info('File is already downloaded')            return file_path        with open(file_path, 'wb') as open_file:            print('Downloading %s' % file_name)            response = requests.get(url, stream=True)            total_length = response.headers.get('content-length')            if total_length is None:                open_file.write(response.content)            else:                download = 0                total_length = int(total_length)                for data in response.iter_content(chunk_size=4096):                    download += len(data)                    open_file.write(data)                    if show_status:                        done = int(50 * download / total_length)                        sys.stdout.write('\\r[%s%s]' % ('=' * done, ' ' * (50 - done)))                        sys.stdout.flush()        return file_path","code_tokens":["def","download","(","self",",","url",",","show","status","=","true",")",":","import","os","import","sys","import","requests","file","name","=","url",".","split","(","'","/","'",")","[","-","1","]","file","path","=","os",".","path",".","join","(","self",".","data","directory",",","file","name",")","if","os",".","path",".","exists","(","file","path",")",":","self",".","logger",".","info","(","'","file","is","already","downloaded","'",")","return","file","path","with","open","(","file","path",",","'","wb","'",")","as","open","file",":","print","(","'","downloading","%","s","'","%","file","name",")","response","=","requests",".","get","(","url",",","stream","=","true",")","total","length","=","response",".","headers",".","get","(","'","content","-","length","'",")","if","total","length","is","none",":","open","file",".","write","(","response",".","content",")","else",":","download","=","0","total","length","=","int","(","total","length",")","for","data","in","response",".","iter","content","(","chunk","size","=","4096",")",":","download","+","=","len","(","data",")","open","file",".","write","(","data",")","if","show","status",":","done","=","int","(","50","*","download","/","total","length",")","sys",".","stdout",".","write","(","'","\\r","[","%","s","%","s","]","'","%","(","'","=","'","*","done",",","'","'","*","(","50","-","done",")",")",")","sys",".","stdout",".","flush","(",")","return","file","path"],"func_name":"download","func_name_tokens":["download"],"docstring":"Download a file from the given url.        Show a progress indicator for the download status.        Based on: http://stackoverflow.com/a/15645088/1547223\nDo not download the data if it already exists\nNo content length header","docstring_tokens":["download","a","file","from","the","given","url",".","show","a","progress","indicator","for","the","download","status",".","based","on",":","do","not","download","the","data","if","it","already","exists","no","content","length","header"],"query":"Python progress bar and downloads","query_tokens":["python","progress","bar","and","downloads"]}
{"code":"def nth_prime_number(num):\tD, q, primes = {}, 2, []\twhile len(primes) < num:\t\tif q not in D:\t\t\tprimes.append(q)\t\t\tD[q * q] = [q]\t\telse:\t\t\tfor p in D[q]:","code_tokens":["def","nth","prime","number","(","num",")",":","d",",","q",",","primes","=","{","}",",","2",",","[","]","while","len","(","primes",")","<","num",":","if","q","not","in","d",":","primes",".","append","(","q",")","d","[","q","*","q","]","=","[","q","]","else",":","for","p","in","d","[","q","]",":"],"func_name":"nth_prime_number","func_name_tokens":["nth","prime","number"],"docstring":"This function is taken from http://stackoverflow.com/a/568618","docstring_tokens":["this","function","is","taken","from"],"query":"Simple Prime Generator in Python","query_tokens":["simple","prime","generator","in","python"]}
{"code":"def resolve_attribute(instance, attribute_parts):    return resolve_attribute(        getattr(instance, attribute_parts[0]) if hasattr(instance, attribute_parts[0]) else instance.get(            attribute_parts[0], None),        attribute_parts[1:]) if len(attribute_parts) > 0 else instance","code_tokens":["def","resolve","attribute","(","instance",",","attribute","parts",")",":","return","resolve","attribute","(","getattr","(","instance",",","attribute","parts","[","0","]",")","if","hasattr","(","instance",",","attribute","parts","[","0","]",")","else","instance",".","get","(","attribute","parts","[","0","]",",","none",")",",","attribute","parts","[","1",":","]",")","if","len","(","attribute","parts",")",">","0","else","instance"],"func_name":"resolve_attribute","func_name_tokens":["resolve","attribute"],"docstring":"Given attribute segments (perhaps created by splitting a django query attribute string (e.g. 'foo__id'), resolve the value of the attribute parts    :param instance:    :param attribute_parts: a list of string attribute    :return: whatever the attribute_parts resolve to by digging into the given instance\nFrom http://stackoverflow.com/questions/1165352/fast-comparison-between-two-python-dictionary","docstring_tokens":["given","attribute","segments","(","perhaps","created","by","splitting","a","django","query","attribute","string","(","e",".","g",".","'","foo","id","'",")",",","resolve","the","value","of","the","attribute","parts","from"],"query":"Calculate difference in keys contained in two Python dictionaries","query_tokens":["calculate","difference","in","keys","contained","in","two","python","dictionaries"]}
{"code":"def add_line_wrappers(data_passed_from_pelican):","code_tokens":["def","add","line","wrappers","(","data","passed","from","pelican",")",":"],"func_name":"add_line_wrappers","func_name_tokens":["add","line","wrappers"],"docstring":"A function to read through each page and post as it comes through from Pelican, find all instances of triple-backtick (```...```) code blocks, and add an HTML wrapper to each line of each of those code blocks    if data_passed_from_pelican._content:\nIf the item passed from Pelican has a \"content\" attribute (i.e., if it's not an image file or something else like that). NOTE: data_passed_from_pelican.content (without an underscore in front of 'content') seems to be read-only, whereas data_passed_from_pelican._content is able to be overwritten. This is somewhat explained in an IRC log from 2013-02-03 from user alexis to user webdesignhero_ at https://botbot.me/freenode/pelican/2013-02-01/?tz=America/Los_Angeles.        full_content_of_page_or_post = data_passed_from_pelican._content    else:        return\nExit the function, essentially passing over the (non-text) file.    all_instances_of_pre_elements = re.findall('.*?', full_content_of_page_or_post, re.DOTALL)\nUse a regular expression to find every instance of '' followed by anything up to the first matching ''. re.DOTALL puts python's regular expression engine ('re') into a mode where a dot ('.') matches absolutely anything, including newline characters.        if(len(all_instances_of_pre_elements) > 0):\nIf the article/page HAS any ... elements, go on. Otherwise, don't (to do so would inadvertantly wipe out the output content for that article/page).        updated_full_content_of_page_or_post = full_content_of_page_or_post\nThis just gives this an initial value before going into the loop below.\nGo through each  element instance that we found above, and parse it:        for pre_element_to_parse in all_instances_of_pre_elements:\nWrap each line of the ... section with ..., following http://bililite.com/blog/2012/08/05/line-numbering-in-pre-elements/. We'll use these to add line numbers using CSS later.\nNote that below, '^' is the beginning of a string, '$' is the end of a string, and '\\n' is a newline.            replacement_text_with_beginning_of_each_line_wrapped_in_span = re.sub(r'(|\\n(?!))','\\\\1',pre_element_to_parse)\nThe (?!...) here is a Negative Lookahead (cf. http://www.regular-expressions.info/lookaround.html). This full regular expression says \"Give me all code snippets that start with  or start with a newline (\\n), but NOT if the newline is followed immediately with ''. Take whatever you find, and replace it with what you found (\\1) followed immediately by ''.\nhttp://stackoverflow.com/a/14625628 explains why we need to escape the backslash in the capture group reference (the '\\1'). In short, python will recognize it as \"\\x01\" if it's not escaped.            replacement_text_with_full_line_wrapped_in_span = re.sub(r'((?)$|(?)\\n)','\\\\1',replacement_text_with_beginning_of_each_line_wrapped_in_span)\nThis regular expression says \"Give me all code snippets that are the end of a string or a newline (but not preceeded by \"\" (this is a 'negative lookahead,' '(? followed by whatever you found (\\1).                        updated_full_content_of_page_or_post = updated_full_content_of_page_or_post.replace(pre_element_to_parse,replacement_text_with_full_line_wrapped_in_span)\nReplace the content of the page or post with our now-updated content (having gone through all instances of  elements and updated them all, exiting the loop above.        data_passed_from_pelican._content = updated_full_content_of_page_or_post\nMake Pelican work (see http://docs.getpelican.com/en/3.3.0/plugins.html\nhow-to-create-plugins):","docstring_tokens":["a","function","to","read","through","each","page","and","post","as","it","comes","through","from","pelican",",","find","all","instances","of","triple","-","backtick","(","`","`","`",".",".",".","`","`","`",")","code","blocks",",","and","add","an","html","wrapper","to","each","line","of","each","of","those","code","blocks","if","data","passed","from","pelican",".","content",":","if","the","item","passed","from","pelican","has","a","\"","content","\"","attribute","(","i",".","e",".",",","if","it","'","s","not","an","image","file","or","something","else","like","that",")",".","note",":","data","passed","from","pelican",".","content","(","without","an","underscore","in","front","of","'","content","'",")","seems","to","be","read","-","only",",","whereas","data","passed","from","pelican",".","content","is","able","to","be","overwritten",".","this","is","somewhat","explained","in","an","irc","log","from","2013","-","02","-","03","from","user","alexis","to","user","webdesignhero","at","full","content","of","page","or","post","=","data","passed","from","pelican",".","content","else",":","return","exit","the","function",",","essentially","passing","over","the","(","non","-","text",")","file",".","all","instances","of","pre","elements","=","re",".","findall","(","'",".","*","?","'",",","full","content","of","page","or","post",",","re",".","dotall",")","use","a","regular","expression","to","find","every","instance","of","'","'","followed","by","anything","up","to","the","first","matching","'","'",".","re",".","dotall","puts","python","'","s","regular","expression","engine","(","'","re","'",")","into","a","mode","where","a","dot","(","'",".","'",")","matches","absolutely","anything",",","including","newline","characters",".","if","(","len","(","all","instances","of","pre","elements",")",">","0",")",":","if","the","article","/","page","has","any",".",".",".","elements",",","go","on",".","otherwise",",","don","'","t","(","to","do","so","would","inadvertantly","wipe","out","the","output","content","for","that","article","/","page",")",".","updated","full","content","of","page","or","post","=","full","content","of","page","or","post","this","just","gives","this","an","initial","value","before","going","into","the","loop","below",".","go","through","each","element","instance","that","we","found","above",",","and","parse","it",":","for","pre","element","to","parse","in","all","instances","of","pre","elements",":","wrap","each","line","of","the",".",".",".","section","with",".",".",".",",","following","we","'","ll","use","these","to","add","line","numbers","using","css","later",".","note","that","below",",","'","^","'","is","the","beginning","of","a","string",",","'","$","'","is","the","end","of","a","string",",","and","'","\\","n","'","is","a","newline",".","replacement","text","with","beginning","of","each","line","wrapped","in","span","=","re",".","sub","(","r","'","(","|","\\","n","(","?","!",")",")","'",",","'","\\","\\","1","'",",","pre","element","to","parse",")","the","(","?","!",".",".",".",")","here","is","a","negative","lookahead","(","cf",".",")",".","this","full","regular","expression","says","\"","give","me","all","code","snippets","that","start","with","or","start","with","a","newline","(","\\","n",")",",","but","not","if","the","newline","is","followed","immediately","with","'","'",".","take","whatever","you","find",",","and","replace","it","with","what","you","found","(","\\","1",")","followed","immediately","by","'","'",".","explains","why","we","need","to","escape","the","backslash","in","the","capture","group","reference","(","the","'","\\","1","'",")",".","in","short",",","python","will","recognize","it","as","\"","\\","x01","\"","if","it","'","s","not","escaped",".","replacement","text","with","full","line","wrapped","in","span","=","re",".","sub","(","r","'","(","(","?",")","$","|","(","?",")","\\","n",")","'",",","'","\\","\\","1","'",",","replacement","text","with","beginning","of","each","line","wrapped","in","span",")","this","regular","expression","says","\"","give","me","all","code","snippets","that","are","the","end","of","a","string","or","a","newline","(","but","not","preceeded","by","\"","\"","(","this","is","a","'","negative","lookahead",",","'","'","(","?","followed","by","whatever","you","found","(","\\","1",")",".","updated","full","content","of","page","or","post","=","updated","full","content","of","page","or","post",".","replace","(","pre","element","to","parse",",","replacement","text","with","full","line","wrapped","in","span",")","replace","the","content","of","the","page","or","post","with","our","now","-","updated","content","(","having","gone","through","all","instances","of","elements","and","updated","them","all",",","exiting","the","loop","above",".","data","passed","from","pelican",".","content","=","updated","full","content","of","page","or","post","make","pelican","work","(","see","how","-","to","-","create","-","plugins",")",":"],"query":"How to replace some string with capturing group in Python 3?","query_tokens":["how","to","replace","some","string","with","capturing","group","in","python","3","?"]}
{"code":"def _merge_dicts(a, b, path=None):    if path is None:        path = []    for key in b:        if key in a:            if isinstance(a[key], dict) and isinstance(b[key], dict):                _merge_dicts(a[key], b[key], path + [str(key)])            elif a[key] == b[key]:                pass  # same leaf value            else:                raise Exception('Conflict at %s' % '.'.join(path + [str(key)]))        else:            a[key] = b[key]    return a","code_tokens":["def","merge","dicts","(","a",",","b",",","path","=","none",")",":","if","path","is","none",":","path","=","[","]","for","key","in","b",":","if","key","in","a",":","if","isinstance","(","a","[","key","]",",","dict",")","and","isinstance","(","b","[","key","]",",","dict",")",":","merge","dicts","(","a","[","key","]",",","b","[","key","]",",","path","+","[","str","(","key",")","]",")","elif","a","[","key","]","=","=","b","[","key","]",":","pass","#","same","leaf","value","else",":","raise","exception","(","'","conflict","at","%","s","'","%","'",".","'",".","join","(","path","+","[","str","(","key",")","]",")",")","else",":","a","[","key","]","=","b","[","key","]","return","a"],"func_name":"_merge_dicts","func_name_tokens":["merge","dicts"],"docstring":"\"merges b into a    Taken from: http://stackoverflow.com/a/7205107","docstring_tokens":["\"","merges","b","into","a","taken","from",":"],"query":"How to merge dictionaries of dictionaries?","query_tokens":["how","to","merge","dictionaries","of","dictionaries","?"]}
{"code":"  def populateGit(self):","code_tokens":["def","populate","git","(","self",")",":"],"func_name":"populateGit","func_name_tokens":["populate","git"],"docstring":"Creates a few revisions of changes files.    self._commit_git(self.TEST_GIT_REPO, self._git_tree())\nFix for the remote rejected error. For more details see:\nhttp://stackoverflow.com/questions/2816369/git-push-error-remote    subprocess2.check_output(        ['git', '--git-dir',         os.path.join(self.git_root, self.TEST_GIT_REPO, '.git'),         'config', '--bool', 'core.bare', 'true'])    assert os.path.isdir(        os.path.join(self.git_root, self.TEST_GIT_REPO, '.git'))  @staticmethod","docstring_tokens":["creates","a","few","revisions","of","changes","files",".","self",".","commit","git","(","self",".","test","git","repo",",","self",".","git","tree","(",")",")","fix","for","the","remote","rejected","error",".","for","more","details","see",":","subprocess2",".","check","output","(","[","'","git","'",",","'","-","-","git","-","dir","'",",","os",".","path",".","join","(","self",".","git","root",",","self",".","test","git","repo",",","'",".","git","'",")",",","'","config","'",",","'","-","-","bool","'",",","'","core",".","bare","'",",","'","true","'","]",")","assert","os",".","path",".","isdir","(","os",".","path",".","join","(","self",".","git","root",",","self",".","test","git","repo",",","'",".","git","'",")",")","@","staticmethod"],"query":"Git push error '[remote rejected] master -> master (branch is currently checked out)'","query_tokens":["git","push","error","'","[","remote","rejected","]","master","-",">","master","(","branch","is","currently","checked","out",")","'"]}
{"code":"def with_metaclass(mcls):","code_tokens":["def","with","metaclass","(","mcls",")",":"],"func_name":"with_metaclass","func_name_tokens":["with","metaclass"],"docstring":"Fix to avoid metaclass incompatibility between Python 2 and 3.Borrowed from: https://stackoverflow.com/a/22409540/508222","docstring_tokens":["fix","to","avoid","metaclass","incompatibility","between","python","2","and","3",".","borrowed","from",":"],"query":"Portable meta class between python2 and python3","query_tokens":["portable","meta","class","between","python2","and","python3"]}
{"code":"def urlencode_utf8(params):    if hasattr(params, 'items'):        params = params.items()    params = (        '='.join((            urllib.quote_plus(k.encode('utf8'), safe='/'),            urllib.quote_plus(v.encode('utf8'), safe='/')        )) for k, v in params    )    return '&'.join(params)","code_tokens":["def","urlencode","utf8","(","params",")",":","if","hasattr","(","params",",","'","items","'",")",":","params","=","params",".","items","(",")","params","=","(","'","=","'",".","join","(","(","urllib",".","quote","plus","(","k",".","encode","(","'","utf8","'",")",",","safe","=","'","/","'",")",",","urllib",".","quote","plus","(","v",".","encode","(","'","utf8","'",")",",","safe","=","'","/","'",")",")",")","for","k",",","v","in","params",")","return","'","&","'",".","join","(","params",")"],"func_name":"urlencode_utf8","func_name_tokens":["urlencode","utf8"],"docstring":"UTF-8 safe variant of urllib.urlencode.    http://stackoverflow.com/a/8152242","docstring_tokens":["utf","-","8","safe","variant","of","urllib",".","urlencode","."],"query":"urllib.urlencode doesn't like unicode values: how about this workaround?","query_tokens":["urllib",".","urlencode","doesn","'","t","like","unicode","values",":","how","about","this","workaround","?"]}
{"code":"    def _get_pickling_errors(cls, obj, seen=None):\r        if seen == None:\r            seen = []\r        try:\r            state = obj.__getstate__()\r        except AttributeError:\r            return\r        if state == None:\r            return\r        if isinstance(state, tuple):\r            if not isinstance(state[0], dict):\r                state = state[1]\r            else:\r                state = state[0].update(state[1])\r        result = {}\r        for i in state:\r            try:\r                pickle.dumps(state[i], protocol=2)\r            except pickle.PicklingError:\r                if not state[i] in seen:\r                    seen.append(state[i])\r                    result[i] = cls._get_pickling_errors(state[i], seen)\r        return result\r\r","code_tokens":["def","get","pickling","errors","(","cls",",","obj",",","seen","=","none",")",":","if","seen","=","=","none",":","seen","=","[","]","try",":","state","=","obj",".","getstate","(",")","except","attribute","error",":","return","if","state","=","=","none",":","return","if","isinstance","(","state",",","tuple",")",":","if","not","isinstance","(","state","[","0","]",",","dict",")",":","state","=","state","[","1","]","else",":","state","=","state","[","0","]",".","update","(","state","[","1","]",")","result","=","{","}","for","i","in","state",":","try",":","pickle",".","dumps","(","state","[","i","]",",","protocol","=","2",")","except","pickle",".","pickling","error",":","if","not","state","[","i","]","in","seen",":","seen",".","append","(","state","[","i","]",")","result","[","i","]","=","cls",".","get","pickling","errors","(","state","[","i","]",",","seen",")","return","result"],"func_name":"_get_pickling_errors","func_name_tokens":["get","pickling","errors"],"docstring":"Return any errors that would be raised if `obj' is pickled\r        Courtesy of koffie @ http://stackoverflow.com/a/7218986/109897","docstring_tokens":["return","any","errors","that","would","be","raised","if","`","obj","'","is","pickled","courtesy","of","koffie","@"],"query":"How to tell for which object attribute pickle fails?","query_tokens":["how","to","tell","for","which","object","attribute","pickle","fails","?"]}
{"code":"def raise_with_traceback(exc, traceback=Ellipsis):    if traceback == Ellipsis:        _, _, traceback = sys.exc_info()    raise exc, None, traceback","code_tokens":["def","raise","with","traceback","(","exc",",","traceback","=","ellipsis",")",":","if","traceback","=","=","ellipsis",":",",",",","traceback","=","sys",".","exc","info","(",")","raise","exc",",","none",",","traceback"],"func_name":"raise_with_traceback","func_name_tokens":["raise","with","traceback"],"docstring":")raise_with_traceback.__doc__ = Raise exception with existing traceback.If traceback is not passed, uses sys.exc_info() to get traceback.\nhttp://stackoverflow.com/questions/4126348\nThanks to @martineau at SOfrom dateutil import parser as _date_parserimport dateutilif LooseVersion(dateutil.__version__) < '2.0':    @functools.wraps(_date_parser.parse)","docstring_tokens":[")","raise","with","traceback",".","doc","=","raise","exception","with","existing","traceback",".","if","traceback","is","not","passed",",","uses","sys",".","exc","info","(",")","to","get","traceback",".","thanks","to","@","martineau","at","s","ofrom","dateutil","import","parser","as","date","parserimport","dateutilif","loose","version","(","dateutil",".","version",")","<","'","2",".","0","'",":","@","functools",".","wraps","(","date","parser",".","parse",")"],"query":"How can this function be rewritten to implement OrderedDict?","query_tokens":["how","can","this","function","be","rewritten","to","implement","ordered","dict","?"]}
{"code":"from distutils.command.build import buildclass CustomBuild(build):    sub_commands = [('build_ext', build.has_ext_modules),                    ('build_py', build.has_pure_modules),                    ('build_clib', build.has_c_libraries),                    ('build_scripts', build.has_scripts)]","code_tokens":["from","distutils",".","command",".","build","import","buildclass","custom","build","(","build",")",":","sub","commands","=","[","(","'","build","ext","'",",","build",".","has","ext","modules",")",",","(","'","build","py","'",",","build",".","has","pure","modules",")",",","(","'","build","clib","'",",","build",".","has","c","libraries",")",",","(","'","build","scripts","'",",","build",".","has","scripts",")","]"],"func_name":"CustomBuild","func_name_tokens":["custom","build"],"docstring":"as per http://stackoverflow.com/a/21236111/104453\nfrom distutils/command/sdist.py, the default files are, among others:\n- all C sources listed as part of extensions or C libraries\nin the setup script (doesn't catch C headers!)\nNo idea what was the reason to have C sources without headers.\nAnyway, let's monkey-patch it.","docstring_tokens":["as","per","from","distutils","/","command","/","sdist",".","py",",","the","default","files","are",",","among","others",":","-","all","c","sources","listed","as","part","of","extensions","or","c","libraries","in","the","setup","script","(","doesn","'","t","catch","c","headers","!",")","no","idea","what","was","the","reason","to","have","c","sources","without","headers",".","anyway",",","let","'","s","monkey","-","patch","it","."],"query":"python distutils not include the SWIG generated module","query_tokens":["python","distutils","not","include","the","swig","generated","module"]}
{"code":"  def execute(self):    teardown_verbosity = self._vars.PEX_TEARDOWN_VERBOSE    try:      pex_inherit_path = self._vars.PEX_INHERIT_PATH or self._pex_info.inherit_path      with self.patch_sys(pex_inherit_path):        working_set = self._activate()        TRACER.log('PYTHONPATH contains:')        for element in sys.path:          TRACER.log('  %c %s' % (' ' if os.path.exists(element) else '*', element))        TRACER.log('  * - paths that do not exist or will be imported via zipimport')        with self.patch_pkg_resources(working_set):          self._wrap_coverage(self._wrap_profiling, self._execute)    except Exception:      sys.excepthook(*sys.exc_info())      raise    except SystemExit as se:      if not isinstance(se.code, int) and se.code is not None:        print(se.code, file=sys.stderr)      raise    finally:      if not teardown_verbosity:        sys.stderr.flush()        sys.stderr = DevNull()        sys.excepthook = lambda *a, **kw: None","code_tokens":["def","execute","(","self",")",":","teardown","verbosity","=","self",".","vars",".","pex","teardown","verbose","try",":","pex","inherit","path","=","self",".","vars",".","pex","inherit","path","or","self",".","pex","info",".","inherit","path","with","self",".","patch","sys","(","pex","inherit","path",")",":","working","set","=","self",".","activate","(",")","tracer",".","log","(","'","pythonpath","contains",":","'",")","for","element","in","sys",".","path",":","tracer",".","log","(","'","%","c","%","s","'","%","(","'","'","if","os",".","path",".","exists","(","element",")","else","'","*","'",",","element",")",")","tracer",".","log","(","'","*","-","paths","that","do","not","exist","or","will","be","imported","via","zipimport","'",")","with","self",".","patch","pkg","resources","(","working","set",")",":","self",".","wrap","coverage","(","self",".","wrap","profiling",",","self",".","execute",")","except","exception",":","sys",".","excepthook","(","*","sys",".","exc","info","(",")",")","raise","except","system","exit","as","se",":","if","not","isinstance","(","se",".","code",",","int",")","and","se",".","code","is","not","none",":","print","(","se",".","code",",","file","=","sys",".","stderr",")","raise","finally",":","if","not","teardown","verbosity",":","sys",".","stderr",".","flush","(",")","sys",".","stderr","=","dev","null","(",")","sys",".","excepthook","=","lambda","*","a",",","*","*","kw",":","none"],"func_name":"execute","func_name_tokens":["execute"],"docstring":"Execute the PEX.    This function makes assumptions that it is the last function called by    the interpreter.\nAllow the current sys.excepthook to handle this app exception before we tear things down in\nfinally, then reraise so that the exit status is reflected correctly.\nPrint a SystemExit error message, avoiding a traceback in python3.\nThis must happen here, as sys.stderr is about to be torn down\nsquash all exceptions on interpreter teardown -- the primary type here are\natexit handlers failing to run because of things such as:\nhttp://stackoverflow.com/questions/2572172/referencing-other-modules-in-atexit","docstring_tokens":["execute","the","pex",".","this","function","makes","assumptions","that","it","is","the","last","function","called","by","the","interpreter",".","allow","the","current","sys",".","excepthook","to","handle","this","app","exception","before","we","tear","things","down","in","finally",",","then","reraise","so","that","the","exit","status","is","reflected","correctly",".","print","a","system","exit","error","message",",","avoiding","a","traceback","in","python3",".","this","must","happen","here",",","as","sys",".","stderr","is","about","to","be","torn","down","squash","all","exceptions","on","interpreter","teardown","-","-","the","primary","type","here","are","atexit","handlers","failing","to","run","because","of","things","such","as",":"],"query":"Referencing other modules in atexit","query_tokens":["referencing","other","modules","in","atexit"]}
{"code":"def csiszar_vimco(f,                  p_log_prob,                  q,                  num_draws,                  num_batch_draws=1,                  seed=None,                  name=None):  with ops.name_scope(name, \"csiszar_vimco\", [num_draws, num_batch_draws]):    if num_draws < 2:      raise ValueError(\"Must specify num_draws > 1.\")    stop = array_ops.stop_gradient  # For readability.    x = stop(q.sample(sample_shape=[num_draws, num_batch_draws],                      seed=seed))    logqx = q.log_prob(x)    logu = p_log_prob(x) - logqx    f_log_avg_u, f_log_sooavg_u = [f(r) for r in csiszar_vimco_helper(logu)]    dotprod = math_ops.reduce_sum(        logqx * stop(f_log_avg_u - f_log_sooavg_u),        axis=0)  # Sum over iid samples.    f_log_avg_u += dotprod - stop(dotprod)  # Add zeros_like(dot_prod).    return math_ops.reduce_mean(f_log_avg_u, axis=0)  # Avg over batches.","code_tokens":["def","csiszar","vimco","(","f",",","p","log","prob",",","q",",","num","draws",",","num","batch","draws","=","1",",","seed","=","none",",","name","=","none",")",":","with","ops",".","name","scope","(","name",",","\"","csiszar","vimco","\"",",","[","num","draws",",","num","batch","draws","]",")",":","if","num","draws","<","2",":","raise","value","error","(","\"","must","specify","num","draws",">","1",".","\"",")","stop","=","array","ops",".","stop","gradient","#","for","readability",".","x","=","stop","(","q",".","sample","(","sample","shape","=","[","num","draws",",","num","batch","draws","]",",","seed","=","seed",")",")","logqx","=","q",".","log","prob","(","x",")","logu","=","p","log","prob","(","x",")","-","logqx","f","log","avg","u",",","f","log","sooavg","u","=","[","f","(","r",")","for","r","in","csiszar","vimco","helper","(","logu",")","]","dotprod","=","math","ops",".","reduce","sum","(","logqx","*","stop","(","f","log","avg","u","-","f","log","sooavg","u",")",",","axis","=","0",")","#","sum","over","iid","samples",".","f","log","avg","u","+","=","dotprod","-","stop","(","dotprod",")","#","add","zeros","like","(","dot","prod",")",".","return","math","ops",".","reduce","mean","(","f","log","avg","u",",","axis","=","0",")","#","avg","over","batches","."],"func_name":"csiszar_vimco","func_name_tokens":["csiszar","vimco"],"docstring":"Use VIMCO to lower the variance of gradient[csiszar_function(Avg(logu))].  This function generalizes \"Variational Inference for Monte Carlo Objectives\"  (VIMCO), i.e., https://arxiv.org/abs/1602.06725, to Csiszar f-Divergences.  Note: if `q.reparameterization_type = distribution.FULLY_REPARAMETERIZED`,  consider using `monte_carlo_csiszar_f_divergence`.  The VIMCO loss is:  ```none  vimco = f(Avg{logu[i] : i=0,...,m-1})  where,    logu[i] = log( p(x, h[i]) / q(h[i] | x) )    h[i] iid~ q(H | x)  ```  Interestingly, the VIMCO gradient is not the naive gradient of `vimco`.  Rather, it is characterized by:  ```none  grad[vimco] - variance_reducing_term  where,    variance_reducing_term = Sum{ grad[log q(h[i] | x)] *                                    (vimco - f(log Avg{h[j;i] : j=0,...,m-1}))                                 : i=0, ..., m-1 }    h[j;i] = { u[j]                             j!=i             { GeometricAverage{ u[k] : k!=i}   j==i  ```  (We omitted `stop_gradient` for brevity. See implementation for more details.)  The `Avg{h[j;i] : j}` term is a kind of \"swap-out average\" where the `i`-th  element has been replaced by the leave-`i`-out Geometric-average.  This implementation prefers numerical precision over efficiency, i.e.,  `O(num_draws * num_batch_draws * prod(batch_shape) * prod(event_shape))`.  (The constant may be fairly large, perhaps around 12.)  Args:    f: Python `callable` representing a Csiszar-function in log-space.    p_log_prob: Python `callable` representing the natural-log of the      probability under distribution `p`. (In variational inference `p` is the      joint distribution.)    q: `tf.Distribution`-like instance; must implement: `sample(n, seed)`, and      `log_prob(x)`. (In variational inference `q` is the approximate posterior      distribution.)    num_draws: Integer scalar number of draws used to approximate the      f-Divergence expectation.    num_batch_draws: Integer scalar number of draws used to approximate the      f-Divergence expectation.    seed: Python `int` seed for `q.sample`.    name: Python `str` name prefixed to Ops created by this function.  Returns:    vimco: The Csiszar f-Divergence generalized VIMCO objective.  Raises:    ValueError: if `num_draws < 2`.\nWe now rewrite f_log_avg_u so that:\n`grad[f_log_avg_u] := grad[f_log_avg_u + dotprod]`.\nTo achieve this, we use a trick that\n`f(x) - stop(f(x)) == zeros_like(f(x))`\nbut its gradient is grad[f(x)].\nNote that IEEE754 specifies that `x - x == 0.` and `x + 0. == x`, hence\nthis trick loses no precision. For more discussion regarding the relevant\nportions of the IEEE754 standard, see the StackOverflow question,\nhttp://stackoverflow.com/q/2686644","docstring_tokens":["use","vimco","to","lower","the","variance","of","gradient","[","csiszar","function","(","avg","(","logu",")",")","]",".","this","function","generalizes","\"","variational","inference","for","monte","carlo","objectives","\"","(","vimco",")",",","i",".","e",".",",",",","to","csiszar","f","-","divergences",".","note",":","if","`","q",".","reparameterization","type","=","distribution",".","fully","reparameterized","`",",","consider","using","`","monte","carlo","csiszar","f","divergence","`",".","the","vimco","loss","is",":","`","`","`","none","vimco","=","f","(","avg","{","logu","[","i","]",":","i","=","0",",",".",".",".",",","m","-","1","}",")","where",",","logu","[","i","]","=","log","(","p","(","x",",","h","[","i","]",")","/","q","(","h","[","i","]","|","x",")",")","h","[","i","]","iid","~","q","(","h","|","x",")","`","`","`","interestingly",",","the","vimco","gradient","is","not","the","naive","gradient","of","`","vimco","`",".","rather",",","it","is","characterized","by",":","`","`","`","none","grad","[","vimco","]","-","variance","reducing","term","where",",","variance","reducing","term","=","sum","{","grad","[","log","q","(","h","[","i","]","|","x",")","]","*","(","vimco","-","f","(","log","avg","{","h","[","j",";","i","]",":","j","=","0",",",".",".",".",",","m","-","1","}",")",")",":","i","=","0",",",".",".",".",",","m","-","1","}","h","[","j",";","i","]","=","{","u","[","j","]","j","!","=","i","{","geometric","average","{","u","[","k","]",":","k","!","=","i","}","j","=","=","i","`","`","`","(","we","omitted","`","stop","gradient","`","for","brevity",".","see","implementation","for","more","details",".",")","the","`","avg","{","h","[","j",";","i","]",":","j","}","`","term","is","a","kind","of","\"","swap","-","out","average","\"","where","the","`","i","`","-","th","element","has","been","replaced","by","the","leave","-","`","i","`","-","out","geometric","-","average",".","this","implementation","prefers","numerical","precision","over","efficiency",",","i",".","e",".",",","`","o","(","num","draws","*","num","batch","draws","*","prod","(","batch","shape",")","*","prod","(","event","shape",")",")","`",".","(","the","constant","may","be","fairly","large",",","perhaps","around","12",".",")","args",":","f",":","python","`","callable","`","representing","a","csiszar","-","function","in","log","-","space",".","p","log","prob",":","python","`","callable","`","representing","the","natural","-","log","of","the","probability","under","distribution","`","p","`",".","(","in","variational","inference","`","p","`","is","the","joint","distribution",".",")","q",":","`","tf",".","distribution","`","-","like","instance",";","must","implement",":","`","sample","(","n",",","seed",")","`",",","and","`","log","prob","(","x",")","`",".","(","in","variational","inference","`","q","`","is","the","approximate","posterior","distribution",".",")","num","draws",":","integer","scalar","number","of","draws","used","to","approximate","the","f","-","divergence","expectation",".","num","batch","draws",":","integer","scalar","number","of","draws","used","to","approximate","the","f","-","divergence","expectation",".","seed",":","python","`","int","`","seed","for","`","q",".","sample","`",".","name",":","python","`","str","`","name","prefixed","to","ops","created","by","this","function",".","returns",":","vimco",":","the","csiszar","f","-","divergence","generalized","vimco","objective",".","raises",":","value","error",":","if","`","num","draws","<","2","`",".","we","now","rewrite","f","log","avg","u","so","that",":","`","grad","[","f","log","avg","u","]",":","=","grad","[","f","log","avg","u","+","dotprod","]","`",".","to","achieve","this",",","we","use","a","trick","that","`","f","(","x",")","-","stop","(","f","(","x",")",")","=","=","zeros","like","(","f","(","x",")",")","`","but","its","gradient","is","grad","[","f","(","x",")","]",".","note","that","ieee754","specifies","that","`","x","-","x","=","=","0",".","`","and","`","x","+","0",".","=","=","x","`",",","hence","this","trick","loses","no","precision",".","for","more","discussion","regarding","the","relevant","portions","of","the","ieee754","standard",",","see","the","stack","overflow","question",","],"query":"Is there a floating point value of x, for which x-x == 0 is false?","query_tokens":["is","there","a","floating","point","value","of","x",",","for","which","x","-","x","=","=","0","is","false","?"]}
{"code":"from ..Qt import QtCore, QtGui, QT_LIBdef mousePress(widget, pos, button, modifier=None):    if isinstance(widget, QtGui.QGraphicsView):        widget = widget.viewport()    if modifier is None:        modifier = QtCore.Qt.NoModifier    if QT_LIB != 'PyQt5' and isinstance(pos, QtCore.QPointF):        pos = pos.toPoint()    event = QtGui.QMouseEvent(QtCore.QEvent.MouseButtonPress, pos, button, QtCore.Qt.NoButton, modifier)    QtGui.QApplication.sendEvent(widget, event)","code_tokens":["from",".",".","qt","import","qt","core",",","qt","gui",",","qt","li","bdef","mouse","press","(","widget",",","pos",",","button",",","modifier","=","none",")",":","if","isinstance","(","widget",",","qt","gui",".","q","graphics","view",")",":","widget","=","widget",".","viewport","(",")","if","modifier","is","none",":","modifier","=","qt","core",".","qt",".","no","modifier","if","qt","lib","!","=","'","py","qt5","'","and","isinstance","(","pos",",","qt","core",".","q","point","f",")",":","pos","=","pos",".","to","point","(",")","event","=","qt","gui",".","q","mouse","event","(","qt","core",".","q","event",".","mouse","button","press",",","pos",",","button",",","qt","core",".","qt",".","no","button",",","modifier",")","qt","gui",".","q","application",".","send","event","(","widget",",","event",")"],"func_name":"mousePress","func_name_tokens":["mouse","press"],"docstring":"Functions for generating user input events.\nWe would like to use QTest for this purpose, but it seems to be broken.\nSee: http://stackoverflow.com/questions/16299779/qt-qgraphicsview-unit-testing-how-to-keep-the-mouse-in-a-pressed-state","docstring_tokens":["functions","for","generating","user","input","events",".","we","would","like","to","use","q","test","for","this","purpose",",","but","it","seems","to","be","broken",".","see",":"],"query":"Qt QGraphicsView unit testing - how to keep the mouse in a “pressed” state?","query_tokens":["qt","q","graphics","view","unit","testing","-","how","to","keep","the","mouse","in","a","“","pressed","”","state","?"]}
{"code":"    def flush(self):        for endpoint in self._endpoints:            url = self.get_url(endpoint)            log.debug(\"Sending %s to endpoint %s at %s\" % (self._type, endpoint, url))            proxy_settings = self._application._agentConfig.get('proxy_settings', None)            tornado_client_params = {                'url': url,                'method': 'POST',                'body': self._data,                'headers': self._headers,                'validate_cert': not self._application.skip_ssl_validation,            }            for h in HEADERS_TO_REMOVE:                if h in tornado_client_params['headers']:                    del tornado_client_params['headers'][h]                    log.debug(\"Removing {0} header.\".format(h))            force_use_curl = False            if proxy_settings is not None:                force_use_curl = True                if pycurl is not None:                    log.debug(\"Configuring tornado to use proxy settings: %s:****@%s:%s\" % (proxy_settings['user'],                              proxy_settings['host'], proxy_settings['port']))                    tornado_client_params['proxy_host'] = proxy_settings['host']                    tornado_client_params['proxy_port'] = proxy_settings['port']                    tornado_client_params['proxy_username'] = proxy_settings['user']                    tornado_client_params['proxy_password'] = proxy_settings['password']                    if self._application._agentConfig.get('proxy_forbid_method_switch'):                        tornado_client_params['prepare_curl_callback'] = lambda curl: curl.setopt(pycurl.POSTREDIR, pycurl.REDIR_POST_ALL)            if (not self._application.use_simple_http_client or force_use_curl) and pycurl is not None:                ssl_certificate = self._application._agentConfig.get('ssl_certificate', None)                tornado_client_params['ca_certs'] = ssl_certificate            req = tornado.httpclient.HTTPRequest(**tornado_client_params)            use_curl = force_use_curl or self._application._agentConfig.get(\"use_curl_http_client\") and not self._application.use_simple_http_client            if use_curl:                if pycurl is None:                    log.error(\"dd-agent is configured to use the Curl HTTP Client, but pycurl is not available on this system.\")                else:                    log.debug(\"Using CurlAsyncHTTPClient\")                    tornado.httpclient.AsyncHTTPClient.configure(\"tornado.curl_httpclient.CurlAsyncHTTPClient\")            else:                log.debug(\"Using SimpleHTTPClient\")            http = tornado.httpclient.AsyncHTTPClient()            http.fetch(req, callback=self.on_response)","code_tokens":["def","flush","(","self",")",":","for","endpoint","in","self",".","endpoints",":","url","=","self",".","get","url","(","endpoint",")","log",".","debug","(","\"","sending","%","s","to","endpoint","%","s","at","%","s","\"","%","(","self",".","type",",","endpoint",",","url",")",")","proxy","settings","=","self",".","application",".","agent","config",".","get","(","'","proxy","settings","'",",","none",")","tornado","client","params","=","{","'","url","'",":","url",",","'","method","'",":","'","post","'",",","'","body","'",":","self",".","data",",","'","headers","'",":","self",".","headers",",","'","validate","cert","'",":","not","self",".","application",".","skip","ssl","validation",",","}","for","h","in","headers","to","remove",":","if","h","in","tornado","client","params","[","'","headers","'","]",":","del","tornado","client","params","[","'","headers","'","]","[","h","]","log",".","debug","(","\"","removing","{","0","}","header",".","\"",".","format","(","h",")",")","force","use","curl","=","false","if","proxy","settings","is","not","none",":","force","use","curl","=","true","if","pycurl","is","not","none",":","log",".","debug","(","\"","configuring","tornado","to","use","proxy","settings",":","%","s",":","*","*","*","*","@","%","s",":","%","s","\"","%","(","proxy","settings","[","'","user","'","]",",","proxy","settings","[","'","host","'","]",",","proxy","settings","[","'","port","'","]",")",")","tornado","client","params","[","'","proxy","host","'","]","=","proxy","settings","[","'","host","'","]","tornado","client","params","[","'","proxy","port","'","]","=","proxy","settings","[","'","port","'","]","tornado","client","params","[","'","proxy","username","'","]","=","proxy","settings","[","'","user","'","]","tornado","client","params","[","'","proxy","password","'","]","=","proxy","settings","[","'","password","'","]","if","self",".","application",".","agent","config",".","get","(","'","proxy","forbid","method","switch","'",")",":","tornado","client","params","[","'","prepare","curl","callback","'","]","=","lambda","curl",":","curl",".","setopt","(","pycurl",".","postredir",",","pycurl",".","redir","post","all",")","if","(","not","self",".","application",".","use","simple","http","client","or","force","use","curl",")","and","pycurl","is","not","none",":","ssl","certificate","=","self",".","application",".","agent","config",".","get","(","'","ssl","certificate","'",",","none",")","tornado","client","params","[","'","ca","certs","'","]","=","ssl","certificate","req","=","tornado",".","httpclient",".","http","request","(","*","*","tornado","client","params",")","use","curl","=","force","use","curl","or","self",".","application",".","agent","config",".","get","(","\"","use","curl","http","client","\"",")","and","not","self",".","application",".","use","simple","http","client","if","use","curl",":","if","pycurl","is","none",":","log",".","error","(","\"","dd","-","agent","is","configured","to","use","the","curl","http","client",",","but","pycurl","is","not","available","on","this","system",".","\"",")","else",":","log",".","debug","(","\"","using","curl","async","http","client","\"",")","tornado",".","httpclient",".","async","http","client",".","configure","(","\"","tornado",".","curl","httpclient",".","curl","async","http","client","\"",")","else",":","log",".","debug","(","\"","using","simple","http","client","\"",")","http","=","tornado",".","httpclient",".","async","http","client","(",")","http",".","fetch","(","req",",","callback","=","self",".","on","response",")"],"func_name":"flush","func_name_tokens":["flush"],"docstring":"Getting proxy settings\nRemove headers that were passed by the emitter. Those don't apply anymore\nThis is pretty hacky though as it should be done in pycurl or curl or tornado\nSee http://stackoverflow.com/questions/8156073/curl-violate-rfc-2616-10-3-2-and-switch-from-post-to-get","docstring_tokens":["getting","proxy","settings","remove","headers","that","were","passed","by","the","emitter",".","those","don","'","t","apply","anymore","this","is","pretty","hacky","though","as","it","should","be","done","in","pycurl","or","curl","or","tornado","see"],"query":"Curl : * Violate RFC 2616/10.3.2 and switch from POST to GET","query_tokens":["curl",":","*","violate","rfc","2616","/","10",".","3",".","2","and","switch","from","post","to","get"]}
{"code":"    _multiprocess_can_split_ = True    def setUp(self):        from pandas.io.tests.generate_legacy_pickles import create_data        self.data = create_data()        self.path = u('__%s__.pickle' % tm.rands(10))","code_tokens":["multiprocess","can","split","=","true","def","set","up","(","self",")",":","from","pandas",".","io",".","tests",".","generate","legacy","pickles","import","create","data","self",".","data","=","create","data","(",")","self",".","path","=","u","(","'","%","s",".","pickle","'","%","tm",".","rands","(","10",")",")"],"func_name":"setUp","func_name_tokens":["set","up"],"docstring":"How to add pickle tests:    1. Install pandas version intended to output the pickle.    2. Execute \"generate_legacy_pkcles.py\" to create the pickle.    $ python generate_legacy_pickles.py      3. Move the created pickle to \"data/legacy_pickle/\" directory.    NOTE: TestPickle can't be a subclass of tm.Testcase to use test generator.    http://stackoverflow.com/questions/6689537/nose-test-generators-inside-class","docstring_tokens":["how","to","add","pickle","tests",":","1",".","install","pandas","version","intended","to","output","the","pickle",".","2",".","execute","\"","generate","legacy","pkcles",".","py","\"","to","create","the","pickle",".","$","python","generate","legacy","pickles",".","py","3",".","move","the","created","pickle","to","\"","data","/","legacy","pickle","/","\"","directory",".","note",":","test","pickle","can","'","t","be","a","subclass","of","tm",".","testcase","to","use","test","generator","."],"query":"Nose Test Generators inside Class","query_tokens":["nose","test","generators","inside","class"]}
{"code":"def _fft_helper(x, win, detrend_func, nperseg, noverlap, nfft):    if nperseg == 1 and noverlap == 0:        result = x[..., np.newaxis]    else:        step = nperseg - noverlap        shape = x.shape[:-1]+((x.shape[-1]-noverlap)//step, nperseg)        strides = x.strides[:-1]+(step*x.strides[-1], x.strides[-1])        result = np.lib.stride_tricks.as_strided(x, shape=shape,                                                 strides=strides)    result = detrend_func(result)    result = win * result","code_tokens":["def","fft","helper","(","x",",","win",",","detrend","func",",","nperseg",",","noverlap",",","nfft",")",":","if","nperseg","=","=","1","and","noverlap","=","=","0",":","result","=","x","[",".",".",".",",","np",".","newaxis","]","else",":","step","=","nperseg","-","noverlap","shape","=","x",".","shape","[",":","-","1","]","+","(","(","x",".","shape","[","-","1","]","-","noverlap",")","/","/","step",",","nperseg",")","strides","=","x",".","strides","[",":","-","1","]","+","(","step","*","x",".","strides","[","-","1","]",",","x",".","strides","[","-","1","]",")","result","=","np",".","lib",".","stride","tricks",".","as","strided","(","x",",","shape","=","shape",",","strides","=","strides",")","result","=","detrend","func","(","result",")","result","=","win","*","result"],"func_name":"_fft_helper","func_name_tokens":["fft","helper"],"docstring":"Calculate windowed FFT, for internal use by scipy.signal._spectral_helper    This is a helper function that does the main FFT calculation for    _spectral helper. All input valdiation is performed there, and the data    axis is assumed to be the last axis of x. It is not designed to be called    externally. The windows are not averaged over; the result from each window    is returned.    Returns    -------    result : ndarray        Array of FFT data    References    ----------    stackoverflow: Repeat NumPy array without replicating data?        Notes    -----    Adapted from matplotlib.mlab    .. versionadded:: 0.16.0\nCreated strided array of data segments\nDetrend each data segment individually\nApply window by multiplication","docstring_tokens":["calculate","windowed","fft",",","for","internal","use","by","scipy",".","signal",".","spectral","helper","this","is","a","helper","function","that","does","the","main","fft","calculation","for","spectral","helper",".","all","input","valdiation","is","performed","there",",","and","the","data","axis","is","assumed","to","be","the","last","axis","of","x",".","it","is","not","designed","to","be","called","externally",".","the","windows","are","not","averaged","over",";","the","result","from","each","window","is","returned",".","returns","-","-","-","-","-","-","-","result",":","ndarray","array","of","fft","data","references","-","-","-","-","-","-","-","-","-","-","stackoverflow",":","repeat","num","py","array","without","replicating","data","?","notes","-","-","-","-","-","adapted","from","matplotlib",".","mlab",".",".","versionadded",":",":","0",".","16",".","0","created","strided","array","of","data","segments","detrend","each","data","segment","individually","apply","window","by","multiplication"],"query":"Repeat NumPy array without replicating data?","query_tokens":["repeat","num","py","array","without","replicating","data","?"]}
{"code":"def getWinDrives():","code_tokens":["def","get","win","drives","(",")",":"],"func_name":"getWinDrives","func_name_tokens":["get","win","drives"],"docstring":"adapted from http://stackoverflow.com/questions/827371/is-there-a-way-to-list-all-the-available-drive-letters-in-python/827490     Return list of detected drives     assert os.name == 'nt'    from ctypes import windll    drives = []","docstring_tokens":["adapted","from","return","list","of","detected","drives","assert","os",".","name","=","=","'","nt","'","from","ctypes","import","windll","drives","=","[","]"],"query":"Is there a way to list all the available drive letters in python?","query_tokens":["is","there","a","way","to","list","all","the","available","drive","letters","in","python","?"]}
{"code":"def _get_terminal_size_tput():","code_tokens":["def","get","terminal","size","tput","(",")",":"],"func_name":"_get_terminal_size_tput","func_name_tokens":["get","terminal","size","tput"],"docstring":"Get terminal size using tput.\nsrc: http://stackoverflow.com/questions/263890/\nhow-do-i-find-the-width-height-of-a-terminal-window    try:        cols = int(subprocess.check_call(shlex.split('tput cols')))        rows = int(subprocess.check_call(shlex.split('tput lines')))        return (cols, rows)    except:        pass","docstring_tokens":["get","terminal","size","using","tput",".","src",":","how","-","do","-","i","-","find","-","the","-","width","-","height","-","of","-","a","-","terminal","-","window","try",":","cols","=","int","(","subprocess",".","check","call","(","shlex",".","split","(","'","tput","cols","'",")",")",")","rows","=","int","(","subprocess",".","check","call","(","shlex",".","split","(","'","tput","lines","'",")",")",")","return","(","cols",",","rows",")","except",":","pass"],"query":"How do I find the width & height of a terminal window?","query_tokens":["how","do","i","find","the","width","&","height","of","a","terminal","window","?"]}
{"code":"def _add_metaclass(metaclass):","code_tokens":["def","add","metaclass","(","metaclass",")",":"],"func_name":"_add_metaclass","func_name_tokens":["add","metaclass"],"docstring":"Class decorator for creating a class with a metaclass.    Taken directly from the Python six project.    https://bitbucket.org/gutworth/six/src    http://stackoverflow.com/a/18513858/1751037","docstring_tokens":["class","decorator","for","creating","a","class","with","a","metaclass",".","taken","directly","from","the","python","six","project","."],"query":"Python Metaclass : Understanding the 'with_metaclass()'","query_tokens":["python","metaclass",":","understanding","the","'","with","metaclass","(",")","'"]}
{"code":"def confirm_input(prompt, method=input): # Takes string to use as prompt, and method used to get input (default is stdlib input, options include getpass.getpass)    value_initial = value_check = None    while (value_initial != value_check) or (value_initial == None):            value_initial = method(prompt)            value_check = method(\"Confirm: \")            if value_initial != value_check:                print('\\nPlease try again:')    return value_initial","code_tokens":["def","confirm","input","(","prompt",",","method","=","input",")",":","#","takes","string","to","use","as","prompt",",","and","method","used","to","get","input","(","default","is","stdlib","input",",","options","include","getpass",".","getpass",")","value","initial","=","value","check","=","none","while","(","value","initial","!","=","value","check",")","or","(","value","initial","=","=","none",")",":","value","initial","=","method","(","prompt",")","value","check","=","method","(","\"","confirm",":","\"",")","if","value","initial","!","=","value","check",":","print","(","'","\\n","please","try","again",":","'",")","return","value","initial"],"func_name":"confirm_input","func_name_tokens":["confirm","input"],"docstring":"AES Encryption Implementation based on PyCrypto, modified from http://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256","docstring_tokens":["aes","encryption","implementation","based","on","py","crypto",",","modified","from"],"query":"Encrypt & Decrypt using PyCrypto AES 256","query_tokens":["encrypt","&","decrypt","using","py","crypto","aes","256"]}
{"code":"def iter_dfxml(xmlfile, preserve_elements=False, imagefile=None):    import io    import xml.etree.ElementTree as ET    ET.register_namespace(\"\", XMLNS_DFXML)    if not xmlfile:        raise ValueError(\"xmlfile must be specified\")    qtagname = \"{%s}fileobject\" % XMLNS_DFXML    for event, elem in ET.iterparse(xmlfile, (\"start\",\"end\")):        if event == \"end\":            if elem.tag in [\"fileobject\", qtagname]:                xmlstring = ET.tostring(elem)                pseudof = io.BytesIO()                pseudof.write(xmlstring)                pseudof.seek(0)","code_tokens":["def","iter","dfxml","(","xmlfile",",","preserve","elements","=","false",",","imagefile","=","none",")",":","import","io","import","xml",".","etree",".","element","tree","as","et","et",".","register","namespace","(","\"","\"",",","xmlns","dfxml",")","if","not","xmlfile",":","raise","value","error","(","\"","xmlfile","must","be","specified","\"",")","qtagname","=","\"","{","%","s","}","fileobject","\"","%","xmlns","dfxml","for","event",",","elem","in","et",".","iterparse","(","xmlfile",",","(","\"","start","\"",",","\"","end","\"",")",")",":","if","event","=","=","\"","end","\"",":","if","elem",".","tag","in","[","\"","fileobject","\"",",","qtagname","]",":","xmlstring","=","et",".","tostring","(","elem",")","pseudof","=","io",".","bytes","io","(",")","pseudof",".","write","(","xmlstring",")","pseudof",".","seek","(","0",")"],"func_name":"iter_dfxml","func_name_tokens":["iter","dfxml"],"docstring":"Returns an interator that yields fileobjects from a DFXML file.        @param preserve_elements    Yielded fileobjects can also retain the xml.etree.ElementTree.Element,    the fileobject's source XML as a manipulable object.    Pass preserve_elements=True to get fi.xml_element.    NOTE: Retaining Elements is quite memory-intensive.  Creating a MAC    timeline from DFXML of the \"CFREDS Hacking\" image (a 34MB XML file)    using demo_mac_timeline_iter.py maxed at 65MB of RAM without    preserve_elements, and about 650MB with.          This function might be extended in the future to call Fiwalk (and    thus become what fileobjects_iter was supposed to be).    Note that to serialize the fileobjects to strings, you may wish to    use the ET_tostring wrapper function in this module.  The    ET.tostring function will print XML namespaces if the input XML has    an affiliated namespace.  This is presently necessary from the    repeated use of the DFXML sax code, but might not be necessary in    the future.    ElementTree-and-namespace references:      Reading with XML namespaces:        http://effbot.org/zone/element-namespaces.htm        http://stackoverflow.com/a/13475333/1207160        http://stackoverflow.com/a/1319417/1207160        http://stackoverflow.com/a/14853417/1207160      Writing with XML namespaces:        http://stackoverflow.com/a/3895958/1207160\nNote that ElementTree qualifies tag names if possible.  Thus, the paired check.","docstring_tokens":["returns","an","interator","that","yields","fileobjects","from","a","dfxml","file",".","@","param","preserve","elements","yielded","fileobjects","can","also","retain","the","xml",".","etree",".","element","tree",".","element",",","the","fileobject","'","s","source","xml","as","a","manipulable","object",".","pass","preserve","elements","=","true","to","get","fi",".","xml","element",".","note",":","retaining","elements","is","quite","memory","-","intensive",".","creating","a","mac","timeline","from","dfxml","of","the","\"","cfreds","hacking","\"","image","(","a","34mb","xml","file",")","using","demo","mac","timeline","iter",".","py","maxed","at","65mb","of","ram","without","preserve","elements",",","and","about","650mb","with",".","this","function","might","be","extended","in","the","future","to","call","fiwalk","(","and","thus","become","what","fileobjects","iter","was","supposed","to","be",")",".","note","that","to","serialize","the","fileobjects","to","strings",",","you","may","wish","to","use","the","et","tostring","wrapper","function","in","this","module",".","the","et",".","tostring","function","will","print","xml","namespaces","if","the","input","xml","has","an","affiliated","namespace",".","this","is","presently","necessary","from","the","repeated","use","of","the","dfxml","sax","code",",","but","might","not","be","necessary","in","the","future",".","element","tree","-","and","-","namespace","references",":","reading","with","xml","namespaces",":","writing","with","xml","namespaces",":","note","that","element","tree","qualifies","tag","names","if","possible",".","thus",",","the","paired","check","."],"query":"Using XPath in ElementTree","query_tokens":["using","x","path","in","element","tree"]}
{"code":"class NumpyEncoder(json.JSONEncoder):    def default(self, obj):        if isinstance(obj, np.ndarray):            if np.prod(obj.shape) <= 16 and obj.dtype == np.float64:                return dict(__ndarray__=obj.tolist())            else:                data_b64 = base64.b64encode(obj.data)                return dict(__ndarray__=data_b64,                            dtype=str(obj.dtype),                            shape=obj.shape)","code_tokens":["class","numpy","encoder","(","json",".","json","encoder",")",":","def","default","(","self",",","obj",")",":","if","isinstance","(","obj",",","np",".","ndarray",")",":","if","np",".","prod","(","obj",".","shape",")","<","=","16","and","obj",".","dtype","=","=","np",".","float64",":","return","dict","(","ndarray","=","obj",".","tolist","(",")",")","else",":","data","b64","=","base64",".","b64encode","(","obj",".","data",")","return","dict","(","ndarray","=","data","b64",",","dtype","=","str","(","obj",".","dtype",")",",","shape","=","obj",".","shape",")"],"func_name":"NumpyEncoder","func_name_tokens":["numpy","encoder"],"docstring":"Implementation taken from: http://stackoverflow.com/a/24375113                if input object is a ndarray it will be converted into a dict holding dtype, shape and the data base64 encoded","docstring_tokens":["implementation","taken","from",":","if","input","object","is","a","ndarray","it","will","be","converted","into","a","dict","holding","dtype",",","shape","and","the","data","base64","encoded"],"query":"SimpleJSON and NumPy array","query_tokens":["simple","json","and","num","py","array"]}
{"code":"def make_tarfile(output_filename, source_dir):    with tarfile.open(output_filename, \"w:gz\") as tar:        tar.add(source_dir, arcname=os.path.basename(source_dir))","code_tokens":["def","make","tarfile","(","output","filename",",","source","dir",")",":","with","tarfile",".","open","(","output","filename",",","\"","w",":","gz","\"",")","as","tar",":","tar",".","add","(","source","dir",",","arcname","=","os",".","path",".","basename","(","source","dir",")",")"],"func_name":"make_tarfile","func_name_tokens":["make","tarfile"],"docstring":"from http://stackoverflow.com/questions/12791997/how-do-you-do-a-simple-chmod-x-from-within-python","docstring_tokens":["from"],"query":"How do you do a simple “chmod +x” from within python?","query_tokens":["how","do","you","do","a","simple","“","chmod","+","x","”","from","within","python","?"]}
{"code":"def remove(fd, wd):    libc.inotify_rm_watch(fd, wd)","code_tokens":["def","remove","(","fd",",","wd",")",":","libc",".","inotify","rm","watch","(","fd",",","wd",")"],"func_name":"remove","func_name_tokens":["remove"],"docstring":"Remove the given watch descriptor from the inotify file descriptor.\nWhen inotify_rm_watch returns -1 there's an error:\nThe errno for this call can be either one of the following:\nEBADF: fd is not a valid file descriptor.\nEINVAL: The watch descriptor wd is not valid; or fd is\nnot an inotify file descriptor.\nif we can't access the errno here we cannot even raise\nan exception and we need to ignore the problem, one of\nthe most common cases is when you remove a directory from\nthe filesystem and that directory is observed. When inotify\ntries to call inotify_rm_watch with a non existing directory\neither of the 2 errors might come up because the files inside\nit might have events generated way before they were handled.\nUnfortunately only ctypes in Python 2.6 supports accessing errno:\nhttp://bugs.python.org/issue1798 and in order to solve\nthe problem for previous versions we need to introduce\ncode that is quite complex:\nhttp://stackoverflow.com/questions/661017/access-to-errno-from-python\nSee\n4310 for future resolution of this issue.","docstring_tokens":["remove","the","given","watch","descriptor","from","the","inotify","file","descriptor",".","when","inotify","rm","watch","returns","-","1","there","'","s","an","error",":","the","errno","for","this","call","can","be","either","one","of","the","following",":","ebadf",":","fd","is","not","a","valid","file","descriptor",".","einval",":","the","watch","descriptor","wd","is","not","valid",";","or","fd","is","not","an","inotify","file","descriptor",".","if","we","can","'","t","access","the","errno","here","we","cannot","even","raise","an","exception","and","we","need","to","ignore","the","problem",",","one","of","the","most","common","cases","is","when","you","remove","a","directory","from","the","filesystem","and","that","directory","is","observed",".","when","inotify","tries","to","call","inotify","rm","watch","with","a","non","existing","directory","either","of","the","2","errors","might","come","up","because","the","files","inside","it","might","have","events","generated","way","before","they","were","handled",".","unfortunately","only","ctypes","in","python","2",".","6","supports","accessing","errno",":","and","in","order","to","solve","the","problem","for","previous","versions","we","need","to","introduce","code","that","is","quite","complex",":","see","4310","for","future","resolution","of","this","issue","."],"query":"Access to errno from Python?","query_tokens":["access","to","errno","from","python","?"]}
{"code":"def test_sort():    df = DataFrame({'value': np.random.randint(0, 10000, 100)})    labels = [\"{0} - {1}\".format(i, i + 499) for i in range(0, 10000, 500)]    cat_labels = Categorical(labels, labels)    df = df.sort_values(by=['value'], ascending=True)    df['value_group'] = pd.cut(df.value, range(0, 10500, 500),                               right=False, labels=cat_labels)    res = df.groupby(['value_group'], observed=False)['value_group'].count()    exp = res[sorted(res.index, key=lambda x: float(x.split()[0]))]    exp.index = CategoricalIndex(exp.index, name=exp.index.name)    tm.assert_series_equal(res, exp)","code_tokens":["def","test","sort","(",")",":","df","=","data","frame","(","{","'","value","'",":","np",".","random",".","randint","(","0",",","10000",",","100",")","}",")","labels","=","[","\"","{","0","}","-","{","1","}","\"",".","format","(","i",",","i","+","499",")","for","i","in","range","(","0",",","10000",",","500",")","]","cat","labels","=","categorical","(","labels",",","labels",")","df","=","df",".","sort","values","(","by","=","[","'","value","'","]",",","ascending","=","true",")","df","[","'","value","group","'","]","=","pd",".","cut","(","df",".","value",",","range","(","0",",","10500",",","500",")",",","right","=","false",",","labels","=","cat","labels",")","res","=","df",".","groupby","(","[","'","value","group","'","]",",","observed","=","false",")","[","'","value","group","'","]",".","count","(",")","exp","=","res","[","sorted","(","res",".","index",",","key","=","lambda","x",":","float","(","x",".","split","(",")","[","0","]",")",")","]","exp",".","index","=","categorical","index","(","exp",".","index",",","name","=","exp",".","index",".","name",")","tm",".","assert","series","equal","(","res",",","exp",")"],"func_name":"test_sort","func_name_tokens":["test","sort"],"docstring":"http://stackoverflow.com/questions/23814368/sorting-pandas-categorical-labels-after-groupby\nThis should result in a properly sorted Series so that the plot\nhas a sorted x axis","docstring_tokens":["this","should","result","in","a","properly","sorted","series","so","that","the","plot","has","a","sorted","x","axis"],"query":"Sorting Pandas Categorical labels after groupby","query_tokens":["sorting","pandas","categorical","labels","after","groupby"]}
{"code":"def safe_min(X):    if issparse(X):        if len(X.data) == 0:            return 0        m = X.data.min()        return m if X.getnnz() == X.size else min(m, 0)    else:        return X.min()","code_tokens":["def","safe","min","(","x",")",":","if","issparse","(","x",")",":","if","len","(","x",".","data",")","=","=","0",":","return","0","m","=","x",".","data",".","min","(",")","return","m","if","x",".","getnnz","(",")","=","=","x",".","size","else","min","(","m",",","0",")","else",":","return","x",".","min","(",")"],"func_name":"safe_min","func_name_tokens":["safe","min"],"docstring":"Returns the minimum value of a dense or a CSR/CSC matrix.    Adapated from http://stackoverflow.com/q/13426580","docstring_tokens":["returns","the","minimum","value","of","a","dense","or","a","csr","/","csc","matrix",".","adapated","from"],"query":"minimum of a sparse matrix?","query_tokens":["minimum","of","a","sparse","matrix","?"]}
{"code":"def total_least_squares(data1, data2, data1err=None, data2err=None,        print_results=False, ignore_nans=True, intercept=True,        return_error=False, inf=1e10):    if ignore_nans:        badvals = numpy.isnan(data1) + numpy.isnan(data2)        if data1err is not None:            badvals += numpy.isnan(data1err)        if data2err is not None:            badvals += numpy.isnan(data2err)        goodvals = True-badvals        if goodvals.sum() < 2:            if intercept:                return 0,0            else:                return 0        if badvals.sum():            data1 = data1[goodvals]            data2 = data2[goodvals]        if intercept:        dm1 = data1.mean()        dm2 = data2.mean()    else:        dm1,dm2 = 0,0    arr = numpy.array([data1-dm1,data2-dm2]).T    U,S,V = numpy.linalg.svd(arr, full_matrices=False)    M = V[-1,0]/-V[-1,-1]    varfrac = S[0]/S.sum()*100    if varfrac < 50:","code_tokens":["def","total","least","squares","(","data1",",","data2",",","data1err","=","none",",","data2err","=","none",",","print","results","=","false",",","ignore","nans","=","true",",","intercept","=","true",",","return","error","=","false",",","inf","=","1e10",")",":","if","ignore","nans",":","badvals","=","numpy",".","isnan","(","data1",")","+","numpy",".","isnan","(","data2",")","if","data1err","is","not","none",":","badvals","+","=","numpy",".","isnan","(","data1err",")","if","data2err","is","not","none",":","badvals","+","=","numpy",".","isnan","(","data2err",")","goodvals","=","true","-","badvals","if","goodvals",".","sum","(",")","<","2",":","if","intercept",":","return","0",",","0","else",":","return","0","if","badvals",".","sum","(",")",":","data1","=","data1","[","goodvals","]","data2","=","data2","[","goodvals","]","if","intercept",":","dm1","=","data1",".","mean","(",")","dm2","=","data2",".","mean","(",")","else",":","dm1",",","dm2","=","0",",","0","arr","=","numpy",".","array","(","[","data1","-","dm1",",","data2","-","dm2","]",")",".","t","u",",","s",",","v","=","numpy",".","linalg",".","svd","(","arr",",","full","matrices","=","false",")","m","=","v","[","-","1",",","0","]","/","-","v","[","-","1",",","-","1","]","varfrac","=","s","[","0","]","/","s",".","sum","(",")","*","100","if","varfrac","<","50",":"],"func_name":"total_least_squares","func_name_tokens":["total","least","squares"],"docstring":"Use Singular Value Decomposition to determine the Total Least Squares linear fit to the data.    (e.g. http://en.wikipedia.org/wiki/Total_least_squares)    data1 - x array    data2 - y array    if intercept:        returns m,b in the equation y = m x + b    else:        returns m    print tells you some information about what fraction of the variance is accounted for    ignore_nans will remove NAN values from BOTH arrays before computing    Parameters    ----------    data1,data2 : np.ndarray        Vectors of the same length indicating the 'x' and 'y' vectors to fit    data1err,data2err : np.ndarray or None        Vectors of the same length as data1,data2 holding the 1-sigma error values\nv should be sorted.\nthis solution should be equivalent to v[1,0] / -v[1,1]\nbut I'm using this: http://stackoverflow.com/questions/5879986/pseudo-inverse-of-sparse-matrix-in-python","docstring_tokens":["use","singular","value","decomposition","to","determine","the","total","least","squares","linear","fit","to","the","data",".","(","e",".","g",".",")","data1","-","x","array","data2","-","y","array","if","intercept",":","returns","m",",","b","in","the","equation","y","=","m","x","+","b","else",":","returns","m","print","tells","you","some","information","about","what","fraction","of","the","variance","is","accounted","for","ignore","nans","will","remove","nan","values","from","both","arrays","before","computing","parameters","-","-","-","-","-","-","-","-","-","-","data1",",","data2",":","np",".","ndarray","vectors","of","the","same","length","indicating","the","'","x","'","and","'","y","'","vectors","to","fit","data1err",",","data2err",":","np",".","ndarray","or","none","vectors","of","the","same","length","as","data1",",","data2","holding","the","1","-","sigma","error","values","v","should","be","sorted",".","this","solution","should","be","equivalent","to","v","[","1",",","0","]","/","-","v","[","1",",","1","]","but","i","'","m","using","this",":"],"query":"pseudo inverse of sparse matrix in python","query_tokens":["pseudo","inverse","of","sparse","matrix","in","python"]}
{"code":"def rreplace(string, old, new, occurrence):    li = string.rsplit(old, occurrence)    return new.join(li)","code_tokens":["def","rreplace","(","string",",","old",",","new",",","occurrence",")",":","li","=","string",".","rsplit","(","old",",","occurrence",")","return","new",".","join","(","li",")"],"func_name":"rreplace","func_name_tokens":["rreplace"],"docstring":"Replace the last occurrence of an expression in a string.    See http://stackoverflow.com/questions/2556108/how-to-replace-the-last-occurence-of-an-expression-in-a-string\nFrom bcbb","docstring_tokens":["replace","the","last","occurrence","of","an","expression","in","a","string",".","see","from","bcbb"],"query":"rreplace - How to replace the last occurrence of an expression in a string?","query_tokens":["rreplace","-","how","to","replace","the","last","occurrence","of","an","expression","in","a","string","?"]}
{"code":"def _compare_versions(v1, v2):","code_tokens":["def","compare","versions","(","v1",",","v2",")",":"],"func_name":"_compare_versions","func_name_tokens":["compare","versions"],"docstring":"Compare two version strings and return -1, 0 or 1 depending on the equality    of the subset of matching version numbers.    The implementation is taken from the top answer at    http://stackoverflow.com/a/1714190/997768.","docstring_tokens":["compare","two","version","strings","and","return","-","1",",","0","or","1","depending","on","the","equality","of","the","subset","of","matching","version","numbers",".","the","implementation","is","taken","from","the","top","answer","at"],"query":"Version number comparison in Python","query_tokens":["version","number","comparison","in","python"]}
{"code":"def create(progname, configbase, options, args):    ro_options = {        \"roname\":  getoptionvalue(args[2], \"Name of new research object: \"),        \"rodir\":   options.rodir or \"\",        \"roident\": options.roident or \"\"        }    log.debug(\"cwd: \" + os.getcwd())    log.debug(\"ro_options: \" + repr(ro_options))    ro_options['roident'] = ro_options['roident'] or ro_utils.ronametoident(ro_options['roname'])    ro_config = getroconfig(configbase, options)    timestamp = datetime.datetime.now().replace(microsecond=0)    ro_options['rocreator'] = ro_config['username']    ro_options['rocreated'] = timestamp.isoformat()    ro_dir = ro_utils.ropath(ro_config, ro_options['rodir'])    if not ro_dir:        print (\"%s: research object not in configured research object directory tree: %s\" %                (ro_utils.progname(args), ro_options['rodir']))        return 1    if options.verbose:        print \"ro create \\\"%(roname)s\\\" -d \\\"%(rodir)s\\\" -i \\\"%(roident)s\\\"\" % ro_options    manifestdir = os.path.join(ro_dir, ro_settings.MANIFEST_DIR)    log.debug(\"manifestdir: \" + manifestdir)    try:        os.makedirs(manifestdir)    except OSError:        if os.path.isdir(manifestdir):            pass        else:            raise    manifestfilename = os.path.join(manifestdir, ro_settings.MANIFEST_FILE)    log.debug(\"manifestfilename: \" + manifestfilename)    manifest = (    log.debug(\"manifest: \" + manifest)    manifestfile = open(manifestfilename, 'w')    manifestfile.write(manifest)    manifestfile.close()    return 0","code_tokens":["def","create","(","progname",",","configbase",",","options",",","args",")",":","ro","options","=","{","\"","roname","\"",":","getoptionvalue","(","args","[","2","]",",","\"","name","of","new","research","object",":","\"",")",",","\"","rodir","\"",":","options",".","rodir","or","\"","\"",",","\"","roident","\"",":","options",".","roident","or","\"","\"","}","log",".","debug","(","\"","cwd",":","\"","+","os",".","getcwd","(",")",")","log",".","debug","(","\"","ro","options",":","\"","+","repr","(","ro","options",")",")","ro","options","[","'","roident","'","]","=","ro","options","[","'","roident","'","]","or","ro","utils",".","ronametoident","(","ro","options","[","'","roname","'","]",")","ro","config","=","getroconfig","(","configbase",",","options",")","timestamp","=","datetime",".","datetime",".","now","(",")",".","replace","(","microsecond","=","0",")","ro","options","[","'","rocreator","'","]","=","ro","config","[","'","username","'","]","ro","options","[","'","rocreated","'","]","=","timestamp",".","isoformat","(",")","ro","dir","=","ro","utils",".","ropath","(","ro","config",",","ro","options","[","'","rodir","'","]",")","if","not","ro","dir",":","print","(","\"","%","s",":","research","object","not","in","configured","research","object","directory","tree",":","%","s","\"","%","(","ro","utils",".","progname","(","args",")",",","ro","options","[","'","rodir","'","]",")",")","return","1","if","options",".","verbose",":","print","\"","ro","create","\\","\"","%","(","roname",")","s","\\","\"","-","d","\\","\"","%","(","rodir",")","s","\\","\"","-","i","\\","\"","%","(","roident",")","s","\\","\"","\"","%","ro","options","manifestdir","=","os",".","path",".","join","(","ro","dir",",","ro","settings",".","manifest","dir",")","log",".","debug","(","\"","manifestdir",":","\"","+","manifestdir",")","try",":","os",".","makedirs","(","manifestdir",")","except","os","error",":","if","os",".","path",".","isdir","(","manifestdir",")",":","pass","else",":","raise","manifestfilename","=","os",".","path",".","join","(","manifestdir",",","ro","settings",".","manifest","file",")","log",".","debug","(","\"","manifestfilename",":","\"","+","manifestfilename",")","manifest","=","(","log",".","debug","(","\"","manifest",":","\"","+","manifest",")","manifestfile","=","open","(","manifestfilename",",","'","w","'",")","manifestfile",".","write","(","manifest",")","manifestfile",".","close","(",")","return","0"],"func_name":"create","func_name_tokens":["create"],"docstring":"Create a new Research Object.    ro create RO-name [ -d dir ] [ -i RO-ident ]\nRead local ro configuration and extract creator\nCreate directory for manifest\nSomeone else created it...\nSee http://stackoverflow.com/questions/273192/\npython-best-way-to-create-directory-if-it-doesnt-exist-for-file-write\nThere was an error on creation, so make sure we know about it\nCreate manifest file\n@@TODO: create in-memory graph and serialize that                <rdf:RDF          xml:base=\"..\"          xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns\n\"          xmlns:ro=\"http://purl.org/wf4ever/ro\n\"          xmlns:ore=\"http://www.openarchives.org/ore/terms/\"          xmlns:ao=\"http://purl.org/ao/\"          xmlns:dcterms=\"http://purl.org/dc/terms/\"          xmlns:foaf=\"http://xmlns.com/foaf/0.1/\"        >                      %(roident)s            %(roname)s            %(roname)s            %(rocreator)s            %(rocreated)s                                                                                                                           % ro_options)","docstring_tokens":["create","a","new","research","object",".","ro","create","ro","-","name","[","-","d","dir","]","[","-","i","ro","-","ident","]","read","local","ro","configuration","and","extract","creator","create","directory","for","manifest","someone","else","created","it",".",".",".","see","python","-","best","-","way","-","to","-","create","-","directory","-","if","-","it","-","doesnt","-","exist","-","for","-","file","-","write","there","was","an","error","on","creation",",","so","make","sure","we","know","about","it","create","manifest","file","@","@","todo",":","create","in","-","memory","graph","and","serialize","that","<","rdf",":","rdf","xml",":","base","=","\"",".",".","\"","xmlns",":","rdf","=","\"","\"","xmlns",":","ro","=","\"","\"","xmlns",":","ore","=","\"","\"","xmlns",":","ao","=","\"","\"","xmlns",":","dcterms","=","\"","\"","xmlns",":","foaf","=","\"","\"",">","%","(","roident",")","s","%","(","roname",")","s","%","(","roname",")","s","%","(","rocreator",")","s","%","(","rocreated",")","s","%","ro","options",")"],"query":"How can I safely create a nested directory?","query_tokens":["how","can","i","safely","create","a","nested","directory","?"]}
{"code":"def _is_dst(secs = None):    \"Check if data has daylight saving time\"    d = date()    if secs is not None:        d = date(secs*1000)    jan = date(d.getFullYear(), 0, 1)    jul = date(d.getFullYear(), 6, 1)    dst = int(d.getTimezoneOffset() < max(abs(jan.getTimezoneOffset()), abs(jul.getTimezoneOffset())))    return dst    ","code_tokens":["def","is","dst","(","secs","=","none",")",":","\"","check","if","data","has","daylight","saving","time","\"","d","=","date","(",")","if","secs","is","not","none",":","d","=","date","(","secs","*","1000",")","jan","=","date","(","d",".","get","full","year","(",")",",","0",",","1",")","jul","=","date","(","d",".","get","full","year","(",")",",","6",",","1",")","dst","=","int","(","d",".","get","timezone","offset","(",")","<","max","(","abs","(","jan",".","get","timezone","offset","(",")",")",",","abs","(","jul",".","get","timezone","offset","(",")",")",")",")","return","dst"],"func_name":"_is_dst","func_name_tokens":["is","dst"],"docstring":"calculate if we are in daylight savings time or not.\nborrowed from http://stackoverflow.com/questions/11887934/check-if-daylight-saving-time-is-in-effect-and-if-it-is-for-how-many-hours","docstring_tokens":["calculate","if","we","are","in","daylight","savings","time","or","not",".","borrowed","from"],"query":"How to check if DST (Daylight Saving Time) is in effect, and if so, the offset?","query_tokens":["how","to","check","if","dst","(","daylight","saving","time",")","is","in","effect",",","and","if","so",",","the","offset","?"]}
{"code":"def posterior_sampler(data, prior_sampler, simulate):    for p in prior_sampler:        if simulate(p) == data:            yield p","code_tokens":["def","posterior","sampler","(","data",",","prior","sampler",",","simulate",")",":","for","p","in","prior","sampler",":","if","simulate","(","p",")","=","=","data",":","yield","p"],"func_name":"posterior_sampler","func_name_tokens":["posterior","sampler"],"docstring":"Yield samples from the posterior by Approximate Bayesian Computation.\nhttps://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python\nhttps://docs.python.org/3/reference/expressions.html?\nyield-expressions\nThe function above turns the prior distribution into the posterior.\nSamples from the prior distribution are our best guesses of the values of the unknown parameter of our system.\nSamples from the posterior distribution are the guesses of the same parameters made after the experiment, in the light of the data we have gathered.\nOnce you have the posterior, you can answer concrete questions about the implications of the data, such as how likely it is that layout B is better.\nAbstracted away in that little posterior_sampler() generator function is an extremely lightweight probabilistic programming system.\nUsing the sampler to finish our A/B test\nLet's use it to finish our A/B test, starting with layout A.\nWe need to prepare three arguments: data, prior_sampler and simulate.\nWe already have the data for our A/B test.\nLet's now write a function that simulates the conversion of n_visitors visitors to a website with known probability p:","docstring_tokens":["yield","samples","from","the","posterior","by","approximate","bayesian","computation",".","yield","-","expressions","the","function","above","turns","the","prior","distribution","into","the","posterior",".","samples","from","the","prior","distribution","are","our","best","guesses","of","the","values","of","the","unknown","parameter","of","our","system",".","samples","from","the","posterior","distribution","are","the","guesses","of","the","same","parameters","made","after","the","experiment",",","in","the","light","of","the","data","we","have","gathered",".","once","you","have","the","posterior",",","you","can","answer","concrete","questions","about","the","implications","of","the","data",",","such","as","how","likely","it","is","that","layout","b","is","better",".","abstracted","away","in","that","little","posterior","sampler","(",")","generator","function","is","an","extremely","lightweight","probabilistic","programming","system",".","using","the","sampler","to","finish","our","a","/","b","test","let","'","s","use","it","to","finish","our","a","/","b","test",",","starting","with","layout","a",".","we","need","to","prepare","three","arguments",":","data",",","prior","sampler","and","simulate",".","we","already","have","the","data","for","our","a","/","b","test",".","let","'","s","now","write","a","function","that","simulates","the","conversion","of","n","visitors","visitors","to","a","website","with","known","probability","p",":"],"query":"What does the “yield” keyword do?","query_tokens":["what","does","the","“","yield","”","keyword","do","?"]}
{"code":"def find_free_port() -> int:    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:        s.bind(('', 0))        return s.getsockname()[1]","code_tokens":["def","find","free","port","(",")","-",">","int",":","with","closing","(","socket",".","socket","(","socket",".","af","inet",",","socket",".","sock","stream",")",")","as","s",":","s",".","bind","(","(","'","'",",","0",")",")","return","s",".","getsockname","(",")","[","1","]"],"func_name":"find_free_port","func_name_tokens":["find","free","port"],"docstring":"from SO https://stackoverflow.com/questions/1365265/on-localhost-how-to-pick-a-free-port-number    :return: available port number for use","docstring_tokens":["from","so"],"query":"On localhost, how do I pick a free port number?","query_tokens":["on","localhost",",","how","do","i","pick","a","free","port","number","?"]}
{"code":"def rgetattr(obj, attr, default=rgetattr_sentinel):","code_tokens":["def","rgetattr","(","obj",",","attr",",","default","=","rgetattr","sentinel",")",":"],"func_name":"rgetattr","func_name_tokens":["rgetattr"],"docstring":"Get object's attribute, can use dot notation.    From: http://stackoverflow.com/questions/31174295/getattr-and-setattr-on-nested-objects    .. highlight::","docstring_tokens":["get","object","'","s","attribute",",","can","use","dot","notation",".","from",":",".",".","highlight",":",":"],"query":"getattr and setattr on nested subobjects / chained properties?","query_tokens":["getattr","and","setattr","on","nested","subobjects","/","chained","properties","?"]}
{"code":"    def _split_path_recursive(self, path):","code_tokens":["def","split","path","recursive","(","self",",","path",")",":"],"func_name":"_split_path_recursive","func_name_tokens":["split","path","recursive"],"docstring":"http://stackoverflow.com/a/15050936/320220        a,b = os.path.split(path)        return (self._split_path(a) if len(a) and len(b) else []) + [b]\nLookups","docstring_tokens":["a",",","b","=","os",".","path",".","split","(","path",")","return","(","self",".","split","path","(","a",")","if","len","(","a",")","and","len","(","b",")","else","[","]",")","+","[","b","]","lookups"],"query":"How to split a dos path into its components in Python","query_tokens":["how","to","split","a","dos","path","into","its","components","in","python"]}
{"code":"\t\t\tdef strippath(l):\t\t\t\treturn [x[len(tmp)+1:] for x in l]\t\t\tgot = strippath(sorted(glob('%s/*' % tmp)))\t\t\tneed = ['etc', 'usr', 'var']\t\t\tif set(need).difference(got): # pragma: no cover","code_tokens":["def","strippath","(","l",")",":","return","[","x","[","len","(","tmp",")","+","1",":","]","for","x","in","l","]","got","=","strippath","(","sorted","(","glob","(","'","%","s","/","*","'","%","tmp",")",")",")","need","=","[","'","etc","'",",","'","usr","'",",","'","var","'","]","if","set","(","need",")",".","difference","(","got",")",":","#","pragma",":","no","cover"],"func_name":"strippath","func_name_tokens":["strippath"],"docstring":"if anything is missing\nbelow code was actually to print out not missing but\nrather files in 'excess'.  Left in place in case we\ndecide to revert to such more strict test\nbased on\nhttp://stackoverflow.com/questions/2186525/use-a-glob-to-find-files-recursively-in-python","docstring_tokens":["if","anything","is","missing","below","code","was","actually","to","print","out","not","missing","but","rather","files","in","'","excess","'",".","left","in","place","in","case","we","decide","to","revert","to","such","more","strict","test","based","on"],"query":"How to use glob() to find files recursively?","query_tokens":["how","to","use","glob","(",")","to","find","files","recursively","?"]}
{"code":"def download(url, fileName=None, path=\"mgdata\"):","code_tokens":["def","download","(","url",",","file","name","=","none",",","path","=","\"","mgdata","\"",")",":"],"func_name":"download","func_name_tokens":["download"],"docstring":"download file once url provided    code found here: http://stackoverflow.com/questions/862173/how-to-download-a-file-using-python-in-a-smarter-way","docstring_tokens":["download","file","once","url","provided","code","found","here",":"],"query":"How to download a file using python in a 'smarter' way?","query_tokens":["how","to","download","a","file","using","python","in","a","'","smarter","'","way","?"]}
{"code":"        pass    return passesclass AttributeDict(dict):    __getattr__ = dict.__getitem__    __setattr__ = dict.__setitem__","code_tokens":["pass","return","passesclass","attribute","dict","(","dict",")",":","getattr","=","dict",".","getitem","setattr","=","dict",".","setitem"],"func_name":"AttributeDict","func_name_tokens":["attribute","dict"],"docstring":"configuration is not a dictionary, default to True        Dictionary that allows attribute access to values.    This is needed because cloudbio.custom.* accesses env extensively via    attributes (e.g. env.system_install).    http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python","docstring_tokens":["configuration","is","not","a","dictionary",",","default","to","true","dictionary","that","allows","attribute","access","to","values",".","this","is","needed","because","cloudbio",".","custom",".","*","accesses","env","extensively","via","attributes","(","e",".","g",".","env",".","system","install",")","."],"query":"Accessing dict keys like an attribute?","query_tokens":["accessing","dict","keys","like","an","attribute","?"]}
{"code":"def UpdateClang(args):  print 'Updating Clang to %s...' % PACKAGE_VERSION  if ReadStampFile() == PACKAGE_VERSION:    print 'Already up to date.'    return 0  WriteStampFile('')  if not args.force_local_build:    cds_file = \"clang-%s.tgz\" %  PACKAGE_VERSION    cds_full_url = CDS_URL + '/Win/' + cds_file    print 'Trying to download prebuilt clang'    with contextlib.closing(cStringIO.StringIO()) as f:      try:        DownloadUrl(cds_full_url, f)        f.seek(0)        tarfile.open(mode='r:gz', fileobj=f).extractall(path=LLVM_BUILD_DIR)        print 'clang %s unpacked' % PACKAGE_VERSION        if 'LLVM_DOWNLOAD_GOLD_PLUGIN' in os.environ:          RunCommand(['python', CHROMIUM_DIR+'/build/download_gold_plugin.py'])        WriteStampFile(PACKAGE_VERSION)        return 0      except urllib2.HTTPError:        print 'Did not find prebuilt clang %s, building locally' % cds_file  AddCMakeToPath()  RevertPreviouslyPatchedFiles()  DeleteChromeToolsShim()  Checkout('LLVM', LLVM_REPO_URL + '/llvm/trunk', LLVM_DIR)  Checkout('Clang', LLVM_REPO_URL + '/cfe/trunk', CLANG_DIR)  if sys.platform == 'win32':    Checkout('LLD', LLVM_REPO_URL + '/lld/trunk', LLD_DIR)  Checkout('compiler-rt', LLVM_REPO_URL + '/compiler-rt/trunk', COMPILER_RT_DIR)  if sys.platform == 'darwin':    Checkout('libcxx', LLVM_REPO_URL + '/libcxx/trunk', LIBCXX_DIR)    Checkout('libcxxabi', LLVM_REPO_URL + '/libcxxabi/trunk', LIBCXXABI_DIR)  if args.with_patches and sys.platform != 'win32':    ApplyLocalPatches()  cc, cxx = None, None  cflags = cxxflags = ldflags = []  deployment_target = ''  if sys.platform == 'darwin':    cflags = ['-isysroot', subprocess.check_output(        ['xcrun', '--show-sdk-path']).rstrip()]    cxxflags = ['-stdlib=libc++', '-nostdinc++',                '-I' + os.path.join(LIBCXX_DIR, 'include')] + cflags    if args.bootstrap:      deployment_target = '10.6'  base_cmake_args = ['-GNinja',                     '-DCMAKE_BUILD_TYPE=Release',                     '-DLLVM_ENABLE_ASSERTIONS=ON',                     '-DLLVM_ENABLE_THREADS=OFF',                     ]  if args.bootstrap:    print 'Building bootstrap compiler'    if not os.path.exists(LLVM_BOOTSTRAP_DIR):      os.makedirs(LLVM_BOOTSTRAP_DIR)    os.chdir(LLVM_BOOTSTRAP_DIR)    bootstrap_args = base_cmake_args + [        '-DLLVM_TARGETS_TO_BUILD=host',        '-DCMAKE_INSTALL_PREFIX=' + LLVM_BOOTSTRAP_INSTALL_DIR,        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),        ]    if cc is not None:  bootstrap_args.append('-DCMAKE_C_COMPILER=' + cc)    if cxx is not None: bootstrap_args.append('-DCMAKE_CXX_COMPILER=' + cxx)    RunCommand(['cmake'] + bootstrap_args + [LLVM_DIR], msvc_arch='x64')    RunCommand(['ninja'], msvc_arch='x64')    if args.run_tests:      RunCommand(['ninja', 'check-all'], msvc_arch='x64')    RunCommand(['ninja', 'install'], msvc_arch='x64')    if sys.platform == 'win32':      cc = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang-cl.exe')      cxx = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang-cl.exe')      cc = cc.replace('\\\\', '/')      cxx = cxx.replace('\\\\', '/')    else:      cc = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang')      cxx = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang++')    print 'Building final compiler'  if sys.platform == 'darwin':    libcxxbuild = os.path.join(LLVM_BUILD_DIR, 'libcxxbuild')    if os.path.isdir(libcxxbuild):      RmTree(libcxxbuild)    libcxxflags = ['-O3', '-std=c++11', '-fstrict-aliasing']    os.makedirs(os.path.join(libcxxbuild, 'libcxx'))    os.chdir(os.path.join(libcxxbuild, 'libcxx'))    RunCommand(['c++', '-c'] + cxxflags + libcxxflags +                glob.glob(os.path.join(LIBCXX_DIR, 'src', '*.cpp')))    os.makedirs(os.path.join(libcxxbuild, 'libcxxabi'))    os.chdir(os.path.join(libcxxbuild, 'libcxxabi'))    RunCommand(['c++', '-c'] + cxxflags + libcxxflags +               glob.glob(os.path.join(LIBCXXABI_DIR, 'src', '*.cpp')) +               ['-I' + os.path.join(LIBCXXABI_DIR, 'include')])    os.chdir(libcxxbuild)    libdir = os.path.join(LIBCXX_DIR, 'lib')    RunCommand(['cc'] + glob.glob('libcxx/*.o') + glob.glob('libcxxabi/*.o') +","code_tokens":["def","update","clang","(","args",")",":","print","'","updating","clang","to","%","s",".",".",".","'","%","package","version","if","read","stamp","file","(",")","=","=","package","version",":","print","'","already","up","to","date",".","'","return","0","write","stamp","file","(","'","'",")","if","not","args",".","force","local","build",":","cds","file","=","\"","clang","-","%","s",".","tgz","\"","%","package","version","cds","full","url","=","cds","url","+","'","/","win","/","'","+","cds","file","print","'","trying","to","download","prebuilt","clang","'","with","contextlib",".","closing","(","c","string","io",".","string","io","(",")",")","as","f",":","try",":","download","url","(","cds","full","url",",","f",")","f",".","seek","(","0",")","tarfile",".","open","(","mode","=","'","r",":","gz","'",",","fileobj","=","f",")",".","extractall","(","path","=","llvm","build","dir",")","print","'","clang","%","s","unpacked","'","%","package","version","if","'","llvm","download","gold","plugin","'","in","os",".","environ",":","run","command","(","[","'","python","'",",","chromium","dir","+","'","/","build","/","download","gold","plugin",".","py","'","]",")","write","stamp","file","(","package","version",")","return","0","except","urllib2",".","http","error",":","print","'","did","not","find","prebuilt","clang","%","s",",","building","locally","'","%","cds","file","add","c","make","to","path","(",")","revert","previously","patched","files","(",")","delete","chrome","tools","shim","(",")","checkout","(","'","llvm","'",",","llvm","repo","url","+","'","/","llvm","/","trunk","'",",","llvm","dir",")","checkout","(","'","clang","'",",","llvm","repo","url","+","'","/","cfe","/","trunk","'",",","clang","dir",")","if","sys",".","platform","=","=","'","win32","'",":","checkout","(","'","lld","'",",","llvm","repo","url","+","'","/","lld","/","trunk","'",",","lld","dir",")","checkout","(","'","compiler","-","rt","'",",","llvm","repo","url","+","'","/","compiler","-","rt","/","trunk","'",",","compiler","rt","dir",")","if","sys",".","platform","=","=","'","darwin","'",":","checkout","(","'","libcxx","'",",","llvm","repo","url","+","'","/","libcxx","/","trunk","'",",","libcxx","dir",")","checkout","(","'","libcxxabi","'",",","llvm","repo","url","+","'","/","libcxxabi","/","trunk","'",",","libcxxabi","dir",")","if","args",".","with","patches","and","sys",".","platform","!","=","'","win32","'",":","apply","local","patches","(",")","cc",",","cxx","=","none",",","none","cflags","=","cxxflags","=","ldflags","=","[","]","deployment","target","=","'","'","if","sys",".","platform","=","=","'","darwin","'",":","cflags","=","[","'","-","isysroot","'",",","subprocess",".","check","output","(","[","'","xcrun","'",",","'","-","-","show","-","sdk","-","path","'","]",")",".","rstrip","(",")","]","cxxflags","=","[","'","-","stdlib","=","libc","+","+","'",",","'","-","nostdinc","+","+","'",",","'","-","i","'","+","os",".","path",".","join","(","libcxx","dir",",","'","include","'",")","]","+","cflags","if","args",".","bootstrap",":","deployment","target","=","'","10",".","6","'","base","cmake","args","=","[","'","-","g","ninja","'",",","'","-","dcmake","build","type","=","release","'",",","'","-","dllvm","enable","assertions","=","on","'",",","'","-","dllvm","enable","threads","=","off","'",",","]","if","args",".","bootstrap",":","print","'","building","bootstrap","compiler","'","if","not","os",".","path",".","exists","(","llvm","bootstrap","dir",")",":","os",".","makedirs","(","llvm","bootstrap","dir",")","os",".","chdir","(","llvm","bootstrap","dir",")","bootstrap","args","=","base","cmake","args","+","[","'","-","dllvm","targets","to","build","=","host","'",",","'","-","dcmake","install","prefix","=","'","+","llvm","bootstrap","install","dir",",","'","-","dcmake","c","flags","=","'","+","'","'",".","join","(","cflags",")",",","'","-","dcmake","cxx","flags","=","'","+","'","'",".","join","(","cxxflags",")",",","]","if","cc","is","not","none",":","bootstrap","args",".","append","(","'","-","dcmake","c","compiler","=","'","+","cc",")","if","cxx","is","not","none",":","bootstrap","args",".","append","(","'","-","dcmake","cxx","compiler","=","'","+","cxx",")","run","command","(","[","'","cmake","'","]","+","bootstrap","args","+","[","llvm","dir","]",",","msvc","arch","=","'","x64","'",")","run","command","(","[","'","ninja","'","]",",","msvc","arch","=","'","x64","'",")","if","args",".","run","tests",":","run","command","(","[","'","ninja","'",",","'","check","-","all","'","]",",","msvc","arch","=","'","x64","'",")","run","command","(","[","'","ninja","'",",","'","install","'","]",",","msvc","arch","=","'","x64","'",")","if","sys",".","platform","=","=","'","win32","'",":","cc","=","os",".","path",".","join","(","llvm","bootstrap","install","dir",",","'","bin","'",",","'","clang","-","cl",".","exe","'",")","cxx","=","os",".","path",".","join","(","llvm","bootstrap","install","dir",",","'","bin","'",",","'","clang","-","cl",".","exe","'",")","cc","=","cc",".","replace","(","'","\\","\\","'",",","'","/","'",")","cxx","=","cxx",".","replace","(","'","\\","\\","'",",","'","/","'",")","else",":","cc","=","os",".","path",".","join","(","llvm","bootstrap","install","dir",",","'","bin","'",",","'","clang","'",")","cxx","=","os",".","path",".","join","(","llvm","bootstrap","install","dir",",","'","bin","'",",","'","clang","+","+","'",")","print","'","building","final","compiler","'","if","sys",".","platform","=","=","'","darwin","'",":","libcxxbuild","=","os",".","path",".","join","(","llvm","build","dir",",","'","libcxxbuild","'",")","if","os",".","path",".","isdir","(","libcxxbuild",")",":","rm","tree","(","libcxxbuild",")","libcxxflags","=","[","'","-","o3","'",",","'","-","std","=","c","+","+","11","'",",","'","-","fstrict","-","aliasing","'","]","os",".","makedirs","(","os",".","path",".","join","(","libcxxbuild",",","'","libcxx","'",")",")","os",".","chdir","(","os",".","path",".","join","(","libcxxbuild",",","'","libcxx","'",")",")","run","command","(","[","'","c","+","+","'",",","'","-","c","'","]","+","cxxflags","+","libcxxflags","+","glob",".","glob","(","os",".","path",".","join","(","libcxx","dir",",","'","src","'",",","'","*",".","cpp","'",")",")",")","os",".","makedirs","(","os",".","path",".","join","(","libcxxbuild",",","'","libcxxabi","'",")",")","os",".","chdir","(","os",".","path",".","join","(","libcxxbuild",",","'","libcxxabi","'",")",")","run","command","(","[","'","c","+","+","'",",","'","-","c","'","]","+","cxxflags","+","libcxxflags","+","glob",".","glob","(","os",".","path",".","join","(","libcxxabi","dir",",","'","src","'",",","'","*",".","cpp","'",")",")","+","[","'","-","i","'","+","os",".","path",".","join","(","libcxxabi","dir",",","'","include","'",")","]",")","os",".","chdir","(","libcxxbuild",")","libdir","=","os",".","path",".","join","(","libcxx","dir",",","'","lib","'",")","run","command","(","[","'","cc","'","]","+","glob",".","glob","(","'","libcxx","/","*",".","o","'",")","+","glob",".","glob","(","'","libcxxabi","/","*",".","o","'",")","+"],"func_name":"UpdateClang","func_name_tokens":["update","clang"],"docstring":"Reset the stamp file in case the build is unsuccessful.\nCheck if there's a prebuilt binary and if so just fetch that. That's\nfaster, and goma relies on having matching binary hashes on client and\nserver too.\nclang packages are smaller than 50 MB, small enough to keep in memory.\nDownload the gold plugin if requested to by an environment variable.\nThis is used by the CFI ClusterFuzz bot.\nclang needs a libc++ checkout, else -stdlib=libc++ won't find includes\n(i.e. this is needed for bootstrap builds).\nWhile we're bundling our own libc++ on OS X, we need to compile libc++abi\ninto it too (since OS X 10.6 doesn't have libc++abi.dylib either).\nLLVM uses C++11 starting in llvm 3.5. On Linux, this means libstdc++4.7+ is\nneeded, on OS X it requires libc++. clang only automatically links to libc++\nwhen targeting OS X 10.9+, so add stdlib=libc++ explicitly so clang can run\non OS X versions as old as 10.7.\nTODO(thakis): Some bots are still on 10.6 (nacl...), so for now bundle\nlibc++.dylib.  Remove this once all bots are on 10.7+, then use\n-DLLVM_ENABLE_LIBCXX=ON and change deployment_target to 10.7.\nWhen building on 10.9, /usr/include usually doesn't exist, and while\nXcode's clang automatically sets a sysroot, self-built clangs don't.\nCMake has a hard time with backslashes in compiler paths:\nhttps://stackoverflow.com/questions/13050827\nBuild libc++.dylib while some bots are still on OS X 10.6.\nlibcxx and libcxxabi both have a file stdexcept.cpp, so put their .o files\ninto different subdirectories.","docstring_tokens":["reset","the","stamp","file","in","case","the","build","is","unsuccessful",".","check","if","there","'","s","a","prebuilt","binary","and","if","so","just","fetch","that",".","that","'","s","faster",",","and","goma","relies","on","having","matching","binary","hashes","on","client","and","server","too",".","clang","packages","are","smaller","than","50","mb",",","small","enough","to","keep","in","memory",".","download","the","gold","plugin","if","requested","to","by","an","environment","variable",".","this","is","used","by","the","cfi","cluster","fuzz","bot",".","clang","needs","a","libc","+","+","checkout",",","else","-","stdlib","=","libc","+","+","won","'","t","find","includes","(","i",".","e",".","this","is","needed","for","bootstrap","builds",")",".","while","we","'","re","bundling","our","own","libc","+","+","on","os","x",",","we","need","to","compile","libc","+","+","abi","into","it","too","(","since","os","x","10",".","6","doesn","'","t","have","libc","+","+","abi",".","dylib","either",")",".","llvm","uses","c","+","+","11","starting","in","llvm","3",".","5",".","on","linux",",","this","means","libstdc","+","+","4",".","7","+","is","needed",",","on","os","x","it","requires","libc","+","+",".","clang","only","automatically","links","to","libc","+","+","when","targeting","os","x","10",".","9","+",",","so","add","stdlib","=","libc","+","+","explicitly","so","clang","can","run","on","os","x","versions","as","old","as","10",".","7",".","todo","(","thakis",")",":","some","bots","are","still","on","10",".","6","(","nacl",".",".",".",")",",","so","for","now","bundle","libc","+","+",".","dylib",".","remove","this","once","all","bots","are","on","10",".","7","+",",","then","use","-","dllvm","enable","libcxx","=","on","and","change","deployment","target","to","10",".","7",".","when","building","on","10",".","9",",","/","usr","/","include","usually","doesn","'","t","exist",",","and","while","xcode","'","s","clang","automatically","sets","a","sysroot",",","self","-","built","clangs","don","'","t",".","c","make","has","a","hard","time","with","backslashes","in","compiler","paths",":","build","libc","+","+",".","dylib","while","some","bots","are","still","on","os","x","10",".","6",".","libcxx","and","libcxxabi","both","have","a","file","stdexcept",".","cpp",",","so","put","their",".","o","files","into","different","subdirectories","."],"query":"cmake: problems specifying the compiler","query_tokens":["cmake",":","problems","specifying","the","compiler"]}
{"code":"def prune_lines(infile):    result = []    with open(infile, 'r') as text:        lines = text.readlines()    text.close()    for line in lines:        line = line.strip() # trim leading and trailing whitespace        if re.match('===*', line):            result.append(line)        elif re.match('^XXCOPY', line):            result.append(line)        elif re.match('^.+? = ', line):            result.append(line)    return result","code_tokens":["def","prune","lines","(","infile",")",":","result","=","[","]","with","open","(","infile",",","'","r","'",")","as","text",":","lines","=","text",".","readlines","(",")","text",".","close","(",")","for","line","in","lines",":","line","=","line",".","strip","(",")","#","trim","leading","and","trailing","whitespace","if","re",".","match","(","'","=","=","=","*","'",",","line",")",":","result",".","append","(","line",")","elif","re",".","match","(","'","^","xxcopy","'",",","line",")",":","result",".","append","(","line",")","elif","re",".","match","(","'","^",".","+","?","=","'",",","line",")",":","result",".","append","(","line",")","return","result"],"func_name":"prune_lines","func_name_tokens":["prune","lines"],"docstring":"Discard all lines which don't have the data we're after        Adapted from http://stackoverflow.com/questions/17131353/problems-targeting-carriage-return-and-newlines-with-regex-in-python\nskip lines that don't contain \"===\", \"XXCOPY\" or \" = \"","docstring_tokens":["discard","all","lines","which","don","'","t","have","the","data","we","'","re","after","adapted","from","skip","lines","that","don","'","t","contain","\"","=","=","=","\"",",","\"","xxcopy","\"","or","\"","=","\""],"query":"Problems targeting carriage return and newlines with regex in Python","query_tokens":["problems","targeting","carriage","return","and","newlines","with","regex","in","python"]}
{"code":"    def save(self, rows):        bcp_format = self._make_format()        with NamedTemporaryFile(delete=True) as f:            outfile = '%s_%s.csv' % (f.name, self._table_name)        _log.debug('Writing bulk data file %s', outfile)        with open(outfile, 'wb') as f:            for row in rows:                for field in bcp_format.fields:                    model_field = self._field_column_map[field.column_name]                    val = row.get(model_field.name, None) or ''                    if not val and isinstance(model_field, ForeignKey):                        val = row.get(model_field.name + '_id', None) or ''                    val = getattr(val, 'id', val) # if ForeignKey, we need id                    if isinstance(model_field, DecimalField):                        val = ('%.' + str(model_field.decimal_places) + 'f') % float(val or 0)                    f.write(str(val))                    f.write(field.delimiter)        _log.debug('Calling bcp (%s)', BCP_EXE)        import_result = _run_cmd(self._command_args_base + ['IN', outfile] + self._db_args + ['-f', bcp_format.filename])        if self._cleanup_files:            os.remove(outfile)            os.remove(bcp_format.filename)        return import_result","code_tokens":["def","save","(","self",",","rows",")",":","bcp","format","=","self",".","make","format","(",")","with","named","temporary","file","(","delete","=","true",")","as","f",":","outfile","=","'","%","s","%","s",".","csv","'","%","(","f",".","name",",","self",".","table","name",")","log",".","debug","(","'","writing","bulk","data","file","%","s","'",",","outfile",")","with","open","(","outfile",",","'","wb","'",")","as","f",":","for","row","in","rows",":","for","field","in","bcp","format",".","fields",":","model","field","=","self",".","field","column","map","[","field",".","column","name","]","val","=","row",".","get","(","model","field",".","name",",","none",")","or","'","'","if","not","val","and","isinstance","(","model","field",",","foreign","key",")",":","val","=","row",".","get","(","model","field",".","name","+","'","id","'",",","none",")","or","'","'","val","=","getattr","(","val",",","'","id","'",",","val",")","#","if","foreign","key",",","we","need","id","if","isinstance","(","model","field",",","decimal","field",")",":","val","=","(","'","%",".","'","+","str","(","model","field",".","decimal","places",")","+","'","f","'",")","%","float","(","val","or","0",")","f",".","write","(","str","(","val",")",")","f",".","write","(","field",".","delimiter",")","log",".","debug","(","'","calling","bcp","(","%","s",")","'",",","bcp","exe",")","import","result","=","run","cmd","(","self",".","command","args","base","+","[","'","in","'",",","outfile","]","+","self",".","db","args","+","[","'","-","f","'",",","bcp","format",".","filename","]",")","if","self",".","cleanup","files",":","os",".","remove","(","outfile",")","os",".","remove","(","bcp","format",".","filename",")","return","import","result"],"func_name":"save","func_name_tokens":["save"],"docstring":"Create the bcp FORMAT file from target_model\nCreate a temporary file to hold bulk data\nWrite bulk data based on FORMAT file\nOpen in binary mode so that newlines don't get doubled on Windows: http://stackoverflow.com/a/4025988/193244\nDo bulk import via bcp\nCleanup temp files","docstring_tokens":["create","the","bcp","format","file","from","target","model","create","a","temporary","file","to","hold","bulk","data","write","bulk","data","based","on","format","file","open","in","binary","mode","so","that","newlines","don","'","t","get","doubled","on","windows",":","do","bulk","import","via","bcp","cleanup","temp","files"],"query":"Python file.write creating extra carriage return","query_tokens":["python","file",".","write","creating","extra","carriage","return"]}
{"code":"    def decrypt(cls, b_vaulttext, secret, key_length=32):        display.deprecated(u'The VaultAES format is insecure and has been '                           'deprecated since Ansible-1.5.  Use vault rekey FILENAME to '                           'switch to the newer VaultAES256 format', version='2.3')        b_vaultdata = unhexlify(b_vaulttext)        b_salt = b_vaultdata[len(b'Salted__'):16]        b_ciphertext = b_vaultdata[16:]        b_password = secret.bytes        if HAS_CRYPTOGRAPHY:            b_plaintext = cls._decrypt_cryptography(b_salt, b_ciphertext, b_password, key_length)        elif HAS_PYCRYPTO:            b_plaintext = cls._decrypt_pycrypto(b_salt, b_ciphertext, b_password, key_length)        else:            raise AnsibleError(NEED_CRYPTO_LIBRARY + ' (Late detection)')        return b_plaintext","code_tokens":["def","decrypt","(","cls",",","b","vaulttext",",","secret",",","key","length","=","32",")",":","display",".","deprecated","(","u","'","the","vault","aes","format","is","insecure","and","has","been","'","'","deprecated","since","ansible","-","1",".","5",".","use","vault","rekey","filename","to","'","'","switch","to","the","newer","vault","aes256","format","'",",","version","=","'","2",".","3","'",")","b","vaultdata","=","unhexlify","(","b","vaulttext",")","b","salt","=","b","vaultdata","[","len","(","b","'","salted","'",")",":","16","]","b","ciphertext","=","b","vaultdata","[","16",":","]","b","password","=","secret",".","bytes","if","has","cryptography",":","b","plaintext","=","cls",".","decrypt","cryptography","(","b","salt",",","b","ciphertext",",","b","password",",","key","length",")","elif","has","pycrypto",":","b","plaintext","=","cls",".","decrypt","pycrypto","(","b","salt",",","b","ciphertext",",","b","password",",","key","length",")","else",":","raise","ansible","error","(","need","crypto","library","+","'","(","late","detection",")","'",")","return","b","plaintext"],"func_name":"decrypt","func_name_tokens":["decrypt"],"docstring":"Decrypt the given data and return it        :arg b_data: A byte string containing the encrypted data        :arg b_password: A byte string containing the encryption password        :arg key_length: Length of the key        :returns: A byte string containing the decrypted data\nhttp://stackoverflow.com/a/14989032","docstring_tokens":["decrypt","the","given","data","and","return","it",":","arg","b","data",":","a","byte","string","containing","the","encrypted","data",":","arg","b","password",":","a","byte","string","containing","the","encryption","password",":","arg","key","length",":","length","of","the","key"],"query":"Making AES decryption fail if invalid password","query_tokens":["making","aes","decryption","fail","if","invalid","password"]}
{"code":"def breakapart(s):    return s.replace(',', ', ').replace('/*',' /*')","code_tokens":["def","breakapart","(","s",")",":","return","s",".","replace","(","'",",","'",",","'",",","'",")",".","replace","(","'","/","*","'",",","'","/","*","'",")"],"func_name":"breakapart","func_name_tokens":["breakapart"],"docstring":"attempts to add spaces in a SQLi so it renders nicely on the webpage\nhttp://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python","docstring_tokens":["attempts","to","add","spaces","in","a","sq","li","so","it","renders","nicely","on","the","webpage"],"query":"How do you split a list into evenly sized chunks?","query_tokens":["how","do","you","split","a","list","into","evenly","sized","chunks","?"]}
{"code":"def dumpstacks(sig, frame):","code_tokens":["def","dumpstacks","(","sig",",","frame",")",":"],"func_name":"dumpstacks","func_name_tokens":["dumpstacks"],"docstring":"Signal handler: dump a stack trace for each existing thread.\ncode from http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application\nanswer-2569696\nmodified for python 2.5 compatibility    threads_info = dict([(th.ident, {'name': th.name,                                    'uid': getattr(th,'uid','n/a')})                                for th in threading.enumerate()])    code = []    for threadId, stack in sys._current_frames().items():        thread_info = threads_info.get(threadId)        code.append(\"\\n\nThread: %s (id:%s) (uid:%s)\" % \\                    (thread_info and thread_info['name'] or 'n/a',                     threadId,                     thread_info and thread_info['uid'] or 'n/a'))        for filename, lineno, name, line in traceback.extract_stack(stack):            code.append('File: \"%s\", line %d, in %s' % (filename, lineno, name))            if line:                code.append(\"  %s\" % (line.strip()))    _logger.info(\"\\n\".join(code))","docstring_tokens":["signal","handler",":","dump","a","stack","trace","for","each","existing","thread",".","code","from","answer","-","2569696","modified","for","python","2",".","5","compatibility","threads","info","=","dict","(","[","(","th",".","ident",",","{","'","name","'",":","th",".","name",",","'","uid","'",":","getattr","(","th",",","'","uid","'",",","'","n","/","a","'",")","}",")","for","th","in","threading",".","enumerate","(",")","]",")","code","=","[","]","for","thread","id",",","stack","in","sys",".","current","frames","(",")",".","items","(",")",":","thread","info","=","threads","info",".","get","(","thread","id",")","code",".","append","(","\"","\\","n","thread",":","%","s","(","id",":","%","s",")","(","uid",":","%","s",")","\"","%","\\","(","thread","info","and","thread","info","[","'","name","'","]","or","'","n","/","a","'",",","thread","id",",","thread","info","and","thread","info","[","'","uid","'","]","or","'","n","/","a","'",")",")","for","filename",",","lineno",",","name",",","line","in","traceback",".","extract","stack","(","stack",")",":","code",".","append","(","'","file",":","\"","%","s","\"",",","line","%","d",",","in","%","s","'","%","(","filename",",","lineno",",","name",")",")","if","line",":","code",".","append","(","\"","%","s","\"","%","(","line",".","strip","(",")",")",")","logger",".","info","(","\"","\\","n","\"",".","join","(","code",")",")"],"query":"Showing the stack trace from a running Python application","query_tokens":["showing","the","stack","trace","from","a","running","python","application"]}
{"code":"    def check_readiness_step(self):","code_tokens":["def","check","readiness","step","(","self",")",":"],"func_name":"check_readiness_step","func_name_tokens":["check","readiness","step"],"docstring":"Fail early on RHEL 5.x and derivatives because of known bug in libc.        super(EB_Clang, self).check_readiness_step()\nRHEL 5.x have a buggy libc.  Building stage 2 will fail.        if get_os_name() in ['redhat', 'RHEL', 'centos', 'SL'] and get_os_version().startswith('5.'):            self.log.error((\"Can not build clang on %s v5.x: libc is buggy, building stage 2 will fail.  \" +                            \"See http://stackoverflow.com/questions/7276828/\") % get_os_name())","docstring_tokens":["fail","early","on","rhel","5",".","x","and","derivatives","because","of","known","bug","in","libc",".","super","(","eb","clang",",","self",")",".","check","readiness","step","(",")","rhel","5",".","x","have","a","buggy","libc",".","building","stage","2","will","fail",".","if","get","os","name","(",")","in","[","'","redhat","'",",","'","rhel","'",",","'","centos","'",",","'","sl","'","]","and","get","os","version","(",")",".","startswith","(","'","5",".","'",")",":","self",".","log",".","error","(","(","\"","can","not","build","clang","on","%","s","v5",".","x",":","libc","is","buggy",",","building","stage","2","will","fail",".","\"","+","\"","see","\"",")","%","get","os","name","(",")",")"],"query":"How to stop Clang from duplicating functions in standard C header files?","query_tokens":["how","to","stop","clang","from","duplicating","functions","in","standard","c","header","files","?"]}
{"code":"def get_formatted_size(num):\tfor x in [\"B\",\"KB\",\"MB\",\"GB\"]:\t\tif num < 1024.0:\t\t\treturn \"%3.1f%s\" % (num, x)\t\tnum /= 1024.0\treturn \"%3.1f%s\" % (num, \"TB\")","code_tokens":["def","get","formatted","size","(","num",")",":","for","x","in","[","\"","b","\"",",","\"","kb","\"",",","\"","mb","\"",",","\"","gb","\"","]",":","if","num","<","1024",".","0",":","return","\"","%","3",".","1f","%","s","\"","%","(","num",",","x",")","num","/","=","1024",".","0","return","\"","%","3",".","1f","%","s","\"","%","(","num",",","\"","tb","\"",")"],"func_name":"get_formatted_size","func_name_tokens":["get","formatted","size"],"docstring":"Formats the given byte count as a human readable rounded size expressed in the most pressing unit among B(ytes),\tK(ilo)B(ytes), M(ega)B(ytes), G(iga)B(ytes) and T(era)B(ytes), with one decimal place.\tBased on http://stackoverflow.com/a/1094933/2028598\tArguments:\t    num (int): The byte count to format\tReturns:\t    string: The formatted byte count.","docstring_tokens":["formats","the","given","byte","count","as","a","human","readable","rounded","size","expressed","in","the","most","pressing","unit","among","b","(","ytes",")",",","k","(","ilo",")","b","(","ytes",")",",","m","(","ega",")","b","(","ytes",")",",","g","(","iga",")","b","(","ytes",")","and","t","(","era",")","b","(","ytes",")",",","with","one","decimal","place",".","based","on","arguments",":","num","(","int",")",":","the","byte","count","to","format","returns",":","string",":","the","formatted","byte","count","."],"query":"Reusable library to get human readable version of file size?","query_tokens":["reusable","library","to","get","human","readable","version","of","file","size","?"]}
{"code":"def es_palindromo(n):","code_tokens":["def","es","palindromo","(","n",")",":"],"func_name":"es_palindromo","func_name_tokens":["es","palindromo"],"docstring":"Recibe un numero e indica si se lee igual al derecho que al reves\treturn str(abs(n)) == str(abs(n))[::-1]\nhttp://stackoverflow.com/q/931092/1603080","docstring_tokens":["recibe","un","numero","e","indica","si","se","lee","igual","al","derecho","que","al","reves","return","str","(","abs","(","n",")",")","=","=","str","(","abs","(","n",")",")","[",":",":","-","1","]"],"query":"Reverse a string in Python","query_tokens":["reverse","a","string","in","python"]}
{"code":"def clean_ows_url(url):    if url is None or not url.startswith('http'):        return url    filtered_kvp = {}    basic_service_elements = ('service', 'version', 'request')    parsed = urlparse(url)    qd = parse_qs(parsed.query, keep_blank_values=True)    for key, value in list(qd.items()):        if key.lower() not in basic_service_elements:            filtered_kvp[key] = value    newurl = urlunparse([        parsed.scheme,        parsed.netloc,        parsed.path,        parsed.params,        urlencode(filtered_kvp, doseq=True),        parsed.fragment    ])    return newurl","code_tokens":["def","clean","ows","url","(","url",")",":","if","url","is","none","or","not","url",".","startswith","(","'","http","'",")",":","return","url","filtered","kvp","=","{","}","basic","service","elements","=","(","'","service","'",",","'","version","'",",","'","request","'",")","parsed","=","urlparse","(","url",")","qd","=","parse","qs","(","parsed",".","query",",","keep","blank","values","=","true",")","for","key",",","value","in","list","(","qd",".","items","(",")",")",":","if","key",".","lower","(",")","not","in","basic","service","elements",":","filtered","kvp","[","key","]","=","value","newurl","=","urlunparse","(","[","parsed",".","scheme",",","parsed",".","netloc",",","parsed",".","path",",","parsed",".","params",",","urlencode","(","filtered","kvp",",","doseq","=","true",")",",","parsed",".","fragment","]",")","return","newurl"],"func_name":"clean_ows_url","func_name_tokens":["clean","ows","url"],"docstring":"clean an OWS URL of basic service elements    source: https://stackoverflow.com/a/11640565","docstring_tokens":["clean","an","ows","url","of","basic","service","elements","source",":"],"query":"Remove utm_* parameters from URL in Python","query_tokens":["remove","utm","*","parameters","from","url","in","python"]}
{"code":"def escaped_str_to_bytes(data):    if not isinstance(data, six.string_types):        if six.PY2:            raise ValueError(\"data must be str or unicode, but is {}\".format(data.__class__.__name__))        raise ValueError(\"data must be str, but is {}\".format(data.__class__.__name__))    if six.PY2:        if isinstance(data, unicode):            data = data.encode(\"utf8\")        return data.decode(\"string-escape\")    return codecs.escape_decode(data)[0]","code_tokens":["def","escaped","str","to","bytes","(","data",")",":","if","not","isinstance","(","data",",","six",".","string","types",")",":","if","six",".","py2",":","raise","value","error","(","\"","data","must","be","str","or","unicode",",","but","is","{","}","\"",".","format","(","data",".","class",".","name",")",")","raise","value","error","(","\"","data","must","be","str",",","but","is","{","}","\"",".","format","(","data",".","class",".","name",")",")","if","six",".","py2",":","if","isinstance","(","data",",","unicode",")",":","data","=","data",".","encode","(","\"","utf8","\"",")","return","data",".","decode","(","\"","string","-","escape","\"",")","return","codecs",".","escape","decode","(","data",")","[","0","]"],"func_name":"escaped_str_to_bytes","func_name_tokens":["escaped","str","to","bytes"],"docstring":"Take an escaped string and return the unescaped bytes equivalent.\nThis one is difficult - we use an undocumented Python API here\nas per http://stackoverflow.com/a/23151714/934719","docstring_tokens":["take","an","escaped","string","and","return","the","unescaped","bytes","equivalent",".","this","one","is","difficult","-","we","use","an","undocumented","python","api","here","as","per"],"query":"how do I .decode('string-escape') in Python3?","query_tokens":["how","do","i",".","decode","(","'","string","-","escape","'",")","in","python3","?"]}
{"code":"    def __len__(self):        return len(self._odict)class interface_data_dict(collections.MutableMapping):","code_tokens":["def","len","(","self",")",":","return","len","(","self",".","odict",")","class","interface","data","dict","(","collections",".","mutable","mapping",")",":"],"func_name":"__len__","func_name_tokens":["len"],"docstring":"TODO: add __iter__, __keys etc\nTODO: add a sort function that sorts the OrderedDict\nTODO: replace with config stanza    A dictionary which allows access as dict.key as well as dict['key']    Based on http://stackoverflow.com/questions/3387691    only allows read only acess","docstring_tokens":["todo",":","add","iter",",","keys","etc","todo",":","add","a","sort","function","that","sorts","the","ordered","dict","todo",":","replace","with","config","stanza","a","dictionary","which","allows","access","as","dict",".","key","as","well","as","dict","[","'","key","'","]","based","on","only","allows","read","only","acess"],"query":"How to “perfectly” override a dict?","query_tokens":["how","to","“","perfectly","”","override","a","dict","?"]}
{"code":"    def __init__(self, mainMenu, params=[]):        self.info = {            'Name': 'Chronos API Delete Job',            'Author': ['@TweekFawkes'],            'Description': ('Delete a Chronos job using the HTTP API service for the Chronos Framework'),            'Background' : True,            'OutputExtension': \"\",            'NeedsAdmin' : False,            'OpsecSafe' : True,            'Language' : 'python',            'MinLanguageVersion' : '2.6',            'Comments': [\"Docs: https://mesos.github.io/chronos/docs/api.html\", \"urllib2 DELETE method credits to: http://stackoverflow.com/questions/21243834/doing-put-using-python-urllib2\"]        }        self.options = {","code_tokens":["def","init","(","self",",","main","menu",",","params","=","[","]",")",":","self",".","info","=","{","'","name","'",":","'","chronos","api","delete","job","'",",","'","author","'",":","[","'","@","tweek","fawkes","'","]",",","'","description","'",":","(","'","delete","a","chronos","job","using","the","http","api","service","for","the","chronos","framework","'",")",",","'","background","'",":","true",",","'","output","extension","'",":","\"","\"",",","'","needs","admin","'",":","false",",","'","opsec","safe","'",":","true",",","'","language","'",":","'","python","'",",","'","min","language","version","'",":","'","2",".","6","'",",","'","comments","'",":","[","\"","docs",":","\"",",","\"","urllib2","delete","method","credits","to",":","\"","]","}","self",".","options","=","{"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"metadata info about the module, not modified during runtime\nname for the module that will appear in module menus\nlist of one or more authors for the module\nmore verbose multi-line description of the module\nTrue if the module needs to run in the background\nFile extension to save the file as\nif the module needs administrative privileges\nTrue if the method doesn't touch disk/is reasonably opsec safe\nthe module language\nthe minimum language version needed\nlist of any references/other comments\nany options needed by the module, settable during runtime\nformat:","docstring_tokens":["metadata","info","about","the","module",",","not","modified","during","runtime","name","for","the","module","that","will","appear","in","module","menus","list","of","one","or","more","authors","for","the","module","more","verbose","multi","-","line","description","of","the","module","true","if","the","module","needs","to","run","in","the","background","file","extension","to","save","the","file","as","if","the","module","needs","administrative","privileges","true","if","the","method","doesn","'","t","touch","disk","/","is","reasonably","opsec","safe","the","module","language","the","minimum","language","version","needed","list","of","any","references","/","other","comments","any","options","needed","by","the","module",",","settable","during","runtime","format",":"],"query":"Doing PUT using Python urllib2","query_tokens":["doing","put","using","python","urllib2"]}
{"code":"def find_duplicates(iterable):    seen = set()    duplicates = set()    for value in iterable:        if value in seen:            duplicates.add(value)        else:            seen.add(value)    return duplicates","code_tokens":["def","find","duplicates","(","iterable",")",":","seen","=","set","(",")","duplicates","=","set","(",")","for","value","in","iterable",":","if","value","in","seen",":","duplicates",".","add","(","value",")","else",":","seen",".","add","(","value",")","return","duplicates"],"func_name":"find_duplicates","func_name_tokens":["find","duplicates"],"docstring":"Find duplicate values in an iterable.    Parameters    ----------    iterable : iterable        Iterable to search for duplicates.    Returns    -------    set        Values that are duplicated in `iterable`.    Notes    -----    Values in `iterable` must be hashable.\nModified from https://stackoverflow.com/a/9835819/3776794 to return\nduplicates instead of remove duplicates from an iterable.\nConcept from: http://stackoverflow.com/a/11157649/579416","docstring_tokens":["find","duplicate","values","in","an","iterable",".","parameters","-","-","-","-","-","-","-","-","-","-","iterable",":","iterable","iterable","to","search","for","duplicates",".","returns","-","-","-","-","-","-","-","set","values","that","are","duplicated","in","`","iterable","`",".","notes","-","-","-","-","-","values","in","`","iterable","`","must","be","hashable",".","modified","from","to","return","duplicates","instead","of","remove","duplicates","from","an","iterable",".","concept","from",":"],"query":"How can I produce a human readable difference when subtracting two UNIX timestamps using Python?","query_tokens":["how","can","i","produce","a","human","readable","difference","when","subtracting","two","unix","timestamps","using","python","?"]}
{"code":"    def compute_features(am, chip):        'Computes features of a chip. Uses settings in AlgorithmManager'        logdbg('Calling feature detector')        external_detectors = ['heshesaff', 'heslapaff', 'heslap', 'harlap', 'dense']        external_descriptors = ['SIFT']        if am.algo_prefs.chiprep.kpts_detector in external_detectors:            (kpts, desc) = am.external_feature_computers(chip)            if am.algo_prefs.chiprep.kpts_extractor in external_descriptors:                return (kpts, desc)        else:            logerr('Only External Keypoint Detectors are implemented: '+str(external_detectors))        logerr('Only External Keypoint Descriptors are implemented: '+str(external_descriptors))        im  = cv2.cvtColor(chip, cv2.COLOR_BGR2GRAY)        logdbg('Making detector: %r' % am.algo_prefs.chiprep.kpts_detector)        cvFeatDetector  = cv2.FeatureDetector_create(am.algo_prefs.chiprep.kpts_extractor)        logdbg('Made %r, Making extractor: %r' % (cvFeatDetector, am.algo_prefs.chiprep.kpts_detector))        cvFeatExtractor  = cv2.DescriptorExtractor_create(am.algo_prefs.chiprep.kpts_extractor)        logdbg('Made %r, Detecting keypoints on image' % cvFeatExtractor )        cvKpts_= cvFeatDetector.detect(im)        if am.algo_prefs.chiprep['use_gravity_vector']:             for cvKp in cvKpts_:                cvKp.angle = 0                r = cvKp.size #scale = (r**2)/27        logdbg('Made %r, Keypoint description with %d kpts ' % (cvFeatExtractor, len(cvKpts_)) )        (cvKpts, cvDesc) = cvFeatExtractor.compute(im,cvKpts_)        logdbg('Detected %d features  ' % len(cvKpts) )        kpts = np.zeros((len(cvKpts), 5),dtype=np.float32)        desc = np.array(cvDesc,dtype=np.uint8)        fx = 0        for cvKP in cvKpts:            (x,y) = cvKP.pt            theta = cvKP.angle            scale = (float(cvKp.size)**2)/27            detA  = 1./(scale)            (a,c,d) = (detA, 0, detA)            kpts[fx] = (x,y,a,c,d)            fx += 1        return (kpts, desc)","code_tokens":["def","compute","features","(","am",",","chip",")",":","'","computes","features","of","a","chip",".","uses","settings","in","algorithm","manager","'","logdbg","(","'","calling","feature","detector","'",")","external","detectors","=","[","'","heshesaff","'",",","'","heslapaff","'",",","'","heslap","'",",","'","harlap","'",",","'","dense","'","]","external","descriptors","=","[","'","sift","'","]","if","am",".","algo","prefs",".","chiprep",".","kpts","detector","in","external","detectors",":","(","kpts",",","desc",")","=","am",".","external","feature","computers","(","chip",")","if","am",".","algo","prefs",".","chiprep",".","kpts","extractor","in","external","descriptors",":","return","(","kpts",",","desc",")","else",":","logerr","(","'","only","external","keypoint","detectors","are","implemented",":","'","+","str","(","external","detectors",")",")","logerr","(","'","only","external","keypoint","descriptors","are","implemented",":","'","+","str","(","external","descriptors",")",")","im","=","cv2",".","cvt","color","(","chip",",","cv2",".","color","bgr2gray",")","logdbg","(","'","making","detector",":","%","r","'","%","am",".","algo","prefs",".","chiprep",".","kpts","detector",")","cv","feat","detector","=","cv2",".","feature","detector","create","(","am",".","algo","prefs",".","chiprep",".","kpts","extractor",")","logdbg","(","'","made","%","r",",","making","extractor",":","%","r","'","%","(","cv","feat","detector",",","am",".","algo","prefs",".","chiprep",".","kpts","detector",")",")","cv","feat","extractor","=","cv2",".","descriptor","extractor","create","(","am",".","algo","prefs",".","chiprep",".","kpts","extractor",")","logdbg","(","'","made","%","r",",","detecting","keypoints","on","image","'","%","cv","feat","extractor",")","cv","kpts","=","cv","feat","detector",".","detect","(","im",")","if","am",".","algo","prefs",".","chiprep","[","'","use","gravity","vector","'","]",":","for","cv","kp","in","cv","kpts",":","cv","kp",".","angle","=","0","r","=","cv","kp",".","size","#","scale","=","(","r","*","*","2",")","/","27","logdbg","(","'","made","%","r",",","keypoint","description","with","%","d","kpts","'","%","(","cv","feat","extractor",",","len","(","cv","kpts",")",")",")","(","cv","kpts",",","cv","desc",")","=","cv","feat","extractor",".","compute","(","im",",","cv","kpts",")","logdbg","(","'","detected","%","d","features","'","%","len","(","cv","kpts",")",")","kpts","=","np",".","zeros","(","(","len","(","cv","kpts",")",",","5",")",",","dtype","=","np",".","float32",")","desc","=","np",".","array","(","cv","desc",",","dtype","=","np",".","uint8",")","fx","=","0","for","cv","kp","in","cv","kpts",":","(","x",",","y",")","=","cv","kp",".","pt","theta","=","cv","kp",".","angle","scale","=","(","float","(","cv","kp",".","size",")","*","*","2",")","/","27","det","a","=","1",".","/","(","scale",")","(","a",",","c",",","d",")","=","(","det","a",",","0",",","det","a",")","kpts","[","fx","]","=","(","x",",","y",",","a",",","c",",","d",")","fx","+","=","1","return","(","kpts",",","desc",")"],"func_name":"compute_features","func_name_tokens":["compute","features"],"docstring":"http://stackoverflow.com/questions/10764895/opencv-python-sample-error\nhttp://stackoverflow.com/questions/12491022/opencv-freak-fast-retina-keypoint-descriptor\nThe following detector types are supported:\nORB, BRISK, MSER, GFTT (good features to track)\nAlso: Grid, GridFAST, PyramidStar\nsee http://docs.opencv.org/modules/features2d/doc/common_interfaces_of_feature_detectors.html\nPtr FeatureDetector::create(const string& detectorType)\nTinker with Keypoint\n* Convert to representation in: M. Perdoc, O. Chum, and J. Matas. CVPR 2009\n* Efficient representation of local geometry for large scale object retrieval\nGarbage\nSIFT descriptors are computed with a radius of r=3*np.sqrt(3*s)\ns = (det A_i) ^ (-1/2) OR\nprint '_-----------'\nif False:\nDEPRICATED","docstring_tokens":["the","following","detector","types","are","supported",":","orb",",","brisk",",","mser",",","gftt","(","good","features","to","track",")","also",":","grid",",","grid","fast",",","pyramid","star","see","ptr","feature","detector",":",":","create","(","const","string","&","detector","type",")","tinker","with","keypoint","*","convert","to","representation","in",":","m",".","perdoc",",","o",".","chum",",","and","j",".","matas",".","cvpr","2009","*","efficient","representation","of","local","geometry","for","large","scale","object","retrieval","garbage","sift","descriptors","are","computed","with","a","radius","of","r","=","3","*","np",".","sqrt","(","3","*","s",")","s","=","(","det","a","i",")","^","(","-","1","/","2",")","or","print","'","-","-","-","-","-","-","-","-","-","-","-","'","if","false",":","depricated"],"query":"OpenCV Python Sample Error","query_tokens":["open","cv","python","sample","error"]}
{"code":"  def _getCurrentPage(self, index, key):    itemList = []    html = self._provider.getContent()    htmlElement = BeautifulSoup(html, 'html5lib')    parentElement = htmlElement.find('div', id='search-application-results-view')    itemElementList = parentElement.find_all('div', class_='block-loose-for-large-up')    for itemElement in itemElementList:      data = {}      if(itemElement and (itemElement.attrs.get('data-view') == 'colleges-search-results-card')):","code_tokens":["def","get","current","page","(","self",",","index",",","key",")",":","item","list","=","[","]","html","=","self",".","provider",".","get","content","(",")","html","element","=","beautiful","soup","(","html",",","'","html5lib","'",")","parent","element","=","html","element",".","find","(","'","div","'",",","id","=","'","search","-","application","-","results","-","view","'",")","item","element","list","=","parent","element",".","find","all","(","'","div","'",",","class","=","'","block","-","loose","-","for","-","large","-","up","'",")","for","item","element","in","item","element","list",":","data","=","{","}","if","(","item","element","and","(","item","element",".","attrs",".","get","(","'","data","-","view","'",")","=","=","'","colleges","-","search","-","results","-","card","'",")",")",":"],"func_name":"_getCurrentPage","func_name_tokens":["get","current","page"],"docstring":"Test        html = ''    try:      with open('./nu.html', 'rb') as f:        html = f.read()    except Exception as e:      print (e)\nhttps://www.crummy.com/software/BeautifulSoup/bs4/doc/\nattributes\nWHY: weired that 'is' doesn't go through but '==' does?\nANSWER: http://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce","docstring_tokens":["test","html","=","'","'","try",":","with","open","(","'",".","/","nu",".","html","'",",","'","rb","'",")","as","f",":","html","=","f",".","read","(",")","except","exception","as","e",":","print","(","e",")","attributes","why",":","weired","that","'","is","'","doesn","'","t","go","through","but","'","=","=","'","does","?","answer",":"],"query":"Why does comparing strings using either '==' or 'is' sometimes produce a different result?","query_tokens":["why","does","comparing","strings","using","either","'","=","=","'","or","'","is","'","sometimes","produce","a","different","result","?"]}
{"code":"def sync():    ignore_globs = []    with open('%s/assetsignore' % ASSETS_ROOT, 'r') as f:        ignore_globs = [l.strip() for l in f]    local_paths = []    not_lowercase = []    for local_path, subdirs, filenames in os.walk(ASSETS_ROOT):        for name in filenames:            full_path = os.path.join(local_path, name)            glob_path = full_path.split(ASSETS_ROOT)[1].strip('/')            ignore = False            for ignore_glob in ignore_globs:                if fnmatch(glob_path, ignore_glob):                    ignore = True                    break            if ignore:                print 'Ignoring: %s' % full_path                continue            if name.lower() != name:                not_lowercase.append(full_path)            local_paths.append(full_path)    if not_lowercase:        print 'The following filenames are not lowercase, please change them before running `assets.sync`:'        for name in not_lowercase:            print '    %s' % name        return    bucket = utils.get_bucket(app_config.ASSETS_S3_BUCKET)    keys = bucket.list(app_config.ASSETS_SLUG)    which = None    always = False    for key in keys:        download = False        upload = False        local_path = key.name.replace(app_config.ASSETS_SLUG, ASSETS_ROOT, 1)        if local_path == '%s/' % ASSETS_ROOT:            continue        print local_path        if local_path in local_paths:            local_paths.remove(local_path)            key = bucket.get_key(key.name)            with open(local_path, 'rb') as f:                local_md5 = key.compute_md5(f)[0]            if key.get_metadata('md5') != local_md5:                if not always:                    which, always = _assets_confirm(local_path)                if not which:                    print 'Cancelling!'                    return                if which == 'remote':                    download = True                elif which == 'local':                    upload = True        else:            download = True        if download:            _assets_download(key, local_path)        if upload:            _assets_upload(local_path, key)    action = None    always = False    for local_path in local_paths:        key_name = local_path.replace(ASSETS_ROOT, app_config.ASSETS_SLUG, 1)        key = bucket.get_key(key_name, validate=False)        print local_path        if not always:            action, always = _assets_upload_confirm()        if not action:            print 'Cancelling!'            return        if action == 'upload':            _assets_upload(local_path, key)        elif action == 'delete':            _assets_delete(local_path, key)@task","code_tokens":["def","sync","(",")",":","ignore","globs","=","[","]","with","open","(","'","%","s","/","assetsignore","'","%","assets","root",",","'","r","'",")","as","f",":","ignore","globs","=","[","l",".","strip","(",")","for","l","in","f","]","local","paths","=","[","]","not","lowercase","=","[","]","for","local","path",",","subdirs",",","filenames","in","os",".","walk","(","assets","root",")",":","for","name","in","filenames",":","full","path","=","os",".","path",".","join","(","local","path",",","name",")","glob","path","=","full","path",".","split","(","assets","root",")","[","1","]",".","strip","(","'","/","'",")","ignore","=","false","for","ignore","glob","in","ignore","globs",":","if","fnmatch","(","glob","path",",","ignore","glob",")",":","ignore","=","true","break","if","ignore",":","print","'","ignoring",":","%","s","'","%","full","path","continue","if","name",".","lower","(",")","!","=","name",":","not","lowercase",".","append","(","full","path",")","local","paths",".","append","(","full","path",")","if","not","lowercase",":","print","'","the","following","filenames","are","not","lowercase",",","please","change","them","before","running","`","assets",".","sync","`",":","'","for","name","in","not","lowercase",":","print","'","%","s","'","%","name","return","bucket","=","utils",".","get","bucket","(","app","config",".","assets","s3","bucket",")","keys","=","bucket",".","list","(","app","config",".","assets","slug",")","which","=","none","always","=","false","for","key","in","keys",":","download","=","false","upload","=","false","local","path","=","key",".","name",".","replace","(","app","config",".","assets","slug",",","assets","root",",","1",")","if","local","path","=","=","'","%","s","/","'","%","assets","root",":","continue","print","local","path","if","local","path","in","local","paths",":","local","paths",".","remove","(","local","path",")","key","=","bucket",".","get","key","(","key",".","name",")","with","open","(","local","path",",","'","rb","'",")","as","f",":","local","md5","=","key",".","compute","md5","(","f",")","[","0","]","if","key",".","get","metadata","(","'","md5","'",")","!","=","local","md5",":","if","not","always",":","which",",","always","=","assets","confirm","(","local","path",")","if","not","which",":","print","'","cancelling","!","'","return","if","which","=","=","'","remote","'",":","download","=","true","elif","which","=","=","'","local","'",":","upload","=","true","else",":","download","=","true","if","download",":","assets","download","(","key",",","local","path",")","if","upload",":","assets","upload","(","local","path",",","key",")","action","=","none","always","=","false","for","local","path","in","local","paths",":","key","name","=","local","path",".","replace","(","assets","root",",","app","config",".","assets","slug",",","1",")","key","=","bucket",".","get","key","(","key","name",",","validate","=","false",")","print","local","path","if","not","always",":","action",",","always","=","assets","upload","confirm","(",")","if","not","action",":","print","'","cancelling","!","'","return","if","action","=","=","'","upload","'",":","assets","upload","(","local","path",",","key",")","elif","action","=","=","'","delete","'",":","assets","delete","(","local","path",",","key",")","@","task"],"func_name":"sync","func_name_tokens":["sync"],"docstring":"Intelligently synchronize assets between S3 and local folder.\nPrevent case sensitivity differences between OSX and S3 from screwing us up\nSkip root key\nA file can only exist once, this speeds up future checks\nand provides a list of non-existing files when complete\nWe need an actual key, not a \"list key\"\nhttp://stackoverflow.com/a/18981298/24608\nHashes are different\nAsk user which file to take\nIterate over files that didn't exist on S3","docstring_tokens":["intelligently","synchronize","assets","between","s3","and","local","folder",".","prevent","case","sensitivity","differences","between","osx","and","s3","from","screwing","us","up","skip","root","key","a","file","can","only","exist","once",",","this","speeds","up","future","checks","and","provides","a","list","of","non","-","existing","files","when","complete","we","need","an","actual","key",",","not","a","\"","list","key","\"","hashes","are","different","ask","user","which","file","to","take","iterate","over","files","that","didn","'","t","exist","on","s3"],"query":"Boto s3 get_metadata","query_tokens":["boto","s3","get","metadata"]}
{"code":"def main():    c = [0,0,0,0,0,0] # counts images    pathlib.Path('RWBY').mkdir(parents=True, exist_ok=True) # create RWBY folder    if not pathlib.Path(\"settings.ini\").is_file():        print(\"settings.ini not found. Creating new file...\")        new_settings()        config = configparser.ConfigParser()    config.read('settings.ini')    DEBUG = config['DEFAULT'].getboolean('debug',False) # enable/[disable] debug messages        p = \"\"    if config['DEFAULT'].getboolean('encrypt',False):        p = getpass.getpass(\"Client information is encrpyted. Please enter password: \")        reddit = praw.Reddit(client_id=decode(p,config['DEFAULT'].get('Reddit Client ID')),                         client_secret=decode(p,config['DEFAULT'].get('Reddit Client Secret')),                         user_agent='Python:r/RWBY Spider')        try:        reddit.user.preferences()    except prawcore.exceptions.Forbidden as E:        error = E.args[0]        if '403' in error:            print(\"Reddit Application accepted\")    except prawcore.exceptions.ResponseException:        print(\"Reddit Application Error. Either the key is incorrect, or your client credentials are wrong.\")        print(\"(If you continue to have problems, you can reset your settings by deleting the settings.ini file)\")        input(\"Press Enter to continue...\")        exit()       headers = {'authorization': 'Client-ID '+decode(p,config['DEFAULT'].get('Imgur Client ID'))} # For Imgur authorization    url = \"https://api.imgur.com/3/credits\"    response = requests.request(\"GET\", url,headers=headers)    if json.loads(response.text)[\"success\"]:        print(\"Imgur Application accepted\")    else:        print(\"Imgur Application Error. Either the key is incorrect, or your client credentials are wrong.\")        print(\"(If you continue to have problems, you can reset your settings by deleting the settings.ini file)\")        input(\"Press Enter to continue...\")        exit()    print(\"Downloading Direct Imgur Links\")    params = {'sort':'new', 'time_filter':'year'}    results = reddit.subreddit('rwby').search('flair:art site:imgur.com', **params)        for result in results:        r = result.url        d = datetime.utcfromtimestamp(result.created_utc)        if is_album(r):            url = \"https://api.imgur.com/3/album/\"+parse_token(r)+\"/images\"            response = requests.request(\"GET\", url, headers=headers)            if json.loads(response.text)[\"success\"]:                for item in json.loads(response.text)[\"data\"]:                    c[0] += 1                    c[1] += download(d,item[\"link\"],item[\"link\"][20:],DEBUG)            else:                if DEBUG: print(\"Unable to retrieve album \" + parse_token(r))                continue        else: # it's an image            url = \"https://api.imgur.com/3/image/\" + parse_token(r)            response = requests.request(\"GET\", url, headers=headers)            if json.loads(response.text)[\"success\"]:                j = json.loads(response.text)[\"data\"]                c[0] += 1                c[1] += download(d,j[\"link\"],j[\"link\"][20:],DEBUG)        print(\"Downloading Velvetbot links\")    results = reddit.redditor('velvetbot').comments.new()    for result in results:        r = re.search('\\[Imgur( Album)?\\]\\((.*?)\\)',result.body)        if r is None:            continue        r = r.group(2) # group 0 is the entire thing, group 1 is the album match and group 2 is the link        d = datetime.utcfromtimestamp(result.created_utc)        if is_album(r):            url = \"https://api.imgur.com/3/album/\"+parse_token(r)+\"/images\"            response = requests.request(\"GET\", url, headers=headers)            if json.loads(response.text)[\"success\"]:                for item in json.loads(response.text)[\"data\"]:                    c[2] += 1                    c[3] += download(d,item[\"link\"],item[\"link\"][20:],DEBUG)            else:                if DEBUG: print(\"Unable to retrieve album \" + parse_token(r))                continue        else: # it's an image            url = \"https://api.imgur.com/3/image/\" + parse_token(r)            response = requests.request(\"GET\", url, headers=headers)            if json.loads(response.text)[\"success\"]:                j = json.loads(response.text)[\"data\"]                c[2] += 1                c[3] += download(d,j[\"link\"],j[\"link\"][20:],DEBUG)    print(\"Downloading Reddit Links\")    params = {'sort':'new', 'time_filter':'year'}    results = reddit.subreddit('rwby').search('flair:art site:i.redd.it', **params)    for result in results:        r = result.url        d = datetime.utcfromtimestamp(result.created_utc)        c[4] += 1        c[5] += download(d,r,r[18:],DEBUG)        print(\"Summary\")    print(\"Downloaded Direct Imgur Links: \" + str(c[1]))    print(\"Existing Direct Imgur Links: \" + str(c[0]))    print(\"Downloaded Velvetbot Links: \" + str(c[3]))    print(\"Existing Velvetbot Links: \" + str(c[2]))    print(\"Downloaded Direct Reddit Links: \" + str(c[5]))    print(\"Existing Direct Reddit Links: \" + str(c[4]))    print(\"Done!\")    if DEBUG: input(\"Press Enter to continue...\")    exit()","code_tokens":["def","main","(",")",":","c","=","[","0",",","0",",","0",",","0",",","0",",","0","]","#","counts","images","pathlib",".","path","(","'","rwby","'",")",".","mkdir","(","parents","=","true",",","exist","ok","=","true",")","#","create","rwby","folder","if","not","pathlib",".","path","(","\"","settings",".","ini","\"",")",".","is","file","(",")",":","print","(","\"","settings",".","ini","not","found",".","creating","new","file",".",".",".","\"",")","new","settings","(",")","config","=","configparser",".","config","parser","(",")","config",".","read","(","'","settings",".","ini","'",")","debug","=","config","[","'","default","'","]",".","getboolean","(","'","debug","'",",","false",")","#","enable","/","[","disable","]","debug","messages","p","=","\"","\"","if","config","[","'","default","'","]",".","getboolean","(","'","encrypt","'",",","false",")",":","p","=","getpass",".","getpass","(","\"","client","information","is","encrpyted",".","please","enter","password",":","\"",")","reddit","=","praw",".","reddit","(","client","id","=","decode","(","p",",","config","[","'","default","'","]",".","get","(","'","reddit","client","id","'",")",")",",","client","secret","=","decode","(","p",",","config","[","'","default","'","]",".","get","(","'","reddit","client","secret","'",")",")",",","user","agent","=","'","python",":","r","/","rwby","spider","'",")","try",":","reddit",".","user",".","preferences","(",")","except","prawcore",".","exceptions",".","forbidden","as","e",":","error","=","e",".","args","[","0","]","if","'","403","'","in","error",":","print","(","\"","reddit","application","accepted","\"",")","except","prawcore",".","exceptions",".","response","exception",":","print","(","\"","reddit","application","error",".","either","the","key","is","incorrect",",","or","your","client","credentials","are","wrong",".","\"",")","print","(","\"","(","if","you","continue","to","have","problems",",","you","can","reset","your","settings","by","deleting","the","settings",".","ini","file",")","\"",")","input","(","\"","press","enter","to","continue",".",".",".","\"",")","exit","(",")","headers","=","{","'","authorization","'",":","'","client","-","id","'","+","decode","(","p",",","config","[","'","default","'","]",".","get","(","'","imgur","client","id","'",")",")","}","#","for","imgur","authorization","url","=","\"","\"","response","=","requests",".","request","(","\"","get","\"",",","url",",","headers","=","headers",")","if","json",".","loads","(","response",".","text",")","[","\"","success","\"","]",":","print","(","\"","imgur","application","accepted","\"",")","else",":","print","(","\"","imgur","application","error",".","either","the","key","is","incorrect",",","or","your","client","credentials","are","wrong",".","\"",")","print","(","\"","(","if","you","continue","to","have","problems",",","you","can","reset","your","settings","by","deleting","the","settings",".","ini","file",")","\"",")","input","(","\"","press","enter","to","continue",".",".",".","\"",")","exit","(",")","print","(","\"","downloading","direct","imgur","links","\"",")","params","=","{","'","sort","'",":","'","new","'",",","'","time","filter","'",":","'","year","'","}","results","=","reddit",".","subreddit","(","'","rwby","'",")",".","search","(","'","flair",":","art","site",":","imgur",".","com","'",",","*","*","params",")","for","result","in","results",":","r","=","result",".","url","d","=","datetime",".","utcfromtimestamp","(","result",".","created","utc",")","if","is","album","(","r",")",":","url","=","\"","\"","+","parse","token","(","r",")","+","\"","/","images","\"","response","=","requests",".","request","(","\"","get","\"",",","url",",","headers","=","headers",")","if","json",".","loads","(","response",".","text",")","[","\"","success","\"","]",":","for","item","in","json",".","loads","(","response",".","text",")","[","\"","data","\"","]",":","c","[","0","]","+","=","1","c","[","1","]","+","=","download","(","d",",","item","[","\"","link","\"","]",",","item","[","\"","link","\"","]","[","20",":","]",",","debug",")","else",":","if","debug",":","print","(","\"","unable","to","retrieve","album","\"","+","parse","token","(","r",")",")","continue","else",":","#","it","'","s","an","image","url","=","\"","\"","+","parse","token","(","r",")","response","=","requests",".","request","(","\"","get","\"",",","url",",","headers","=","headers",")","if","json",".","loads","(","response",".","text",")","[","\"","success","\"","]",":","j","=","json",".","loads","(","response",".","text",")","[","\"","data","\"","]","c","[","0","]","+","=","1","c","[","1","]","+","=","download","(","d",",","j","[","\"","link","\"","]",",","j","[","\"","link","\"","]","[","20",":","]",",","debug",")","print","(","\"","downloading","velvetbot","links","\"",")","results","=","reddit",".","redditor","(","'","velvetbot","'",")",".","comments",".","new","(",")","for","result","in","results",":","r","=","re",".","search","(","'","\\","[","imgur","(","album",")","?","\\","]","\\","(","(",".","*","?",")","\\",")","'",",","result",".","body",")","if","r","is","none",":","continue","r","=","r",".","group","(","2",")","#","group","0","is","the","entire","thing",",","group","1","is","the","album","match","and","group","2","is","the","link","d","=","datetime",".","utcfromtimestamp","(","result",".","created","utc",")","if","is","album","(","r",")",":","url","=","\"","\"","+","parse","token","(","r",")","+","\"","/","images","\"","response","=","requests",".","request","(","\"","get","\"",",","url",",","headers","=","headers",")","if","json",".","loads","(","response",".","text",")","[","\"","success","\"","]",":","for","item","in","json",".","loads","(","response",".","text",")","[","\"","data","\"","]",":","c","[","2","]","+","=","1","c","[","3","]","+","=","download","(","d",",","item","[","\"","link","\"","]",",","item","[","\"","link","\"","]","[","20",":","]",",","debug",")","else",":","if","debug",":","print","(","\"","unable","to","retrieve","album","\"","+","parse","token","(","r",")",")","continue","else",":","#","it","'","s","an","image","url","=","\"","\"","+","parse","token","(","r",")","response","=","requests",".","request","(","\"","get","\"",",","url",",","headers","=","headers",")","if","json",".","loads","(","response",".","text",")","[","\"","success","\"","]",":","j","=","json",".","loads","(","response",".","text",")","[","\"","data","\"","]","c","[","2","]","+","=","1","c","[","3","]","+","=","download","(","d",",","j","[","\"","link","\"","]",",","j","[","\"","link","\"","]","[","20",":","]",",","debug",")","print","(","\"","downloading","reddit","links","\"",")","params","=","{","'","sort","'",":","'","new","'",",","'","time","filter","'",":","'","year","'","}","results","=","reddit",".","subreddit","(","'","rwby","'",")",".","search","(","'","flair",":","art","site",":","i",".","redd",".","it","'",",","*","*","params",")","for","result","in","results",":","r","=","result",".","url","d","=","datetime",".","utcfromtimestamp","(","result",".","created","utc",")","c","[","4","]","+","=","1","c","[","5","]","+","=","download","(","d",",","r",",","r","[","18",":","]",",","debug",")","print","(","\"","summary","\"",")","print","(","\"","downloaded","direct","imgur","links",":","\"","+","str","(","c","[","1","]",")",")","print","(","\"","existing","direct","imgur","links",":","\"","+","str","(","c","[","0","]",")",")","print","(","\"","downloaded","velvetbot","links",":","\"","+","str","(","c","[","3","]",")",")","print","(","\"","existing","velvetbot","links",":","\"","+","str","(","c","[","2","]",")",")","print","(","\"","downloaded","direct","reddit","links",":","\"","+","str","(","c","[","5","]",")",")","print","(","\"","existing","direct","reddit","links",":","\"","+","str","(","c","[","4","]",")",")","print","(","\"","done","!","\"",")","if","debug",":","input","(","\"","press","enter","to","continue",".",".",".","\"",")","exit","(",")"],"func_name":"main","func_name_tokens":["main"],"docstring":"settings.ini file not found\nreading settings.ini file\noptional decryption\ntest to see if reddit credentials are correct\ntest to see if Imgur credentials are correct\nPart 1: Direct Imgur links\nPart 2: Indirect Imgur links through velvetbot\nPart 3: Direct i.redd.it links\nhttps://stackoverflow.com/questions/2490334/simple-way-to-encode-a-string-according-to-a-password","docstring_tokens":["settings",".","ini","file","not","found","reading","settings",".","ini","file","optional","decryption","test","to","see","if","reddit","credentials","are","correct","test","to","see","if","imgur","credentials","are","correct","part","1",":","direct","imgur","links","part","2",":","indirect","imgur","links","through","velvetbot","part","3",":","direct","i",".","redd",".","it","links"],"query":"Simple way to encode a string according to a password?","query_tokens":["simple","way","to","encode","a","string","according","to","a","password","?"]}
{"code":"    def __repr__(self):        return unicode(self)class FrozenDict(Mapping):","code_tokens":["def","repr","(","self",")",":","return","unicode","(","self",")","class","frozen","dict","(","mapping",")",":"],"func_name":"__repr__","func_name_tokens":["repr"],"docstring":"An immutable hashable dict    Taken from http://stackoverflow.com/a/2704866/81121","docstring_tokens":["an","immutable","hashable","dict","taken","from"],"query":"What would a “frozen dict” be?","query_tokens":["what","would","a","“","frozen","dict","”","be","?"]}
{"code":"    def np_arrs_equal(arr1, arr2):        return (arr1 == arr2).all()","code_tokens":["def","np","arrs","equal","(","arr1",",","arr2",")",":","return","(","arr1","=","=","arr2",")",".","all","(",")"],"func_name":"np_arrs_equal","func_name_tokens":["np","arrs","equal"],"docstring":"Equality testing numpy arrays is unintuitive. == performs element-wise comparison and returns a boolean array.        You then check if the entire boolean array is true.        Explanation here: http://stackoverflow.com/questions/23949839/valueerror-the-truth-value-of-an-array-with-more-than-one-element-is-ambiguous","docstring_tokens":["equality","testing","numpy","arrays","is","unintuitive",".","=","=","performs","element","-","wise","comparison","and","returns","a","boolean","array",".","you","then","check","if","the","entire","boolean","array","is","true",".","explanation","here",":"],"query":"“ValueError: The truth value of an array with more than one element is ambiguous”","query_tokens":["“","value","error",":","the","truth","value","of","an","array","with","more","than","one","element","is","ambiguous","”"]}
{"code":"    def __init__(self, fail_silently=False,                 template_prefix=None, template_suffix=None, **kwargs):        self.template_prefix = template_prefix or getattr(settings, 'TEMPLATED_EMAIL_TEMPLATE_DIR', 'templated_email/')        self.template_suffix = template_suffix or getattr(settings, 'TEMPLATED_EMAIL_FILE_EXTENSION', 'email')","code_tokens":["def","init","(","self",",","fail","silently","=","false",",","template","prefix","=","none",",","template","suffix","=","none",",","*","*","kwargs",")",":","self",".","template","prefix","=","template","prefix","or","getattr","(","settings",",","'","templated","email","template","dir","'",",","'","templated","email","/","'",")","self",".","template","suffix","=","template","suffix","or","getattr","(","settings",",","'","templated","email","file","extension","'",",","'","email","'",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":"Backend which uses Django's    templates, and django's send_mail function.    Heavily inspired by http://stackoverflow.com/questions/2809547/creating-email-templates-with-django    Default / preferred behaviour works like so:        templates named            templated_email/.email        {% block subject %} declares the subject        {% block plain %} declares text/plain        {% block html %} declares text/html    Legacy behaviour loads from:        text/plain part:            templated_email/.txt        text/html part:            templated_email/.html        Subjects for email templates can be configured in one of two ways:        * If you are using internationalisation, you can simply create entries for          \" email subject\" as a msgid in your PO file        * Using a dictionary in settings.py, TEMPLATED_EMAIL_DJANGO_SUBJECTS,          for e.g.:          TEMPLATED_EMAIL_DJANGO_SUBJECTS = {            'welcome':'Welcome to my website',          }    Subjects are templatable using the context, i.e. A subject    that resolves to 'Welcome to my website, %(username)s', requires that    the context passed in to the send() method contains 'username' as one    of it's keys","docstring_tokens":["backend","which","uses","django","'","s","templates",",","and","django","'","s","send","mail","function",".","heavily","inspired","by","default","/","preferred","behaviour","works","like","so",":","templates","named","templated","email","/",".","email","{","%","block","subject","%","}","declares","the","subject","{","%","block","plain","%","}","declares","text","/","plain","{","%","block","html","%","}","declares","text","/","html","legacy","behaviour","loads","from",":","text","/","plain","part",":","templated","email","/",".","txt","text","/","html","part",":","templated","email","/",".","html","subjects","for","email","templates","can","be","configured","in","one","of","two","ways",":","*","if","you","are","using","internationalisation",",","you","can","simply","create","entries","for","\"","email","subject","\"","as","a","msgid","in","your","po","file","*","using","a","dictionary","in","settings",".","py",",","templated","email","django","subjects",",","for","e",".","g",".",":","templated","email","django","subjects","=","{","'","welcome","'",":","'","welcome","to","my","website","'",",","}","subjects","are","templatable","using","the","context",",","i",".","e",".","a","subject","that","resolves","to","'","welcome","to","my","website",",","%","(","username",")","s","'",",","requires","that","the","context","passed","in","to","the","send","(",")","method","contains","'","username","'","as","one","of","it","'","s","keys"],"query":"Creating email templates with Django","query_tokens":["creating","email","templates","with","django"]}
{"code":"def headers_to_dict(header_lines):    headers = {}    headers_list = [x for line in header_lines for x in line.split(': ', 1)]    headers_dict = dict(zip(headers_list[0::2], headers_list[1::2]))    for header in headers_dict:        headers[header.lower()] = headers_dict[header]    return headers","code_tokens":["def","headers","to","dict","(","header","lines",")",":","headers","=","{","}","headers","list","=","[","x","for","line","in","header","lines","for","x","in","line",".","split","(","'",":","'",",","1",")","]","headers","dict","=","dict","(","zip","(","headers","list","[","0",":",":","2","]",",","headers","list","[","1",":",":","2","]",")",")","for","header","in","headers","dict",":","headers","[","header",".","lower","(",")","]","=","headers","dict","[","header","]","return","headers"],"func_name":"headers_to_dict","func_name_tokens":["headers","to","dict"],"docstring":"Convert the list of header lines into a dictionary\nIncomprehensible list comprehension flattens list of headers\nthat are each split at ': '\nhttp://stackoverflow.com/a/406296\nMake the header key (like \"Content-Length\") lowercase","docstring_tokens":["convert","the","list","of","header","lines","into","a","dictionary","incomprehensible","list","comprehension","flattens","list","of","headers","that","are","each","split","at","'",":","'","make","the","header","key","(","like","\"","content","-","length","\"",")","lowercase"],"query":"Flattening a shallow list in Python [duplicate]","query_tokens":["flattening","a","shallow","list","in","python","[","duplicate","]"]}
{"code":"def on_identity_loaded(sender, identity):    if type(current_user) == 'AnonymousUserMixin':        return    identity.user = current_user    if hasattr(current_user, 'roles'):        for role in current_user.roles:            identity.provides.add(RoleNeed(role.name))@login_manager.request_loader","code_tokens":["def","on","identity","loaded","(","sender",",","identity",")",":","if","type","(","current","user",")","=","=","'","anonymous","user","mixin","'",":","return","identity",".","user","=","current","user","if","hasattr","(","current","user",",","'","roles","'",")",":","for","role","in","current","user",".","roles",":","identity",".","provides",".","add","(","role","need","(","role",".","name",")",")","@","login","manager",".","request","loader"],"func_name":"on_identity_loaded","func_name_tokens":["on","identity","loaded"],"docstring":"Describe what `needs` does this identity provide    @TODO: add unit tests        http://stackoverflow.com/questions/16712321/unit-testing-a-flask-principal-application","docstring_tokens":["describe","what","`","needs","`","does","this","identity","provide","@","todo",":","add","unit","tests"],"query":"Unit-testing a flask-principal application","query_tokens":["unit","-","testing","a","flask","-","principal","application"]}
{"code":"def reverse_complement(sequence):        if isinstance(sequence, unicode):        sequence = sequence.encode(\"ascii\", \"replace\")        return sequence.translate(reverse_complement_translation_table)[::-1]    ","code_tokens":["def","reverse","complement","(","sequence",")",":","if","isinstance","(","sequence",",","unicode",")",":","sequence","=","sequence",".","encode","(","\"","ascii","\"",",","\"","replace","\"",")","return","sequence",".","translate","(","reverse","complement","translation","table",")","[",":",":","-","1","]"],"func_name":"reverse_complement","func_name_tokens":["reverse","complement"],"docstring":"Compute the reverse complement of a DNA sequence.        Follows algorithm from \nEncode the sequence in ASCII for easy translation\nTranslate and then reverse","docstring_tokens":["compute","the","reverse","complement","of","a","dna","sequence",".","follows","algorithm","from","encode","the","sequence","in","ascii","for","easy","translation","translate","and","then","reverse"],"query":"Reverse complement of DNA strand using Python","query_tokens":["reverse","complement","of","dna","strand","using","python"]}
{"code":"    def test_multiprocessing(self):        NUM_PROCS = 10","code_tokens":["def","test","multiprocessing","(","self",")",":","num","procs","=","10"],"func_name":"test_multiprocessing","func_name_tokens":["test","multiprocessing"],"docstring":"Test that multiple processes can bang on sqlite without issue.\n: credit where credit is due:\n:  http://stackoverflow.com/a/5792404/1611953\n:\n: the two functions below allow us to target a non-module level\n: function with subprocesses\n:","docstring_tokens":["test","that","multiple","processes","can","bang","on","sqlite","without","issue",".",":","credit","where","credit","is","due",":",":",":",":","the","two","functions","below","allow","us","to","target","a","non","-","module","level",":","function","with","subprocesses",":"],"query":"Multiprocessing: How to use Pool.map on a function defined in a class?","query_tokens":["multiprocessing",":","how","to","use","pool",".","map","on","a","function","defined","in","a","class","?"]}
{"code":"    def __get_improved_exception_message(self):        exc_message = self.__get_exception_message()        maybe_using_old_chromedriver = False        if \"unknown error: call function result missing\" in exc_message:            maybe_using_old_chromedriver = True        if self.browser == 'chrome' and maybe_using_old_chromedriver:            update = (\"Your version of ChromeDriver may be out-of-date! \"                      \"Please go to \"                      \"https://sites.google.com/a/chromium.org/chromedriver/ \"                      \"and download the latest version to your system PATH! \"                      \"Or use: ``seleniumbase install chromedriver`` . \"                      \"Original Exception Message: %s\" % exc_message)            exc_message = update        return exc_message","code_tokens":["def","get","improved","exception","message","(","self",")",":","exc","message","=","self",".","get","exception","message","(",")","maybe","using","old","chromedriver","=","false","if","\"","unknown","error",":","call","function","result","missing","\"","in","exc","message",":","maybe","using","old","chromedriver","=","true","if","self",".","browser","=","=","'","chrome","'","and","maybe","using","old","chromedriver",":","update","=","(","\"","your","version","of","chrome","driver","may","be","out","-","of","-","date","!","\"","\"","please","go","to","\"","\"","\"","\"","and","download","the","latest","version","to","your","system","path","!","\"","\"","or","use",":","`","`","seleniumbase","install","chromedriver","`","`",".","\"","\"","original","exception","message",":","%","s","\"","%","exc","message",")","exc","message","=","update","return","exc","message"],"func_name":"__get_improved_exception_message","func_name_tokens":["get","improved","exception","message"],"docstring":"If Chromedriver is out-of-date, make it clear!        Given the high popularity of the following StackOverflow article:        https://stackoverflow.com/questions/49162667/unknown-error-                call-function-result-missing-value-for-selenium-send-keys-even        ... the original error message was not helpful. Tell people directly.        (Only expected when using driver.send_keys() with an old Chromedriver.)","docstring_tokens":["if","chromedriver","is","out","-","of","-","date",",","make","it","clear","!","given","the","high","popularity","of","the","following","stack","overflow","article",":","call","-","function","-","result","-","missing","-","value","-","for","-","selenium","-","send","-","keys","-","even",".",".",".","the","original","error","message","was","not","helpful",".","tell","people","directly",".","(","only","expected","when","using","driver",".","send","keys","(",")","with","an","old","chromedriver",".",")"],"query":"unknown error: call function result missing 'value' for Selenium Send Keys even after chromedriver upgrade","query_tokens":["unknown","error",":","call","function","result","missing","'","value","'","for","selenium","send","keys","even","after","chromedriver","upgrade"]}
{"code":"def get_vals(xPtin,yPtin,EmepCdf,minmax=False,dbg=False):  dtxt='get_vals:'  xPt, yPt = xPtin, yPtin  if hasattr(xPt,\"__len__\"): # copes with numpy class or simple list    print(dtxt+'ERROR! needs scalar x,y; got array:', type(xPt) )    sys.exit()  print(dtxt+'TEST? proj, xPt, yPt ', EmepCdf.proj, xPt, yPt,            'xrange:', EmepCdf.xcoords[0],EmepCdf.xcoords[-1],           'yrange:', EmepCdf.ycoords[0],EmepCdf.ycoords[-1])  if EmepCdf.proj == 'PS':    xPt, yPt = coords.lonlat2emepXy(xPt,yPt)  # XPt, yPt are lon,lat    if dbg:       print('PS lon,lat => model xPt, yPt ', xPtin, yPtin, ' => ',  xPt, yPt)  elif EmepCdf.xcoords[-1] > 189:  #  USES 189 to avoid some grids with eg 180.25    if xPtin < 0.0:       xPt = xPtin + 360       print(dtxt+'Xshift: ', xPtin , xPt, EmepCdf.xcoords[-1] )    if (  xPt < EmepCdf.x0   or yPt < EmepCdf.y0      or  xPt > EmepCdf.xmax or yPt > EmepCdf.ymax ):       print(\"OUTSIDE GRIDA \", xPt, yPt, EmepCdf.x0, EmepCdf.y0,                                EmepCdf.xmax, EmepCdf.ymax)       return None, None, None    if EmepCdf.xRegular and EmepCdf.yRegular :    x, y = RelXy(xPt, yPt, EmepCdf.xcoords[0],EmepCdf.ycoords[0],                  EmepCdf.dx,EmepCdf.dy)   else:    x, y = IrregRelXy(xPt, yPt, EmepCdf.xcoords,EmepCdf.ycoords)   if x < 0 or y < 0:    print(dtxt+\"OUTSIDE GRID \", xPt, yPt, x, y)    err = np.array( [ np.NaN ] )   # just to get array, not scalar    return  err, err, err  if dbg:    print(dtxt+\"INSIDE GRID \", xPt, yPt, x, y)    print(dtxt+\"MIN x0, y0    \", EmepCdf.x0, EmepCdf.y0)    print(dtxt+\"max XCRD YCRD \", EmepCdf.xcoords.max(), EmepCdf.ycoords.max())    print(dtxt+\"xPt, yPt    \", xPt, yPt)   #, \" DLON \", xcoords[1]-xcoords[0]    print(dtxt+\"xxx XCRD YCRD \", x, y)   #, \" DLON \", xcoords[1]-xcoords[0]    EmepCdf.printme()  iL=int(x) # left  iR=iL+1  jS=int(y) # from south  jN=min( jS+1, len(EmepCdf.ycoords)-1)  if dbg:     print(dtxt+'iL,iR-xx ', xPt, yPt, iL, iR,           EmepCdf.xcoords[iL], EmepCdf.xcoords[iR])     print(dtxt+'jS,jN-yy ', xPt, yPt, jS, jN,           EmepCdf.ycoords[jS], EmepCdf.ycoords[jN])  print(dtxt+'BOX SHAPE ', EmepCdf.vals.shape )  if len( EmepCdf.vals.shape ) > 2:    box = EmepCdf.vals[:,jS:jN+1,iL:iR+1]  else:    box = EmepCdf.vals[jS:jN+1,iL:iR+1]    box = box[ np.newaxis, :, : ] # Make 3D  f00 = box[:,0,0]  f10 = box[:,1,0]  f01 = box[:,0,1]  f11 = box[:,1,1]  dx = x-int(x)  dy = y-int(y)  value =  f00*(1-dx)*(1-dy) + f01*dx*(1-dy)+f10*(1-dx)*dy + f11*dx*dy  if minmax:     maxval = vstack([f00,f10,f01,f11]).max(axis=0)    minval = vstack([f00,f10,f01,f11]).min(axis=0)  if dbg:     print(dtxt,' --------- OUTFs ------------------------------------')     print(dtxt+\"x,y -> ijcoords \", xPtin, yPtin, iL, iR, jS, jN )     print(dtxt+\"x, y, dx dy    \", x, y, dx, dy)     print(dtxt+\"x, y, dx dy    \", x, y, dx, dy)     print(dtxt, jS, iL, EmepCdf.vals[0,jS,iL], EmepCdf.vals.min(), EmepCdf.vals.max())     print(dtxt,x,y, dx, dy, iL,iR, jS, jN , EmepCdf.varname, EmepCdf.vals.max())      for i in range(0,len(f00)): # if var is array        print( i, f00[i],f10[i],f01[i],f11[i], value[i] )  if minmax:     return value,minval,maxval   else:    return value","code_tokens":["def","get","vals","(","x","ptin",",","y","ptin",",","emep","cdf",",","minmax","=","false",",","dbg","=","false",")",":","dtxt","=","'","get","vals",":","'","x","pt",",","y","pt","=","x","ptin",",","y","ptin","if","hasattr","(","x","pt",",","\"","len","\"",")",":","#","copes","with","numpy","class","or","simple","list","print","(","dtxt","+","'","error","!","needs","scalar","x",",","y",";","got","array",":","'",",","type","(","x","pt",")",")","sys",".","exit","(",")","print","(","dtxt","+","'","test","?","proj",",","x","pt",",","y","pt","'",",","emep","cdf",".","proj",",","x","pt",",","y","pt",",","'","xrange",":","'",",","emep","cdf",".","xcoords","[","0","]",",","emep","cdf",".","xcoords","[","-","1","]",",","'","yrange",":","'",",","emep","cdf",".","ycoords","[","0","]",",","emep","cdf",".","ycoords","[","-","1","]",")","if","emep","cdf",".","proj","=","=","'","ps","'",":","x","pt",",","y","pt","=","coords",".","lonlat2emep","xy","(","x","pt",",","y","pt",")","#","x","pt",",","y","pt","are","lon",",","lat","if","dbg",":","print","(","'","ps","lon",",","lat","=",">","model","x","pt",",","y","pt","'",",","x","ptin",",","y","ptin",",","'","=",">","'",",","x","pt",",","y","pt",")","elif","emep","cdf",".","xcoords","[","-","1","]",">","189",":","#","uses","189","to","avoid","some","grids","with","eg","180",".","25","if","x","ptin","<","0",".","0",":","x","pt","=","x","ptin","+","360","print","(","dtxt","+","'","xshift",":","'",",","x","ptin",",","x","pt",",","emep","cdf",".","xcoords","[","-","1","]",")","if","(","x","pt","<","emep","cdf",".","x0","or","y","pt","<","emep","cdf",".","y0","or","x","pt",">","emep","cdf",".","xmax","or","y","pt",">","emep","cdf",".","ymax",")",":","print","(","\"","outside","grida","\"",",","x","pt",",","y","pt",",","emep","cdf",".","x0",",","emep","cdf",".","y0",",","emep","cdf",".","xmax",",","emep","cdf",".","ymax",")","return","none",",","none",",","none","if","emep","cdf",".","x","regular","and","emep","cdf",".","y","regular",":","x",",","y","=","rel","xy","(","x","pt",",","y","pt",",","emep","cdf",".","xcoords","[","0","]",",","emep","cdf",".","ycoords","[","0","]",",","emep","cdf",".","dx",",","emep","cdf",".","dy",")","else",":","x",",","y","=","irreg","rel","xy","(","x","pt",",","y","pt",",","emep","cdf",".","xcoords",",","emep","cdf",".","ycoords",")","if","x","<","0","or","y","<","0",":","print","(","dtxt","+","\"","outside","grid","\"",",","x","pt",",","y","pt",",","x",",","y",")","err","=","np",".","array","(","[","np",".","na","n","]",")","#","just","to","get","array",",","not","scalar","return","err",",","err",",","err","if","dbg",":","print","(","dtxt","+","\"","inside","grid","\"",",","x","pt",",","y","pt",",","x",",","y",")","print","(","dtxt","+","\"","min","x0",",","y0","\"",",","emep","cdf",".","x0",",","emep","cdf",".","y0",")","print","(","dtxt","+","\"","max","xcrd","ycrd","\"",",","emep","cdf",".","xcoords",".","max","(",")",",","emep","cdf",".","ycoords",".","max","(",")",")","print","(","dtxt","+","\"","x","pt",",","y","pt","\"",",","x","pt",",","y","pt",")","#",",","\"","dlon","\"",",","xcoords","[","1","]","-","xcoords","[","0","]","print","(","dtxt","+","\"","xxx","xcrd","ycrd","\"",",","x",",","y",")","#",",","\"","dlon","\"",",","xcoords","[","1","]","-","xcoords","[","0","]","emep","cdf",".","printme","(",")","i","l","=","int","(","x",")","#","left","i","r","=","i","l","+","1","j","s","=","int","(","y",")","#","from","south","j","n","=","min","(","j","s","+","1",",","len","(","emep","cdf",".","ycoords",")","-","1",")","if","dbg",":","print","(","dtxt","+","'","i","l",",","i","r","-","xx","'",",","x","pt",",","y","pt",",","i","l",",","i","r",",","emep","cdf",".","xcoords","[","i","l","]",",","emep","cdf",".","xcoords","[","i","r","]",")","print","(","dtxt","+","'","j","s",",","j","n","-","yy","'",",","x","pt",",","y","pt",",","j","s",",","j","n",",","emep","cdf",".","ycoords","[","j","s","]",",","emep","cdf",".","ycoords","[","j","n","]",")","print","(","dtxt","+","'","box","shape","'",",","emep","cdf",".","vals",".","shape",")","if","len","(","emep","cdf",".","vals",".","shape",")",">","2",":","box","=","emep","cdf",".","vals","[",":",",","j","s",":","j","n","+","1",",","i","l",":","i","r","+","1","]","else",":","box","=","emep","cdf",".","vals","[","j","s",":","j","n","+","1",",","i","l",":","i","r","+","1","]","box","=","box","[","np",".","newaxis",",",":",",",":","]","#","make","3d","f00","=","box","[",":",",","0",",","0","]","f10","=","box","[",":",",","1",",","0","]","f01","=","box","[",":",",","0",",","1","]","f11","=","box","[",":",",","1",",","1","]","dx","=","x","-","int","(","x",")","dy","=","y","-","int","(","y",")","value","=","f00","*","(","1","-","dx",")","*","(","1","-","dy",")","+","f01","*","dx","*","(","1","-","dy",")","+","f10","*","(","1","-","dx",")","*","dy","+","f11","*","dx","*","dy","if","minmax",":","maxval","=","vstack","(","[","f00",",","f10",",","f01",",","f11","]",")",".","max","(","axis","=","0",")","minval","=","vstack","(","[","f00",",","f10",",","f01",",","f11","]",")",".","min","(","axis","=","0",")","if","dbg",":","print","(","dtxt",",","'","-","-","-","-","-","-","-","-","-","out","fs","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","'",")","print","(","dtxt","+","\"","x",",","y","-",">","ijcoords","\"",",","x","ptin",",","y","ptin",",","i","l",",","i","r",",","j","s",",","j","n",")","print","(","dtxt","+","\"","x",",","y",",","dx","dy","\"",",","x",",","y",",","dx",",","dy",")","print","(","dtxt","+","\"","x",",","y",",","dx","dy","\"",",","x",",","y",",","dx",",","dy",")","print","(","dtxt",",","j","s",",","i","l",",","emep","cdf",".","vals","[","0",",","j","s",",","i","l","]",",","emep","cdf",".","vals",".","min","(",")",",","emep","cdf",".","vals",".","max","(",")",")","print","(","dtxt",",","x",",","y",",","dx",",","dy",",","i","l",",","i","r",",","j","s",",","j","n",",","emep","cdf",".","varname",",","emep","cdf",".","vals",".","max","(",")",")","for","i","in","range","(","0",",","len","(","f00",")",")",":","#","if","var","is","array","print","(","i",",","f00","[","i","]",",","f10","[","i","]",",","f01","[","i","]",",","f11","[","i","]",",","value","[","i","]",")","if","minmax",":","return","value",",","minval",",","maxval","else",":","return","value"],"func_name":"get_vals","func_name_tokens":["get","vals"],"docstring":"Uses bi-linear interpolation to estmate value    of field vals at point xPt, yPt\nGet coordinates in model grid if polar stereo:\nif long xcoords are from 0 to 360, we shift Xpt\nelse:\nlon lat already ok\nNew more consistent check is point is inside grid. John 2018-01-16\nif xPt > EmepCdf.xmax or yPt > EmepCdf.ymax:\nreturn  err, err, err\nM17 Emep coords relative to grid LL point\nM17 x, y = RelXy(xPt, yPt, EmepCdf.x0,EmepCdf.y0,EmepCdf.dx,EmepCdf.dy)\nEmep coords relative to grid LL centre\nif EmepCdf.yAscending:\nelse:\nfrom N\nTMP!!!\nQUERY 180 if jS > 180:\nQUERY 180   print(dtxt+'OOPSjS ', xPt, yPt, iL,jS, xcoords.max(), ycoords.max())\nQUERY 180   sys.exit(0)\nGet data for a square at 0,0,  0,1 etc for bidirectional\nrelative to grid centre-points\nCrude.... O2017\nbidirectional interpolation\ntips from\nhttp://stackoverflow.com/questions/21816433/element-wise-array-maximum-function-in-numpy-more-than-two-arrays\n5 times faster:\n-------------------------------------------------------------------","docstring_tokens":["uses","bi","-","linear","interpolation","to","estmate","value","of","field","vals","at","point","x","pt",",","y","pt","get","coordinates","in","model","grid","if","polar","stereo",":","if","long","xcoords","are","from","0","to","360",",","we","shift","xpt","else",":","lon","lat","already","ok","new","more","consistent","check","is","point","is","inside","grid",".","john","2018","-","01","-","16","if","x","pt",">","emep","cdf",".","xmax","or","y","pt",">","emep","cdf",".","ymax",":","return","err",",","err",",","err","m17","emep","coords","relative","to","grid","ll","point","m17","x",",","y","=","rel","xy","(","x","pt",",","y","pt",",","emep","cdf",".","x0",",","emep","cdf",".","y0",",","emep","cdf",".","dx",",","emep","cdf",".","dy",")","emep","coords","relative","to","grid","ll","centre","if","emep","cdf",".","y","ascending",":","else",":","from","n","tmp","!","!","!","query","180","if","j","s",">","180",":","query","180","print","(","dtxt","+","'","oop","sj","s","'",",","x","pt",",","y","pt",",","i","l",",","j","s",",","xcoords",".","max","(",")",",","ycoords",".","max","(",")",")","query","180","sys",".","exit","(","0",")","get","data","for","a","square","at","0",",","0",",","0",",","1","etc","for","bidirectional","relative","to","grid","centre","-","points","crude",".",".",".",".","o2017","bidirectional","interpolation","tips","from","5","times","faster",":","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],"query":"Element-wise array maximum function in NumPy (more than two arrays)","query_tokens":["element","-","wise","array","maximum","function","in","num","py","(","more","than","two","arrays",")"]}
{"code":"def initShaders():    global Shaders    Shaders = [        ShaderProgram(None, []),                ShaderProgram('balloon', [            VertexShader(\"\"\"                varying vec3 normal;                void main() {                    // compute here for use in fragment shader                    normal = normalize(gl_NormalMatrix * gl_Normal);                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    gl_Position = ftransform();                }        ]),                ShaderProgram('viewNormalColor', [               VertexShader(\"\"\"                varying vec3 normal;                void main() {                    // compute here for use in fragment shader                    normal = normalize(gl_NormalMatrix * gl_Normal);                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    gl_Position = ftransform();                }        ]),                ShaderProgram('normalColor', [               VertexShader(\"\"\"                varying vec3 normal;                void main() {                    // compute here for use in fragment shader                    normal = normalize(gl_Normal);                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    gl_Position = ftransform();                }        ]),                ShaderProgram('shaded', [               VertexShader(\"\"\"                varying vec3 normal;                void main() {                    // compute here for use in fragment shader                    normal = normalize(gl_NormalMatrix * gl_Normal);                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    gl_Position = ftransform();                }        ]),                ShaderProgram('edgeHilight', [               VertexShader(\"\"\"                varying vec3 normal;                void main() {                    // compute here for use in fragment shader                    normal = normalize(gl_NormalMatrix * gl_Normal);                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    gl_Position = ftransform();                }        ]),                ShaderProgram('heightColor', [            VertexShader(\"\"\"                varying vec4 pos;                void main() {                    gl_FrontColor = gl_Color;                    gl_BackColor = gl_Color;                    pos = gl_Vertex;                    gl_Position = ftransform();                }        ], uniforms={'colorMap': [1, 1, 1, 1, 0.5, 1, 1, 0, 1]}),        ShaderProgram('pointSprite', [   ## allows specifying point size using normal.x            VertexShader(\"\"\"                void main() {                    gl_FrontColor=gl_Color;                    gl_PointSize = gl_Normal.x;                    gl_Position = ftransform();                } ","code_tokens":["def","init","shaders","(",")",":","global","shaders","shaders","=","[","shader","program","(","none",",","[","]",")",",","shader","program","(","'","balloon","'",",","[","vertex","shader","(","varying","vec3","normal",";","void","main","(",")","{","/","/","compute","here","for","use","in","fragment","shader","normal","=","normalize","(","gl","normal","matrix","*","gl","normal",")",";","gl","front","color","=","gl","color",";","gl","back","color","=","gl","color",";","gl","position","=","ftransform","(",")",";","}","]",")",",","shader","program","(","'","normal","color","'",",","[","vertex","shader","(","varying","vec3","normal",";","void","main","(",")","{","/","/","compute","here","for","use","in","fragment","shader","normal","=","normalize","(","gl","normal","matrix","*","gl","normal",")",";","gl","front","color","=","gl","color",";","gl","back","color","=","gl","color",";","gl","position","=","ftransform","(",")",";","}","]",")",",","shader","program","(","'","edge","hilight","'",",","[","vertex","shader","(","varying","vec4","pos",";","void","main","(",")","{","gl","front","color","=","gl","color",";","gl","back","color","=","gl","color",";","pos","=","gl","vertex",";","gl","position","=","ftransform","(",")",";","}","]",",","uniforms","=","{","'","color","map","'",":","[","1",",","1",",","1",",","1",",","0",".","5",",","1",",","1",",","0",",","1","]","}",")",",","shader","program","(","'","point","sprite","'",",","[","#","#","allows","specifying","point","size","using","normal",".","x","vertex","shader","(","\"","\"","\"","void","main","(",")","{","gl","front","color","=","gl","color",";","gl","point","size","=","gl","normal",".","x",";","gl","position","=","ftransform","(",")",";","}"],"func_name":"initShaders","func_name_tokens":["init","shaders"],"docstring":"increases fragment alpha as the normal turns orthogonal to the view\nthis is useful for viewing shells that enclose a volume (such as isosurfaces)            ),            FragmentShader(                varying vec3 normal;                void main() {                    vec4 color = gl_Color;                    color.w = min(color.w + 2.0 * color.w * pow(normal.x*normal.x + normal.y*normal.y, 5.0), 1.0);                    gl_FragColor = color;                }            )\ncolors fragments based on face normals relative to view\nThis means that the colors will change depending on how the view is rotated            ),            FragmentShader(                varying vec3 normal;                void main() {                    vec4 color = gl_Color;                    color.x = (normal.x + 1.0) * 0.5;                    color.y = (normal.y + 1.0) * 0.5;                    color.z = (normal.z + 1.0) * 0.5;                    gl_FragColor = color;                }            )\ncolors fragments based on absolute face normals.            ),            FragmentShader(                varying vec3 normal;                void main() {                    vec4 color = gl_Color;                    color.x = (normal.x + 1.0) * 0.5;                    color.y = (normal.y + 1.0) * 0.5;                    color.z = (normal.z + 1.0) * 0.5;                    gl_FragColor = color;                }            )\nvery simple simulation of lighting.\nThe light source position is always relative to the camera.            ),            FragmentShader(                varying vec3 normal;                void main() {                    float p = dot(normal, normalize(vec3(1.0, -1.0, -1.0)));                    p = p < 0. ? 0. : p * 0.8;                    vec4 color = gl_Color;                    color.x = color.x * (0.2 + p);                    color.y = color.y * (0.2 + p);                    color.z = color.z * (0.2 + p);                    gl_FragColor = color;                }            )\ncolors get brighter near edges of object            ),            FragmentShader(                varying vec3 normal;                void main() {                    vec4 color = gl_Color;                    float s = pow(normal.x*normal.x + normal.y*normal.y, 2.0);                    color.x = color.x + s * (1.0-color.x);                    color.y = color.y + s * (1.0-color.y);                    color.z = color.z + s * (1.0-color.z);                    gl_FragColor = color;                }            )\ncolors fragments by z-value.\nThis is useful for coloring surface plots by height.\nThis shader uses a uniform called \"colorMap\" to determine how to map the colors:\n(set the values like this: shader['uniformMap'] = array([...])            ),            FragmentShader(                uniform float colorMap[9];                varying vec4 pos;                //out vec4 gl_FragColor;   // only needed for later glsl versions                //in vec4 gl_Color;                void main() {                    vec4 color = gl_Color;                    color.x = colorMap[0] * (pos.z + colorMap[1]);                    if (colorMap[2] != 1.0)                        color.x = pow(color.x, colorMap[2]);                    color.x = color.x  1. ? 1. : color.x);                                        color.y = colorMap[3] * (pos.z + colorMap[4]);                    if (colorMap[5] != 1.0)                        color.y = pow(color.y, colorMap[5]);                    color.y = color.y  1. ? 1. : color.y);                                        color.z = colorMap[6] * (pos.z + colorMap[7]);                    if (colorMap[8] != 1.0)                        color.z = pow(color.z, colorMap[8]);                    color.z = color.z  1. ? 1. : color.z);                                        color.w = 1.0;                    gl_FragColor = color;                }            ),\nSee:\nhttp://stackoverflow.com/questions/9609423/applying-part-of-a-texture-sprite-sheet-texture-map-to-a-point-sprite-in-ios\nhttp://stackoverflow.com/questions/3497068/textured-points-in-opengl-es-2-0\n),\nFragmentShader(\nversion 120\nuniform sampler2D texture;\nvoid main ( )\n{\n}\n)        ]),    ]CompiledShaderPrograms = {}","docstring_tokens":["increases","fragment","alpha","as","the","normal","turns","orthogonal","to","the","view","this","is","useful","for","viewing","shells","that","enclose","a","volume","(","such","as","isosurfaces",")",")",",","fragment","shader","(","varying","vec3","normal",";","void","main","(",")","{","vec4","color","=","gl","color",";","color",".","w","=","min","(","color",".","w","+","2",".","0","*","color",".","w","*","pow","(","normal",".","x","*","normal",".","x","+","normal",".","y","*","normal",".","y",",","5",".","0",")",",","1",".","0",")",";","gl","frag","color","=","color",";","}",")","colors","fragments","based","on","face","normals","relative","to","view","this","means","that","the","colors","will","change","depending","on","how","the","view","is","rotated",")",",","fragment","shader","(","varying","vec3","normal",";","void","main","(",")","{","vec4","color","=","gl","color",";","color",".","x","=","(","normal",".","x","+","1",".","0",")","*","0",".","5",";","color",".","y","=","(","normal",".","y","+","1",".","0",")","*","0",".","5",";","color",".","z","=","(","normal",".","z","+","1",".","0",")","*","0",".","5",";","gl","frag","color","=","color",";","}",")","colors","fragments","based","on","absolute","face","normals",".",")",",","fragment","shader","(","varying","vec3","normal",";","void","main","(",")","{","vec4","color","=","gl","color",";","color",".","x","=","(","normal",".","x","+","1",".","0",")","*","0",".","5",";","color",".","y","=","(","normal",".","y","+","1",".","0",")","*","0",".","5",";","color",".","z","=","(","normal",".","z","+","1",".","0",")","*","0",".","5",";","gl","frag","color","=","color",";","}",")","very","simple","simulation","of","lighting",".","the","light","source","position","is","always","relative","to","the","camera",".",")",",","fragment","shader","(","varying","vec3","normal",";","void","main","(",")","{","float","p","=","dot","(","normal",",","normalize","(","vec3","(","1",".","0",",","-","1",".","0",",","-","1",".","0",")",")",")",";","p","=","p","<","0",".","?","0",".",":","p","*","0",".","8",";","vec4","color","=","gl","color",";","color",".","x","=","color",".","x","*","(","0",".","2","+","p",")",";","color",".","y","=","color",".","y","*","(","0",".","2","+","p",")",";","color",".","z","=","color",".","z","*","(","0",".","2","+","p",")",";","gl","frag","color","=","color",";","}",")","colors","get","brighter","near","edges","of","object",")",",","fragment","shader","(","varying","vec3","normal",";","void","main","(",")","{","vec4","color","=","gl","color",";","float","s","=","pow","(","normal",".","x","*","normal",".","x","+","normal",".","y","*","normal",".","y",",","2",".","0",")",";","color",".","x","=","color",".","x","+","s","*","(","1",".","0","-","color",".","x",")",";","color",".","y","=","color",".","y","+","s","*","(","1",".","0","-","color",".","y",")",";","color",".","z","=","color",".","z","+","s","*","(","1",".","0","-","color",".","z",")",";","gl","frag","color","=","color",";","}",")","colors","fragments","by","z","-","value",".","this","is","useful","for","coloring","surface","plots","by","height",".","this","shader","uses","a","uniform","called","\"","color","map","\"","to","determine","how","to","map","the","colors",":","(","set","the","values","like","this",":","shader","[","'","uniform","map","'","]","=","array","(","[",".",".",".","]",")",")",",","fragment","shader","(","uniform","float","color","map","[","9","]",";","varying","vec4","pos",";","/","/","out","vec4","gl","frag","color",";","/","/","only","needed","for","later","glsl","versions","/","/","in","vec4","gl","color",";","void","main","(",")","{","vec4","color","=","gl","color",";","color",".","x","=","color","map","[","0","]","*","(","pos",".","z","+","color","map","[","1","]",")",";","if","(","color","map","[","2","]","!","=","1",".","0",")","color",".","x","=","pow","(","color",".","x",",","color","map","[","2","]",")",";","color",".","x","=","color",".","x","1",".","?","1",".",":","color",".","x",")",";","color",".","y","=","color","map","[","3","]","*","(","pos",".","z","+","color","map","[","4","]",")",";","if","(","color","map","[","5","]","!","=","1",".","0",")","color",".","y","=","pow","(","color",".","y",",","color","map","[","5","]",")",";","color",".","y","=","color",".","y","1",".","?","1",".",":","color",".","y",")",";","color",".","z","=","color","map","[","6","]","*","(","pos",".","z","+","color","map","[","7","]",")",";","if","(","color","map","[","8","]","!","=","1",".","0",")","color",".","z","=","pow","(","color",".","z",",","color","map","[","8","]",")",";","color",".","z","=","color",".","z","1",".","?","1",".",":","color",".","z",")",";","color",".","w","=","1",".","0",";","gl","frag","color","=","color",";","}",")",",","see",":",")",",","fragment","shader","(","version","120","uniform","sampler2d","texture",";","void","main","(",")","{","}",")","]",")",",","]","compiled","shader","programs","=","{","}"],"query":"Textured points in OpenGL ES 2.0?","query_tokens":["textured","points","in","open","gl","es","2",".","0","?"]}
{"code":"def pmem():    process = psutil.Process(os.getpid())    print(process.memory_info().rss)","code_tokens":["def","pmem","(",")",":","process","=","psutil",".","process","(","os",".","getpid","(",")",")","print","(","process",".","memory","info","(",")",".","rss",")"],"func_name":"pmem","func_name_tokens":["pmem"],"docstring":"Thanks to https://stackoverflow.com/questions/938733/total-memory-used-by-python-process","docstring_tokens":["thanks","to"],"query":"Total memory used by Python process?","query_tokens":["total","memory","used","by","python","process","?"]}
{"code":"def execute(workload_result_file, command_lines):    proc = subprocess.Popen(\" \".join(command_lines), shell=True, bufsize=1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)    count = 100    last_time=0    log_file = open(workload_result_file, 'w')    lines_iterator = iter(proc.stdout.readline, b\"\")    for line in lines_iterator:        count += 1        if count > 100 or time()-last_time>1: # refresh terminal size for 100 lines or each seconds            count, last_time = 0, time()            width, height = get_terminal_size()            width -= 1        try:            line = line.rstrip()            log_file.write(line+\"\\n\")            log_file.flush()        except KeyboardInterrupt:            proc.terminate()            break        line = line.decode('utf-8')        line = replace_tab_to_space(line)        lline = line.lower()","code_tokens":["def","execute","(","workload","result","file",",","command","lines",")",":","proc","=","subprocess",".","popen","(","\"","\"",".","join","(","command","lines",")",",","shell","=","true",",","bufsize","=","1",",","stdout","=","subprocess",".","pipe",",","stderr","=","subprocess",".","stdout",")","count","=","100","last","time","=","0","log","file","=","open","(","workload","result","file",",","'","w","'",")","lines","iterator","=","iter","(","proc",".","stdout",".","readline",",","b","\"","\"",")","for","line","in","lines","iterator",":","count","+","=","1","if","count",">","100","or","time","(",")","-","last","time",">","1",":","#","refresh","terminal","size","for","100","lines","or","each","seconds","count",",","last","time","=","0",",","time","(",")","width",",","height","=","get","terminal","size","(",")","width","-","=","1","try",":","line","=","line",".","rstrip","(",")","log","file",".","write","(","line","+","\"","\\n","\"",")","log","file",".","flush","(",")","except","keyboard","interrupt",":","proc",".","terminate","(",")","break","line","=","line",".","decode","(","'","utf","-","8","'",")","line","=","replace","tab","to","space","(","line",")","lline","=","line",".","lower","(",")"],"func_name":"execute","func_name_tokens":["execute"],"docstring":"see http://stackoverflow.com/a/4417735/1442961\nprint \"{Red}log=>{Color_Off}\".format(**Color), line","docstring_tokens":["see","print","\"","{","red","}","log","=",">","{","color","off","}","\"",".","format","(","*","*","color",")",",","line"],"query":"Constantly print Subprocess output while process is running","query_tokens":["constantly","print","subprocess","output","while","process","is","running"]}
{"code":"    def inv_timeline(r, **attr):               if r.representation == \"html\"  and  (r.name == \"recv\" or \\                                             r.name == \"send\"):                        T = current.T            db = current.db            s3db = current.s3db            request = current.request            response = current.response            s3 = response.s3            s3.scripts.append(\"/%s/static/scripts/simile/timeline/timeline-api.js\" % request.application)            if s3.debug:                s3.scripts.append(\"/%s/static/scripts/S3/s3.timeline.js\" % request.application)            else:                s3.scripts.append(\"/%s/static/scripts/S3/s3.timeline.min.js\" % request.application)                       rows1 = db(db.inv_send.id > 0).select()     # select rows from inv_send            rows2 = db(db.inv_recv.id > 0).select()     # select rows form inv_recv                       if r.record:                rows = [r.record]            else:                r.resource.load(limit=2000)                rows = r.resource._rows                                    data = {\"dateTimeFormat\": \"iso8601\",                    }            now = request.utcnow            tl_start = tl_end = now            events = []            if r.name is \"send\":                rr = (rows, rows2)            else:                rr = (rows1, rows)            for (row_send, row_recv) in itertools.izip_longest(rr[0], rr[0]):                start = row_send.date  or \"\"                 if start:                    if start < tl_start:                        tl_start = start                    if start > tl_end:                        tl_end = start                    start = start.isoformat()                end = row_recv.date or \"\"                 if end:                    if end > tl_end:                        tl_end = end                    end = end.isoformat()                                    events.append({\"start\": start,                               \"end\": end,                               })            data[\"events\"] = events            data = json.dumps(data, separators=SEPARATORS)            code = \"\".join((            s3.js_global.append(code)","code_tokens":["def","inv","timeline","(","r",",","*","*","attr",")",":","if","r",".","representation","=","=","\"","html","\"","and","(","r",".","name","=","=","\"","recv","\"","or","\\","r",".","name","=","=","\"","send","\"",")",":","t","=","current",".","t","db","=","current",".","db","s3db","=","current",".","s3db","request","=","current",".","request","response","=","current",".","response","s3","=","response",".","s3","s3",".","scripts",".","append","(","\"","/","%","s","/","static","/","scripts","/","simile","/","timeline","/","timeline","-","api",".","js","\"","%","request",".","application",")","if","s3",".","debug",":","s3",".","scripts",".","append","(","\"","/","%","s","/","static","/","scripts","/","s3","/","s3",".","timeline",".","js","\"","%","request",".","application",")","else",":","s3",".","scripts",".","append","(","\"","/","%","s","/","static","/","scripts","/","s3","/","s3",".","timeline",".","min",".","js","\"","%","request",".","application",")","rows1","=","db","(","db",".","inv","send",".","id",">","0",")",".","select","(",")","#","select","rows","from","inv","send","rows2","=","db","(","db",".","inv","recv",".","id",">","0",")",".","select","(",")","#","select","rows","form","inv","recv","if","r",".","record",":","rows","=","[","r",".","record","]","else",":","r",".","resource",".","load","(","limit","=","2000",")","rows","=","r",".","resource",".","rows","data","=","{","\"","date","time","format","\"",":","\"","iso8601","\"",",","}","now","=","request",".","utcnow","tl","start","=","tl","end","=","now","events","=","[","]","if","r",".","name","is","\"","send","\"",":","rr","=","(","rows",",","rows2",")","else",":","rr","=","(","rows1",",","rows",")","for","(","row","send",",","row","recv",")","in","itertools",".","izip","longest","(","rr","[","0","]",",","rr","[","0","]",")",":","start","=","row","send",".","date","or","\"","\"","if","start",":","if","start","<","tl","start",":","tl","start","=","start","if","start",">","tl","end",":","tl","end","=","start","start","=","start",".","isoformat","(",")","end","=","row","recv",".","date","or","\"","\"","if","end",":","if","end",">","tl","end",":","tl","end","=","end","end","=","end",".","isoformat","(",")","events",".","append","(","{","\"","start","\"",":","start",",","\"","end","\"",":","end",",","}",")","data","[","\"","events","\"","]","=","events","data","=","json",".","dumps","(","data",",","separators","=","separators",")","code","=","\"","\"",".","join","(","(","s3",".","js","global",".","append","(","code",")"],"func_name":"inv_timeline","func_name_tokens":["inv","timeline"],"docstring":"Display the Incidents on a Simile Timeline            http://www.simile-widgets.org/wiki/Reference_Documentation_for_Timeline            @ToDo: Play button            http://www.simile-widgets.org/wiki/Timeline_Moving_the_Timeline_via_Javascript\nAdd core Simile Code\nAdd our controlled script\nAdd our data\n@ToDo: Make this the initial data & then collect extra via REST with a stylesheet\nadd in JS using S3.timeline.eventSource.addMany(events) where events is a []\nSingle record\nMultiple records\n@ToDo: Load all records & sort to closest in time\nhttp://stackoverflow.com/questions/7327689/how-to-generate-a-sequence-of-future-datetimes-in-python-and-determine-nearest-d\nsend  Dates\nrecv date\nappend events\n\"title\": row.name,\n\"caption\": row.comments or \"\",\n\"description\": row.comments or \"\",\n@ToDo: Colour based on Category (More generically: Resource or Resource Type)\n\"color\" : \"blue\",S3.timeline.data=, data, S3.timeline.tl_start=', tl_start.isoformat(), \"S3.timeline.tl_end=', tl_end.isoformat(), \"S3.timeline.now=', now.isoformat(), '))\nControl our code in static/scripts/S3/s3.timeline.js\nCreate the DIV","docstring_tokens":["display","the","incidents","on","a","simile","timeline","@","to","do",":","play","button","add","core","simile","code","add","our","controlled","script","add","our","data","@","to","do",":","make","this","the","initial","data","&","then","collect","extra","via","rest","with","a","stylesheet","add","in","js","using","s3",".","timeline",".","event","source",".","add","many","(","events",")","where","events","is","a","[","]","single","record","multiple","records","@","to","do",":","load","all","records","&","sort","to","closest","in","time","send","dates","recv","date","append","events","\"","title","\"",":","row",".","name",",","\"","caption","\"",":","row",".","comments","or","\"","\"",",","\"","description","\"",":","row",".","comments","or","\"","\"",",","@","to","do",":","colour","based","on","category","(","more","generically",":","resource","or","resource","type",")","\"","color","\"",":","\"","blue","\"",",","s3",".","timeline",".","data","=",",","data",",","s3",".","timeline",".","tl","start","=","'",",","tl","start",".","isoformat","(",")",",","\"","s3",".","timeline",".","tl","end","=","'",",","tl","end",".","isoformat","(",")",",","\"","s3",".","timeline",".","now","=","'",",","now",".","isoformat","(",")",",","'",")",")","control","our","code","in","static","/","scripts","/","s3","/","s3",".","timeline",".","js","create","the","div"],"query":"How to generate a sequence of future datetimes in Python and determine nearest datetime from set","query_tokens":["how","to","generate","a","sequence","of","future","datetimes","in","python","and","determine","nearest","datetime","from","set"]}
{"code":"def md5ForFile(f, block_size=2**20):    md5 = hashlib.md5()    while True:        data = f.read(block_size)        if not data:            break        md5.update(data)    return md5.hexdigest()SUPPRESSIONS = '--suppressions=' + os.path.join(os.path.dirname(__file__), '..', '..', '..', 'misc', 'seqan.supp')VALGRIND_FLAGS = [SUPPRESSIONS] + '--error-exitcode=1 -q --tool=memcheck --leak-check=yes --show-reachable=yes --workaround-gcc296-bugs=yes --num-callers=50 --'.split()VALGRIND_PATH = '/usr/bin/valgrind'","code_tokens":["def","md5for","file","(","f",",","block","size","=","2","*","*","20",")",":","md5","=","hashlib",".","md5","(",")","while","true",":","data","=","f",".","read","(","block","size",")","if","not","data",":","break","md5",".","update","(","data",")","return","md5",".","hexdigest","(",")","suppressions","=","'","-","-","suppressions","=","'","+","os",".","path",".","join","(","os",".","path",".","dirname","(","file",")",",","'",".",".","'",",","'",".",".","'",",","'",".",".","'",",","'","misc","'",",","'","seqan",".","supp","'",")","valgrind","flags","=","[","suppressions","]","+","'","-","-","error","-","exitcode","=","1","-","q","-","-","tool","=","memcheck","-","-","leak","-","check","=","yes","-","-","show","-","reachable","=","yes","-","-","workaround","-","gcc296","-","bugs","=","yes","-","-","num","-","callers","=","50","-","-","'",".","split","(",")","valgrind","path","=","'","/","usr","/","bin","/","valgrind","'"],"func_name":"md5ForFile","func_name_tokens":["md5for","file"],"docstring":"Compute MD5 of a file.    Taken from http://stackoverflow.com/a/1131255/84349.\nValgrind flags, taken from CMake output, ideally given to test script by CMake?","docstring_tokens":["compute","md5","of","a","file",".","taken","from","valgrind","flags",",","taken","from","c","make","output",",","ideally","given","to","test","script","by","c","make","?"],"query":"Get MD5 hash of big files in Python","query_tokens":["get","md5","hash","of","big","files","in","python"]}
{"code":"def unique(seq):","code_tokens":["def","unique","(","seq",")",":"],"func_name":"unique","func_name_tokens":["unique"],"docstring":"use this instead of list(set()) to preserve order of the original list.\tThanks to Stackoverflow: http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order\tseen = set()\tseen_add = seen.add\treturn [ x for x in seq if not (x in seen or seen_add(x)) ]","docstring_tokens":["use","this","instead","of","list","(","set","(",")",")","to","preserve","order","of","the","original","list",".","thanks","to","stackoverflow",":","seen","=","set","(",")","seen","add","=","seen",".","add","return","[","x","for","x","in","seq","if","not","(","x","in","seen","or","seen","add","(","x",")",")","]"],"query":"How do you remove duplicates from a list whilst preserving order?","query_tokens":["how","do","you","remove","duplicates","from","a","list","whilst","preserving","order","?"]}
{"code":"    def _do_jump_table_detection(self, f):        class BB_TYPE:            NONE  = 0  # Seemingly not associated with a switch            VALUE = 1  # A simple value compare (cmp and jmp)            RANGE = 2  # A range compare (cmp and jl/jle/jg/jge)            TABLE = 3  # A jump to a jump table (anything with [_+_*(4,8)]        bb_types = {}        for bb in f.iter_bbs():            bb_type = (BB_TYPE.NONE, None)            for i, ins in enumerate(bb.instructions):                if any(o.type == Operand.MEM and o.scale in [4,8] for o in ins.operands):                    bb_type = (BB_TYPE.TABLE, ins)                    break            cmp_ins = None            for i, ins in enumerate(bb.instructions):                if ins.mnemonic == 'cmp': # Anything else? Is sub used in ranges in clang?                    cmp_ins = ins                elif cmp_ins and ins.is_jump() and ins.mnemonic in ('jb','jnae','jnb','jae','jbe',                                                                    'jna','ja','jnbe','jl','jnge',                                                                    'jge','jnl','jle','jng','jg','jnle'):                    bb_type = (BB_TYPE.RANGE, cmp_ins)            cmp_ins = None            for i, ins in enumerate(bb.instructions):                if ins.mnemonic in ('cmp', 'test', 'sub'): # TODO: Properly check for clang's use of `sub`                    cmp_ins = ins                elif cmp_ins and ins.mnemonic in ('je', 'jne'):                    bb_type = (BB_TYPE.VALUE, cmp_ins)            logging.debug(\"Marking BB at {} as type {}\".format(hex(bb.address), bb_type))            bb_types[bb.address] = bb_type        table_types = {}        class TABLE_TYPE:            ADDR_REL = 0  # Values in the table are relative to a constant loaded elsewhere            ABS = 1       # Values in the table are absolute        ins_to_table = []        for bb in f.iter_bbs():            if bb_types[bb.address][0] == BB_TYPE.TABLE:                for ins in bb.instructions:                    if ins.mnemonic == 'lea' and ins.operands[1].type == Operand.MEM:                        insn_with_mem_op = bb_types[bb.address][1]                        if len(insn_with_mem_op.operands) > 1 and insn_with_mem_op.operands[1].type == Operand.MEM:                            table_scale = insn_with_mem_op.operands[1].scale                            table_addr = ins.address + ins.size + ins.operands[1].disp                            logging.debug(\"Marking table at {} as an ADDR_REL table\".format(hex(table_addr)))                            table_types[table_addr] = (TABLE_TYPE.ADDR_REL, table_scale, ins.address + ins.size)                            ins_to_table.append((ins.address, table_addr))                            break                    elif bb_types[bb.address][1].operands[-1].type == Operand.MEM:                        mem_offset = bb_types[bb.address][1].operands[-1].disp                        if mem_offset:                            logging.debug(\"Marking table at {} as an ABS table\".format(hex(mem_offset)))                            table_types[mem_offset] = (TABLE_TYPE.ABS, bb_types[bb.address][1].operands[-1].scale)                            ins_to_table.append((ins.address, mem_offset))                            break                    logging.debug(\"Couldn't find anything with a table offset in BB at {}\".format(hex(bb.address)))        table_types[self.executable.executable_segment_vaddr() + self.executable.executable_segment_size()] = None","code_tokens":["def","do","jump","table","detection","(","self",",","f",")",":","class","bb","type",":","none","=","0","#","seemingly","not","associated","with","a","switch","value","=","1","#","a","simple","value","compare","(","cmp","and","jmp",")","range","=","2","#","a","range","compare","(","cmp","and","jl","/","jle","/","jg","/","jge",")","table","=","3","#","a","jump","to","a","jump","table","(","anything","with","[","+","*","(","4",",","8",")","]","bb","types","=","{","}","for","bb","in","f",".","iter","bbs","(",")",":","bb","type","=","(","bb","type",".","none",",","none",")","for","i",",","ins","in","enumerate","(","bb",".","instructions",")",":","if","any","(","o",".","type","=","=","operand",".","mem","and","o",".","scale","in","[","4",",","8","]","for","o","in","ins",".","operands",")",":","bb","type","=","(","bb","type",".","table",",","ins",")","break","cmp","ins","=","none","for","i",",","ins","in","enumerate","(","bb",".","instructions",")",":","if","ins",".","mnemonic","=","=","'","cmp","'",":","#","anything","else","?","is","sub","used","in","ranges","in","clang","?","cmp","ins","=","ins","elif","cmp","ins","and","ins",".","is","jump","(",")","and","ins",".","mnemonic","in","(","'","jb","'",",","'","jnae","'",",","'","jnb","'",",","'","jae","'",",","'","jbe","'",",","'","jna","'",",","'","ja","'",",","'","jnbe","'",",","'","jl","'",",","'","jnge","'",",","'","jge","'",",","'","jnl","'",",","'","jle","'",",","'","jng","'",",","'","jg","'",",","'","jnle","'",")",":","bb","type","=","(","bb","type",".","range",",","cmp","ins",")","cmp","ins","=","none","for","i",",","ins","in","enumerate","(","bb",".","instructions",")",":","if","ins",".","mnemonic","in","(","'","cmp","'",",","'","test","'",",","'","sub","'",")",":","#","todo",":","properly","check","for","clang","'","s","use","of","`","sub","`","cmp","ins","=","ins","elif","cmp","ins","and","ins",".","mnemonic","in","(","'","je","'",",","'","jne","'",")",":","bb","type","=","(","bb","type",".","value",",","cmp","ins",")","logging",".","debug","(","\"","marking","bb","at","{","}","as","type","{","}","\"",".","format","(","hex","(","bb",".","address",")",",","bb","type",")",")","bb","types","[","bb",".","address","]","=","bb","type","table","types","=","{","}","class","table","type",":","addr","rel","=","0","#","values","in","the","table","are","relative","to","a","constant","loaded","elsewhere","abs","=","1","#","values","in","the","table","are","absolute","ins","to","table","=","[","]","for","bb","in","f",".","iter","bbs","(",")",":","if","bb","types","[","bb",".","address","]","[","0","]","=","=","bb","type",".","table",":","for","ins","in","bb",".","instructions",":","if","ins",".","mnemonic","=","=","'","lea","'","and","ins",".","operands","[","1","]",".","type","=","=","operand",".","mem",":","insn","with","mem","op","=","bb","types","[","bb",".","address","]","[","1","]","if","len","(","insn","with","mem","op",".","operands",")",">","1","and","insn","with","mem","op",".","operands","[","1","]",".","type","=","=","operand",".","mem",":","table","scale","=","insn","with","mem","op",".","operands","[","1","]",".","scale","table","addr","=","ins",".","address","+","ins",".","size","+","ins",".","operands","[","1","]",".","disp","logging",".","debug","(","\"","marking","table","at","{","}","as","an","addr","rel","table","\"",".","format","(","hex","(","table","addr",")",")",")","table","types","[","table","addr","]","=","(","table","type",".","addr","rel",",","table","scale",",","ins",".","address","+","ins",".","size",")","ins","to","table",".","append","(","(","ins",".","address",",","table","addr",")",")","break","elif","bb","types","[","bb",".","address","]","[","1","]",".","operands","[","-","1","]",".","type","=","=","operand",".","mem",":","mem","offset","=","bb","types","[","bb",".","address","]","[","1","]",".","operands","[","-","1","]",".","disp","if","mem","offset",":","logging",".","debug","(","\"","marking","table","at","{","}","as","an","abs","table","\"",".","format","(","hex","(","mem","offset",")",")",")","table","types","[","mem","offset","]","=","(","table","type",".","abs",",","bb","types","[","bb",".","address","]","[","1","]",".","operands","[","-","1","]",".","scale",")","ins","to","table",".","append","(","(","ins",".","address",",","mem","offset",")",")","break","logging",".","debug","(","\"","couldn","'","t","find","anything","with","a","table","offset","in","bb","at","{","}","\"",".","format","(","hex","(","bb",".","address",")",")",")","table","types","[","self",".","executable",".","executable","segment","vaddr","(",")","+","self",".","executable",".","executable","segment","size","(",")","]","=","none"],"func_name":"_do_jump_table_detection","func_name_tokens":["do","jump","table","detection"],"docstring":"Basic idea is to label each BB as one of these types based on its contents\nBB address -> (type, important instruction)\nTable detection\nNOTE: We *should* do full register tracing if this instruction is a mov/lea,\nbut we can relatively safely assume that the jump at the end of the BB\nwill be a `jmp {reg}` if this is indeed a jump table\nNOTE: Value tables will be marked as a TABLE, but sanity checking later on\nprevents values from being interpreted as jump destinations\nRange detection\nTODO: replace `in ...` with `not in`\nValue detection\nStart address of table -> (type, scale, {relative location})\nTODO: Look for _CSWTCH symbols\nSpecial-case the various ways of doing a jump table\nOption 1 (seemingly most common): lea {reg}, {ip-rel const}\nNOTE: This could either be a jump table or a value table\nOption 2: offset is directly in the jumps mem. operand\nAdd the end of the segment as an upper bound\nhttp://stackoverflow.com/questions/32030412/twos-complement-sign-extension-python","docstring_tokens":["basic","idea","is","to","label","each","bb","as","one","of","these","types","based","on","its","contents","bb","address","-",">","(","type",",","important","instruction",")","table","detection","note",":","we","*","should","*","do","full","register","tracing","if","this","instruction","is","a","mov","/","lea",",","but","we","can","relatively","safely","assume","that","the","jump","at","the","end","of","the","bb","will","be","a","`","jmp","{","reg","}","`","if","this","is","indeed","a","jump","table","note",":","value","tables","will","be","marked","as","a","table",",","but","sanity","checking","later","on","prevents","values","from","being","interpreted","as","jump","destinations","range","detection","todo",":","replace","`","in",".",".",".","`","with","`","not","in","`","value","detection","start","address","of","table","-",">","(","type",",","scale",",","{","relative","location","}",")","todo",":","look","for","cswtch","symbols","special","-","case","the","various","ways","of","doing","a","jump","table","option","1","(","seemingly","most","common",")",":","lea","{","reg","}",",","{","ip","-","rel","const","}","note",":","this","could","either","be","a","jump","table","or","a","value","table","option","2",":","offset","is","directly","in","the","jumps","mem",".","operand","add","the","end","of","the","segment","as","an","upper","bound"],"query":"Two's complement sign extension python?","query_tokens":["two","'","s","complement","sign","extension","python","?"]}
{"code":"def cartesian(arrays, out=None):    arrays = [np.asarray(x).ravel() for x in arrays]    dtype = arrays[0].dtype    n = np.prod([x.size for x in arrays])    if out is None:        out = np.empty([n, len(arrays)], dtype=dtype)    m = n / arrays[0].size    out[:, 0] = np.repeat(arrays[0], m)    if arrays[1:]:        cartesian(arrays[1:], out=out[0:m, 1:])        for j in xrange(1, arrays[0].size):            out[j * m:(j + 1) * m, 1:] = out[0:m, 1:]    return out","code_tokens":["def","cartesian","(","arrays",",","out","=","none",")",":","arrays","=","[","np",".","asarray","(","x",")",".","ravel","(",")","for","x","in","arrays","]","dtype","=","arrays","[","0","]",".","dtype","n","=","np",".","prod","(","[","x",".","size","for","x","in","arrays","]",")","if","out","is","none",":","out","=","np",".","empty","(","[","n",",","len","(","arrays",")","]",",","dtype","=","dtype",")","m","=","n","/","arrays","[","0","]",".","size","out","[",":",",","0","]","=","np",".","repeat","(","arrays","[","0","]",",","m",")","if","arrays","[","1",":","]",":","cartesian","(","arrays","[","1",":","]",",","out","=","out","[","0",":","m",",","1",":","]",")","for","j","in","xrange","(","1",",","arrays","[","0","]",".","size",")",":","out","[","j","*","m",":","(","j","+","1",")","*","m",",","1",":","]","=","out","[","0",":","m",",","1",":","]","return","out"],"func_name":"cartesian","func_name_tokens":["cartesian"],"docstring":"Generate a cartesian product of input arrays.    Parameters    ----------    arrays : list of array-like        1-D arrays to form the cartesian product of.    out : ndarray        Array to place the cartesian product in.    Returns    -------    out : ndarray        2-D array of shape (M, len(arrays)) containing cartesian products        formed of input arrays.    Examples    --------    >>> cartesian(([1, 2, 3], [4, 5], [6, 7]))    array([[1, 4, 6],           [1, 4, 7],           [1, 5, 6],           [1, 5, 7],           [2, 4, 6],           [2, 4, 7],           [2, 5, 6],           [2, 5, 7],           [3, 4, 6],           [3, 4, 7],           [3, 5, 6],           [3, 5, 7]])    References    ----------    http://stackoverflow.com/q/1208118","docstring_tokens":["generate","a","cartesian","product","of","input","arrays",".","parameters","-","-","-","-","-","-","-","-","-","-","arrays",":","list","of","array","-","like","1","-","d","arrays","to","form","the","cartesian","product","of",".","out",":","ndarray","array","to","place","the","cartesian","product","in",".","returns","-","-","-","-","-","-","-","out",":","ndarray","2","-","d","array","of","shape","(","m",",","len","(","arrays",")",")","containing","cartesian","products","formed","of","input","arrays",".","examples","-","-","-","-","-","-","-","-",">",">",">","cartesian","(","(","[","1",",","2",",","3","]",",","[","4",",","5","]",",","[","6",",","7","]",")",")","array","(","[","[","1",",","4",",","6","]",",","[","1",",","4",",","7","]",",","[","1",",","5",",","6","]",",","[","1",",","5",",","7","]",",","[","2",",","4",",","6","]",",","[","2",",","4",",","7","]",",","[","2",",","5",",","6","]",",","[","2",",","5",",","7","]",",","[","3",",","4",",","6","]",",","[","3",",","4",",","7","]",",","[","3",",","5",",","6","]",",","[","3",",","5",",","7","]","]",")","references","-","-","-","-","-","-","-","-","-","-"],"query":"Using numpy to build an array of all combinations of two arrays","query_tokens":["using","numpy","to","build","an","array","of","all","combinations","of","two","arrays"]}
{"code":"except:    passdef _get_R_output(obj):    from io import StringIO    import sys    old_stdout = sys.stdout    sys.stdout = mystdout = StringIO()    robjects.r('options')(width=200)  # Controls wrapping the output    sys.stdout = old_stdout    return mystdout.getvalue()","code_tokens":["except",":","passdef","get","r","output","(","obj",")",":","from","io","import","string","io","import","sys","old","stdout","=","sys",".","stdout","sys",".","stdout","=","mystdout","=","string","io","(",")","robjects",".","r","(","'","options","'",")","(","width","=","200",")","#","controls","wrapping","the","output","sys",".","stdout","=","old","stdout","return","mystdout",".","getvalue","(",")"],"func_name":"_get_R_output","func_name_tokens":["get","r","output"],"docstring":"http://stackoverflow.com/questions/2128806/python-rpy2-cant-import-a-bunch-of-packagesrun_power_analysis = False\nshould this analysis included?t = gettext.translation('cogstat', os.path.dirname(os.path.abspath(__file__))+'/locale/', [csc.language], fallback=True)_ = t.gettext\nVarious things\nReturns the output of R, printing obj.\nprint obj","docstring_tokens":["=","false","should","this","analysis","included","?","t","=","gettext",".","translation","(","'","cogstat","'",",","os",".","path",".","dirname","(","os",".","path",".","abspath","(","file",")",")","+","'","/","locale","/","'",",","[","csc",".","language","]",",","fallback","=","true",")","=","t",".","gettext","various","things","returns","the","output","of","r",",","printing","obj",".","print","obj"],"query":"Python - Rpy2 - Can't import a bunch of packages","query_tokens":["python","-","rpy2","-","can","'","t","import","a","bunch","of","packages"]}
{"code":"    def __init__(self, code, reason, headers, sock, connection=None):        self.reason = reason        self.status = code        self.headers = headers        self.trailers = None        self._sock = sock        self._expect_close = False        if b'close' in self.headers.get(b'connection', []):            self._expect_close = True        try:            self._length = int(self.headers[b'content-length'][0])        except KeyError:            self._length = None        self._chunked = (            b'chunked' in self.headers.get(b'transfer-encoding', [])        )        assert self._expect_close or self._length is not None or self._chunked        if b'gzip' in self.headers.get(b'content-encoding', []):            self._decompressobj = zlib.decompressobj(16 + zlib.MAX_WBITS)","code_tokens":["def","init","(","self",",","code",",","reason",",","headers",",","sock",",","connection","=","none",")",":","self",".","reason","=","reason","self",".","status","=","code","self",".","headers","=","headers","self",".","trailers","=","none","self",".","sock","=","sock","self",".","expect","close","=","false","if","b","'","close","'","in","self",".","headers",".","get","(","b","'","connection","'",",","[","]",")",":","self",".","expect","close","=","true","try",":","self",".","length","=","int","(","self",".","headers","[","b","'","content","-","length","'","]","[","0","]",")","except","key","error",":","self",".","length","=","none","self",".","chunked","=","(","b","'","chunked","'","in","self",".","headers",".","get","(","b","'","transfer","-","encoding","'",",","[","]",")",")","assert","self",".","expect","close","or","self",".","length","is","not","none","or","self",".","chunked","if","b","'","gzip","'","in","self",".","headers",".","get","(","b","'","content","-","encoding","'",",","[","]",")",":","self",".","decompressobj","=","zlib",".","decompressobj","(","16","+","zlib",".","max","wbits",")"],"func_name":"__init__","func_name_tokens":["init"],"docstring":": The reason phrase returned by the server.\n: The status code returned by the server.\n: The response headers. These are determined upon creation, assigned\n: once, and never assigned again.\n: The response trailers. These are always intially ``None``.\nThe socket this response is being sent over.\nWhether we expect the connection to be closed. If we do, we don't\nbother checking for content-length, we just keep reading until\nwe no longer can.\nThe expected length of the body.\nWhether we expect a chunked response.\nOne of the following must be true: we must expect that the connection\nwill be closed following the body, or that a content-length was sent,\nor that we're getting a chunked response.\nFIXME: Remove naked assert, replace with something better.\nThis object is used for decompressing gzipped request bodies. Right\nnow we only support gzip because that's all the RFC mandates of us.\nLater we'll add support for more encodings.\nThis 16 + MAX_WBITS nonsense is to force gzip. See this\nStack Overflow answer for more:\nhttp://stackoverflow.com/a/2695466/1401686","docstring_tokens":[":","the","reason","phrase","returned","by","the","server",".",":","the","status","code","returned","by","the","server",".",":","the","response","headers",".","these","are","determined","upon","creation",",","assigned",":","once",",","and","never","assigned","again",".",":","the","response","trailers",".","these","are","always","intially","`","`","none","`","`",".","the","socket","this","response","is","being","sent","over",".","whether","we","expect","the","connection","to","be","closed",".","if","we","do",",","we","don","'","t","bother","checking","for","content","-","length",",","we","just","keep","reading","until","we","no","longer","can",".","the","expected","length","of","the","body",".","whether","we","expect","a","chunked","response",".","one","of","the","following","must","be","true",":","we","must","expect","that","the","connection","will","be","closed","following","the","body",",","or","that","a","content","-","length","was","sent",",","or","that","we","'","re","getting","a","chunked","response",".","fixme",":","remove","naked","assert",",","replace","with","something","better",".","this","object","is","used","for","decompressing","gzipped","request","bodies",".","right","now","we","only","support","gzip","because","that","'","s","all","the","rfc","mandates","of","us",".","later","we","'","ll","add","support","for","more","encodings",".","this","16","+","max","wbits","nonsense","is","to","force","gzip",".","see","this","stack","overflow","answer","for","more",":"],"query":"In Python, how do I decode GZIP encoding?","query_tokens":["in","python",",","how","do","i","decode","gzip","encoding","?"]}
{"code":"def full_path_split(path):    rest, tail = os.path.split(path)    if not rest or rest == os.path.sep:        return (tail,)    return full_path_split(rest) + (tail,)@contextmanager","code_tokens":["def","full","path","split","(","path",")",":","rest",",","tail","=","os",".","path",".","split","(","path",")","if","not","rest","or","rest","=","=","os",".","path",".","sep",":","return","(","tail",",",")","return","full","path","split","(","rest",")","+","(","tail",",",")","@","contextmanager"],"func_name":"full_path_split","func_name_tokens":["full","path","split"],"docstring":"Function to do a full split on a path.\nBased on http://stackoverflow.com/a/13505966/161801","docstring_tokens":["function","to","do","a","full","split","on","a","path",".","based","on"],"query":"Python Split path recursively","query_tokens":["python","split","path","recursively"]}
{"code":"def check_value(obj):    valid_objects     = _valid_objects    valid_scalars     = _valid_scalars    valid_containers  = _valid_containers    shared_containers = _shared_containers    stack   = [obj]    visited = set()    while stack:        obj = stack.pop()        obj_id = id(obj)  # faster + works for non hashable types        if obj_id in visited:            continue        visited.add(obj_id)        typ = type(obj)        if any(typ is x for x in valid_containers):            stack.extend(obj)            continue        if (all(obj is not x for x in valid_objects)     and            all(typ is not x for x in valid_scalars)     and            all(typ is not x for x in shared_containers)        ):            t = repr(typ)            if t.startswith(\"<type '\") and t.endswith(\"'>\"):                t = \"'%s'\" % t[7:-2]            raise TypeError(            \"Type %s cannot be used in shared data containers\" % t)","code_tokens":["def","check","value","(","obj",")",":","valid","objects","=","valid","objects","valid","scalars","=","valid","scalars","valid","containers","=","valid","containers","shared","containers","=","shared","containers","stack","=","[","obj","]","visited","=","set","(",")","while","stack",":","obj","=","stack",".","pop","(",")","obj","id","=","id","(","obj",")","#","faster","+","works","for","non","hashable","types","if","obj","id","in","visited",":","continue","visited",".","add","(","obj","id",")","typ","=","type","(","obj",")","if","any","(","typ","is","x","for","x","in","valid","containers",")",":","stack",".","extend","(","obj",")","continue","if","(","all","(","obj","is","not","x","for","x","in","valid","objects",")","and","all","(","typ","is","not","x","for","x","in","valid","scalars",")","and","all","(","typ","is","not","x","for","x","in","shared","containers",")",")",":","t","=","repr","(","typ",")","if","t",".","startswith","(","\"","<","type","'","\"",")","and","t",".","endswith","(","\"","'",">","\"",")",":","t","=","\"","'","%","s","'","\"","%","t","[","7",":","-","2","]","raise","type","error","(","\"","type","%","s","cannot","be","used","in","shared","data","containers","\"","%","t",")"],"func_name":"check_value","func_name_tokens":["check","value"],"docstring":"Check if the given object can be used in a shared data container.    Immutable, hashable built-in types can be used as keys and values.    Shared data containers can also be used. Any other data type is forbidden.    :param obj: Object to test.    :type obj: \\\\*    :raises TypeError: An invalid data type was found.\nThis function checks for infinite loops, because it's technically\npossible to have self-referencing tuples. Yeah, it's crazy, I know.\nSee: http://stackoverflow.com/questions/11873448/\nCopy these globals to the local namespace (optimization).\nVisitor for the target object, checking for infinite recursion.\nRecursive case for immutable containers.\nReject invalid types.\n------------------------------------------------------------------------------","docstring_tokens":["check","if","the","given","object","can","be","used","in","a","shared","data","container",".","immutable",",","hashable","built","-","in","types","can","be","used","as","keys","and","values",".","shared","data","containers","can","also","be","used",".","any","other","data","type","is","forbidden",".","this","function","checks","for","infinite","loops",",","because","it","'","s","technically","possible","to","have","self","-","referencing","tuples",".","yeah",",","it","'","s","crazy",",","i","know",".","see",":","copy","these","globals","to","the","local","namespace","(","optimization",")",".","visitor","for","the","target","object",",","checking","for","infinite","recursion",".","recursive","case","for","immutable","containers",".","reject","invalid","types",".","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],"query":"Building Self-Referencing Tuples","query_tokens":["building","self","-","referencing","tuples"]}
{"code":"  api_def = _GetApiDef(api_name, api_version)","code_tokens":["api","def","=","get","api","def","(","api","name",",","api","version",")"],"func_name":"= _GetApiDef","func_name_tokens":["=","get","api","def"],"docstring":"fromlist below must not be empty, see:\nhttp://stackoverflow.com/questions/2724260/why-does-pythons-import-require-fromlist.","docstring_tokens":["fromlist","below","must","not","be","empty",",","see",":"],"query":"Why does Python's __import__ require fromlist?","query_tokens":["why","does","python","'","s","import","require","fromlist","?"]}
{"code":"def stride_windows(x, n, noverlap=None, axis=0):    if noverlap is None:        noverlap = 0    if noverlap >= n:        raise ValueError('noverlap must be less than n')    if n < 1:        raise ValueError('n cannot be less than 1')    x = np.asarray(x)    if x.ndim != 1:        raise ValueError('only 1-dimensional arrays can be used')    if n == 1 and noverlap == 0:        if axis == 0:            return x[np.newaxis]        else:            return x[np.newaxis].transpose()    if n > x.size:        raise ValueError('n cannot be greater than the length of x')    noverlap = int(noverlap)    n = int(n)    step = n - noverlap    if axis == 0:        shape = (n, (x.shape[-1]-noverlap)//step)        strides = (x.strides[0], step*x.strides[0])    else:        shape = ((x.shape[-1]-noverlap)//step, n)        strides = (step*x.strides[0], x.strides[0])    return np.lib.stride_tricks.as_strided(x, shape=shape, strides=strides)","code_tokens":["def","stride","windows","(","x",",","n",",","noverlap","=","none",",","axis","=","0",")",":","if","noverlap","is","none",":","noverlap","=","0","if","noverlap",">","=","n",":","raise","value","error","(","'","noverlap","must","be","less","than","n","'",")","if","n","<","1",":","raise","value","error","(","'","n","cannot","be","less","than","1","'",")","x","=","np",".","asarray","(","x",")","if","x",".","ndim","!","=","1",":","raise","value","error","(","'","only","1","-","dimensional","arrays","can","be","used","'",")","if","n","=","=","1","and","noverlap","=","=","0",":","if","axis","=","=","0",":","return","x","[","np",".","newaxis","]","else",":","return","x","[","np",".","newaxis","]",".","transpose","(",")","if","n",">","x",".","size",":","raise","value","error","(","'","n","cannot","be","greater","than","the","length","of","x","'",")","noverlap","=","int","(","noverlap",")","n","=","int","(","n",")","step","=","n","-","noverlap","if","axis","=","=","0",":","shape","=","(","n",",","(","x",".","shape","[","-","1","]","-","noverlap",")","/","/","step",")","strides","=","(","x",".","strides","[","0","]",",","step","*","x",".","strides","[","0","]",")","else",":","shape","=","(","(","x",".","shape","[","-","1","]","-","noverlap",")","/","/","step",",","n",")","strides","=","(","step","*","x",".","strides","[","0","]",",","x",".","strides","[","0","]",")","return","np",".","lib",".","stride","tricks",".","as","strided","(","x",",","shape","=","shape",",","strides","=","strides",")"],"func_name":"stride_windows","func_name_tokens":["stride","windows"],"docstring":"Get all windows of x with length n as a single array,    using strides to avoid data duplication.    .. warning::        It is not safe to write to the output array.  Multiple        elements may point to the same piece of memory,        so modifying one value may change others.    Parameters    ----------    x : 1D array or sequence        Array or sequence containing the data.    n : integer        The number of data points in each window.    noverlap : integer        The overlap between adjacent windows.        Default is 0 (no overlap)    axis : integer        The axis along which the windows will run.    References    ----------    `stackoverflow: Rolling window for 1D arrays in Numpy?    `_    `stackoverflow: Using strides for an efficient moving average filter    `_\nnp.lib.stride_tricks.as_strided easily leads to memory corruption for\nnon integer shape and strides, i.e. noverlap or n. See","docstring_tokens":["get","all","windows","of","x","with","length","n","as","a","single","array",",","using","strides","to","avoid","data","duplication",".",".",".","warning",":",":","it","is","not","safe","to","write","to","the","output","array",".","multiple","elements","may","point","to","the","same","piece","of","memory",",","so","modifying","one","value","may","change","others",".","parameters","-","-","-","-","-","-","-","-","-","-","x",":","1d","array","or","sequence","array","or","sequence","containing","the","data",".","n",":","integer","the","number","of","data","points","in","each","window",".","noverlap",":","integer","the","overlap","between","adjacent","windows",".","default","is","0","(","no","overlap",")","axis",":","integer","the","axis","along","which","the","windows","will","run",".","references","-","-","-","-","-","-","-","-","-","-","`","stackoverflow",":","rolling","window","for","1d","arrays","in","numpy","?","`","`","stackoverflow",":","using","strides","for","an","efficient","moving","average","filter","`","np",".","lib",".","stride","tricks",".","as","strided","easily","leads","to","memory","corruption","for","non","integer","shape","and","strides",",","i",".","e",".","noverlap","or","n",".","see"],"query":"Rolling window for 1D arrays in Numpy?","query_tokens":["rolling","window","for","1d","arrays","in","numpy","?"]}
{"code":"def unzip(url):    import zipfile        torrents_path = config.get_library_path()+'/torrents'    if not os.path.exists(torrents_path):        os.mkdir(torrents_path)    try:        f = urllib2.urlopen(url)        with open( torrents_path+\"/temp.zip\", \"wb\") as local_file:            local_file.write(f.read())                fh = open(torrents_path+\"/temp.zip\", 'rb')        z = zipfile.ZipFile(fh)        for name in z.namelist():            z.extract(name, torrents_path)        fh.close()    except urllib2.HTTPError, e:        print \"HTTP Error:\", e.code, url    except urllib2.URLError, e:        print \"URL Error:\", e.reason, url    torrent = \"file:///\"+torrents_path+\"/\"+name    if not torrents_path.startswith(\"/\"):        torrents_path = \"/\"+torrents_path        torrent = \"file://\"+torrents_path+\"/\"+name        return torrent","code_tokens":["def","unzip","(","url",")",":","import","zipfile","torrents","path","=","config",".","get","library","path","(",")","+","'","/","torrents","'","if","not","os",".","path",".","exists","(","torrents","path",")",":","os",".","mkdir","(","torrents","path",")","try",":","f","=","urllib2",".","urlopen","(","url",")","with","open","(","torrents","path","+","\"","/","temp",".","zip","\"",",","\"","wb","\"",")","as","local","file",":","local","file",".","write","(","f",".","read","(",")",")","fh","=","open","(","torrents","path","+","\"","/","temp",".","zip","\"",",","'","rb","'",")","z","=","zipfile",".","zip","file","(","fh",")","for","name","in","z",".","namelist","(",")",":","z",".","extract","(","name",",","torrents","path",")","fh",".","close","(",")","except","urllib2",".","http","error",",","e",":","print","\"","http","error",":","\"",",","e",".","code",",","url","except","urllib2",".","url","error",",","e",":","print","\"","url","error",":","\"",",","e",".","reason",",","url","torrent","=","\"","file",":","/","/","/","\"","+","torrents","path","+","\"","/","\"","+","name","if","not","torrents","path",".","startswith","(","\"","/","\"",")",":","torrents","path","=","\"","/","\"","+","torrents","path","torrent","=","\"","file",":","/","/","\"","+","torrents","path","+","\"","/","\"","+","name","return","torrent"],"func_name":"unzip","func_name_tokens":["unzip"],"docstring":"Path para guardar el zip como tem.zip los .torrent extraidos del zip\nhttp://stackoverflow.com/questions/4028697/how-do-i-download-a-zip-file-in-python-using-urllib2\nOpen the url\nOpen our local file for writing\nhandle errors","docstring_tokens":["path","para","guardar","el","zip","como","tem",".","zip","los",".","torrent","extraidos","del","zip","open","the","url","open","our","local","file","for","writing","handle","errors"],"query":"How do I download a zip file in python using urllib2?","query_tokens":["how","do","i","download","a","zip","file","in","python","using","urllib2","?"]}
{"code":"def send_message(receiver, selName, *args, **kwargs):    if isinstance(receiver, str):        receiver = get_class(receiver)    selector = get_selector(selName)    restype = kwargs.get('restype', c_void_p)    argtypes = kwargs.get('argtypes', [])    if should_use_fpret(restype):        objc.objc_msgSend_fpret.restype = restype        objc.objc_msgSend_fpret.argtypes = [c_void_p, c_void_p] + argtypes        result = objc.objc_msgSend_fpret(receiver, selector, *args)    elif x86_should_use_stret(restype):        objc.objc_msgSend_stret.argtypes = [POINTER(restype), c_void_p, c_void_p] + argtypes        result = restype()        objc.objc_msgSend_stret(byref(result), receiver, selector, *args)    else:        objc.objc_msgSend.restype = restype        objc.objc_msgSend.argtypes = [c_void_p, c_void_p] + argtypes        result = objc.objc_msgSend(receiver, selector, *args)        if restype == c_void_p:            result = c_void_p(result)    return resultclass OBJC_SUPER(Structure):    _fields_ = [ ('receiver', c_void_p), ('class', c_void_p) ]OBJC_SUPER_PTR = POINTER(OBJC_SUPER)","code_tokens":["def","send","message","(","receiver",",","sel","name",",","*","args",",","*","*","kwargs",")",":","if","isinstance","(","receiver",",","str",")",":","receiver","=","get","class","(","receiver",")","selector","=","get","selector","(","sel","name",")","restype","=","kwargs",".","get","(","'","restype","'",",","c","void","p",")","argtypes","=","kwargs",".","get","(","'","argtypes","'",",","[","]",")","if","should","use","fpret","(","restype",")",":","objc",".","objc","msg","send","fpret",".","restype","=","restype","objc",".","objc","msg","send","fpret",".","argtypes","=","[","c","void","p",",","c","void","p","]","+","argtypes","result","=","objc",".","objc","msg","send","fpret","(","receiver",",","selector",",","*","args",")","elif","x86","should","use","stret","(","restype",")",":","objc",".","objc","msg","send","stret",".","argtypes","=","[","pointer","(","restype",")",",","c","void","p",",","c","void","p","]","+","argtypes","result","=","restype","(",")","objc",".","objc","msg","send","stret","(","byref","(","result",")",",","receiver",",","selector",",","*","args",")","else",":","objc",".","objc","msg","send",".","restype","=","restype","objc",".","objc","msg","send",".","argtypes","=","[","c","void","p",",","c","void","p","]","+","argtypes","result","=","objc",".","objc","msg","send","(","receiver",",","selector",",","*","args",")","if","restype","=","=","c","void","p",":","result","=","c","void","p","(","result",")","return","resultclass","objc","super","(","structure",")",":","fields","=","[","(","'","receiver","'",",","c","void","p",")",",","(","'","class","'",",","c","void","p",")","]","objc","super","ptr","=","pointer","(","objc","super",")"],"func_name":"send_message","func_name_tokens":["send","message"],"docstring":"print 'send_message', receiver, selName, args, kwargs\nChoose the correct version of objc_msgSend based on return type.\nhttp://stackoverflow.com/questions/3095360/what-exactly-is-super-in-objective-c","docstring_tokens":["print","'","send","message","'",",","receiver",",","sel","name",",","args",",","kwargs","choose","the","correct","version","of","objc","msg","send","based","on","return","type","."],"query":"What exactly is super in Objective-C?","query_tokens":["what","exactly","is","super","in","objective","-","c","?"]}
{"code":"    def extract_stack(stack):        for filename, lineno, name, line in traceback.extract_stack(stack):            yield 'File: \"%s\", line %d, in %s' % (filename, lineno, name)            if line:                yield \"  %s\" % (line.strip(),)    threads_info = dict([(th.ident, {'name': th.name, 'uid': getattr(th, 'uid', 'n/a')})                        for th in threading.enumerate()])    for threadId, stack in sys._current_frames().items():        thread_info = threads_info.get(threadId)        code.append(\"\\n# Thread: %s (id:%s) (uid:%s)\" %                    (thread_info and thread_info['name'] or 'n/a',                     threadId,                     thread_info and thread_info['uid'] or 'n/a'))        for line in extract_stack(stack):            code.append(line)    if openerp.evented:        import gc        from greenlet import greenlet        for ob in gc.get_objects():            if not isinstance(ob, greenlet) or not ob:                continue            code.append(\"\\n# Greenlet: %r\" % (ob,))            for line in extract_stack(ob.gr_frame):                code.append(line)    _logger.info(\"\\n\".join(code))","code_tokens":["def","extract","stack","(","stack",")",":","for","filename",",","lineno",",","name",",","line","in","traceback",".","extract","stack","(","stack",")",":","yield","'","file",":","\"","%","s","\"",",","line","%","d",",","in","%","s","'","%","(","filename",",","lineno",",","name",")","if","line",":","yield","\"","%","s","\"","%","(","line",".","strip","(",")",",",")","threads","info","=","dict","(","[","(","th",".","ident",",","{","'","name","'",":","th",".","name",",","'","uid","'",":","getattr","(","th",",","'","uid","'",",","'","n","/","a","'",")","}",")","for","th","in","threading",".","enumerate","(",")","]",")","for","thread","id",",","stack","in","sys",".","current","frames","(",")",".","items","(",")",":","thread","info","=","threads","info",".","get","(","thread","id",")","code",".","append","(","\"","\\n","#","thread",":","%","s","(","id",":","%","s",")","(","uid",":","%","s",")","\"","%","(","thread","info","and","thread","info","[","'","name","'","]","or","'","n","/","a","'",",","thread","id",",","thread","info","and","thread","info","[","'","uid","'","]","or","'","n","/","a","'",")",")","for","line","in","extract","stack","(","stack",")",":","code",".","append","(","line",")","if","openerp",".","evented",":","import","gc","from","greenlet","import","greenlet","for","ob","in","gc",".","get","objects","(",")",":","if","not","isinstance","(","ob",",","greenlet",")","or","not","ob",":","continue","code",".","append","(","\"","\\n","#","greenlet",":","%","r","\"","%","(","ob",",",")",")","for","line","in","extract","stack","(","ob",".","gr","frame",")",":","code",".","append","(","line",")","logger",".","info","(","\"","\\n","\"",".","join","(","code",")",")"],"func_name":"extract_stack","func_name_tokens":["extract","stack"],"docstring":"code from http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application\nanswer-2569696\nmodified for python 2.5 compatibility\ncode from http://stackoverflow.com/questions/12510648/in-gevent-how-can-i-dump-stack-traces-of-all-running-greenlets","docstring_tokens":["code","from","answer","-","2569696","modified","for","python","2",".","5","compatibility","code","from"],"query":"In gevent, how can I dump stack traces of all running greenlets?","query_tokens":["in","gevent",",","how","can","i","dump","stack","traces","of","all","running","greenlets","?"]}
{"code":"def _use_inf_as_null(key):    flag = get_option(key)    if flag:        globals()['_isnull'] = _isnull_old    else:        globals()['_isnull'] = _isnull_new","code_tokens":["def","use","inf","as","null","(","key",")",":","flag","=","get","option","(","key",")","if","flag",":","globals","(",")","[","'","isnull","'","]","=","isnull","old","else",":","globals","(",")","[","'","isnull","'","]","=","isnull","new"],"func_name":"_use_inf_as_null","func_name_tokens":["use","inf","as","null"],"docstring":"Option change callback for null/inf behaviour    Choose which replacement for numpy.isnan / -numpy.isfinite is used.    Parameters    ----------    flag: bool        True means treat None, NaN, INF, -INF as null (old way),        False means None and NaN are null, but INF, -INF are not null        (new way).    Notes    -----    This approach to setting global module values is discussed and    approved here:    * http://stackoverflow.com/questions/4859217/      programmatically-creating-variables-in-python/4859312\n4859312","docstring_tokens":["option","change","callback","for","null","/","inf","behaviour","choose","which","replacement","for","numpy",".","isnan","/","-","numpy",".","isfinite","is","used",".","parameters","-","-","-","-","-","-","-","-","-","-","flag",":","bool","true","means","treat","none",",","na","n",",","inf",",","-","inf","as","null","(","old","way",")",",","false","means","none","and","na","n","are","null",",","but","inf",",","-","inf","are","not","null","(","new","way",")",".","notes","-","-","-","-","-","this","approach","to","setting","global","module","values","is","discussed","and","approved","here",":","*","programmatically","-","creating","-","variables","-","in","-","python","/","4859312","4859312"],"query":"Programmatically creating variables in Python [duplicate]","query_tokens":["programmatically","creating","variables","in","python","[","duplicate","]"]}